var Retool;
(function (Retool) {
    var Application = (function () {
        function Application() {
            this.viewRenderCount = 0;
            this.errorIgnoreIndex = -1;
            this.modifyWindowUrl = true;
            this.SITE_APP_NAME = "site";
            this.INDEX_TEMPLATE_NAME = "index";
            this.ADMIN_APP_NAME = "admin";
            this.module = Retool;
        }
        Application.prototype.init = function () {
            this.volume = new Retool.FileSystem.Volume("main", { useFolders: true });
            this.userApps = new Retool.UserAppLocator();
            this.models = new Retool.ModelLocator();
            this.controllers = new Retool.ControllerLocator();
            this.templates = new Retool.TemplateLocator();
            this.components = new Retool.ComponentLocator();
            if (!this.initialized) {
                this.watchStorage();
            }
            this.initialized = true;
            this.page = new Retool.PageRenderer();
            this.userAppGlobals = {};
            this.modifyWindowUrl = true;
            this.rootViewModels = {};
            this.urlRoot = "ghost/retool";
            this.urlRootSegmentCount = 2;
        };
        Application.prototype.watchStorage = function () {
            var self = this;
            if (Retool.browser) {
                $(window).bind('storage', function (e) {
                    if (self.getSessionToken()) {
                        //alert('You just logged in');
                        $('#rt-login-frame').hide();
                    }
                    else {
                        alert('You logged out');
                    }
                });
            }
        };
        Application.prototype.templateChanged = function (path) {
            this.templates.removeFromCache(path);
        };
        Application.prototype.attachTo = function (applicationModule) {
            this.module = applicationModule;
            this.page = new applicationModule.PageRenderer();
            this.runtime = applicationModule.Runtime;
            this.helpers = this.runtime.helpers;
            this.afterLoad();
        };
        Application.prototype.isModel = function (value) {
            return (value instanceof this.module.Model);
        };
        Application.prototype.isObjectModel = function (value) {
            return (value instanceof this.module.ObjectModel);
        };
        Application.prototype.isArrayModel = function (value) {
            return (value instanceof this.module.ArrayModel);
        };
        Application.prototype.isPrimitive = function (value) {
            return (value != Object(value));
        };
        Application.prototype.getField = function (modelDef, qualifiedName) {
            if (!qualifiedName) {
                return null;
            }
            var segments = qualifiedName.split('.');
            var pointer = this.getFieldFromSegments(modelDef, segments, 0);
            if (pointer) {
                return pointer.fieldDef;
            }
            return null;
        };
        Application.prototype.getModelAndField = function (qualifiedName) {
            var segments = qualifiedName.split('.');
            if (segments.length < 2) {
                return null;
            }
            var modelDef = this.models.getDefinition(segments[0]);
            if (!modelDef) {
                return;
            }
            return this.getFieldFromSegments(modelDef, segments, 1);
        };
        Application.prototype.getFieldFromSegments = function (modelDef, segments, start) {
            var i = start;
            var last = segments.length - 1;
            while (i < last) {
                if (!modelDef.relationships)
                    return null;
                var relationship = modelDef.relationships[segments[i]];
                if (!relationship) {
                    return null;
                }
                modelDef = this.models.getDefinition(relationship.model);
                if (!modelDef) {
                    return null;
                }
                i++;
            }
            return { modelDef: modelDef, fieldDef: modelDef.fields[segments[last]] };
        };
        Application.prototype.getMultiSegmentFieldLabel = function (modelDef, qualifiedName) {
            var segments = qualifiedName.split('.');
            var i = 0;
            var last = segments.length - 1;
            var multiLabel = [];
            while (i < last) {
                var relationship = modelDef.relationships[segments[i]];
                if (!relationship) {
                    return null;
                }
                multiLabel.push(relationship.label || relationship.name);
                modelDef = this.models.getDefinition(relationship.model);
                if (!modelDef) {
                    return null;
                }
                i++;
            }
            if (last > 0 && segments[last] == "name") {
                return multiLabel; //  ie Contact,Name can just be Contact
            }
            var fieldDef = modelDef.fields[segments[last]];
            if (fieldDef) {
                multiLabel.push(fieldDef.label);
            }
            return multiLabel;
        };
        Application.prototype.getRelationship = function (modelDef, qualifiedName) {
            var segments = qualifiedName.split('.');
            var i = 0;
            if (modelDef == null) {
                if (segments.length > 2) {
                    modelDef = this.models.getDefinition(segments[0] + "." + segments[1]);
                    i = 2;
                }
            }
            var last = segments.length - 1;
            while (i < last) {
                var relationship = modelDef.relationships[segments[i]];
                if (!relationship) {
                    return null;
                }
                modelDef = this.models.getDefinition(relationship.model);
                if (!modelDef) {
                    return null;
                }
                i++;
            }
            return modelDef.relationships[segments[last]];
        };
        Application.prototype.getModelAndRelationship = function (qualifiedName) {
            var segments = qualifiedName.split('.');
            if (segments.length < 3) {
                return null;
            }
            var modelDef = this.models.getDefinition(segments[0] + "." + segments[1]);
            var i = 2;
            var last = segments.length - 1;
            while (i < last) {
                var relationship = modelDef.relationships[segments[i]];
                if (!relationship) {
                    return null;
                }
                modelDef = this.models.getDefinition(relationship.model);
                if (!modelDef) {
                    return null;
                }
                i++;
            }
            return { modelDef: modelDef, relationshipDef: modelDef.relationships[segments[last]] };
        };
        Application.prototype.addFile = function (file, overwrite) {
            this.volume.addFile(file, overwrite);
        };
        Application.prototype.getFieldRelationship = function (modelDef, fieldId) {
            var field = modelDef.fields[fieldId];
            if (field && field.belongs_to) {
                var name = field.name.substr(0, field.name.length - 3); // strip off _id
                return { name: name, model: field.belongs_to };
            }
            return null;
        };
        Application.prototype.getFile = function (filename) {
            if (filename && filename[0] == "/") {
                filename = filename.toLowerCase().substr(1);
            }
            else {
                filename = filename.toLowerCase();
            }
            var segments = filename.split('/');
            if (segments.length > 1) {
                var appName = segments[1];
                return this.volume.getFile(filename);
            }
            return null;
        };
        Application.prototype.removeFile = function (file) {
            this.volume.removeFile(file);
        };
        Application.prototype.getFolder = function (name) {
            return this.volume.getFolder(name);
        };
        Application.prototype.exportVolume = function (volume) {
            var list = [];
            this.exportFolder(volume.root, list);
            return JSON.stringify(list, null, "\t");
        };
        Application.prototype.exportFolder = function (folder, list) {
            var self = this;
            folder.forEachFile(function (file) {
                list.push({ id: file.getFullName(), value: file.content });
            });
            folder.forEachFolder(function (folder) {
                self.exportFolder(folder, list);
            });
        };
        Application.prototype.addError = function (e) {
            if (!this.errors) {
                this.errors = [];
            }
            this.errors.push(e);
        };
        Application.prototype.ignoreErrors = function () {
            if (this.errors) {
                this.errorIgnoreIndex = this.errors.length;
            }
            else {
                this.errorIgnoreIndex = 0;
            }
        };
        Application.prototype.popErrors = function () {
            if (this.errorIgnoreIndex != -1) {
                if (this.errorIgnoreIndex == 0) {
                    this.errors = null;
                }
                else {
                    this.errors = this.errors.slice(0, this.errorIgnoreIndex);
                }
            }
        };
        Application.prototype.clearErrors = function () {
            this.errors = null;
            this.errorIgnoreIndex = -1;
        };
        Application.prototype.makeUrl = function (path) {
            return new Retool.Url(path);
        };
        Application.prototype.makeWriter = function () {
            return new Retool.Writer();
        };
        Application.prototype.getLocationInfo = function (options, loc) {
            var host = loc.hostname;
            var pathname = loc.pathname;
            var hostSegments = host.split('.');
            var projectId = "";
            var accountId = "";
            this.mode = "ide";
            if (pathname) {
                var pathSegments = pathname.split('/');
                var p = 1;
                var n = pathSegments.length;
                while (p < n) {
                    var seg = pathSegments[p];
                    if (seg.length && seg[0] == "@") {
                        if (seg == "@preview") {
                            this.mode == "preview";
                        }
                        else {
                            projectId = seg.substr(1);
                        }
                        p++;
                    }
                    else {
                        break;
                    }
                }
            }
            this.apiHost = "/ghost/api/v0.1/retool/";
            this.assetRoot = options.assetRoot;
            this.setProjectInfo(accountId, projectId);
        };
        Application.prototype.setProjectInfo = function (accountId, projectId) {
            var assetDomain = projectId; // accountId + "/" + projectId;
            this.accountId = accountId;
            this.projectId = projectId;
            if (!assetDomain) {
                assetDomain = "account_data/" + accountId;
            }
            this.appAssetPath = this.assetRoot + "/" + assetDomain;
        };
        Application.prototype.getUserAppGlobal = function (id) {
            id = id.toLowerCase();
            var g = this.userAppGlobals[id];
            if (g) {
                return g;
            }
            var appFile = this.userApps.getFile(id);
            if (!appFile)
                return null;
            g = new Retool.UserAppGlobal(id);
            this.userAppGlobals[id] = g;
            return g;
        };
        Application.prototype.handleVMError = function (err, component) {
            err = this.module.VM.VMError.cast(err);
            if (err.name == "validation_error" || err.name == "throw_statement") {
                if (component) {
                    component.showFormError(err);
                    return;
                }
            }
            this.addError(err);
            this.module.SystemErrorRenderer.writeErrorsToPage(this.errors);
        };
        Application.prototype.showErrors = function () {
            this.module.SystemErrorRenderer.writeErrorsToPage(this.errors);
        };
        Application.prototype.afterLoad = function () {
            this.components.buildCustomHelpers();
            if (this.ide) {
                this.ide.appLoaded();
            }
        };
        Application.prototype.isRootTemplate = function (template) {
            if (template.name == "application") {
                return true;
            }
            return false;
        };
        Application.prototype.getInstance = function (template, done) {
            var rootName;
            var isSite;
            rootName = template.appName;
            var filename = rootName + "/application";
            var file = this.templates.getFile(filename);
            if (!file) {
                done("Cannot find template: " + filename);
                return;
            }
            if (!file.requiresCompile) {
                var cached = this.rootViewModels[rootName];
                if (cached) {
                    done(null, cached);
                    return;
                }
            }
            var rootTemplateName = rootName + ".application";
            var template = this.templates.get(rootTemplateName);
            var self = this;
            var options = { initialValues: {} };
            Retool.ViewModel.createAsync(template, options, function (err, viewModel) {
                if (err) {
                    done(err);
                    return;
                }
                self.rootViewModels[rootName] = viewModel;
                done(null, viewModel);
                return;
            });
        };
        Application.prototype.loginToken = function (token) {
            $('#login-iframe').remove();
            Retool.App.sessionToken = token;
            Retool.App.ide.loadProject();
        };
        Application.prototype.writeConsoleMessages = function (data) {
            if (this.ide) {
                if (data.debug && data.debug.console) {
                    var consoleItems = data.debug.console;
                    for (var i = 0; i < consoleItems.length; i++) {
                        var item = consoleItems[i];
                        this.ide.consoleLog(item);
                    }
                }
                if (data.log) {
                    this.ide.updateExecutionLog(data.log);
                }
            }
        };
        Application.prototype.signout = function () {
            var request = new Retool.Request({ type: "session" });
            request.add({ className: "Public", method: "signout", success: function (data) {
                window.sessionStorage.setItem("retool-session-token", null);
                Retool.App.sessionToken = null;
                window.sessionStorage.setItem("retool-user-fullname", "");
            }, error: function (data) {
            } });
            request.execute();
        };
        Application.prototype.getSessionToken = function () {
            var json = localStorage.getItem('ghost:session');
            if (json) {
                try {
                    var auth = JSON.parse(json);
                    return auth.access_token;
                }
                catch (e) {
                }
            }
            return null;
        };
        return Application;
    })();
    Retool.Application = Application;
    Retool.App = new Application();
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ApplicationRuntime = (function () {
        function ApplicationRuntime() {
        }
        ApplicationRuntime.prototype.init = function () {
            this.requestAdapter = new Retool.Adapters.RetoolServerAdapter();
        };
        return ApplicationRuntime;
    })();
    Retool.ApplicationRuntime = ApplicationRuntime;
    Retool.Runtime = new ApplicationRuntime();
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    Retool.userFullName = "";
    Retool.userAccountName = "";
    Retool.disableRefresh = false;
    Retool.applicationVersion;
    Retool.staticAutoCompletes = {};
    Retool.appClassPrefix = "";
    Retool.designerClassPrefix = "rto-";
    Retool.appAutoComplete;
    Retool.designerAutoComplete;
    Retool.loadingTimer;
    Retool.useApiPathForFiles;
    Retool.applicationStartupErrors;
    Retool.applicationLoaded;
    Retool.sessionTouchStarted = false;
    Retool.touchInterval = 10 * 60 * 1000; // 10 minutes
    Retool.touchCount = 0;
    Retool.maxTouchCount = 12; // 2 hours
    Retool.viewContainers = {};
    Retool.modelIDName = "id";
    Retool.environmentId = "";
    Retool.isMasterAccount;
    Retool.disableHideLoading;
    Retool.morph;
    Retool.browser;
    Retool.eventsAttached;
    Retool.localFiles;
    var _nextGuidValue = 1;
    function makeDomId(name) {
        return "rto-" + name;
    }
    Retool.makeDomId = makeDomId;
    function nextGuid() {
        return _nextGuidValue++;
    }
    Retool.nextGuid = nextGuid;
    function raise(element, eventName, event) {
        var componentElement = $(element).closest("[id^='rt-']");
        if (componentElement.length) {
            event.stopPropagation();
            var element = componentElement[0];
            var c = Retool.ComponentEvent.findComponent(element);
            if (c) {
                var eventHandler = new Retool.ComponentEvent(c, event);
                eventHandler.raise(eventName);
            }
        }
    }
    Retool.raise = raise;
    function makeAsync(callback) {
        return {
            error: function (err) {
                callback(err, null);
            },
            resume: function (result) {
                callback(null, result);
            }
        };
    }
    Retool.makeAsync = makeAsync;
    function goAction(action) {
        if (action && action.substr(0, 9) == "designer." && Retool.App.ide) {
            Retool.App.ide.goAction(action.substr(9));
            return;
        }
        if (action == "pagetour") {
            Retool.PageTour.show();
        }
    }
    Retool.goAction = goAction;
    function addSchema(schema) {
        this.schema = schema;
    }
    Retool.addSchema = addSchema;
    function getFocusElementId(component) {
        var focus = $('#' + component.getElementId() + " *:focus");
        var focusElementId;
        if (focus.length) {
            var componentElement = focus.closest("[id^='rt-']");
            if (componentElement.length) {
                focusElementId = componentElement[0].id;
            }
        }
        return focusElementId;
    }
    function loadSchema(files, systemFiles) {
        Retool.applicationStartupErrors = null;
        var errors = [];
        if (files) {
            loadSchemaFiles(Retool.App.volume, files, errors);
        }
        if (systemFiles) {
            loadSchemaFiles(Retool.App.volume, systemFiles, errors);
        }
        if (errors.length) {
            Retool.applicationStartupErrors = errors;
        }
    }
    Retool.loadSchema = loadSchema;
    function evaluateBlock(context, block) {
        return context.evaluateMethod(block);
    }
    Retool.evaluateBlock = evaluateBlock;
    function loadSchemaFiles(volume, files, errors) {
        if (files) {
            var loadCompiledContent = false;
            if (!Retool.App.ide) {
                loadCompiledContent = true;
            }
            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                try {
                    var filename = file.name;
                    var fileEntry = new Retool.FileSystem.File(filename, file.content);
                    if (loadCompiledContent) {
                        if (file.compiledContent) {
                            fileEntry.compiledContent = file.compiledContent;
                        }
                        if (file.compiledPrototype) {
                            var proto = new Retool.VM.Prototype("");
                            proto.load(file.compiledPrototype);
                            fileEntry.compiledPrototype = proto;
                        }
                    }
                    Retool.App.addFile(fileEntry);
                }
                catch (e) {
                    errors.push(e);
                }
            }
        }
    }
    Retool.loadSchemaFiles = loadSchemaFiles;
    function isPublicProject() {
        return false;
    }
    Retool.isPublicProject = isPublicProject;
    function hideDropLists(exclude) {
        if (Retool.Helpers.InputDate.activeComponent != exclude) {
            Retool.Helpers.InputDate.hideDrop();
        }
        if (Retool.appAutoComplete && Retool.appAutoComplete.activeComponent != exclude) {
            Retool.appAutoComplete.hide();
        }
        if (Retool.designerAutoComplete && Retool.designerAutoComplete.activeComponent != exclude) {
            Retool.designerAutoComplete.hide();
        }
        if (Retool.App.ide) {
            Retool.App.ide.hideDropLists();
        }
        var id;
        if (exclude) {
            id = exclude.getElementId();
            var c = exclude.getElement().get(0);
            $('.dropdown.open').each(function () {
                if (!$.contains(c, this) && !id == this.id) {
                    $(this).removeClass('open');
                }
            });
        }
        else {
            $('.dropdown.open').removeClass('open');
        }
    }
    Retool.hideDropLists = hideDropLists;
    function addStaticAutoComplete(id, staticAutoCompleteType) {
        Retool.staticAutoCompletes[id] = staticAutoCompleteType;
    }
    Retool.addStaticAutoComplete = addStaticAutoComplete;
    function getStaticAutoComplete(id, c) {
        var type = Retool.staticAutoCompletes[id];
        if (type) {
            return new type(c, null);
        }
        return null;
    }
    Retool.getStaticAutoComplete = getStaticAutoComplete;
    function startIDE(options) {
        var rt = Retool;
        if (rt.IDE.Designer) {
            rt.IDE.startDesigner(options);
            return;
        }
        return;
    }
    Retool.startIDE = startIDE;
    function loadApplication(schema) {
        if (schema) {
            loadSchema(schema);
        }
        Retool.applicationLoaded = true;
    }
    Retool.loadApplication = loadApplication;
    function login(successHandler, errorHandler) {
        var request = new Retool.Request({ type: "data" });
        var timer;
        request.add({ className: "session", method: "login", success: function (data) {
            clearTimeout(timer);
            if (!Retool.sessionTouchStarted) {
                setTimeout(function () {
                    executeTouch();
                }, Retool.touchInterval);
                Retool.sessionTouchStarted = true;
            }
            var result = data.result;
            loadEnvironment(successHandler, errorHandler);
        }, error: function (data) {
            clearTimeout(timer);
            errorHandler(data.error);
        } });
        request.execute();
    }
    Retool.login = login;
    function loadEnvLocal() {
        var out = [];
        $('script').each(function () {
            var $script = $(this);
            if ($script.attr('type') == "text/retool") {
                var source = $script.html();
                if (source.length && source[0] == "\n") {
                    source = source.substr(1);
                }
                if (source.length && source[source.length - 1] == "\n") {
                    source = source.substr(0, source.length - 1);
                }
                var filename = $script.attr('name');
                out.push({ name: filename, source: source });
            }
        });
        return out;
    }
    Retool.loadEnvLocal = loadEnvLocal;
    function loadEnvironment(successHandler, errorHandler) {
        if (typeof ClientApp != "undefined") {
            loadSchema(ClientApp);
            successHandler();
            return;
        }
        var request = new Retool.Request({ type: "data" });
        request.add({ className: "ProjectFiles", method: "session_status", success: function (data) {
            var result = data.result;
            Retool.App.setProjectInfo(result.accountId, Retool.App.projectId);
            Retool.App.username = result.me.users[0].name;
            if (Retool.App.ide && result.accountId) {
                var user = { username: result.accountId, avatar_url: result.avatar_url };
                Retool.App.ide.setSignedIn(user);
            }
        }, error: function (err) {
        } });
        var methodName = "getCompiled";
        if (Retool.App.ide) {
            methodName = "list";
        }
        request.add({ className: "ProjectFiles", method: methodName, success: function (data) {
            var result = data.result;
            var schema;
            if (!result) {
                errorHandler("No application files returned");
                return;
            }
            if (result) {
                loadSchema(result);
            }
            Retool.App.loaded = true;
            if (successHandler) {
                successHandler();
            }
        }, error: function (data) {
            errorHandler(data.error);
        } });
        request.execute();
    }
    Retool.loadEnvironment = loadEnvironment;
    function getAutoComplete(selector) {
        if (elemInsideDesigner(selector)) {
            return Retool.designerAutoComplete;
        }
        else {
            return Retool.appAutoComplete;
        }
    }
    Retool.getAutoComplete = getAutoComplete;
    function elemInsideDesigner(selector) {
        return $(selector).closest('#rto-ide').length > 0 || $(selector).closest('#rto-designer-bar').length > 0;
    }
    Retool.elemInsideDesigner = elemInsideDesigner;
    function showLoading(delay) {
        if (!Retool.browser)
            return;
        if (delay && !Retool.loadingTimer) {
            Retool.loadingTimer = window.setTimeout(function () {
                $('#retool-working').show();
            }, delay);
        }
        else {
            $('#retool-working').show();
        }
    }
    Retool.showLoading = showLoading;
    function hideLoading(force) {
        if (!Retool.browser)
            return;
        if (Retool.disableHideLoading && !force) {
            return;
        }
        Retool.disableHideLoading = false;
        if (Retool.loadingTimer) {
            window.clearTimeout(Retool.loadingTimer);
            Retool.loadingTimer = null;
        }
        $('#retool-working').hide();
    }
    Retool.hideLoading = hideLoading;
    function startApp(options) {
        Retool.App.mode == "preview";
        ready(options);
    }
    Retool.startApp = startApp;
    function launchIDE(options) {
        options.startIDE = true;
        ready(options);
    }
    Retool.launchIDE = launchIDE;
    function ready(options) {
        $(document).ready(function () {
            Retool.Runtime.init();
            start(options);
        });
    }
    Retool.ready = ready;
    function start(options) {
        if (options.runningOnServer) {
            Retool.browser = false;
            Retool.Runtime.init();
            Retool.App.runtime = Retool.Runtime;
        }
        else {
            Retool.browser = true;
        }
        Retool.VM.globalObj = new Retool.VM.Global(null);
        if (Retool.browser) {
            Retool.morph = Retool.Morph.createInstance();
            if (Retool.PageRenderer.isUnsupportedBrowser()) {
                $('#retool-initializing').remove();
                Retool.PageRenderer.renderUnsupportedBrowser();
                return;
            }
            $('body').removeClass('retool-pre-load');
            Retool.appAutoComplete = new Retool.AutoCompleteList("retool-autocomplete", "retool", null);
            Retool.designerAutoComplete = new Retool.AutoCompleteList("rto-autocomplete", "rto", "ds");
            if (typeof (Modernizr) == "undefined") {
                Modernizr = {};
            }
        }
        Retool.App.version = options.version;
        Retool.useApiPathForFiles = options.useApiPathForFiles;
        Retool.environmentId = "production";
        Retool.Runtime.requestAdapter.applicationKey = options.applicationId;
        if (Retool.browser && window.sessionStorage) {
            Retool.App.sessionToken = window.sessionStorage.getItem("retool-session-token");
        }
        if (Retool.browser && location.hostname == "master.retool.jd") {
            Retool.isMasterAccount = true;
        }
        if (!Retool.browser) {
            Retool.App.init();
            loadSchema(options.project);
            Retool.App.layoutView = new Retool.LayoutView("m");
        }
        else {
            var w = window;
            if (w.parent.Retool && w.parent != w && w.parent.Retool.App.initialized) {
                // parent is Ide
                var parent = w.parent.Retool;
                if (options.lessons) {
                    var lessons = new Retool.Lessons.LessonManager(parent.App);
                    lessons.start();
                    return;
                }
                Retool.App = parent.App;
                Retool.App.attachTo(Retool);
                Retool.App.document = window.document;
                var a = $('#retool-app');
                var redirectUrl;
                if (a.data('template')) {
                    redirectUrl = new Retool.Url({ template: a.data('template') });
                }
                else {
                    redirectUrl = new Retool.Url({ template: "site.index" });
                }
                Retool.App.page.renderFirstView(redirectUrl);
            }
            else if (options.startIDE) {
                if (window.opener) {
                    // is child
                    var opener = window.opener;
                    Retool.App = opener.Retool.App;
                    var tempPage = new Retool.PageRenderer(); //  to attach events
                    startIDE({ hasOwnWindow: true });
                }
                else {
                    Retool.App.rootWindow = window;
                    Retool.App.init();
                    /*
                    if (!App.initialized){
                        App.init();
                    }
                    */
                    Retool.App.getLocationInfo(options, window.location);
                    startIDE();
                }
            }
            else {
                Retool.App.rootWindow = window;
                Retool.App.document = window.document;
                Retool.App.init();
                Retool.App.getLocationInfo(options, window.location);
                loadEnvironment(function success(result) {
                    var redirectUrl;
                    var a = $('#retool-app');
                    if (a.data('template')) {
                        redirectUrl = new Retool.Url({ template: a.data('template') });
                    }
                    else {
                        redirectUrl = new Retool.Url({ template: "site.index" });
                    }
                    Retool.App.page.renderFirstView(redirectUrl);
                }, function (err) {
                });
            }
        }
        return Retool.App;
    }
    Retool.start = start;
    function getRetoolAssetHost() {
        return "/retool/";
    }
    Retool.getRetoolAssetHost = getRetoolAssetHost;
    function drawIdeToggle() {
        doDrawToggle();
        var sessionToken = Retool.App.getSessionToken();
        if (sessionToken) {
            Retool.browser = true;
            Retool.Runtime.init();
            Retool.App.init();
            Retool.App.getLocationInfo({}, window.location);
            /*
            if (window.sessionStorage){
                App.sessionToken = window.sessionStorage.getItem("retool-session-token");
            }
            */
            var request = new Retool.Request({ type: "data" });
            request.add({ className: "ProjectFiles", method: "session_status", success: function (data) {
                var result = data.result;
                if (result.accountId) {
                    start({ assetRoot: "https://s3.amazonaws.com/retool-hosted-assets" });
                }
            }, error: function (err) {
            } });
            request.execute();
        }
    }
    Retool.drawIdeToggle = drawIdeToggle;
    function doDrawToggle() {
        var host = getRetoolAssetHost();
        var app = $('#retool-app');
        if (app.length) {
            app.html('<p style="font:Arial">Retool - Login to view your app</p>');
        }
        $('body').append('<div onclick="Retool.importDesigner()" style="position:fixed;color:#fff;z-index:5000;cursor:pointer;background-image:url(\'' + host + 'assets/images/retool-menu-icon.png' + '\');' + 'background-size:46px;background-repeat:no-repeat;width:46px;height:46px;bottom:2px;right:2px;background-color:#777;border-radius:6px"></div>');
    }
    function importDesigner() {
        Retool.browser = true;
        Retool.Runtime.init();
        Retool.App.init();
        Retool.App.getLocationInfo({}, window.location);
        var request = new Retool.Request({ type: "data" });
        request.add({ className: "ProjectFiles", method: "session_status", success: function (data) {
            var result = data.result;
            if (result.accountId) {
                loadDesignerAssets();
            }
            else {
                showLogin();
            }
        }, error: function (err) {
            if (err.error) {
                if (err.error.name == "requires_signin") {
                    showLogin();
                }
            }
        } });
        request.execute();
    }
    Retool.importDesigner = importDesigner;
    function showLogin() {
        var host = getRetoolAssetHost();
        $('#rt-login-frame').remove();
        var html = '<iframe id="rt-login-frame" src="/ghost" style="position:fixed;right:20px;bottom:60px;z-index:5000;width:300px;height:300px;box-shadow:0 5px 15px rgba(0,0,0,.5);border:none"></iframe>';
        $('body').append(html);
        return;
        var loginDoc = $('#rt-login-frame').get(0).contentWindow.document;
        loginDoc.open("text/html", "replace");
        html = '<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml">';
        html += '<head><link href="//fonts.googleapis.com/css?family=Open+Sans:400,600,700" rel="stylesheet" type="text/css"><link href="' + host + 'assets/stylesheets/retool-login.css" rel="stylesheet" type="text/css">' + '<script language="JavaScript" src="' + host + 'assets/javascripts/jquery-1.10.2.min.js"></script>' + '</head><body>' + '<h3>Retool Signin</h3><div id="rt-login-error" class="error"></div><input id="rt-email" type="type" placeholder="email"><br><input id="rt-password" type="password" placeholder="password"><br><button onclick="login()">Sign in</button>';
        html += '<script>jQuery(document).ready(function(){$("#rt-email").focus();});$("body").on("keypress",function(event){if (event.keyCode == 13){login();}});function login(){window.parent.Retool.tryLogin(window);};</script>';
        html += "</body>";
        loginDoc.write(html);
        loginDoc.close();
    }
    Retool.showLogin = showLogin;
    function tryLogin(loginWin) {
        var email = loginWin.$("#rt-email").val();
        var password = loginWin.$("#rt-password").val();
        var request = new Retool.Request({ type: "data" });
        request.add({ className: "Public", method: "signin", args: { email: email, password: password }, success: function (data) {
            var result = data.result;
            var token = result.token;
            Retool.App.sessionToken = token;
            window.sessionStorage.setItem("retool-session-token", token);
            loadDesignerAssets();
        }, error: function (err) {
            if (err.error) {
                loginWin.$('#rt-login-error').text(err.error.messages[0]);
            }
            else {
                loginWin.$('#rt-login-error').text(err.toString());
            }
        } });
        request.execute();
    }
    Retool.tryLogin = tryLogin;
    function loadDesignerAssets() {
        var host = getRetoolAssetHost();
        // check login status and show if not logged in
        //document.open("text/html","replace");
        $('html').attr('style', '');
        $('head *').remove();
        Retool.localFiles = loadEnvLocal();
        setTimeout(function () {
            $('head').html(' <link href="//fonts.googleapis.com/css?family=Source+Code+Pro:400,500,600,700" rel="stylesheet" type="text/css">' + '<link href="//fonts.googleapis.com/css?family=Source+Sans+Pro:400,600,700,400italic,600italic,700italic" rel="stylesheet" type="text/css">' + ' <link href="' + host + 'assets/stylesheets/retool-ide.css?ver=$1500$" rel="stylesheet" type="text/css">');
            $('body').html('<h4 style="font-family:Arial;color:#000;text-align:center;margin-top:30px">Loading IDE...</h4>' + ' <script src="//netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js"></script>');
            //	+ '<script language="JavaScript" src="' + host + 'assets/javascripts/retool-client.js?ver=$1500$" async="false"></script>'
            //	+ '<script language="JavaScript" src="' + host + 'assets/javascripts/retool-ide.js?ver=$1500$" async="false"></script>  ');
            setTimeout(function () {
                var options = {
                    dataType: "script",
                    cache: true,
                    url: host + "assets/retool-ide.js"
                };
                return $.ajax(options);
            }, 20);
        }, 10);
        // document.close();
    }
    Retool.loadDesignerAssets = loadDesignerAssets;
    function displayUpgradeRequired() {
        alert("A newer version of the application is available, click ok to refresh this page");
        location.href = location.href;
    }
    Retool.displayUpgradeRequired = displayUpgradeRequired;
    function displayException(e) {
        Retool.App.handleVMError(e);
        return;
        var error;
        if (e instanceof Retool.VM.VMError) {
            error = e;
        }
        else {
            error = new Retool.VM.VMError(e);
        }
        Retool.ErrorRenderer.render({ error: error });
    }
    Retool.displayException = displayException;
    function executeTouch() {
        Retool.touchCount++;
        if (Retool.touchCount > Retool.maxTouchCount) {
            if (Retool.App.sessionToken) {
                displayException("You have been logged out, please log in again to continue.");
            }
            return; // stop refreshing session
        }
        var request = new Retool.Request({ type: "touch" });
        request.add({ className: "Session", method: "touch", success: function (response) {
            setTimeout(function () {
                executeTouch();
            }, Retool.touchInterval);
        }, error: function (response) {
            if (Retool.App.sessionToken && (response.error.code == 101 || response.error.code == 102)) {
                displayException("You have been logged out, please log in again to continue.");
                return;
            }
            setTimeout(function () {
                executeTouch();
            }, Retool.touchInterval);
        } });
        request.execute();
    }
    Retool.executeTouch = executeTouch;
    function getComponentStorage(url, dataId) {
        var stringValue = sessionStorage.getItem("component:" + url.getPath() + "," + dataId);
        if (stringValue) {
            return JSON.parse(stringValue);
        }
        else {
            return null;
        }
    }
    Retool.getComponentStorage = getComponentStorage;
    function setComponentStorage(url, dataId, value) {
        var stringValue = (value) ? JSON.stringify(value) : null;
        sessionStorage.setItem("component:" + url.getPath() + "," + dataId, stringValue);
    }
    Retool.setComponentStorage = setComponentStorage;
    function consoleLog(text) {
        if (Retool.App.ide && text) {
            Retool.App.ide.consoleLog(text);
        }
    }
    Retool.consoleLog = consoleLog;
    function boundCheck(value, min, max) {
        if (value < min) {
            return min;
        }
        if (value > max) {
            return max;
        }
        return value;
    }
    Retool.boundCheck = boundCheck;
})(Retool || (Retool = {}));
if (typeof exports != "undefined") {
    module.exports = Retool.start;
}
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        function createProcess() {
            return new VM.Process();
        }
        VM.createProcess = createProcess;
        VM.maxInstructionExecution = 5000;
        VM.globalObj;
        var types = {};
        function executeMethodSync(params) {
            var methodInfo;
            if (params.methodInfo) {
                methodInfo = params.methodInfo;
            }
            else {
                methodInfo = params.target.getPrototypeMethod(params.methodName);
                if (!methodInfo) {
                    return null;
                }
            }
            var proc = new VM.Process();
            proc.sync = true;
            return proc.start({ target: params.target, methodInfo: methodInfo, args: params.args, globalTarget: params.globalTarget, localProperties: params.localProperties });
        }
        VM.executeMethodSync = executeMethodSync;
        function executeMethodAsync(params, done) {
            var methodInfo;
            if (params.methodInfo) {
                methodInfo = params.methodInfo;
            }
            else {
                methodInfo = params.target.getPrototypeMethod(params.methodName);
                if (!methodInfo) {
                    return null;
                }
            }
            var proc = new VM.Process();
            proc.onComplete = function (result) {
                done(result);
            };
            return proc.start({ target: params.target, methodInfo: methodInfo, args: params.args, globalTarget: params.globalTarget, localProperties: params.localProperties });
        }
        VM.executeMethodAsync = executeMethodAsync;
        function addType(name, constructorFunc, staticInstance) {
            var t = { constructorFunc: constructorFunc, staticInstance: staticInstance };
            types[name] = t;
        }
        VM.addType = addType;
        function getType(name) {
            var t = types[name];
            return t;
        }
        VM.getType = getType;
        function getAllTypes() {
            return types;
        }
        VM.getAllTypes = getAllTypes;
        function handleError(err) {
            Retool.App.handleVMError(err);
        }
        VM.handleError = handleError;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var CallParameters = (function () {
            function CallParameters(name, args, proc) {
                this.name = name;
                this.args = args;
                this.proc = proc;
            }
            CallParameters.prototype.getArgs = function (a) {
                var array = this.args || [];
                var out = {};
                for (var i = 0; i < arguments.length; i++) {
                    if (i < array.length) {
                        out[arguments[i]] = array[i];
                    }
                }
                return out;
            };
            CallParameters.prototype.get = function (argName) {
                if (this.args && this.args.length) {
                    var arg = this.args[0];
                    if (arg) {
                        return arg[argName];
                    }
                }
                return null;
            };
            CallParameters.prototype.getIndex = function (index) {
                if (this.args && index < this.args.length) {
                    return this.args[index];
                }
                return null;
            };
            CallParameters.prototype.pause = function () {
                return this.proc.pause();
            };
            return CallParameters;
        })();
        VM.CallParameters = CallParameters;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var MethodPointer = (function () {
            function MethodPointer(target, methodName) {
                this.target = target;
                this.methodName = methodName;
            }
            return MethodPointer;
        })();
        VM.MethodPointer = MethodPointer;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var CallStackEntry = (function () {
            function CallStackEntry(parent, target, methodInfo, argValues) {
                this.target = target;
                this.parent = parent;
                this.blockMode = "function";
                if (this.parent) {
                    this.level = this.parent.level + 1;
                    if (this.level >= 20) {
                        throw "too many nested calls - check for accidental recursive call";
                    }
                }
                else {
                    this.level = 0;
                }
                var localProperties = { "arguments": argValues || [] };
                this.localProperties = localProperties;
                this.instructionIndex = 0;
                if (methodInfo) {
                    this.methodInfo = methodInfo;
                    this.instructions = methodInfo.instructions;
                    this.instructionCount = this.instructions.length;
                    var argIndex = 0;
                    var argCount = argValues ? argValues.length : 0;
                    if (methodInfo.params && methodInfo.params.length) {
                        for (var i = 0; i < methodInfo.params.length; i++) {
                            var param = methodInfo.params[i];
                            if (argIndex < argCount) {
                                localProperties[param.name] = argValues[argIndex];
                            }
                            else {
                                localProperties[param.name] = null;
                            }
                            argIndex++;
                        }
                    }
                }
            }
            CallStackEntry.prototype.setBlockMode = function (mode) {
                this.blockMode = mode;
                if (mode == "try") {
                    this.instructions = this.tryCatchBlock.block;
                }
                else if (mode == "catch") {
                    this.instructions = this.tryCatchBlock.handler;
                }
                else if (mode == "finally") {
                    this.instructions = this.tryCatchBlock.finalizer;
                }
                this.localProperties = {};
                this.instructionCount = this.instructions.length;
                this.instructionIndex = 0;
            };
            CallStackEntry.prototype.nextInstruction = function () {
                if (this.instructionIndex < this.instructionCount) {
                    return this.instructions[this.instructionIndex++];
                }
                return null;
            };
            CallStackEntry.prototype.isBreakPoint = function (line) {
                if (this.methodInfo && this.methodInfo.sourceFile) {
                    if (this.singleStep) {
                        return true;
                    }
                    var file = this.methodInfo.sourceFile;
                    if (file.breakPoints && file.breakPoints[line.toString()]) {
                        return true;
                    }
                }
                return false;
            };
            CallStackEntry.prototype.getPropertyValue = function (proc, name, errorIfMissing) {
                if (name in this.localProperties) {
                    return this.localProperties[name];
                }
                if (this.blockMode != "function") {
                    return this.parent.getPropertyValue(proc, name, errorIfMissing);
                }
                return proc.getObjectPropertyValue(proc.globalTarget, name, errorIfMissing); // could be a global variable
            };
            CallStackEntry.prototype.setPropertyValue = function (proc, name, value) {
                if (name in this.localProperties) {
                    this.localProperties[name] = value;
                    return;
                }
                if (this.blockMode != "function") {
                    this.parent.setPropertyValue(proc, name, value);
                    return;
                }
                proc.setObjectPropertyValue(proc.globalTarget, name, value);
            };
            CallStackEntry.prototype.createProperty = function (proc, name, value) {
                if (this.blockMode != "function") {
                    this.parent.createProperty(proc, name, value);
                    return;
                }
                this.localProperties[name] = value;
            };
            CallStackEntry.prototype.createBlockLevelProperty = function (proc, name, value) {
                this.localProperties[name] = value;
            };
            CallStackEntry.prototype.handleReturn = function (proc) {
                this.instructionIndex = this.instructions.length + 1; // set instruction pointer at end of function
                this.returnStatementExecuted = true;
            };
            CallStackEntry.prototype.jump = function (offset) {
                this.instructionIndex = this.instructionIndex + offset;
            };
            return CallStackEntry;
        })();
        VM.CallStackEntry = CallStackEntry;
        var VMPromise = (function () {
            function VMPromise(proc, instructions) {
                this.proc = proc;
                this.instructions = instructions;
            }
            VMPromise.prototype.then = function (func) {
                var inst = this.instructions;
                var proc = this.proc;
                proc.currentCall.returnStatementExecuted = true; // prevent pushing null onto stack
                if (inst.length > 1 && inst[1].opcode == "pop") {
                    var op = function () {
                        var value = proc.popValue();
                        var returnValue = func(value);
                        if (!proc.runner.paused) {
                            proc.pushValue(returnValue);
                        }
                    };
                    inst[1] = { "opcode": "callFunc", data: op };
                }
                return this;
            };
            return VMPromise;
        })();
        VM.VMPromise = VMPromise;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var TryCatchFinallyBlock = (function () {
            function TryCatchFinallyBlock() {
            }
            return TryCatchFinallyBlock;
        })();
        VM.TryCatchFinallyBlock = TryCatchFinallyBlock;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        // defines a property as the class level
        var ClassProperty = (function () {
            function ClassProperty() {
            }
            return ClassProperty;
        })();
        VM.ClassProperty = ClassProperty;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        // defines a method that can be executed
        var MethodInfo = (function () {
            function MethodInfo(name) {
                this.name = name;
            }
            MethodInfo.prototype.toJSON = function () {
                return { name: this.name, params: this.params, instructions: this.instructions, sourceLine: this.sourceLine };
            };
            return MethodInfo;
        })();
        VM.MethodInfo = MethodInfo;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var InstructionSet = (function () {
            function InstructionSet() {
            }
            // load a value onto the stack
            InstructionSet.ldvalue = function (proc, instruction) {
                proc.pushValue(instruction.value);
            };
            // load the value of a local property onto the stack
            InstructionSet.ldloc = function (proc, instruction) {
                proc.pushLocalValue(instruction);
            };
            InstructionSet.ldprop = function (proc, instruction) {
                var target = proc.popTarget();
                proc.pushValue(proc.getObjectPropertyValue(target, instruction.name));
            };
            InstructionSet.ldthisprop = function (proc, instruction) {
                proc.pushValue(proc.getObjectPropertyValue(proc.currentCall.target, instruction.name));
            };
            // call a property on a target object
            InstructionSet.callprop = function (proc, instruction) {
                var args = proc.buildArgsFromStack(instruction.argCount);
                var target = proc.popTarget();
                if (target == undefined) {
                    throw "Cannot call method: " + instruction.name + " on undefined";
                }
                if (target == null) {
                    throw "Cannot call method: " + instruction.name + " on null";
                }
                proc.callObjectMethod(target, instruction.name, args);
            };
            InstructionSet.delprop = function (proc, instruction) {
                var target = proc.popTarget();
                proc.deleteObjectProperty(target, instruction.name);
                proc.pushValue(true);
            };
            InstructionSet.callsuper = function (proc, instruction) {
                var args = proc.buildArgsFromStack(instruction.argCount);
                proc.callSuperMethod(proc.currentCall.target, instruction.name, args);
            };
            InstructionSet.retval = function (proc, instruction) {
                proc.currentCall.handleReturn(proc);
            };
            InstructionSet.ret = function (proc, instruction) {
                proc.currentCall.handleReturn(proc);
                proc.pushNullValue();
            };
            InstructionSet.crloc = function (proc, instruction) {
                var value = null;
                if (instruction.argCount) {
                    value = proc.popValue();
                }
                if (proc.allGlobalVars) {
                    proc.setObjectPropertyValue(proc.currentCall.target, instruction.name, value);
                }
                else {
                    proc.currentCall.createProperty(proc, instruction.name, value);
                }
            };
            InstructionSet.callFunc = function (proc, instruction) {
                var func = instruction.data;
                func(proc);
            };
            InstructionSet.noop = function () {
            };
            InstructionSet.ldpropc = function (proc, instruction) {
                // stack[-1] = target
                // stack[0] = property name
                var propertyName = proc.popValue();
                var target = proc.popTarget();
                proc.pushValue(proc.getObjectPropertyValue(target, propertyName));
            };
            InstructionSet.delpropc = function (proc, instruction) {
                // stack[-1] = target
                // stack[0] = property name
                var propertyName = proc.popValue();
                var target = proc.popTarget();
                proc.deleteObjectProperty(target, propertyName);
                proc.pushValue(true);
            };
            InstructionSet.ldthispropc = function (proc, instruction) {
                // stack[-1] = target
                // stack[0] = property name
                var propertyName = proc.popValue();
                proc.pushValue(proc.getObjectPropertyValue(proc.currentCall.target, propertyName));
            };
            InstructionSet.ldvaluethis = function (proc, instruction) {
                proc.pushValue(proc.currentCall.target);
            };
            InstructionSet.stloc = function (proc, instruction) {
                var value = proc.peekValue();
                proc.setLocalPropertyValue(instruction.name, value);
            };
            InstructionSet.stprop = function (proc, instruction) {
                // stack[-1] = target
                // stack[0] = value
                var value = proc.popValue();
                var target = proc.popTarget();
                proc.setObjectPropertyValue(target, instruction.name, value);
                proc.pushValue(value);
            };
            InstructionSet.stthisprop = function (proc, instruction) {
                // stack[-1] = target
                // stack[0] = value
                var value = proc.peekValue();
                proc.setObjectPropertyValue(proc.currentCall.target, instruction.name, value);
            };
            InstructionSet.stpropc = function (proc, instruction) {
                // stack[-2] == target
                // stack[-1] == propertyName
                // stack[0] == value
                var value = proc.popValue();
                var propertyName = proc.popValue();
                var target = proc.popTarget();
                proc.setObjectPropertyValue(target, propertyName, value);
                proc.pushValue(value);
            };
            InstructionSet.stthispropc = function (proc, instruction) {
                // stack[-1] == propertyName
                // stack[0] == value
                var value = proc.popValue();
                var propertyName = proc.popValue();
                proc.setObjectPropertyValue(proc.currentCall.target, propertyName, value);
                proc.pushValue(value);
            };
            InstructionSet.stproplv = function (proc, instruction) {
                // stack[-1] == target
                // stack[0] == value
                // leave the target on the stack
                var value = proc.popValue();
                var target = proc.peekTarget();
                proc.setObjectPropertyValue(target, instruction.name, value);
            };
            InstructionSet.crprop = function (proc, instruction) {
                // create class level property
                var value;
                if (instruction.argCount) {
                    value = proc.popValue();
                }
                else {
                    value = null;
                }
                proc.setObjectPropertyValue(proc.currentCall.target, instruction.name, value);
            };
            InstructionSet.inc = function (proc, instruction) {
                var value = proc.popValue();
                proc.pushValue(value + 1);
            };
            InstructionSet.incloc = function (proc, instruction) {
                var value = proc.getLocalPropertyValue(instruction.name);
                proc.setLocalPropertyValue(instruction.name, value + 1);
                proc.pushValue(value);
            };
            InstructionSet.dec = function (proc, instruction) {
                var value = proc.popValue();
                proc.pushValue(value - 1);
            };
            InstructionSet.decloc = function (proc, instruction) {
                var value = proc.getLocalPropertyValue(instruction.name);
                proc.setLocalPropertyValue(instruction.name, value - 1);
                proc.pushValue(value);
            };
            InstructionSet.incprop = function (proc, instruction) {
                var target = proc.popTarget();
                var value = proc.getObjectPropertyValue(target, instruction.name);
                proc.setObjectPropertyValue(target, instruction.name, value + 1);
                proc.pushValue(value);
            };
            InstructionSet.decprop = function (proc, instruction) {
                var target = proc.popTarget();
                var value = proc.getObjectPropertyValue(target, instruction.name);
                proc.setObjectPropertyValue(target, instruction.name, value - 1);
                proc.pushValue(value);
            };
            InstructionSet.callloc = function (proc, instruction) {
                var args = proc.buildArgsFromStack(instruction.argCount);
                proc.callObjectMethod(proc.globalTarget, instruction.name, args);
            };
            InstructionSet.callwrap = function (proc, instruction) {
                // wrapper for a call	
                proc.callObjectMethod(proc.currentCall.target, instruction.name, instruction.data);
            };
            InstructionSet.callpropc = function (proc, instruction) {
                var args = proc.buildArgsFromStack(instruction.argCount);
                var methodPointer = proc.popValue();
                //todo:  check is method Pointer
                proc.callObjectMethod(methodPointer.target, methodPointer.methodName, args);
            };
            InstructionSet.callthispropc = function (proc, instruction) {
                var args = proc.buildArgsFromStack(instruction.argCount);
                var methodName = proc.popValue();
                proc.callObjectMethod(proc.currentCall.target, methodName, args);
            };
            InstructionSet.callthisprop = function (proc, instruction) {
                var args = proc.buildArgsFromStack(instruction.argCount);
                proc.callObjectMethod(proc.currentCall.target, instruction.name, args);
            };
            InstructionSet.newobj = function (proc, instruction) {
                var args = proc.buildArgsFromStack(instruction.argCount);
                proc.newObj(instruction.name, args);
            };
            InstructionSet.pop = function (proc, instruction) {
                proc.popValue();
            };
            InstructionSet.dup = function (proc, instruction) {
                proc.pushValue(proc.peekValue());
            };
            InstructionSet.not = function (proc, instruction) {
                proc.pushValue(!proc.popValue());
            };
            InstructionSet.neg = function (proc, instruction) {
                proc.pushValue(-proc.popValue());
            };
            InstructionSet.throwvalue = function (proc, instruction) {
                var value = proc.popValue();
                var error;
                if (value instanceof VM.VMError) {
                    error = value;
                }
                else {
                    error = new VM.VMError(value);
                }
                error.name = "throw_statement";
                proc.raiseException(error);
            };
            InstructionSet.debug = function (proc, instruction) {
                throw "not implemented";
            };
            InstructionSet.brfalse = function (proc, instruction) {
                if (!proc.popValue()) {
                    proc.currentCall.jump(instruction.offset);
                }
            };
            InstructionSet.brtrue = function (proc, instruction) {
                if (proc.popValue()) {
                    proc.currentCall.jump(instruction.offset);
                }
            };
            InstructionSet.br = function (proc, instruction) {
                proc.currentCall.jump(instruction.offset);
            };
            InstructionSet.getenum = function (proc, instruction) {
                var value = proc.popValue();
                proc.currentCall.createBlockLevelProperty(proc, instruction.name, proc.getEnumerator(value));
            };
            InstructionSet.nextenum = function (proc, instruction) {
                var enumerator = proc.getLocalPropertyValue(instruction.enumprop);
                if (!enumerator.next()) {
                    proc.currentCall.jump(instruction.offset);
                }
                proc.currentCall.createBlockLevelProperty(proc, instruction.name, enumerator.current);
            };
            InstructionSet.add = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 + v2);
            };
            InstructionSet.sub = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 - v2);
            };
            InstructionSet.mult = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 * v2);
            };
            InstructionSet.div = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                if (v2) {
                    proc.pushValue(v1 / v2);
                }
                else {
                    proc.pushValue(0);
                }
            };
            InstructionSet.rem = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                if (v2) {
                    proc.pushValue(v1 % v2);
                }
                else {
                    proc.pushValue(0);
                }
            };
            InstructionSet.cmpeq = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 == v2);
            };
            InstructionSet.cmpsteq = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 === v2);
            };
            InstructionSet.cmpnoteq = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 != v2);
            };
            InstructionSet.cmpstnoteq = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 !== v2);
            };
            InstructionSet.cmpgreater = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 > v2);
            };
            InstructionSet.cmpgreatereq = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 > v2);
            };
            InstructionSet.cmpless = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 < v2);
            };
            InstructionSet.cmplesseq = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 <= v2);
            };
            InstructionSet.tryblock = function (proc, instruction) {
                var block = instruction.data;
                proc.startTryCatch(block);
            };
            return InstructionSet;
        })();
        VM.InstructionSet = InstructionSet;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var ProcessBase = (function () {
            function ProcessBase() {
                this.pauseCount = 0;
                this.execInstructionCount = 0;
                this.childProcessCount = 0;
            }
            // start an instance of virtual machince
            ProcessBase.prototype.start = function (options) {
                this.valueStack = [];
                this.callStack = [];
                var c = new VM.CallStackEntry(null, options.target, options.methodInfo, options.args);
                if (options.localProperties) {
                    var loc = options.localProperties;
                    for (var key in loc) {
                        c.localProperties[key] = loc[key];
                    }
                }
                this.globalTarget = options.globalTarget || VM.globalObj;
                this.currentCall = c;
                var result;
                result = this.run();
                if (this.sync && this.syncException) {
                    throw this.syncException;
                }
                return result;
            };
            ProcessBase.prototype.showBreakPoint = function (callEntry, inst) {
            };
            // execute the instruction in the current method/function
            ProcessBase.prototype.run = function () {
                var runner = this.runner = new VM.InstructionRunner(this);
                return runner.start();
            };
            ProcessBase.prototype.endOfBlock = function () {
                var endingBlock = this.currentCall;
                if (endingBlock.blockMode == "try" || endingBlock.blockMode == "catch") {
                    if (endingBlock.tryCatchBlock.finalizer) {
                        endingBlock.setBlockMode("finally");
                        return;
                    }
                }
                if (this.callStack.length > 0) {
                    if (!endingBlock.returnStatementExecuted && endingBlock.blockMode == "function") {
                        this.pushNullValue();
                    }
                    this.currentCall = this.callStack.pop();
                    if (endingBlock.returnStatementExecuted && endingBlock.blockMode != "function") {
                        this.currentCall.handleReturn(this);
                    }
                    if (endingBlock.rethrowOnComplete) {
                        this.handleException(endingBlock.rethrowOnComplete);
                    }
                }
                else {
                    this.currentCall = null;
                }
            };
            ProcessBase.prototype.raiseException = function (e) {
                if (!e.script_stack) {
                    e.script_stack = this.createErrorStack();
                }
                this.handleException(e);
            };
            ProcessBase.prototype.handleException = function (e) {
                while (this.currentCall) {
                    if (this.currentCall.blockMode == "try") {
                        var tryCatchBlock = this.currentCall.tryCatchBlock;
                        if (tryCatchBlock.handler) {
                            this.currentCall.setBlockMode("catch");
                            this.currentCall.createBlockLevelProperty(this, tryCatchBlock.handlerParameterName, e);
                            return true;
                        }
                        if (tryCatchBlock.finalizer) {
                            this.currentCall.setBlockMode("finally");
                            this.currentCall.rethrowOnComplete = e;
                            return true;
                        }
                    }
                    if (this.callStack.length > 0) {
                        this.currentCall = this.callStack.pop();
                    }
                    else {
                        this.currentCall = null;
                    }
                }
                // uncaught exception
                this.throwUnhandledException(e);
                return false;
            };
            // suspend execution of the virtual machine
            ProcessBase.prototype.pause = function () {
                this.pauseCount++;
                this.runner.paused = true;
                return new VM.AsyncMethod(this);
            };
            ProcessBase.prototype.redirected = function () {
                this.wasRedirected = true;
                this.runner.paused = true;
            };
            // resume execution of instructions after pausing the virtual machine
            ProcessBase.prototype.createErrorForResume = function (data) {
                return new VM.VMError(data);
            };
            ProcessBase.prototype.createNewObjForType = function (name, args) {
                throw new Error("Unknown object type: " + name);
            };
            ProcessBase.prototype.newObj = function (name, args) {
                var obj;
                switch (name) {
                    case "Array":
                        obj = args;
                        break;
                    case "Object":
                        obj = {};
                        break;
                    default:
                        var vmType = this.getType(name);
                        if (vmType && vmType.constructorFunc) {
                            var c = vmType.constructorFunc;
                            if (c.__native) {
                                c = c.__native;
                            }
                            if (args.length == 0) {
                                obj = new c();
                            }
                            else if (args.length = 1) {
                                obj = new c(args[0]);
                            }
                            else if (args.length = 2) {
                                obj = new c(args[0], args[1]);
                            }
                            else if (args.length = 3) {
                                obj = new c(args[0], args[1], args[2]);
                            }
                            else if (args.length = 4) {
                                obj = new c(args[0], args[1], args[2], args[3]);
                            }
                            else if (args.length = 5) {
                                obj = new c(args[0], args[1], args[2], args[3], args[4]);
                            }
                        }
                }
                if (obj) {
                    this.pushValue(obj);
                    return;
                }
                this.createNewObjForType(name, args);
            };
            ProcessBase.prototype.createErrorFromResponse = function (data) {
                var error;
                if (data.error) {
                    error = VM.VMError.fromResponse(data);
                    var stackItems = [];
                    if (data.error.script_stack) {
                        var serverStack = data.error.script_stack;
                        if (serverStack.items) {
                            for (var i = 0; i < serverStack.items.length; i++) {
                                var serverItem = serverStack.items[i];
                                stackItems.push({ method_name: serverItem.method_name, class_name: serverItem.class_name, line_number: serverItem.line_number, source: "server" });
                            }
                        }
                    }
                    error.script_stack = this.createErrorStack(stackItems);
                }
                return error;
            };
            ProcessBase.prototype.debugResume = function () {
                this.singleStep = false;
                this.run();
            };
            ProcessBase.prototype.debugStepInto = function () {
                this.singleStep = true;
                this.run();
            };
            // pop a value off of the stack suitable for use as a target object
            ProcessBase.prototype.popTarget = function () {
                return this.valueStack.pop();
            };
            ProcessBase.prototype.peekTarget = function () {
                return this.valueStack[this.valueStack.length - 1];
            };
            ProcessBase.prototype.popValue = function () {
                return this.valueStack.pop();
            };
            ProcessBase.prototype.peekValue = function () {
                return this.valueStack[this.valueStack.length - 1];
            };
            ProcessBase.prototype.pushValue = function (value) {
                this.valueStack.push(value);
            };
            ProcessBase.prototype.pushNullValue = function () {
                this.valueStack.push(null);
            };
            ProcessBase.prototype.getStaticTypeValue = function (name) {
                throw "ReferenceError: " + name + " is not defined";
            };
            ProcessBase.prototype.getLocalPropertyValue = function (name) {
                if (name !== "NaN" && name[0] >= "A" && name[0] <= "Z") {
                    var type = this.getType(name);
                    if (type) {
                        if (type.staticInstance) {
                            return type.staticInstance;
                        }
                        else {
                            throw "ReferenceError: " + name + " does not have a static instance";
                        }
                    }
                    return this.getStaticTypeValue(name);
                }
                else {
                    return this.currentCall.getPropertyValue(this, name, true);
                }
            };
            ProcessBase.prototype.getType = function (name) {
                return null;
            };
            ProcessBase.prototype.setLocalPropertyValue = function (name, value) {
                this.currentCall.setPropertyValue(this, name, value);
            };
            ProcessBase.prototype.getLocalMethodPointer = function (name) {
                return this.getObjectMethodPointer(this.currentCall.target, name);
            };
            ProcessBase.prototype.setObjectPropertyValue = function (target, name, value) {
                if (target === null || target === undefined) {
                    throw "TypeError: Cannot set property '" + name + "' of null";
                }
                if (target.__isVMObject) {
                    target.setProperty({ name: name, value: value, proc: this });
                }
                else {
                    target[name] = value;
                }
            };
            ProcessBase.prototype.getObjectPropertyValue = function (target, name, errorIfMissing) {
                if (target === null || target === undefined) {
                    throw "TypeError: Cannot read property '" + name + "' of undefined";
                }
                if (target.__isVMObject) {
                    return target.getProperty({ proc: this, name: name, errorIfMissing: errorIfMissing });
                }
                else if (errorIfMissing) {
                    if (name in target) {
                        return target[name];
                    }
                    throw "ReferenceError: " + name + " is not defined";
                }
                else {
                    return target[name];
                }
            };
            ProcessBase.prototype.getObjectMethodPointer = function (obj, name) {
                return new VM.MethodPointer(obj, name);
            };
            ProcessBase.prototype.deleteObjectProperty = function (target, name) {
                if (target === null || target === undefined) {
                    throw "ReferenceError: cannot delete property '" + name + "' of undefined";
                }
                if (target.__isVMObject) {
                    return target.deleteProperty({ proc: this, name: name });
                }
                else {
                    delete target[name];
                }
            };
            ProcessBase.prototype.buildArgsFromStack = function (argCount) {
                var args = [];
                if (argCount) {
                    for (var i = 0; i < argCount; i++) {
                        args.unshift(this.popValue());
                    }
                }
                return args;
            };
            ProcessBase.prototype.callObjectMethod = function (target, name, args) {
                if (target.__isVMObject) {
                    target.callMethod(new VM.CallParameters(name, args, this));
                }
                else {
                    var method = target[name];
                    if (method) {
                        this.pushValue(method.apply(target, args));
                    }
                    else {
                        throw "Unknown method: " + name;
                    }
                }
            };
            ProcessBase.prototype.callSuperMethod = function (target, name, args) {
                if (target.__isVMObject) {
                    target.callSuperMethod(new VM.CallParameters(name, args, this));
                }
                else {
                    throw "super not valid on this object, cannot call: " + name;
                }
            };
            ProcessBase.prototype.getEnumerator = function (value) {
                if (!value) {
                    return null;
                }
                if (value.__getEnumerator) {
                    return value.__getEnumerator();
                }
                if (Array.isArray(value)) {
                    return new VM.Enumerator(value);
                }
                var keys = Object.keys(value);
                return new VM.Enumerator(keys);
            };
            ProcessBase.prototype.startMethod = function (target, methodInfo, args) {
                this.callStack.push(this.currentCall);
                var c = new VM.CallStackEntry(this.currentCall, target, methodInfo, args);
                this.currentCall = c;
            };
            ProcessBase.prototype.startTryCatch = function (block) {
                var current = this.currentCall;
                this.callStack.push(this.currentCall);
                var c = new VM.CallStackEntry(current, current.target, current.methodInfo, null);
                c.tryCatchBlock = block;
                c.setBlockMode("try");
                this.currentCall = c;
            };
            ProcessBase.prototype.throwUnhandledException = function (error) {
                if (this.sync) {
                    this.syncException = error;
                }
                if (this.onException) {
                    this.onException(error);
                }
                this.runner.paused = true; // stop running
            };
            ProcessBase.prototype.createErrorStack = function (items) {
                // change to get stack trace
                if (!items) {
                    items = [];
                }
                var lineInfo;
                if (this.currentCall) {
                    lineInfo = this.getCallStackLineInfo(this.currentCall);
                    if (this.currentCall.blockMode == "function") {
                        items.push(this.getCallStackErrorInfo(this.currentCall, lineInfo));
                        lineInfo = null;
                    }
                }
                if (this.callStack) {
                    var n = this.callStack.length - 1;
                    for (var i = n; i >= 0; i--) {
                        var entry = this.callStack[i];
                        if (!lineInfo) {
                            lineInfo = this.getCallStackLineInfo(entry);
                        }
                        if (entry.blockMode == "function") {
                            items.push(this.getCallStackErrorInfo(entry, lineInfo));
                            lineInfo = null;
                        }
                    }
                }
                var stack = { items: items };
                return stack;
            };
            ProcessBase.prototype.getCallStackLineInfo = function (entry) {
                var lastInstruction = (entry.instructionIndex > 0) ? entry.instructions[entry.instructionIndex - 1] : null;
                var info = { line_number: 0, column_number: 0 };
                if (lastInstruction) {
                    info.line_number = (lastInstruction.line || "0");
                    info.column_number = (lastInstruction.column || "0");
                }
                return info;
            };
            ProcessBase.prototype.getCallStackErrorInfo = function (entry, lineInfo) {
                var item = {};
                if (entry.methodInfo) {
                    item.method_name = entry.methodInfo.name;
                    if (entry.methodInfo.sourceFile) {
                        var sourceFile = entry.methodInfo.sourceFile;
                        item.filename = sourceFile.getFullName();
                    }
                    item.expression = entry.methodInfo.sourceCode;
                    item.elementId = entry.methodInfo.elementId;
                }
                item.line_number = lineInfo.line_number;
                item.column_number = lineInfo.column_number;
                return item;
            };
            ProcessBase.prototype.createChildProcess = function () {
                var child = VM.createProcess();
                child.isChild = true;
                if (this.isChild) {
                    child.root = this.root;
                }
                else {
                    child.root = this;
                }
                child.globalTarget = this.globalTarget;
                child.onException = this.onException;
                this.initChild(child);
                child.root.childProcessCount++;
                return child;
            };
            ProcessBase.prototype.initChild = function (child) {
            };
            ProcessBase.prototype.completed = function (value) {
                if (this.isChild) {
                    var root = this.root;
                    root.childProcessCount--;
                    if (root.childProcessCount == 0 && root.waitingForChildComplete) {
                        root.onComplete(root.completedValue);
                    }
                }
                else if (this.onComplete) {
                    if (this.childProcessCount == 0) {
                        this.onComplete(value);
                    }
                    else {
                        this.completedValue = value;
                        this.waitingForChildComplete = true;
                    }
                }
            };
            ProcessBase.prototype.childProcessComplete = function (child) {
                this.childProcessCount--;
            };
            return ProcessBase;
        })();
        VM.ProcessBase = ProcessBase;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var Process = (function (_super) {
            __extends(Process, _super);
            function Process() {
                _super.apply(this, arguments);
            }
            Process.prototype.start = function (options) {
                this.component = options.component;
                return _super.prototype.start.call(this, options);
            };
            Process.prototype.showBreakPoint = function (callEntry, inst) {
                Retool.App.ide.showBreakPoint(this, callEntry.methodInfo.sourceFile, inst.line);
            };
            Process.prototype.showError = function (error) {
                if (this.component) {
                    this.component.showFormError(error);
                }
                else {
                    Retool.displayException(error);
                }
            };
            Process.prototype.createErrorForResume = function (data) {
                var error = this.createErrorFromResponse(data);
                return error;
            };
            Process.prototype.getType = function (name) {
                if (name == "Site") {
                    return { staticInstance: Retool.App.rootViewModels.site, constructorFunc: null };
                }
                if (name == "Admin") {
                    return { staticInstance: Retool.App.rootViewModels.admin, constructorFunc: null };
                }
                return VM.getType(name);
            };
            Process.prototype.getStaticTypeValue = function (name) {
                var segments = name.toLowerCase().split('.');
                if (segments.length == 2) {
                    if (segments[0] == "controllers") {
                        var controllerDef = Retool.App.controllers.getDefinition(segments[1]);
                        if (controllerDef) {
                            return new Retool.ControllerStatic(controllerDef);
                        }
                    }
                    else if (segments[0] == "models") {
                        var modelDefinition = Retool.App.models.getDefinition(segments[1]);
                        if (modelDefinition) {
                            return new Retool.ModelStatic(modelDefinition);
                        }
                    }
                }
                return _super.prototype.getStaticTypeValue.call(this, name);
            };
            Process.prototype.createNewObjForType = function (name, args) {
                var isArray;
                if (name.substr(name.length - 5, 5) == "Array") {
                    name = name.substr(0, name.length - 5);
                    isArray = true;
                }
                var modelId = name;
                var modelDefinition = Retool.App.models.getDefinition(modelId);
                if (modelDefinition) {
                    var data;
                    if (args.length) {
                        data = args[0];
                    }
                    if (isArray) {
                        this.pushValue(Retool.ArrayModel.createInstance(modelDefinition, data));
                    }
                    else {
                        this.pushValue(Retool.ObjectModel.createInstance(modelDefinition, data));
                    }
                    return;
                }
                throw new Error("TypeError: Unknown object type: " + name);
            };
            Process.prototype.pushLocalValue = function (instruction) {
                var name = instruction.name;
                if (instruction.namespace) {
                    name = instruction.namespace + "." + name;
                }
                var value = this.getLocalPropertyValue(name);
                if (instruction.ldprops) {
                    for (var i = 0; i < instruction.ldprops.length; i++) {
                        var name = instruction.ldprops[i];
                        value = this.getObjectPropertyValue(value, name);
                    }
                }
                this.pushValue(value);
            };
            Process.prototype.initChild = function (child) {
                child.viewModel = this.viewModel;
                child.component = this.component;
            };
            return Process;
        })(VM.ProcessBase);
        VM.Process = Process;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var InstructionRunner = (function () {
            function InstructionRunner(proc) {
                this.proc = proc;
            }
            InstructionRunner.prototype.start = function () {
                var maxCount = VM.maxInstructionExecution;
                var proc = this.proc;
                while (!this.paused) {
                    var inst = proc.currentCall.nextInstruction();
                    if (proc.execInstructionCount++ > maxCount) {
                        proc.throwUnhandledException(new VM.VMError("The process was terminated because the maximum instruction count of " + maxCount.toString() + " was reached.  Check for a possible endless loop in your code"));
                        this.paused = true;
                        return;
                    }
                    if (inst) {
                        try {
                            if (proc.debugEnabled) {
                                var c = proc.currentCall;
                                if (inst.line != c.currentBreakLine) {
                                    if (c.isBreakPoint(inst.line) || (proc.singleStep && c.methodInfo && c.methodInfo.sourceFile)) {
                                        c.instructionIndex--; // rollback
                                        c.currentBreakLine = inst.line;
                                        this.paused = true;
                                        proc.showBreakPoint(c, inst);
                                        return;
                                    }
                                }
                            }
                            VM.InstructionSet[inst.opcode](proc, inst);
                        }
                        catch (e) {
                            //??? is this.paused , do not handle error, the async exception will be called
                            var error;
                            if (e instanceof VM.VMError) {
                                error = e;
                            }
                            else {
                                error = new VM.VMError(e);
                            }
                            error.script_stack = proc.createErrorStack();
                            if (error.catchable) {
                                proc.handleException(error);
                            }
                            else {
                                proc.throwUnhandledException(error);
                                this.paused = true; // stop running
                            }
                        }
                    }
                    else {
                        proc.endOfBlock();
                        if (!proc.currentCall && !this.paused) {
                            if (proc.initializingClass) {
                                return;
                            }
                            var value = undefined;
                            if (proc.valueStack.length) {
                                value = proc.popValue();
                            }
                            proc.completed(value);
                            return value; // end of execution
                        }
                    }
                }
            };
            return InstructionRunner;
        })();
        VM.InstructionRunner = InstructionRunner;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var AsyncMethod = (function () {
            function AsyncMethod(proc) {
                this.proc = proc;
            }
            AsyncMethod.prototype.cont = function (error, result) {
                if (error) {
                    this.exception(error);
                }
                else {
                    this.resume(result);
                }
            };
            AsyncMethod.prototype.resume = function (returnValue) {
                if (this._then) {
                    var then = this._then;
                    this._then = null;
                    then(returnValue);
                    return;
                }
                this.proc.pushValue(returnValue);
                this.proc.run();
            };
            AsyncMethod.prototype.exception = function (error) {
                if (this._onerror) {
                    var onerror = this._onerror;
                    this._onerror = null;
                    onerror(error);
                    return;
                }
                var proc = this.proc;
                if (!(error instanceof VM.VMError)) {
                    error = proc.createErrorForResume(error);
                }
                if (error.script_stack) {
                    error.script_stack = proc.createErrorStack(error.script_stack.items);
                }
                else if (error.name == "compile") {
                    var items = [
                        { filename: error.source.filename, line_number: error.source.line }
                    ];
                    error.script_stack = proc.createErrorStack(items);
                }
                else {
                    error.script_stack = proc.createErrorStack();
                }
                if (error && error.catchable) {
                    if (proc.handleException(error)) {
                        proc.run();
                    }
                }
                else if (proc.onException) {
                    proc.onException(error);
                }
                else {
                    VM.handleError(error);
                }
            };
            AsyncMethod.prototype.error = function (error) {
                this.exception(error);
            };
            AsyncMethod.prototype.onerror = function (func) {
                this._onerror = func;
            };
            AsyncMethod.prototype.then = function (func) {
                this._then = func;
            };
            return AsyncMethod;
        })();
        VM.AsyncMethod = AsyncMethod;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var Enumerator = (function () {
            function Enumerator(array) {
                this.array = array;
                this.length = array.length;
                this.current = undefined;
                this.index = -1;
            }
            Enumerator.prototype.next = function () {
                this.index++;
                if (this.index < this.length) {
                    this.current = this.array[this.index];
                    return true;
                }
                else {
                    return false;
                }
            };
            return Enumerator;
        })();
        VM.Enumerator = Enumerator;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var Prototype = (function () {
            function Prototype(name) {
                this.name = name;
                this.properties = {};
                this.methods = {};
            }
            Prototype.prototype.load = function (data) {
                this.name = data.name;
                this.properties = data.properties;
                this.methods = data.methods;
                this.constructorMethod = data.constructorMethod;
            };
            Prototype.prototype.extendsBase = function (base) {
                for (var methodName in base.methods) {
                    if (!this.methods[methodName]) {
                        this.methods[methodName] = base.methods[methodName];
                    }
                }
            };
            Prototype.prototype.toJSON = function () {
                return { name: this.name, constructorMethod: this.constructorMethod, properties: this.properties, methods: this.methods };
            };
            return Prototype;
        })();
        VM.Prototype = Prototype;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var ObjectBase = (function () {
            function ObjectBase(myPrototype) {
                this.__isVMObject = true;
                this.myPrototype = myPrototype;
            }
            ObjectBase.prototype.get = function (name) {
                return this.getProperty({ name: name });
            };
            ObjectBase.prototype.getProperty = function (params) {
                var getter = this["vm_get_" + params.name];
                if (getter) {
                    return getter.apply(this, [params]);
                }
                else {
                    return this.getMissingProperty(params);
                }
            };
            ObjectBase.prototype.set = function (name, value) {
                this.setProperty({ name: name, value: value });
            };
            ObjectBase.prototype.setProperty = function (params) {
                var setter = this["vm_set_" + params.name];
                if (setter) {
                    setter.apply(this, [params]);
                }
                else {
                    this.setMissingProperty(params);
                }
            };
            ObjectBase.prototype.deleteProperty = function (params) {
                throw "Error: cannot delete property '" + params.name + "' from this object type";
            };
            ObjectBase.prototype.getPrototypeMethod = function (name) {
                var prototype = this.myPrototype;
                if (prototype) {
                    var methodInfo = prototype.methods[name];
                    if (methodInfo) {
                        return methodInfo;
                    }
                    if (prototype.base) {
                        return prototype.base.methods[name];
                    }
                }
                return null;
            };
            ObjectBase.prototype.vm___methodHasCode = function (params) {
                var method = this.getPrototypeMethod(params.args[0]);
                if (!method) {
                    return false;
                }
                return (method.instructions.length > 0);
            };
            ObjectBase.prototype.vm___callMethod = function (params) {
                var args = params.args;
                var methodName = args[0];
                var methodArgs = args[1];
                return params.proc.callObjectMethod(this, methodName, methodArgs);
            };
            ObjectBase.prototype.vmCall = function (targetMethod, proc, args) {
                var methodInfo = new VM.MethodInfo("vmCall");
                var self = this;
                var func = function (process) {
                    var callParams = new VM.CallParameters("", args, proc);
                    var returnValue = targetMethod.apply(self, [callParams]);
                    if (!proc.runner.paused) {
                        proc.pushValue(returnValue);
                    }
                };
                methodInfo.instructions = [{ opcode: "callFunc", data: func }, { opcode: "pop" }];
                proc.startMethod(this, methodInfo, args);
                return new VM.VMPromise(proc, methodInfo.instructions);
            };
            ObjectBase.prototype.callMethod = function (params) {
                var methodInfo = this.getPrototypeMethod(params.name);
                var proc = params.proc;
                if (methodInfo) {
                    proc.startMethod(this, methodInfo, params.args);
                    return;
                }
                var method = this["vm_" + params.name];
                var callingRunner = proc.runner;
                var returnValue;
                if (method) {
                    var args = [params].concat(params.args);
                    returnValue = method.apply(this, args);
                    if (!callingRunner.paused) {
                        proc.pushValue(returnValue);
                    }
                }
                else {
                    returnValue = this.callMissingMethod(params);
                    if (!callingRunner.paused) {
                        proc.pushValue(returnValue);
                    }
                }
            };
            ObjectBase.prototype.callSuperMethod = function (params) {
                if (this.myPrototype.base) {
                    var methodInfo = this.myPrototype.base.methods[params.name];
                    if (methodInfo) {
                        params.proc.startMethod(this, methodInfo, params.args);
                        return;
                    }
                }
                throw new VM.VMError({ name: "ReferenceError", message: "Super ReferenceError: " + params.name + " is not defined" });
            };
            ObjectBase.prototype.getMissingProperty = function (params) {
                throw new VM.VMError({ name: "ReferenceError", message: "ReferenceError: " + params.name + " is not defined" });
            };
            ObjectBase.prototype.setMissingProperty = function (params) {
                throw new VM.VMError({ name: "ReferenceError", message: "ReferenceError: " + params.name + " is not defined" });
            };
            ObjectBase.prototype.callMissingMethod = function (params) {
                throw new VM.VMError({ name: "ReferenceError", message: "Method ReferenceError: " + params.name + " is not defined" });
            };
            ObjectBase.prototype.callConstructor = function (done) {
                var self = this;
                if (this.myPrototype && this.myPrototype.constructorMethod) {
                    var proc = VM.createProcess();
                    if (done) {
                        proc.onException = function (e) {
                            done(e, self);
                        };
                        proc.onComplete = function () {
                            done(null, self);
                        };
                    }
                    else {
                        proc.sync = true;
                    }
                    proc.start({ methodInfo: this.myPrototype.constructorMethod, target: this });
                    return;
                }
                else {
                    if (done) {
                        done(null, self);
                    }
                }
            };
            return ObjectBase;
        })();
        VM.ObjectBase = ObjectBase;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var ObjectWithProperties = (function (_super) {
            __extends(ObjectWithProperties, _super);
            function ObjectWithProperties() {
                _super.apply(this, arguments);
                this.propertyValues = {};
            }
            ObjectWithProperties.prototype.getMissingProperty = function (params) {
                if (params.errorIfMissing) {
                    if (params.name in this.propertyValues) {
                        return this.propertyValues[params.name];
                    }
                    throw "ReferenceError: " + params.name + " is not defined";
                }
                return this.propertyValues[params.name];
            };
            ObjectWithProperties.prototype.setMissingProperty = function (params) {
                this.propertyValues[params.name] = params.value;
            };
            return ObjectWithProperties;
        })(VM.ObjectBase);
        VM.ObjectWithProperties = ObjectWithProperties;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var AsyncLauncher = (function (_super) {
            __extends(AsyncLauncher, _super);
            function AsyncLauncher() {
                _super.apply(this, arguments);
            }
            AsyncLauncher.prototype.callMissingMethod = function (params) {
                var child = params.proc.createChildProcess();
                var target = params.proc.currentCall.target;
                var methodInfo = target.getPrototypeMethod(params.name);
                if (methodInfo) {
                    child.start({ target: target, methodInfo: methodInfo, args: params.args });
                }
                else {
                    _super.prototype.callMissingMethod.call(this, params);
                }
            };
            return AsyncLauncher;
        })(VM.ObjectBase);
        VM.AsyncLauncher = AsyncLauncher;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var UserAppLocator = (function () {
        function UserAppLocator() {
            this._cache = {};
        }
        UserAppLocator.prototype.getFile = function (name) {
            return Retool.App.getFile("templates/" + name + ".app");
        };
        UserAppLocator.prototype.getDefinition = function (name) {
            var file = this.getFile(name);
            if (file) {
                return file.getContent();
            }
            return null;
        };
        UserAppLocator.prototype.getInstance = function (name, done) {
            var file = this.getFile(name);
            if (!file) {
                done("Unknown app: " + name);
                return;
            }
            if (!file.requiresCompile) {
                var instance = this._cache[name];
                if (instance) {
                    done(null, instance);
                    return;
                }
            }
            var dummyTemplate = {
                id: name + ".app",
                name: name,
                appName: name,
                sourceFile: file,
                definition: null
            };
            var self = this;
            var options = { initialValues: {} };
            Retool.ViewModel.createAsync(dummyTemplate, options, function (err, viewModel) {
                if (err) {
                    done(err);
                    return;
                }
                self._cache[name] = viewModel;
                done(null, viewModel);
                return;
            });
        };
        UserAppLocator.prototype.dump = function (name) {
            delete this._cache[name];
        };
        return UserAppLocator;
    })();
    Retool.UserAppLocator = UserAppLocator;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    /*
        one instance is created per user application
        holds application level data, etc.
    */
    var UserAppGlobal = (function (_super) {
        __extends(UserAppGlobal, _super);
        function UserAppGlobal(id) {
            _super.call(this, null);
            this.id = id;
        }
        UserAppGlobal.prototype.vm_get_app = function (params) {
            return this.viewModel;
        };
        UserAppGlobal.prototype._getHints = function () {
            return [
                { text: "app" },
                { include: "models", data: this.id }
            ];
        };
        return UserAppGlobal;
    })(Retool.VM.ObjectBase);
    Retool.UserAppGlobal = UserAppGlobal;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Page = (function () {
        function Page() {
        }
        Page.scrollTop = function () {
            if (window.pageYOffset) {
                return window.pageYOffset;
            }
            else {
                return document.documentElement.scrollTop;
            }
        };
        Page.scrollLeft = function () {
            if (window.pageXOffset) {
                return window.pageXOffset;
            }
            else {
                return document.documentElement.scrollLeft;
            }
        };
        Page.getDropListPosition = function (inputElem, dropListElem) {
            var inDesigner = $(inputElem).closest('#rto-designer-bar').length > 0;
            var scrollTop = (inDesigner) ? 0 : Page.scrollTop();
            var sp = Page.getElementScreenPosition(inputElem);
            var y = sp.y + $(inputElem).outerHeight();
            var winSize = Page.getWindowSize();
            var pos = { left: sp.x, top: y, above: false };
            if ((y - scrollTop + dropListElem.offsetHeight) > (winSize.height - 35)) {
                pos.top = sp.y - dropListElem.offsetHeight + 2;
                pos.above = true;
            }
            if ($(inputElem).closest('#rto-footer').length) {
                var footer = $('#rto-footer')[0];
                var footerPos = Page.getElementPosition(footer);
                pos.top -= footerPos.y;
                pos.left -= footerPos.x;
            }
            return pos;
        };
        Page.getElementPosition = function (elem) {
            var coords = { x: 0, y: 0, bottom: 0, right: 0, midx: 0, midy: 0 };
            var inDesigner = $(elem).closest('#rto-designer-bar').length > 0;
            var e = elem;
            if (e.getBoundingClientRect) {
                var bound = e.getBoundingClientRect();
                coords.x = bound.left - document.documentElement.clientLeft;
                coords.y = bound.top - document.documentElement.clientTop;
                e = e.parentNode;
                while (e && e != document.documentElement && e != document.body) {
                    coords.x += e.scrollLeft;
                    coords.y += e.scrollTop;
                    e = e.parentNode;
                }
                if (!inDesigner) {
                    coords.x += Page.scrollLeft();
                    coords.y += Page.scrollTop();
                }
            }
            else {
                while (e) {
                    coords.x += e.offsetLeft;
                    coords.y += e.offsetTop;
                    e = e.offsetParent;
                }
            }
            coords.bottom = coords.y + elem.offsetHeight;
            coords.right = coords.x + elem.offsetWidth;
            coords.centerX = coords.x + Math.round(elem.offsetWidth / 2);
            coords.centerY = coords.y + Math.round(elem.offsetHeight / 2);
            return coords;
        };
        Page.getElementScreenPosition = function (e) {
            var coords = Page.getElementPosition(e);
            while (e && e != document.body && e != document.documentElement) {
                if (e.scrollTop) {
                    coords.y -= e.scrollTop;
                }
                if (e.scrollLeft) {
                    coords.x -= e.scrollLeft;
                }
                e = e.parentNode;
            }
            return coords;
        };
        Page.getWindowSize = function () {
            var dimen = {};
            var win = window;
            if (win.clientHeight) {
                dimen.height = win.clientHeight;
                dimen.width = win.clientWidth;
            }
            else if (win.innerHeight) {
                dimen.height = win.innerHeight;
                dimen.width = win.innerWidth;
            }
            else {
                dimen.height = document.documentElement.clientHeight;
                dimen.width = document.documentElement.clientWidth;
            }
            return dimen;
        };
        Page.getElementRelativePosition = function (elem, referenceElem) {
            var myPos = Page.getElementPosition(elem);
            var basePos = Page.getElementPosition(referenceElem);
            var coords = {};
            coords.x = myPos.x - basePos.x;
            coords.y = myPos.y - basePos.y;
            return coords;
        };
        Page.scrollElementIntoView = function (elem, container) {
            var relPos = Page.getElementRelativePosition(elem, container);
            var top = relPos.y;
            var ht = elem.offsetHeight;
            if ((top < container.scrollTop) || (top + ht) > (container.scrollTop + container.offsetHeight)) {
                var newScrollTop = 0;
                if (top < container.scrollTop) {
                    newScrollTop = top;
                }
                else {
                    newScrollTop = top - container.offsetHeight + ht;
                }
                container.scrollTop = newScrollTop;
            }
        };
        Page.calcPagePosition = function (elem, x, y) {
            var inDesigner = $(elem).closest('#rto-designer-bar').length > 0;
            if (inDesigner) {
                return { x: x - Page.scrollLeft(), y: y - Page.scrollTop() };
            }
            else {
                return { x: x, y: y };
            }
        };
        return Page;
    })();
    Retool.Page = Page;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var PageTour = (function () {
        function PageTour() {
            this.steps = [];
        }
        PageTour.prototype.addStep = function (id, tourtext) {
            var lines = tourtext.split('\n');
            if (lines.length) {
                var title = lines[0];
                this.steps.push({ id: id, title: title, tourtext: tourtext });
            }
        };
        PageTour.show = function () {
            /*
            var tb = new PageTour();
            tb.build(activeController);
            tb.render();
            */
        };
        PageTour.prototype.build = function (viewModel) {
            /*
            this.buildForElement(controller, controller.view.rootElement);
            if (this.steps.length == 0){
                this.addStep("","You are on your own.\nNo tour is available for this page yet.")
            }
            */
        };
        PageTour.prototype.buildForElement = function (viewModel, element) {
            /*
            if (element.tourtext){
                if (element.tourelement){
                    this.addStep(element.tourelement,element.tourtext);
                }
                else {
                    var component = controller.findComponentByDefinitionId(element.id);
                    if (!component){
                        this.addStep("",element.tourtext);
                    }
                    else {
                        this.addStep(component.getElementId(),element.tourtext);
                    }
                }
                
            }
            if (element.children){
                for (var i = 0;i < element.children.length;i++){
                    this.buildForElement(controller, element.children[i]);
                }
            }
            */
        };
        PageTour.prototype.render = function () {
            var w = new Retool.Writer();
            var tourElementId = "retool-page-tour";
            w.write('<ol').writeAttr("id", tourElementId).writeAttr("style", "display:none").write('>');
            for (var i = 0; i < this.steps.length; i++) {
                var step = this.steps[i];
                var btnText = "Close";
                if ((i + 1) < this.steps.length) {
                    var nextStep = this.steps[i + 1];
                    if (nextStep.title) {
                        btnText = "Next: " + nextStep.title;
                    }
                    else {
                        btnText = "Next";
                    }
                }
                w.write('<li').writeAttr("data-id", step.id).writeAttr("data-text", btnText).writeAttr("data-options", "tipAnimation:fade").writeAttr("class", "retool-custom").write('>');
                w.write('<h2>').text(step.title).write('</h2>');
                var lines = step.tourtext.split('\n');
                w.write('<p>');
                for (var lineNo = 1; lineNo < lines.length; lineNo++) {
                    if (lineNo > 1) {
                        w.write('<br>');
                    }
                    w.text(lines[lineNo]);
                }
                w.write('</p>');
                w.write('</li>');
            }
            w.write('</ol>');
            $('#' + tourElementId).remove();
            $(window).off('.joyride');
            $(document).off('.joyride');
            $('.joyride-tip-guide').remove();
            w.appendToElement('body');
            $('#' + tourElementId).joyride({ 'tipLocation': 'top' });
        };
        PageTour.hide = function () {
            var tourElementId = "retool-page-tour";
            var elem = $('#' + tourElementId);
            if (elem.length) {
                $(window).off('.joyride');
                elem.remove();
                $('.joyride-tip-guide').remove();
            }
        };
        return PageTour;
    })();
    Retool.PageTour = PageTour;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Sorter = (function () {
        function Sorter() {
        }
        Sorter.sortedKeys = function (keySet) {
            var list = [];
            for (var key in keySet) {
                list.push(key);
            }
            list.sort();
            var sortedSet = {};
            for (var i = 0; i < list.length; i++) {
                sortedSet[list[i]] = 1;
            }
            return sortedSet;
        };
        return Sorter;
    })();
    Retool.Sorter = Sorter;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var Global = (function (_super) {
            __extends(Global, _super);
            function Global() {
                _super.apply(this, arguments);
            }
            Global.prototype.vm_isObject = function (params) {
                var x = params.args[0];
                return Global.isObject(x);
            };
            Global.isObject = function (x) {
                return typeof x === "object" && x !== null;
            };
            Global.prototype.vm_isArray = function (params) {
                var x = params.args[0];
                return Global.isArray(x);
            };
            Global.isArray = function (x) {
                return $.isArray(x);
            };
            Global.prototype.vm_alert = function (params) {
                alert(params.args[0]);
            };
            Global.prototype.vm_get_window = function (params) {
                return window;
            };
            Global.prototype.vm_get_async = function (params) {
                return new VM.AsyncLauncher(null);
            };
            Global.prototype.vm_encodeURIComponent = function (params) {
                return encodeURIComponent(params.getIndex(0));
            };
            Global.prototype.vm_get_$$app = function (params) {
                if (Retool.App.layoutView) {
                    return new VM.VMComponent(Retool.App.layoutView);
                }
                return null;
            };
            Global.prototype.vm_get_$$main = function (params) {
                if (Retool.App.contentView) {
                    return new VM.VMComponent(Retool.App.contentView);
                }
            };
            Global.prototype.vm_get_$$modal = function (params) {
                if (Retool.App.modalView) {
                    return new VM.VMComponent(Retool.App.modalView);
                }
            };
            return Global;
        })(VM.ObjectBase);
        VM.Global = Global;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var VMDate = (function () {
            function VMDate() {
                this.__native = Date;
            }
            VMDate.prototype.now = function () {
                return Date.now();
            };
            VMDate.prototype.today = function () {
                return new Date();
            };
            VMDate.prototype.UTC = function (year, month, date, hrs, min, sec, ms) {
                return Date.UTC(year, month, date, hrs, min, sec, ms);
            };
            VMDate.prototype.format = function (value, formatString) {
                return Retool.DateFormatter.format(value, formatString);
            };
            VMDate.prototype.addDays = function (baseDate, numDays) {
                var ms = baseDate.getTime() + (86400000 * numDays);
                return new Date(ms);
            };
            VMDate.prototype.toDuration = function (value) {
                return Retool.DateFormatter.formatISOAsDuration(value);
            };
            VMDate.prototype.toDescriptiveDate = function (value) {
                var d = Retool.DateFormatter.parseISODate(value);
                var now = new Date();
                if (d) {
                    var today = Retool.DateFormatter.formatDateTime(now, { dateOnly: true });
                    var formatted = Retool.DateFormatter.formatDateTime(d, { dateOnly: true });
                    if (formatted == today) {
                        return "Today";
                    }
                    var yesterday = this.addDays(now, -1);
                    if (formatted == Retool.DateFormatter.formatDateTime(yesterday, { dateOnly: true })) {
                        return "Yesterday";
                    }
                    var v = Retool.DateFormatter.getDayName(d.getDay()) + ", " + Retool.DateFormatter.getMonthName(d.getMonth()) + " ";
                    var date = d.getDate().toString();
                    var n = date.length - 1;
                    if (date[n] == "1") {
                        v += date + "st";
                    }
                    else if (date[n] == "2") {
                        v += date + "nd";
                    }
                    else if (date[n] == "3") {
                        v += date + "rd";
                    }
                    else {
                        v += date + "th";
                    }
                    v += ", " + d.getFullYear();
                    return v;
                }
                return "";
            };
            VMDate.prototype.toTime = function (value) {
                return Retool.DateFormatter.formatDateTime(value, { timeOnly: true });
            };
            VMDate.prototype._getHints = function () {
                return [
                    { text: "now", parameters: "()" },
                    { text: "today", parameters: "()" },
                    { text: "UTC", parameters: "()" },
                    { text: "format", parameters: "()" },
                    { text: "addDays", parameters: "()" },
                    { text: "toDuration", parameters: "()" },
                    { text: "toDescriptiveDate", parameters: "()" },
                    { text: "toTime", parameters: "()" }
                ];
            };
            return VMDate;
        })();
        VM.VMDate = VMDate;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var VMNumber = (function () {
            function VMNumber() {
                this.__native = Number;
            }
            VMNumber.prototype.format = function (value, formatString) {
                return Retool.NumberFormatter.format(value, formatString);
            };
            VMNumber.prototype.parseInt = function (value) {
                return parseInt(value, 10);
            };
            VMNumber.prototype.parse = function (value) {
                return Retool.StringHelper.parseNumber(value);
            };
            VMNumber.prototype._getHints = function () {
                return [
                    { text: "format", parameters: "()" },
                    { text: "parseInt", parameters: "()" },
                    { text: "parse", parameters: "()" }
                ];
            };
            return VMNumber;
        })();
        VM.VMNumber = VMNumber;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var VMComponent = (function (_super) {
            __extends(VMComponent, _super);
            function VMComponent(c) {
                _super.call(this, null);
                this.component = c;
            }
            VMComponent.prototype.getMissingProperty = function (params) {
                if (params.name[0] == "$") {
                    if (this.component) {
                        var c = this.component.findComponentByName(params.name.substr(1), -1);
                        if (c) {
                            return new VM.VMComponent(c);
                        }
                    }
                }
                return _super.prototype.getMissingProperty.call(this, params);
            };
            VMComponent.prototype.vm_hide = function (params) {
                if (this.component) {
                    this.component.localData.dynamicCss = true;
                    this.component.localData.forceState = "hidden";
                }
                /*
                var outletHelper = <Helpers.Outlet>outlet.helper;
                outletHelper.hide(outlet);
                */
            };
            VMComponent.prototype.vm_show = function (params) {
                var arg = params.getIndex(0);
                var proc = params.proc;
                this.show(arg);
            };
            VMComponent.prototype.show = function (arg) {
                if (this.component) {
                    if (this.component.attr.role == "tabpanel") {
                        Retool.Helpers.RoleHandler.activateTab(this.component);
                        return;
                    }
                    this.component.localData.dynamicCss = true;
                    this.component.localData.forceState = "visible";
                    var elem = this.component.getElement();
                    elem.show();
                    if (arg) {
                        if (arg.text) {
                            elem.text(arg.text);
                        }
                        if (arg.css) {
                            this.component.localData.css = arg.css;
                        }
                        if (arg.fadeOut) {
                            elem.delay(arg.fadeOut).fadeOut(1000);
                        }
                    }
                }
            };
            VMComponent.prototype.vm_nav = function (params) {
                if (this.component) {
                    var proc = params.proc;
                    var templateName = params.getIndex(0);
                    var templateParams = params.getIndex(1);
                    var options = params.getIndex(2) || {};
                    this.show(null);
                    if (templateName) {
                        this.nav(proc, templateName, templateParams, options);
                    }
                }
            };
            VMComponent.prototype.nav = function (proc, templateName, templateParams, options) {
                this.show(null);
                var c = this.component;
                var template = Retool.App.templates.get(templateName);
                if (!template) {
                    throw new VM.VMError("Cannot find template: " + templateName);
                }
                if (c && c.helper instanceof Retool.Helpers.Outlet) {
                    var outletHelper = c.helper;
                    outletHelper.navigate(c, { template: template, params: templateParams }, function done() {
                    });
                    return;
                }
                throw new VM.VMError("Can only display template in modal,outlet or view");
            };
            VMComponent.prototype.vm_focus = function (params) {
                if (this.component) {
                    $('#' + this.component.getElementId() + " input:visible:enabled:first").focus().select();
                }
            };
            VMComponent.prototype.vm_toggle = function (params) {
                if (this.component) {
                    var helper = this.component.helper;
                    if (helper) {
                        var css = helper.getCssClass(this.component);
                        if (this.component.containsClassname(css, "hidden")) {
                            this.component.localData.forceState = "visible";
                        }
                        else {
                            this.component.localData.forceState = "hidden";
                        }
                    }
                }
            };
            VMComponent.prototype.vm_attr = function (params) {
                if (this.component) {
                    var name = params.getIndex(0);
                    return this.component.attr[name];
                }
                return null;
            };
            VMComponent.prototype.vm_get_template = function (params) {
                if (this.component) {
                    if (this.component instanceof Retool.LayoutView) {
                        if (Retool.App.page.url) {
                            return { pod: Retool.App.page.url.appName, name: Retool.App.page.url.templateName };
                        }
                    }
                    else {
                        var template = this.component.context.viewModel.template;
                        if (template) {
                            return { pod: template.appName, name: template.name };
                        }
                    }
                }
                return null;
            };
            VMComponent.prototype._getHints = function () {
                var out = [
                    { text: "attr", parameters: "(name)" },
                    { text: "focus", parameters: "()" },
                    { text: "hide", parameters: "()" },
                    { text: "nav", parameters: "(template,params,options)" },
                    { text: "show", parameters: "(options)" },
                    { text: "toggle", parameters: "(options)" }
                ];
                return out;
            };
            VMComponent.prototype.vm_get_context = function (params) {
                return this.component.context;
            };
            return VMComponent;
        })(VM.ObjectBase);
        VM.VMComponent = VMComponent;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var VMError = (function (_super) {
            __extends(VMError, _super);
            function VMError(arg) {
                _super.call(this, null);
                this.messages = [];
                this.name = "unspecified_user_error";
                this.initialize(arg);
            }
            VMError.prototype.toJSON = function () {
                return { messages: this.messages, script_stack: this.script_stack, jsStack: this.jsStack, fields: this.fields, name: this.name, catchable: this.catchable, title: this.title, source: this.source };
            };
            VMError.cast = function (arg) {
                if (arg instanceof VMError) {
                    return arg;
                }
                else {
                    return new VMError(arg);
                }
            };
            VMError.prototype.initialize = function (arg) {
                if (!arg) {
                    return;
                }
                if (typeof arg == "string" || typeof arg == "number") {
                    this.messages = [arg];
                }
                else if (arg instanceof Error) {
                    this.messages = [arg.toString()];
                    this.jsStack = arg.stack;
                }
                else {
                    if (arg.messages) {
                        this.messages = arg.messages;
                    }
                    else if (arg.message) {
                        this.messages = [arg.message];
                    }
                    if (arg.title) {
                        this.title = arg.title;
                    }
                    if (arg.fields) {
                        this.fields = arg.fields;
                        this.formatFields();
                    }
                    if (arg.name) {
                        this.name = arg.name;
                    }
                    else if (arg.code) {
                        this.name = arg.code;
                    }
                    if (arg.catchable) {
                        this.catchable = arg.catchable;
                    }
                    if (arg.jsStack) {
                        this.jsStack = arg.jsStack;
                    }
                }
            };
            VMError.fromResponse = function (data) {
                var error = new VMError();
                error.messages = data.error.messages;
                error.fields = data.error.fields;
                error.name = data.error.name;
                error.source = data.error.source;
                error.script_stack = data.error.script_stack;
                if (error.script_stack && error.script_stack.items) {
                    var items = error.script_stack.items;
                    var k = items.length;
                    while (k--) {
                        items[k].source = "server";
                    }
                }
                return error;
            };
            VMError.prototype.formatFields = function () {
                if (this.fields) {
                    for (var key in this.fields) {
                        var value = this.fields[key];
                        if (!Array.isArray(value)) {
                            if (typeof value == "string" || typeof value == "number") {
                                this.fields[key] = [value];
                            }
                            else {
                                this.fields[key] = [value.toString()];
                            }
                        }
                    }
                }
            };
            VMError.prototype.vm_constructor = function (params) {
                var arg = params.args[0];
                this.initialize(arg);
            };
            VMError.prototype.vm_set_message = function (params) {
                if (params.value) {
                    this.messages = params.value.split('\n');
                }
                else {
                    this.messages = [];
                }
            };
            VMError.prototype.vm_get_message = function (params) {
                return this.messages.join('\n');
            };
            VMError.prototype.vm_get_messages = function (params) {
                return this.messages;
            };
            VMError.prototype.vm_set_messages = function (params) {
                this.messages = params.value;
            };
            VMError.prototype.vm_get_stack = function (params) {
                return this.script_stack;
            };
            VMError.prototype.vm_get_fields = function (params) {
                return this.fields;
            };
            VMError.prototype.vm_get_name = function (params) {
                return this.name;
            };
            VMError.prototype.vm_set_name = function (params) {
                this.name = params.value;
            };
            VMError.prototype.addElementSource = function (attr) {
                if (!this.source) {
                    this.source = {};
                }
                var src = this.source;
                src.type = "element";
                src.id = attr.id;
                src.codeText = "";
                src.codeLink = "<" + attr.kind + "> ELEMENT";
                if (attr._compiled) {
                    src.filename = attr._compiled._src;
                    if (this.script_stack && this.script_stack.items && this.script_stack.items.length) {
                        // set the info on the outer most stack item
                        var stackItem = this.script_stack.items[this.script_stack.items.length - 1];
                        stackItem.filename = src.filename;
                        stackItem.elementId = attr.id;
                    }
                }
            };
            return VMError;
        })(VM.ObjectBase);
        VM.VMError = VMError;
        VM.addType("Error", VMError, null);
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var Alert = (function (_super) {
            __extends(Alert, _super);
            function Alert(myPrototype) {
                _super.call(this, myPrototype);
            }
            Alert.prototype.vm_success = function (params) {
                this.showMsg(params, "success");
            };
            Alert.prototype.vm_danger = function (params) {
                this.showMsg(params, "danger");
            };
            Alert.prototype.vm_warning = function (params) {
                this.showMsg(params, "warning");
            };
            Alert.prototype.vm_info = function (params) {
                this.showMsg(params, "info");
            };
            Alert.prototype.showMsg = function (params, css) {
                var msg;
                if (params.args.length) {
                    msg = params.args[0];
                }
                var w = new Retool.Writer();
                w.writeTag("div", "alert " + "alert-" + css);
                w.write('<button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>');
                w.prettyText(msg);
                w.write('</div>');
                Retool.App.layoutView.getContentElement().prepend('<div class="container">' + w.getStream() + '</div>');
            };
            return Alert;
        })(VM.ObjectBase);
        VM.Alert = Alert;
        VM.addType("Alert", Alert, new Alert(null));
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SystemCollection = (function (_super) {
        __extends(SystemCollection, _super);
        function SystemCollection() {
            _super.call(this, null);
        }
        SystemCollection.prototype.getMissingProperty = function (params) {
            if (!this.typeName) {
                this.typeName = params.name;
            }
            return this;
        };
        SystemCollection.prototype.callMissingMethod = function (params) {
            var modelId = "system." + this.typeName;
            var async = params.proc.pause();
            Retool.Model.serverStaticCall(modelId, params.name, params.args, async);
        };
        return SystemCollection;
    })(Retool.VM.ObjectBase);
    Retool.SystemCollection = SystemCollection;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    Retool.VM.addType("Math", Math, Math);
    Retool.VM.addType("Date", Date, new Retool.VM.VMDate());
    Retool.VM.addType("JSON", null, JSON);
    Retool.VM.addType("Number", Retool.VM.VMNumber, new Retool.VM.VMNumber());
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var Page = (function (_super) {
            __extends(Page, _super);
            function Page() {
                _super.call(this, null);
            }
            Page.prototype.getMissingProperty = function (params) {
                if (params.name[0] == "$") {
                    var c = Retool.App.layoutView.findComponentByName(params.name.substr(1), -1);
                    if (c) {
                        return new VM.VMComponent(c);
                    }
                }
                return _super.prototype.getMissingProperty.call(this, params);
            };
            Page.prototype._getHints = function () {
                var list = [];
                list.push({ text: "flash", parameters: "(msg,options)" });
                list.push({ text: "nav", parameters: "(template,params,options" });
                list.push({ text: "modal", parameters: "(template,params,options)" });
                return list;
            };
            Page.prototype.vm_nav = function (params) {
                var proc = params.proc;
                var templateName = params.getIndex(0);
                var templateParams = params.getIndex(1);
                var options = params.getIndex(2) || {};
                var redirectOptions = {};
                redirectOptions.url = new Retool.Url({ template: templateName, query: options });
                Retool.App.contentView.redirect(null, redirectOptions);
            };
            Page.prototype.vm_modal = function (params) {
                var args = params.getArgs("template", "templateParams", "options");
                var modal = Retool.App.modalView;
                var template = Retool.App.templates.get(args.template);
                if (!template) {
                    throw new VM.VMError("Invalid template name: " + args.template);
                }
                var async = params.proc.pause();
                modal.render({ template: template, params: args.templateParams }, function done() {
                    modal.context.viewModel.modalProcess = async;
                    modal.show(args.options || {});
                });
            };
            Page.prototype.vm_flash = function (params) {
                var c = Retool.App.layoutView.findComponentByName("flash", -1);
                if (!c) {
                    return;
                }
                var msg = params.getIndex(0);
                var options = params.getIndex(1) || {};
                c.localData.dynamicCss = true;
                c.localData.forceState = "visible";
                var elem = c.getElement();
                if (msg) {
                    elem.show();
                    elem.text(msg);
                    if (options.css) {
                        c.localData.css = options.css;
                    }
                    if (options.fadeOut) {
                        elem.delay(options.fadeOut).fadeOut(1000);
                    }
                }
                else {
                    elem.hide();
                }
            };
            Page.prototype.vm_get_username = function (params) {
                return Retool.App.username;
            };
            return Page;
        })(VM.ObjectBase);
        VM.Page = Page;
        VM.addType("Page", null, new Page());
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var Events = (function (_super) {
            __extends(Events, _super);
            function Events() {
                _super.call(this, null);
            }
            Events.prototype._getHints = function () {
                var list = [];
                list.push({ text: "trigger", parameters: "(eventName,params)" });
                return list;
            };
            Events.prototype.vm_trigger = function (params) {
                var view = Retool.App.layoutView;
                var a = params.getArgs("name");
                if (params.args.length > 1) {
                    a.args = params.args.slice(1);
                }
                var event = new Retool.ComponentEvent(view, null);
                view.publishAppEvent(a.name, event, a.args);
            };
            return Events;
        })(VM.ObjectBase);
        VM.Events = Events;
        VM.addType("Events", null, new Events());
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ControllerStatic = (function (_super) {
        __extends(ControllerStatic, _super);
        function ControllerStatic(def) {
            _super.call(this, null);
            this.def = def;
        }
        ControllerStatic.prototype.callMissingMethod = function (params) {
            var proc = params.proc;
            if (proc.isCodeComplete) {
                return null;
            }
            var args = params.args;
            var async = proc.pause();
            ControllerStatic.serverStaticCall(this.def.name, params.name, args, async);
        };
        ControllerStatic.prototype._getHints = function () {
            var sourceCode = this.def.source_code;
            var hints = Retool.App.ide.getMethodHints(sourceCode, {});
            return hints;
        };
        ControllerStatic.serverStaticCall = function (controllerName, method, args, async) {
            Retool.Model.execServerCall("controllers." + controllerName, method, null, args, async);
        };
        return ControllerStatic;
    })(Retool.VM.ObjectBase);
    Retool.ControllerStatic = ControllerStatic;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ControllerLocator = (function () {
        function ControllerLocator() {
            this._filePath = Retool.FileSystem.FilePath.forType(2 /* Controller */);
            this._ext = Retool.FileSystem.FilePath.DEFAULT_FILE_EXTENSION;
        }
        ControllerLocator.prototype.getFile = function (name) {
            var filename = this.getFilename(name);
            if (filename) {
                return Retool.App.getFile(filename);
            }
            return null;
        };
        ControllerLocator.prototype.getDefinition = function (name) {
            var file = this.getFile(name);
            if (file) {
                return file.getContent();
            }
            return null;
        };
        ControllerLocator.prototype.get = function (controllerId) {
            return this.getDefinition(controllerId);
        };
        ControllerLocator.prototype.getFilename = function (name) {
            if (name) {
                return this._filePath + "/" + name + this._ext;
            }
            return null;
        };
        ControllerLocator.prototype.getFolderName = function () {
            return this._filePath;
        };
        return ControllerLocator;
    })();
    Retool.ControllerLocator = ControllerLocator;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var FormatTokenStream = (function () {
        function FormatTokenStream(value, tokenChars) {
            this.source = value;
            this.tokenChars = tokenChars;
            this.index = 0;
            this.tokens = [];
            this.sLen = value.length;
            var ch;
            while (this.index < this.sLen) {
                ch = value[this.index];
                if (tokenChars.indexOf(ch) != -1) {
                    this.parseToken();
                }
                else {
                    this.parseLiteral();
                }
            }
        }
        FormatTokenStream.prototype.parseToken = function () {
            var ch = this.source[this.index++];
            var token = ch;
            while (this.index < this.sLen && this.source[this.index] == ch) {
                token += ch;
                this.index++;
            }
            this.tokens.push(token);
        };
        FormatTokenStream.prototype.parseLiteral = function () {
            var token = "";
            while (this.index < this.sLen) {
                var ch = this.source[this.index];
                if (this.tokenChars.indexOf(ch) != -1) {
                    break;
                }
                token += ch;
                this.index++;
            }
            this.tokens.push(token);
        };
        return FormatTokenStream;
    })();
    Retool.FormatTokenStream = FormatTokenStream;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var StringHelper = (function () {
        function StringHelper() {
        }
        StringHelper.padZero = function (value, len) {
            var count = len - value.length;
            if (count <= 0) {
                return value;
            }
            else {
                for (var i = 1; i <= count; i++) {
                    value = '0' + value;
                }
                return value;
            }
        };
        StringHelper.parseNumber = function (v) {
            if (!v) {
                return 0;
            }
            if (typeof v == "number") {
                return v;
            }
            var s = '';
            var c = '';
            var isNegative = false;
            for (var i = 0; i < v.length; i++) {
                c = v.charAt(i);
                if (((c >= '0') && (c <= '9')) || (c == '.') || (c == '-')) {
                    s += c;
                }
                else if (c == '(') {
                    isNegative = true;
                }
            }
            if (isNegative) {
                s = '-' + s;
            }
            return parseFloat(s);
        };
        StringHelper.trim = function (value) {
            return value.replace(/^\s+|\s+$/g, '');
        };
        StringHelper.endsWith = function (value, test) {
            if (value.length >= test.length && value.substr(value.length - test.length) == test) {
                return true;
            }
            return false;
        };
        return StringHelper;
    })();
    Retool.StringHelper = StringHelper;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var DateFormatter = (function () {
        function DateFormatter() {
        }
        DateFormatter.setFormat = function (format) {
            DateFormatter.defaultFormat = format;
            var tokenStream = DateFormatter.getTokenStream(format);
            var position = 0;
            for (var i = 0; i < tokenStream.tokens.length; i++) {
                var token = tokenStream.tokens[i];
                if (token[0] == "d") {
                    DateFormatter.dayPosition = position;
                    position++;
                }
                else if (token[0] == "m") {
                    DateFormatter.monthPosition = position;
                    position++;
                }
                else if (token[0] == "y") {
                    DateFormatter.yearPosition = position;
                    position++;
                }
            }
        };
        DateFormatter.getTokenStream = function (format) {
            var t = DateFormatter.cache[format];
            if (t)
                return t;
            t = new Retool.FormatTokenStream(format, DateFormatter.tokenChars);
            DateFormatter.cache[format] = t;
            return t;
        };
        DateFormatter.formatDateTime = function (value, options) {
            if (!value)
                return "";
            var d = DateFormatter.parseISODate(value);
            if (d) {
                var datePortion = DateFormatter.applyFormat(d, DateFormatter.defaultFormat);
                if (options && options.dateOnly) {
                    return datePortion;
                }
                var hours = d.getHours();
                var timePortion;
                var minutesText = Retool.StringHelper.padZero(d.getMinutes().toString(), 2);
                if (hours == 0) {
                    timePortion = "12:" + minutesText;
                }
                else if (hours > 12) {
                    timePortion = (hours - 12) + ":" + minutesText;
                }
                else {
                    timePortion = hours + ":" + minutesText;
                }
                if (hours >= 12) {
                    timePortion += " PM";
                }
                else {
                    timePortion += " AM";
                }
                if (options && options.timeOnly) {
                    return timePortion;
                }
                return datePortion + " " + timePortion;
            }
            return "";
        };
        DateFormatter.format = function (value, formatString) {
            if (!value) {
                return "";
            }
            var d = DateFormatter.parseISODate(value);
            if (d) {
                return DateFormatter.applyFormat(d, formatString || DateFormatter.defaultFormat);
            }
            else {
                return "";
            }
        };
        DateFormatter.applyFormat = function (date, format) {
            var tokenStream = DateFormatter.getTokenStream(format);
            var s = "";
            var d = date.getUTCDate();
            var m = date.getUTCMonth() + 1;
            var y = date.getUTCFullYear();
            var h = date.getHours();
            var w = date.getDay();
            var a = "am";
            if (h > 12) {
                a = "pm";
                h = h - 12;
            }
            else if (h == 0) {
                h = 12;
            }
            var n = date.getMinutes();
            for (var i = 0; i < tokenStream.tokens.length; i++) {
                switch (tokenStream.tokens[i]) {
                    case "d":
                        s += d;
                        break;
                    case "dd":
                        s += (d >= 10) ? d.toString() : "0" + d;
                        break;
                    case "m":
                        s += m;
                        break;
                    case "mm":
                        s += (m >= 10) ? m.toString() : "0" + m;
                        break;
                    case "mmm":
                        s += DateFormatter.getMonthName(m - 1).substr(0, 3);
                        break;
                    case "mmmm":
                        s += DateFormatter.getMonthName(m - 1);
                        break;
                    case "yyyy":
                        s += y;
                        break;
                    case "yy":
                        s += (y % 100);
                        break;
                    case "h":
                        s += h;
                        break;
                    case "hh":
                        s += (h >= 10) ? h.toString() : "0" + h;
                        break;
                    case "n":
                    case "nn":
                        s += (n >= 10) ? n.toString() : "0" + n;
                        break;
                    case "w":
                        s += DateFormatter.getDayName(w).substr(0, 3);
                        break;
                    case "ww":
                        s += DateFormatter.getDayName(w);
                        break;
                    case "a":
                        s += a;
                        break;
                    default:
                        s += tokenStream.tokens[i];
                        break;
                }
            }
            return s;
        };
        DateFormatter.parseDateTimeFromInput = function (value) {
            if (!value) {
                return null;
            }
            ;
            if (value instanceof Date) {
                return value;
            }
            var segments = value.split(/\W+/);
            if (segments.length < 3) {
                return null;
            }
            var month = parseInt(segments[DateFormatter.monthPosition], 10);
            if (!isFinite(month) || month < 1 || month > 12) {
                return null;
            }
            var day = parseInt(segments[DateFormatter.dayPosition], 10);
            if (!isFinite(day) || day < 1 || day > 31) {
                return null;
            }
            var year = parseInt(segments[DateFormatter.yearPosition], 10);
            if (!isFinite(year)) {
                return null;
            }
            if (year < 40) {
                year += 2000;
            }
            else if (year < 100) {
                year += 1900;
            }
            var hour = 0;
            var minutes = 0;
            var explicitAM = false;
            var explicitPM = false;
            if (segments.length > 3) {
                hour = parseInt(segments[3], 10);
                if (!isFinite(hour) || hour < 0 || hour > 23) {
                    return null;
                }
            }
            if (segments.length > 4) {
                var minutesSegment = segments[4];
                var i = minutesSegment.indexOf('a');
                if (i != -1) {
                    minutesSegment = minutesSegment.substr(0, i);
                    explicitAM = true;
                }
                else {
                    i = minutesSegment.indexOf('p');
                    if (i != -1) {
                        minutesSegment = minutesSegment.substr(0, i);
                        explicitPM = true;
                    }
                }
                minutes = parseInt(minutesSegment, 10);
                if (!isFinite(minutes) || minutes < 0 || minutes > 59) {
                    return null;
                }
            }
            if (!explicitAM && !explicitPM && segments.length > 5) {
                // check am/pm
                if (segments[5][0].toLowerCase() == "p") {
                    explicitPM = true;
                }
                else if (segments[5][0].toLowerCase() == "a") {
                    explicitAM = true;
                }
                else {
                    // unknown  (not am or pm)
                    return null;
                }
            }
            if (explicitPM) {
                if (hour > 12) {
                    return null;
                }
                if (hour < 12) {
                    hour += 12;
                }
            }
            else if (explicitAM) {
                if (hour > 12) {
                    return null;
                }
                if (hour == 12) {
                    hour = 0;
                }
            }
            return new Date(year, month - 1, day, hour, minutes, 0, 0);
        };
        DateFormatter.parseDateFromInput = function (value) {
            if (!value)
                return null;
            if (value instanceof Date) {
                return value;
            }
            var segments = value.split(/\W+/);
            var today = new Date();
            var day;
            var month;
            var year;
            if (segments.length == 1) {
                // assume entered only day of month
                day = parseInt(segments[0], 10);
                if (isFinite(day) && day > 0 && day <= 31) {
                    return new Date(Date.UTC(today.getFullYear(), today.getMonth(), day));
                }
                else {
                    return null;
                }
            }
            else if (segments.length == 2) {
                // assume entered month and day
                if (DateFormatter.monthPosition < DateFormatter.dayPosition) {
                    month = parseInt(segments[0], 10);
                    day = parseInt(segments[1], 10);
                }
                else {
                    month = parseInt(segments[1], 10);
                    day = parseInt(segments[0], 10);
                }
                if (!isFinite(month) || month < 1 || month > 12) {
                    return null;
                }
                if (!isFinite(day) || day < 1 || day > 31) {
                    return null;
                }
                return new Date(Date.UTC(today.getFullYear(), month - 1, day));
            }
            else {
                month = parseInt(segments[DateFormatter.monthPosition], 10);
                if (!isFinite(month) || month < 1 || month > 12) {
                    return null;
                }
                day = parseInt(segments[DateFormatter.dayPosition], 10);
                if (!isFinite(day) || day < 1 || day > 31) {
                    return null;
                }
                year = parseInt(segments[DateFormatter.yearPosition], 10);
                if (!isFinite(year)) {
                    return null;
                }
                if (year < 40) {
                    year += 2000;
                }
                else if (year < 100) {
                    year += 1900;
                }
                return new Date(Date.UTC(year, month - 1, day));
            }
        };
        DateFormatter.parseISODate = function (date) {
            if (!date) {
                return null;
            }
            if (date instanceof Date) {
                return date;
            }
            var zoneSplit = date.split('Z');
            var dateTimeSplit = zoneSplit[0].split('T');
            if (dateTimeSplit.length < 2)
                return null;
            var dateSegments = dateTimeSplit[0].split('-');
            var timeSegments = dateTimeSplit[1].split(':');
            if (timeSegments.length < 3)
                return null;
            var secondSegments = timeSegments[2].split('.');
            var minutesOffset = 0;
            if (zoneSplit.length > 1) {
                var timeZone = zoneSplit[1];
                if (timeZone.length) {
                    minutesOffset = parseInt(timeZone.substr(1, 2), 10) * 60 + parseInt(timeZone.substr(3, 2), 10);
                    if (timeZone[0] === "+") {
                        minutesOffset = 0 - minutesOffset;
                    }
                }
            }
            var milliSeconds = (secondSegments.length > 1) ? parseInt(secondSegments[1], 10) : 0;
            var timestamp = Date.UTC(parseInt(dateSegments[0], 10), parseInt(dateSegments[1], 10) - 1, parseInt(dateSegments[2], 10), parseInt(timeSegments[0], 10), parseInt(timeSegments[1], 10) + minutesOffset, parseInt(secondSegments[0], 10), milliSeconds);
            return new Date(timestamp);
        };
        DateFormatter.formatISOAsDuration = function (value) {
            try {
                var now = new Date();
                var dt = DateFormatter.parseISODate(value);
                var diffInSeconds = (now.getTime() - dt.getTime()) / 1000;
                var diffInMinutes = Math.floor(diffInSeconds / 60);
                var diffInHours = Math.floor(diffInMinutes / 60);
                var diffInDays = Math.ceil((new Date(now.getFullYear(), now.getMonth(), now.getDate()).getTime() - dt.getTime()) / (24 * 60 * 60 * 1000));
                if (diffInSeconds < 60) {
                    return "less than a minute ago";
                }
                else if (diffInSeconds < 3600) {
                    var diffInMinutes = Math.floor(diffInSeconds / 60);
                    if (diffInMinutes > 1) {
                        return diffInMinutes + " minutes ago";
                    }
                    else {
                        return "1 minute ago";
                    }
                }
                else if (diffInHours < 24) {
                    if (diffInHours > 1) {
                        return diffInHours + " hours ago";
                    }
                    else {
                        return "1 hour ago";
                    }
                }
                else if (diffInDays == 1) {
                    return "yesterday";
                }
                else if (diffInDays <= 5) {
                    return diffInDays + " days ago";
                }
                else {
                    return DateFormatter.format(dt);
                    return new Date(dt.getTime()).toLocaleDateString();
                }
            }
            catch (e) {
                return value;
            }
        };
        DateFormatter.getMonthName = function (month) {
            var monthName = new Array('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December');
            return monthName[month];
        };
        DateFormatter.getDayName = function (dw) {
            var dayName = new Array('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday');
            return dayName[dw];
        };
        DateFormatter.defaultFormat = "mm/dd/yyyy";
        DateFormatter.monthPosition = 0;
        DateFormatter.dayPosition = 1;
        DateFormatter.yearPosition = 2;
        DateFormatter.tokenChars = "dmyhnaw";
        DateFormatter.cache = {};
        return DateFormatter;
    })();
    Retool.DateFormatter = DateFormatter;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var NumberFormatter = (function () {
        function NumberFormatter() {
        }
        NumberFormatter.format = function (value, formatString) {
            var nf = NumberFormatter.cache[formatString];
            if (!nf) {
                nf = new NumberFormat(formatString);
                NumberFormatter.cache[formatString] = nf;
            }
            return nf.toString(value);
        };
        NumberFormatter.formatMoney = function (value, formatString) {
            return NumberFormatter.format(value, formatString || NumberFormatter.defaultMoney);
        };
        NumberFormatter.formatNumber = function (value, formatString) {
            return NumberFormatter.format(value, formatString || NumberFormatter.defaultNumber);
        };
        NumberFormatter.formatInt = function (value, formatString) {
            return NumberFormatter.format(value, formatString || NumberFormatter.defaultInteger);
        };
        NumberFormatter.cache = {}; // cacheformatters
        NumberFormatter.defaultMoney = "($#,##0.00)";
        NumberFormatter.defaultNumber = "#,##0";
        NumberFormatter.defaultInteger = "#0";
        return NumberFormatter;
    })();
    Retool.NumberFormatter = NumberFormatter;
    var NumberFormat = (function () {
        function NumberFormat(format) {
            format = format || "";
            var segments = format.split(";");
            if (segments.length > 1) {
                if (segments[1]) {
                    this.zeroLiteral = segments[1];
                }
                else {
                    this.hideZero = true;
                }
            }
            this.format = format;
            var tokenStream = new Retool.FormatTokenStream(segments[0], "(#,.0)%");
            var tokens = tokenStream.tokens;
            var token;
            var prev;
            var newTokens = [];
            this.decimals = 0;
            var numberToken;
            var decimalPoint;
            for (var i = 0; i < tokens.length; i++) {
                token = tokens[i];
                switch (token[0]) {
                    case ",":
                        this.comma = true;
                        break;
                    case ".":
                        decimalPoint = true;
                        if (prev == "0") {
                            this.leadingZero = true;
                        }
                        if (!numberToken) {
                            numberToken = true;
                            newTokens.push("#");
                        }
                        break;
                    case "#":
                        if (!numberToken) {
                            numberToken = true;
                            newTokens.push("#");
                        }
                        if (decimalPoint) {
                            this.decimals = token.length;
                            this.decimalsOptional = true;
                        }
                        break;
                    case "0":
                        if (!numberToken) {
                            numberToken = true;
                            newTokens.push("#");
                        }
                        if (decimalPoint) {
                            this.decimals = token.length;
                        }
                        break;
                    case "%":
                        this.isPercent = true;
                        newTokens.push(token);
                        break;
                    default:
                        newTokens.push(token);
                        break;
                }
                prev = token;
            }
            this.tokens = newTokens;
        }
        NumberFormat.prototype.toString = function (value) {
            value = Retool.StringHelper.parseNumber(value);
            if (isNaN(value)) {
                value = 0;
            }
            if (value == 0) {
                if (this.hideZero) {
                    return "";
                }
                if (this.zeroLiteral) {
                    return this.zeroLiteral;
                }
            }
            if (this.isPercent) {
                value = value * 100;
            }
            var tokens = this.tokens;
            var s = "";
            var negativeHandled = false;
            for (var i = 0; i < tokens.length; i++) {
                var token = tokens[i];
                switch (token) {
                    case "#":
                        s += this.getFormattedNumber(value);
                        break;
                    case "(":
                    case ")":
                        if (value < 0) {
                            s += token;
                        }
                        negativeHandled = true;
                        break;
                    default:
                        s += token;
                        break;
                }
            }
            if (value < 0 && !negativeHandled) {
                return "-" + s;
            }
            return s;
        };
        NumberFormat.prototype.getFormattedNumber = function (value) {
            if (value < 0) {
                value = Math.abs(value);
            }
            var s = value.toFixed(this.decimals).split(".");
            var result = this.getWholePortion(s[0]);
            if (s.length > 1) {
                result += this.getDecimalPortion(s[1]);
            }
            return result;
        };
        NumberFormat.prototype.getWholePortion = function (fixedString) {
            if (fixedString == "0") {
                if (this.leadingZero) {
                    return "0";
                }
                return "";
            }
            if (this.comma) {
                var p = 0;
                var r = "";
                for (var i = fixedString.length - 1; i >= 0; i--) {
                    if (p == 3) {
                        r = ',' + r;
                        p = 0;
                    }
                    r = fixedString.charAt(i) + r;
                    p++;
                }
                return r;
            }
            return fixedString;
        };
        NumberFormat.prototype.getDecimalPortion = function (fixedString) {
            if (this.decimalsOptional) {
                // trim trailing zeros
                var i = fixedString.length - 1;
                while (i >= 0 && fixedString[i] == "0") {
                    i--;
                }
                if (i >= 0) {
                    return "." + fixedString.substr(0, i + 1);
                }
                return "";
            }
            return "." + fixedString;
        };
        return NumberFormat;
    })();
    Retool.NumberFormat = NumberFormat;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ModelLocator = (function () {
        function ModelLocator() {
            this._filePath = Retool.FileSystem.FilePath.forType(1 /* Model */);
            this._ext = Retool.FileSystem.FilePath.DEFAULT_FILE_EXTENSION;
        }
        ModelLocator.prototype.getFile = function (modelId) {
            var filename = this.getFilename(modelId);
            if (filename) {
                return Retool.App.getFile(filename);
            }
            return null;
        };
        ModelLocator.prototype.getDefinition = function (name) {
            var file = this.getFile(name);
            if (file) {
                return file.getContent();
            }
            return null;
        };
        ModelLocator.prototype.get = function (name) {
            return this.getDefinition(name);
        };
        ModelLocator.prototype.getFilename = function (name) {
            if (name) {
                return this._filePath + "/" + name.toLowerCase() + this._ext;
            }
            return null;
        };
        ModelLocator.prototype.getFolderName = function () {
            return this._filePath;
        };
        return ModelLocator;
    })();
    Retool.ModelLocator = ModelLocator;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Model = (function (_super) {
        __extends(Model, _super);
        function Model(data) {
            _super.call(this, null);
            this.errorVersion = 0;
            this.data = data;
            this.guid = Retool.nextGuid();
        }
        Model.prototype.getRow = function (index) {
            return null;
        };
        Model.prototype.getLength = function () {
            return 0;
        };
        Model.prototype.getDocId = function () {
            return null;
        };
        Model.prototype.setAttributes = function (data) {
        };
        Model.prototype.getAttributes = function () {
            return null;
        };
        Model.prototype.getArray = function () {
            return null;
        };
        Model.prototype.getIsNew = function () {
            return false;
        };
        Model.prototype.copyToPreviousValues = function () {
        };
        Model.prototype.containsChanges = function () {
            return false;
        };
        Model.prototype.fieldChanged = function (fieldName) {
            return false;
        };
        Model.prototype.getVersion = function () {
            return 0;
        };
        Model.serverInstanceCall = function (modelName, method, model, args, async) {
            Model.execServerCall("models." + modelName, method, model, args, async);
        };
        Model.serverStaticCall = function (modelName, method, args, async) {
            Model.execServerCall("models." + modelName, method, null, args, async);
        };
        Model.execServerCall = function (className, method, model, args, async) {
            var request = new Retool.Request({ type: "data" });
            var logEntry = { type: "modelcall", request: { method: "CALL", url: className + "." + method }, response: {} };
            var start = new Date();
            request.add({ className: className, method: method, args: args, modelInstance: model, success: function (data) {
                logEntry.response.statusCode = "200";
                var now = new Date();
                logEntry.time = now - start;
                data.log = data.log || [];
                data.log.unshift(logEntry);
                Retool.App.writeConsoleMessages(data);
                async.resume(data.result);
            }, error: function (data) {
                logEntry.response.statusCode = "400";
                var now = new Date();
                logEntry.time = now - start;
                data.log = data.log || [];
                data.log.unshift(logEntry);
                Retool.App.writeConsoleMessages(data);
                var err = Retool.VM.VMError.fromResponse(data);
                async.error(err);
            } });
            request.execute();
            if (Retool.App.ide) {
                Retool.App.ide.updateExecutionLog([]);
            }
        };
        Model.prototype.getFieldErrors = function (fieldName) {
            if (this.error && this.error.fields) {
                return this.error.fields[fieldName];
            }
            return null;
        };
        Model.prototype.hasErrors = function (fieldName) {
            if (this.error) {
                if (fieldName) {
                    if (this.error.fields) {
                        var fieldErrors = this.error.fields[fieldName];
                        if (fieldErrors && fieldErrors.length) {
                            return true;
                        }
                    }
                }
                else {
                    if (this.error && this.error.messages && this.error.messages.length) {
                        return true;
                    }
                }
            }
            return false;
        };
        Model.prototype.setError = function (error) {
            this.error = Retool.VM.VMError.cast(error);
            this.errorVersion++;
        };
        Model.prototype.clearError = function () {
            this.errorVersion++;
            this.error = null;
        };
        return Model;
    })(Retool.VM.ObjectBase);
    Retool.Model = Model;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ObjectModel = (function (_super) {
        __extends(ObjectModel, _super);
        function ObjectModel(data, options) {
            _super.call(this, data || {});
            this.version = 0;
            this.isNew = true;
            if (options) {
                this.modelDef = options.modelDef;
                if ("isNew" in options) {
                    this.isNew = options.isNew;
                }
            }
        }
        ObjectModel.prototype.getProperty = function (params) {
            // todo: add check in field def
            if (params.name == "isNew") {
                return this.isNew;
            }
            var value = this.data[params.name];
            if (Array.isArray(value)) {
                // what about if relationship and null value?
                var arrayModelDef;
                if (this.modelDef && this.modelDef.relationships) {
                    var relationship = this.modelDef.relationships[params.name];
                    if (relationship) {
                        arrayModelDef = Retool.App.models.getDefinition(relationship.model);
                    }
                }
                return this.data[params.name] = Retool.ArrayModel.createInstance(arrayModelDef, value);
            }
            return value;
        };
        ObjectModel.prototype.callMissingMethod = function (params) {
            this.serverCall(params.name, params);
        };
        ObjectModel.prototype.serverCall = function (methodName, params) {
            var args = params.args;
            var async = params.proc.pause();
            var self = this;
            var done = Retool.makeAsync(function (err, result) {
                if (err) {
                    async.error(err);
                }
                else {
                    if (result == self) {
                        self.notifyContainer(params.proc.component, "model.updated");
                    }
                    async.resume(result);
                }
            });
            Retool.Model.serverInstanceCall(this.modelDef.name, params.name, this, args, done);
        };
        ObjectModel.prototype.vm_save = function (params) {
            if (this.isNew) {
                this.serverCall("save", params);
            }
            else {
                this.serverCall("findAndUpdate", params);
            }
        };
        ObjectModel.prototype.deleteProperty = function (params) {
            delete this.data[params.name];
        };
        ObjectModel.prototype.vm_toObject = function (params) {
            return this.data;
        };
        ObjectModel.prototype.getAttributes = function () {
            return this.data;
        };
        ObjectModel.prototype.setProperty = function (params) {
            this.data[params.name] = params.value;
            this.dirty = true;
        };
        ObjectModel.prototype.serialize = function () {
            return this.data;
        };
        ObjectModel.getCodeHints = function () {
            var list = [];
            //list.push({text:"alertError",value:"alertError",parameters:"(message)"});
            return list;
        };
        ObjectModel.prototype.getDocId = function () {
            return this.data.id;
        };
        ObjectModel.prototype.setAttributes = function (data) {
            this.data = data;
        };
        ObjectModel.prototype.getArray = function () {
            return null;
        };
        ObjectModel.prototype.copyToPreviousValues = function () {
        };
        ObjectModel.prototype.containsChanges = function () {
            return false;
        };
        ObjectModel.prototype.fieldChanged = function (field) {
            return false;
        };
        ObjectModel.prototype.getGuid = function () {
            return 0;
        };
        ObjectModel.prototype.vm_del = function (params) {
            var async = params.proc.pause();
            var self = this;
            var done = Retool.makeAsync(function (err, result) {
                if (err) {
                    async.error(err);
                }
                else {
                    self.notifyContainer(params.proc.component, "model.deleted");
                    async.resume(result);
                }
            });
            Retool.Model.serverStaticCall(this.modelDef.name, "destroy", [this.data.id], done);
        };
        ObjectModel.prototype.notifyContainer = function (component, eventName) {
            if (component) {
                var view = component.getView();
                if (view) {
                    view.notifyListeners(eventName, { schemaId: this.modelDef.name, modelData: this });
                }
            }
        };
        ObjectModel.prototype.getIsNew = function () {
            return this.isNew;
        };
        ObjectModel.prototype.getModelDef = function () {
            return this.modelDef;
        };
        ObjectModel.prototype.incVersion = function () {
            return this.version++;
        };
        ObjectModel.prototype.isModel = function () {
            return true;
        };
        ObjectModel.prototype.isArray = function () {
            return false;
        };
        ObjectModel.deserialize = function (info, data) {
            var model = new ObjectModel(data, { modelDef: info.modelDef });
            if (info.args) {
                model.isNew = info.args.isNew;
                model.modelDef = Retool.App.models.getDefinition(info.args.typeName);
            }
            return model;
        };
        ObjectModel.createInstance = function (modelDef, values) {
            var data = {};
            if (modelDef) {
                for (var fieldId in modelDef.fields) {
                    var field = modelDef.fields[fieldId];
                    if (field.default_value) {
                        if (field.default_value[0] == '(') {
                        }
                        else {
                            if (field.type == "number" || field.type == "money" || field.type == "boolean") {
                                var n = parseFloat(field.default_value);
                                data[fieldId] = isNaN(n) ? 0 : n;
                            }
                            else {
                                data[fieldId] = field.default_value;
                            }
                        }
                    }
                    else if (field.type == "number" || field.type == "money") {
                        data[fieldId] = 0;
                    }
                    else if (field.type == "boolean") {
                        data[fieldId] = 0;
                    }
                    else if (field.type == "picklist") {
                        data[fieldId] = Retool.FieldHelper.getPicklistDefaultValue(field);
                    }
                    else {
                        data[fieldId] = "";
                    }
                }
            }
            if (values) {
                for (var key in values) {
                    data[key] = values[key];
                }
            }
            return new ObjectModel(data, { modelDef: modelDef });
        };
        return ObjectModel;
    })(Retool.Model);
    Retool.ObjectModel = ObjectModel;
    Retool.VM.addType("ObjectModel", ObjectModel, null);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ModelStatic = (function (_super) {
        __extends(ModelStatic, _super);
        function ModelStatic(modelDef) {
            _super.call(this, null);
            this.modelDef = modelDef;
        }
        ModelStatic.prototype.callMissingMethod = function (params) {
            var proc = params.proc;
            if (proc.isCodeComplete) {
                return null;
            }
            var args = params.args;
            var async = proc.pause();
            Retool.Model.serverStaticCall(this.modelDef.name, params.name, args, async);
        };
        ModelStatic.prototype.vm_all = function (params) {
            var query = new Retool.ORM.Query(this.modelDef);
            return query;
        };
        ModelStatic.prototype.vm_orderBy = function (params) {
            var query = new Retool.ORM.Query(this.modelDef);
            query.addOrderByArgs(params.args);
            return query;
        };
        ModelStatic.prototype.vm_limit = function (params) {
            var query = new Retool.ORM.Query(this.modelDef);
            query.setLimit(params.args[0]);
            return query;
        };
        ModelStatic.prototype.vm_where = function (params) {
            var query = new Retool.ORM.Query(this.modelDef);
            query.addCondition("AND", params.args);
            return query;
        };
        ModelStatic.prototype.vm_timeframe = function (params) {
            var query = new Retool.ORM.Query(this.modelDef);
            query.timeframe = params.getIndex(0);
            return query;
        };
        ModelStatic.prototype.vm_select = function (params) {
            var query = new Retool.ORM.Query(this.modelDef);
            query.vm_select(params);
            return query;
        };
        ModelStatic.prototype.getModelName = function () {
            return this.modelDef.name;
        };
        ModelStatic.prototype._getHints = function () {
            var sourceCode = this.modelDef.source_code;
            var hints = Retool.App.ide.getMethodHints(sourceCode, {});
            hints.push({ text: "all", parameters: "()" });
            hints.push({ text: "orderBy", parameters: "(name,direction?)" });
            hints.push({ text: "limit", parameters: "(count)" });
            hints.push({ text: "where", parameters: "(field,condition,value)" });
            hints.push({ text: "select", parameters: "(field,field?...)" });
            hints.push({ text: "count", parameters: "()" });
            hints.push({ text: "sum", parameters: "(field)" });
            hints.push({ text: "min", parameters: "(field)" });
            hints.push({ text: "max", parameters: "(field)" });
            hints.push({ text: "avg", parameters: "(field)" });
            hints.push({ text: "findOrFail", parameters: "(id)" });
            hints.push({ text: "destroy", parameters: "(id)" });
            hints.push({ text: "update", parameters: "(data)" });
            hints.push({ text: "find", parameters: "(id,columns?)" });
            return hints;
        };
        return ModelStatic;
    })(Retool.VM.ObjectBase);
    Retool.ModelStatic = ModelStatic;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ArrayModel = (function (_super) {
        __extends(ArrayModel, _super);
        function ArrayModel(data, options) {
            _super.call(this, data || []);
            this.version = 0;
            if (options) {
                this.modelDef = options.modelDef;
            }
            this.selected = [];
        }
        ArrayModel.prototype.getProperty = function (params) {
            if (typeof params.name == "number") {
                return this.getRow(params.name);
            }
            return _super.prototype.getProperty.call(this, params);
        };
        ArrayModel.prototype.setProperty = function (params) {
            if (typeof params.name == "number") {
                this.data[params.name] = params.value;
                return;
            }
            return _super.prototype.setProperty.call(this, params);
        };
        ArrayModel.prototype.getMissingProperty = function (params) {
            return this.data[params.name];
        };
        ArrayModel.prototype.getRow = function (index) {
            var row = this.data[index];
            if (row) {
                if (!row.__isVMObject) {
                    row = new Retool.ObjectModel(row, { modelDef: this.modelDef });
                    this.data[index] = row;
                }
            }
            return row;
        };
        ArrayModel.prototype.getLength = function () {
            return this.data.length;
        };
        ArrayModel.prototype.getArray = function () {
            return this.data;
        };
        ArrayModel.prototype.getSelected = function (index) {
            return this.selected[index];
        };
        ArrayModel.prototype.setSelected = function (index, value) {
            this.selected[index] = value;
        };
        ArrayModel.prototype.getPage = function () {
            return this.page || 1;
        };
        ArrayModel.prototype.setPage = function (index) {
            this.page = index;
        };
        ArrayModel.prototype.selectAll = function (value) {
            for (var i = 0; i < this.data.length; i++) {
                this.selected[i] = value;
            }
        };
        ArrayModel.prototype.vm_selected = function (params) {
            var index = params.args[0];
            if (params.args.length > 1) {
                this.setSelected(index, params.args[1]);
            }
            else {
                return this.getSelected(index);
            }
        };
        ArrayModel.prototype.vm_get_length = function (params) {
            return this.data.length;
        };
        ArrayModel.prototype.vm_of = function (params) {
            var data = [];
            if (params.args) {
                for (var i = 0; i < params.args.length; i++) {
                    data.push(params.args[i]);
                }
            }
            return new ArrayModel(data, { modelDef: this.modelDef });
        };
        ArrayModel.prototype.vm_splice = function (params) {
            var args = params.args;
            this.version++;
            return new ArrayModel(Array.prototype.splice.apply(this.data, args), { modelDef: this.modelDef });
        };
        ArrayModel.prototype.splice = function (a, b, c, d) {
            this.version++;
            return Array.prototype.splice.apply(this.data, arguments);
        };
        ArrayModel.prototype.vm_indexOf = function (params) {
            var item = params.args[0];
            return this.indexOf(item);
        };
        ArrayModel.prototype.vm_insertBefore = function (params) {
            var item = params.args[0];
            var before;
            if (params.args.length > 1) {
                before = params.args[1];
            }
            if (before) {
                var index = this.indexOf(before);
                if (index == -1) {
                    index = 0;
                }
                this.data.splice(index, 0, item);
            }
            else {
                this.data.splice(0, 0, item);
            }
            this.version++;
            return index;
        };
        ArrayModel.prototype.indexOf = function (item) {
            return this.data.indexOf(item);
        };
        ArrayModel.prototype.remove = function (item) {
            var index = this.indexOf(item);
            if (index != -1) {
                this.splice(index, 1);
            }
        };
        ArrayModel.prototype.vm_remove = function (params) {
            this.remove(params.args[0]);
        };
        ArrayModel.prototype.vm_push = function (params) {
            var args = params.args;
            this.version++;
            Array.prototype.push.apply(this.data, args);
            return this.data.length;
        };
        ArrayModel.prototype.push = function (item) {
            this.version++;
            return this.data.push(item);
        };
        ArrayModel.prototype.vm_pop = function (params) {
            this.version++;
            return this.data.pop();
        };
        ArrayModel.prototype.vm_unshift = function (params) {
            var args = params.args;
            this.version++;
            if (args.length == 1) {
                var arg = args[0];
                if (arg instanceof Retool.Model) {
                    this.data.unshift(arg.data);
                }
                else {
                    this.data.unshift(arg);
                }
            }
            else {
                Array.prototype.push(this.data, args);
            }
        };
        ArrayModel.prototype.getVersion = function () {
            return this.version;
        };
        ArrayModel.prototype.getIsNew = function () {
            return this.isNew;
        };
        ArrayModel.prototype.getModelDef = function () {
            return this.modelDef;
        };
        ArrayModel.prototype.incVersion = function () {
            return this.version++;
        };
        ArrayModel.prototype.setVersion = function (value) {
            this.version = value;
        };
        ArrayModel.prototype.getGuid = function () {
            return this.guid;
        };
        ArrayModel.prototype.isModel = function () {
            return false;
        };
        ArrayModel.prototype.isArray = function () {
            return true;
        };
        ArrayModel.deserialize = function (info, data) {
            var model = new ArrayModel(data, { modelDef: info.modelDef });
            if (info.args) {
                model.modelDef = Retool.App.models.getDefinition(info.args.typeName);
            }
            return model;
        };
        ArrayModel.createInstance = function (modelDefinition, data) {
            return new ArrayModel(data, { modelDef: modelDefinition });
        };
        ArrayModel.prototype.vm_setSort = function (params) {
            this.sort = { name: params.args[0], descending: params.args[1] };
            return this;
        };
        ArrayModel.prototype.vm_setPage = function (params) {
            this.page = params.args[0];
            return this;
        };
        ArrayModel.prototype.vm_getSort = function (params) {
            return this.sort;
        };
        ArrayModel.prototype.vm_sort = function (params) {
            var sortName = params.args[0];
            var sortDescending = params.args[1];
            var list = [];
            for (var i = 0; i < this.data.length; i++) {
                var item = this.data[i];
                if (item.__isVMObject) {
                    list.push(item.getAttributes());
                }
                else {
                    list.push(item);
                }
            }
            var less = (sortDescending) ? 1 : -1;
            var gt = (sortDescending) ? -1 : 1;
            list.sort(function (a, b) {
                if (a[sortName] < b[sortName])
                    return less;
                if (a[sortName] > b[sortName])
                    return gt;
                return 0;
            });
            this.data = list;
            this.incVersion();
            return this;
        };
        ArrayModel.prototype.__getEnumerator = function () {
            return new Retool.VM.Enumerator(this.data);
        };
        ArrayModel.prototype.toJSON = function () {
            return this.data;
        };
        return ArrayModel;
    })(Retool.Model);
    Retool.ArrayModel = ArrayModel;
    Retool.VM.addType("ArrayModel", ArrayModel, null);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ModelWithPrevious = (function (_super) {
        __extends(ModelWithPrevious, _super);
        function ModelWithPrevious(data, options) {
            _super.call(this, data, options);
        }
        ModelWithPrevious.prototype.copyToPreviousValues = function () {
            this.previousValues = {};
            var attributes = this.data;
            for (var key in attributes) {
                this.previousValues[key] = attributes[key];
            }
        };
        ModelWithPrevious.prototype.containsChanges = function () {
            var attributes = this.data;
            for (var key in attributes) {
                if (attributes[key] != this.previousValues[key]) {
                    return true;
                }
            }
            return false;
        };
        ModelWithPrevious.prototype.fieldChanged = function (field) {
            return this.data[field] != this.previousValues[field];
        };
        return ModelWithPrevious;
    })(Retool.ObjectModel);
    Retool.ModelWithPrevious = ModelWithPrevious;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var FieldHelper = (function () {
        function FieldHelper() {
        }
        FieldHelper.format = function (field, value) {
            if (field.type == "money") {
                return Retool.NumberFormatter.formatMoney(value);
            }
            else if (field.type == "picklist") {
                var valueList = field.listvalues;
                var items = valueList.split(',');
                for (var i = 0; i < items.length; i++) {
                    var item = items[i].split('=');
                    if (item[0] == value) {
                        return item[1];
                    }
                }
                return "??";
            }
            else if (field.type == "date") {
                return Retool.DateFormatter.format(value);
            }
            else if (field.type == "datetime") {
                return Retool.DateFormatter.formatDateTime(value);
            }
            else {
                return value || "";
            }
        };
        FieldHelper.formatField = function (model, fieldName, value) {
            if (model) {
                var field = Retool.App.getField(model, fieldName);
                if (field) {
                    return FieldHelper.format(field, value);
                }
            }
            return value || "";
        };
        FieldHelper.getPicklistDefaultValue = function (field) {
            var valueList = field.listvalues;
            var items = valueList.split(',');
            for (var i = 0; i < items.length; i++) {
                var item = items[i].split('=');
                if (item[0] == "") {
                    // if there is an empty value option, select it as default
                    return "";
                }
            }
            if (items.length) {
                return items[0][0];
            }
            return "";
        };
        FieldHelper.getRecordName = function (model, modelDef) {
            var fields = modelDef.recordname;
            if (!fields) {
                return model.getProperty({ name: Retool.modelIDName });
            }
            var segments = fields.split(',');
            var value = model.getProperty({ name: segments[0] });
            if (segments.length == 1) {
                return value;
            }
            for (var i = 1; i < segments.length; i++) {
                value += " " + model.getProperty({ name: segments[i] });
            }
            return value;
        };
        FieldHelper.getFirstRecordNameField = function (modelDef) {
            var fields = modelDef.recordname;
            if (!fields) {
                return Retool.modelIDName;
            }
            var segments = fields.split(',');
            return segments[0];
        };
        return FieldHelper;
    })();
    Retool.FieldHelper = FieldHelper;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ValidationError = (function (_super) {
        __extends(ValidationError, _super);
        function ValidationError(message) {
            _super.call(this, null);
            this.name = "validation_error";
            if (message) {
                this.messages.push(message);
            }
            this.fields = {};
        }
        ValidationError.prototype.addFieldError = function (field, error) {
            var fieldError = this.fields[field];
            if (!fieldError) {
                fieldError = [];
                this.fields[field] = fieldError;
            }
            fieldError.push(error);
            this.hasErrors = true;
        };
        ValidationError.prototype.vm_field = function (params) {
            this.field(params.args[0], params.args[1]);
            return this;
        };
        ValidationError.prototype.field = function (name, error) {
            this.addFieldError(name, error);
            return this;
        };
        ValidationError.prototype.addGeneralError = function (error) {
            this.messages.push(error);
            this.hasErrors = true;
        };
        ValidationError.prototype.add = function (error) {
            this.addGeneralError(error);
        };
        ValidationError.prototype.required = function (field, value, error) {
            if (!value) {
                this.addFieldError(field, error);
                return false;
            }
            return true;
        };
        ValidationError.prototype.vm_required = function (params) {
            var args = params.args;
            if (args.length > 2) {
                this.required(args[0], args[1], args[2]);
            }
            else if (args.length > 1) {
                this.required(args[0], args[1], args[0] + " is a required field");
            }
            else {
                throw "Missing parameters on required method";
            }
        };
        ValidationError.prototype.vm_add = function (params) {
            var args = params.args;
            if (args.length == 2) {
                this.addFieldError(args[0], args[1]);
            }
            else if (args.length) {
                this.addGeneralError(args[0]);
            }
        };
        ValidationError.prototype.vm_get_hasErrors = function (params) {
            return this.hasErrors;
        };
        ValidationError.prototype.throwIfAny = function () {
            if (this.hasErrors) {
                throw this;
            }
        };
        ValidationError.prototype.vm_throwIfAny = function (params) {
            this.throwIfAny();
        };
        return ValidationError;
    })(Retool.VM.VMError);
    Retool.ValidationError = ValidationError;
    Retool.VM.addType("ValidationError", ValidationError, null);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ORM;
    (function (ORM) {
        var QueryBase = (function (_super) {
            __extends(QueryBase, _super);
            function QueryBase() {
                _super.apply(this, arguments);
            }
            QueryBase.prototype.vm_limit = function (params) {
                if (params.args.length) {
                    this.setLimit(params.args[0]);
                }
                return this;
            };
            QueryBase.prototype.setLimit = function (value) {
                this.limit = value;
            };
            QueryBase.prototype.vm_take = function (params) {
                return this.vm_limit(params);
            };
            QueryBase.prototype.vm_skip = function (params) {
                if (params.args.length) {
                    this.setSkip(params.args[0]);
                }
                return this;
            };
            QueryBase.prototype.setSkip = function (value) {
                this.skip = value;
            };
            QueryBase.prototype.vm_select = function (params) {
                var arg = params.getIndex(0);
                if (Array.isArray(arg)) {
                    this.addColumns(arg);
                }
                else {
                    this.addColumns(params.args);
                }
            };
            QueryBase.prototype.addColumns = function (columns) {
                if (!columns) {
                    return;
                }
                if (!Array.isArray(columns)) {
                    throw "Expected an array of columns as argument";
                }
                ;
                this.columns = this.columns || [];
                this.columns = this.columns.concat(this.columns, columns);
            };
            QueryBase.prototype.addGroups = function (groups) {
                if (!groups) {
                    return;
                }
                if (!Array.isArray(groups)) {
                    throw "Expected an array of groups as argument";
                }
                ;
                this.groups = this.groups || [];
                this.groups = this.groups.concat(this.groups, groups);
            };
            QueryBase.prototype.vm_groupBy = function (params) {
                this.addGroups([params.getIndex(0)]);
                return this;
            };
            QueryBase.prototype.vm_distinct = function (params) {
                this.distinct = true;
            };
            QueryBase.prototype.vm_orderBy = function (params) {
                this.addOrderByArgs(params.args);
                return this;
            };
            QueryBase.prototype.vm_where = function (params) {
                this.addCondition("AND", params.args);
                return this;
            };
            QueryBase.prototype.vm_and = function (params) {
                var args = params.args;
                this.addCondition("AND", args);
                return this;
            };
            QueryBase.prototype.vm_or = function (params) {
                this.addCondition("OR", params.args);
                return this;
            };
            QueryBase.prototype.vm_timeframe = function (params) {
                this.timeframe = params.getIndex(0);
                return this;
            };
            QueryBase.prototype.vm_interval = function (params) {
                this.interval = params.getIndex(0);
                return this;
            };
            QueryBase.prototype.vm_whereBetween = function (params) {
                this.conditions.push({ booleanOperator: "AND", column: params.args[0], operator: "between", value: params.args[1], value2: params.args[2] });
                return this;
            };
            QueryBase.prototype.vm_not = function (params) {
                var arg = params.getIndex(0);
                if (arg instanceof ORM.Query) {
                    var q = arg;
                    var cond = { booleanOperator: "NOT", operator: "", children: q.conditions };
                    this.conditions.push(cond);
                    return this;
                }
                throw "NOT method expects a Query as argument";
            };
            QueryBase.prototype.addCondition = function (booleanOp, args) {
                var cond;
                if (args.length == 3) {
                    cond = { booleanOperator: booleanOp, column: args[0], operator: args[1], value: args[2] };
                }
                else if (args.length == 2) {
                    cond = { booleanOperator: booleanOp, column: args[0], operator: "=", value: args[1] };
                }
                else if (args.length == 1) {
                    var arg = args[0];
                    if (arg instanceof ORM.Query) {
                        var q = arg;
                        cond = { booleanOperator: booleanOp, operator: "", children: q.conditions };
                    }
                }
                if (cond) {
                    this.conditions.push(cond);
                }
            };
            QueryBase.prototype.addOrderByArgs = function (args) {
                var field = args[0];
                var direction;
                if (args.length > 1) {
                    direction = args[1];
                }
                this.addOrderBy(field, direction);
            };
            QueryBase.prototype.addOrderBy = function (field, direction) {
                if (!this.orders) {
                    this.orders = [];
                }
                this.orders.push({ field: field, direction: direction });
            };
            QueryBase.prototype.serialize = function () {
                return {
                    conditions: this.conditions,
                    orders: this.orders,
                    columns: this.columns,
                    limit: this.limit,
                    skip: this.skip,
                    distinct: this.distinct,
                    timeframe: this.timeframe,
                    interval: this.interval,
                    groups: this.groups
                };
            };
            QueryBase.prototype.deserialize = function (arg) {
                this.conditions = arg.conditions;
                this.orders = arg.orders;
                this.columns = arg.columns;
                this.limit = arg.limit;
                this.skip = arg.skip;
                this.distinct = arg.distinct;
                this.timeframe = arg.timeframe;
                this.groups = arg.groups;
                this.interval = arg.interval;
            };
            return QueryBase;
        })(Retool.VM.ObjectBase);
        ORM.QueryBase = QueryBase;
    })(ORM = Retool.ORM || (Retool.ORM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ORM;
    (function (ORM) {
        var Query = (function (_super) {
            __extends(Query, _super);
            function Query(modelDef) {
                _super.call(this, null);
                this.modelDef = modelDef;
                this.conditions = [];
            }
            Query.prototype.vm_get = function (params) {
                this.execQuery("get", params);
            };
            Query.prototype.vm_count = function (params) {
                this.execQuery("count", params);
            };
            Query.prototype.vm_sum = function (params) {
                this.execQuery("sum", params);
            };
            Query.prototype.vm_min = function (params) {
                this.execQuery("min", params);
            };
            Query.prototype.vm_max = function (params) {
                this.execQuery("max", params);
            };
            Query.prototype.vm_avg = function (params) {
                this.execQuery("avg", params);
            };
            Query.prototype.vm_exists = function (params) {
                this.execQuery("exists", params);
            };
            Query.prototype.vm_find = function (params) {
                this.execQuery("find", params);
            };
            Query.prototype.vm_findOrFail = function (params) {
                this.execQuery("findOrFail", params);
            };
            Query.prototype.vm_findFirst = function (params) {
                this.execQuery("findFirst", params);
            };
            Query.prototype.vm_findFirstOrFail = function (params) {
                this.execQuery("findFirstOrFail", params);
            };
            Query.prototype.execQuery = function (method, params) {
                var modelName = this.getModelName();
                var async = params.proc.pause();
                var arg = this.serialize();
                arg.method = method;
                arg.methodArgs = params.args;
                var args = [arg];
                Retool.Model.serverStaticCall(modelName, "query", args, async);
            };
            Query.prototype.getModelName = function () {
                return this.modelDef.name;
            };
            return Query;
        })(ORM.QueryBase);
        ORM.Query = Query;
        var QueryStatic = (function (_super) {
            __extends(QueryStatic, _super);
            function QueryStatic() {
                _super.apply(this, arguments);
            }
            QueryStatic.prototype.vm_where = function (params) {
                var query = new Query(null);
                if (params.args.length) {
                    query.vm_where(params);
                }
                return query;
            };
            return QueryStatic;
        })(Retool.VM.ObjectBase);
        ORM.QueryStatic = QueryStatic;
        Retool.VM.addType("Query", null, new QueryStatic(null));
    })(ORM = Retool.ORM || (Retool.ORM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Component = (function () {
        function Component(attr) {
            this.attr = attr;
            this.localData = {};
        }
        Component.prototype.attrValue = function (attrName) {
            var value = this.attr[attrName];
            if (typeof value === "function") {
                return value(this);
            }
            else {
                return value;
            }
        };
        Component.prototype.closest = function (tagName) {
            var c = this;
            while (c) {
                if (c.helper.settings.componentClass == tagName || c.attr.kind == tagName) {
                    return c;
                }
                c = c.parent;
            }
            return null;
        };
        Component.prototype.closestDialogHost = function () {
            var c = this;
            while (c) {
                if (c.helper.settings.dialogHost) {
                    return c;
                }
                c = c.parent;
            }
            return null;
        };
        Component.prototype.getElementId = function () {
            return "rt-" + this.id;
        };
        Component.prototype.getElement = function (selector) {
            var q = "#" + this.getElementId();
            if (selector) {
                q += " " + selector;
            }
            return $(q);
        };
        Component.prototype.getFieldValue = function () {
            var value = this.getAttr('value');
            if (this.fieldDefinition) {
                if (this.fieldDefinition.type == "date" || this.fieldDefinition.type == "datetime") {
                    value = Retool.DateFormatter.parseISODate(value);
                }
            }
            return value;
        };
        Component.prototype.evaluateMethod = function (methodName) {
            return this.context.viewModel.evaluateMethod(methodName, [this.context.model]);
        };
        Component.prototype.getFormGroup = function () {
            var p = this.parent;
            while (p) {
                if (p.localData.formGroup) {
                    return p.localData.formGroup;
                }
                p = p.parent;
            }
            return {};
        };
        Component.prototype.getRecordKey = function () {
            return "";
        };
        Component.prototype.setFieldValue = function (value) {
            if (this.attr._compiled && this.attr._compiled.value_setter) {
                if (this.fieldDefinition) {
                    if (this.fieldDefinition.type == "number" || this.fieldDefinition.type == "money") {
                        value = Retool.StringHelper.parseNumber(value);
                        if (isNaN(value)) {
                            value = 0;
                        }
                    }
                    else if (this.fieldDefinition.type == "date") {
                        value = Retool.DateFormatter.parseDateFromInput(value);
                    }
                    else if (this.fieldDefinition.type == "datetime") {
                        value = Retool.DateFormatter.parseDateTimeFromInput(value);
                    }
                }
                this.context.evaluateMethod(this.attr._compiled.value_setter, { settings: this.attr, "$$_value": value });
            }
            return value;
        };
        Component.prototype.getFieldLabel = function (field) {
            if (this.attr.label == "(field)") {
                if (this.fieldDefinition) {
                    return this.fieldDefinition.label;
                }
            }
            return this.attr.label || "";
        };
        Component.prototype.closeDialog = function () {
            this.helper.closeDialog(this);
        };
        Component.prototype.refresh = function (options) {
            var componentElemId = this.getElementId();
            // we look for this component in the tree incase we have refreshed the page or navigated while async operation was executing
            var view = this.getView();
            if (view) {
                var foundComponent = view.getComponent(componentElemId);
                if (foundComponent == this) {
                    this.helper.renderChanges(this, options);
                }
            }
            if (options && options.done) {
                options.done();
            }
        };
        Component.prototype.getView = function () {
            var c = this;
            while (!c.__isView && c.parent) {
                c = c.parent;
            }
            return c;
        };
        Component.prototype.getTemplateRoot = function () {
            var c = this;
            while (c) {
                if (c.__isView) {
                    return c;
                }
                if (c.helper.settings.isTemplateRoot) {
                    return c;
                }
                c = c.parent;
            }
            return null;
        };
        Component.prototype.findLocalComponentByName = function (name, index) {
            if (!name)
                return null;
            return this.doFindComponentByName(this, name, index, true);
        };
        Component.prototype.doFindComponentByName = function (component, name, index, local) {
            var compare = (component.customComponent) ? component.customComponent.attr.name : component.attr.name;
            if (compare == name) {
                if (index == -1) {
                    return component;
                }
                else if (component.context.arrayIndex == index) {
                    return component;
                }
            }
            if (local && component.helper && component.helper.settings.isTemplateRoot) {
                return null;
            }
            if (component.children) {
                for (var i = 0; i < component.children.length; i++) {
                    var child = component.children[i];
                    var found = this.doFindComponentByName(child, name, index, local);
                    if (found) {
                        return found;
                    }
                }
            }
            return null;
        };
        Component.prototype.findComponentByName = function (name, index) {
            if (!name)
                return null;
            return this.doFindComponentByName(this, name, index, false);
        };
        Component.prototype.findComponentByDefinitionId = function (id, local) {
            return this.doFindComponentByDefinitionId(this, id, local);
        };
        Component.prototype.doFindComponentByDefinitionId = function (component, id, local) {
            if (component.attr && component.attr.id == id) {
                return component;
            }
            if (local && component.helper && component.helper.settings.isTemplateRoot) {
                return null;
            }
            if (component.children) {
                for (var i = 0; i < component.children.length; i++) {
                    var found = this.doFindComponentByDefinitionId(component.children[i], id, local);
                    if (found) {
                        return found;
                    }
                }
            }
            return null;
        };
        Component.prototype.hasExpr = function (name) {
            if (this.attr._compiled && this.attr._compiled[name]) {
                return true;
            }
            return false;
        };
        Component.prototype.getAttr = function (name, done) {
            if (this.attr._compiled && this.attr._compiled[name]) {
                if (done) {
                    return this.context.evaluateMethodAsync(this.attr._compiled[name], done, { settings: this.attr });
                }
                return this.context.evaluateMethod(this.attr._compiled[name], { settings: this.attr });
            }
            return this.attr[name];
        };
        Component.prototype.computeClass = function (handlerClassNames) {
            var cssClass = this.getAttr("cssclass");
            var out;
            if (handlerClassNames) {
                out = handlerClassNames + " " + (cssClass || "");
            }
            else {
                out = cssClass || "";
            }
            if (this.localData.css) {
                out += " " + this.localData.css;
            }
            if (this.localData.forceState == "visible") {
                if (this.containsClassname(out, "hidden")) {
                    out = this.removeClassname(out, "hidden");
                }
            }
            else if (this.localData.forceState == "hidden") {
                if (!this.containsClassname(out, "hidden")) {
                    out += " hidden";
                }
            }
            if (this.localData.forceActive == "active") {
                if (!this.containsClassname(out, "active")) {
                    out += " active";
                }
            }
            else if (this.localData.forceActive == "inactive") {
                if (this.containsClassname(out, "active")) {
                    out = this.removeClassname(out, "active");
                }
            }
            return out;
        };
        Component.prototype.removeClassname = function (value, className) {
            var keep = [];
            var segments = value.split(' ');
            for (var i = 0; i < segments.length; i++) {
                if (segments[i] && segments[i] != className) {
                    keep.push(segments[i]);
                }
            }
            return keep.join(' ');
        };
        Component.prototype.containsClassname = function (value, className) {
            var hExp = new RegExp("(\\W|^)" + className + "(\\W|$)");
            return hExp.test(value);
        };
        Component.prototype.getDataId = function () {
            if (this.dataPrefix) {
                return this.dataPrefix + "." + this.attr.id;
            }
            return this.attr.id;
        };
        Component.prototype.getSessionData = function () {
            return null;
        };
        Component.prototype.setSessionData = function (data) {
        };
        Component.prototype.raise = function (options) {
            var name = options.componentName || this.attr.name;
            return this.context.viewModel.executeEventMethod({ methodName: name + "_" + options.methodName, event: options.event, args: options.args, evaluate: options.evaluate, component: this });
        };
        Component.prototype.showFormError = function (e) {
            var error = Retool.VM.VMError.cast(e);
            var form = this.closest('form');
            if (form) {
                form.context.setError(error);
            }
            else {
                Retool.ErrorRenderer.render({ error: error, target: form });
            }
            var view = this.getView();
            var options = {};
            view.refreshRenderedComponents(options);
        };
        Component.prototype.renderChanges = function (options) {
            return this.helper.renderChanges(this, options);
        };
        Component.prototype.redirect = function (event, options, done) {
            var view = this.getView();
            if (this.attr.outlet) {
                var arg = {};
                var template = Retool.App.templates.getRouteTemplate(options.url);
                if (template) {
                    arg.template = template.id;
                }
                var params = Retool.App.templates.getParams(options.url);
                var vmComponent;
                if (this.attr.outlet == "modal") {
                    vmComponent = new Retool.VM.VMComponent(Retool.App.modalView);
                }
                else if (this.attr.outlet == "app") {
                    vmComponent = new Retool.VM.VMComponent(Retool.App.contentView);
                }
                else {
                    var outlet = Retool.App.contentView.findLocalComponentByName(this.attr.outlet, -1);
                    if (outlet) {
                        vmComponent = new Retool.VM.VMComponent(outlet);
                    }
                }
                if (vmComponent) {
                    vmComponent.nav(null, template.id, params, null);
                    return;
                }
            }
            view.redirect(event, options, done);
        };
        Component.prototype.getWriterType = function () {
            return Retool.elemInsideDesigner("#" + this.getElementId()) ? "ds" : null;
        };
        Component.prototype.createWriter = function () {
            var view = this.getView();
            var writer = view.createWriter();
            writer.component = this;
            return writer;
        };
        Component.prototype.renderTextContent = function (w) {
            var attr = this.attr;
            var text = this.getAttr("text");
            if (text) {
                w.text(text);
            }
            this.localData.renderedValue = text;
            return text;
        };
        Component.prototype.getModelDef = function () {
            if (this.context) {
                return this.context.modelDef;
            }
            return null;
        };
        Component.prototype.blockChanged = function () {
            if (this.hasExpr("text")) {
                var text = this.getAttr("text");
                return (this.localData.renderedValue != text);
            }
            return false;
        };
        Component.prototype.navigateToHref = function (event) {
            if (event) {
                event.stopPropagation(); // do not bubble up
            }
            if (this.attr.href == "{{history.back}}" || this.attr.href == "{{history.back()}}") {
                history.back();
            }
            else {
                var href = this.getAttr("href");
                if (href.substr(0, 5) == "http:" || href.substr(0, 6) == "https:") {
                    window.location.href = href;
                }
                else if (href.substr(0, 2) == "//") {
                    window.location.href = href.substr(1);
                }
                else {
                    var url = new Retool.Url(this.resolveHref(href));
                    this.redirect(event, { url: url });
                }
            }
        };
        Component.prototype.resolveHref = function (href) {
            if (!href)
                return null;
            if (href[0] == "#") {
                return href;
            }
            var segments = href.split('/');
            if (segments[0] == ".") {
                var template = this.context.viewModel.template;
                if (template) {
                    segments[0] = template.appName;
                }
            }
            return segments.join('/');
        };
        Component.prototype.createLinkHref = function (href) {
            if (href.substr(0, 5) == "http:" || href.substr(0, 6) == "https:") {
                return href;
            }
            else {
                var url = new Retool.Url(href);
                return "/" + url.toDisplay();
            }
        };
        Component.prototype.getScopeContainer = function () {
            var c = this;
            while (c) {
                var container = c.helper.getScopeContainer(c);
                if (container) {
                    return container;
                }
                c = c.parent;
            }
            return null;
        };
        Component.prototype.setRelatedData = function (fieldId, data) {
            if (fieldId && data) {
                var i = fieldId.lastIndexOf(".");
                if (i != -1) {
                    var objName = fieldId.substr(0, i);
                    this.context.set(objName, data);
                }
            }
        };
        Component.prototype.getTemplate = function () {
            if (this.context && this.context.viewModel) {
                return this.context.viewModel.template;
            }
            return null;
        };
        Component.prototype.raiseAppEvent = function (name, event, args) {
        };
        return Component;
    })();
    Retool.Component = Component;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ErrorRenderer = (function () {
        function ErrorRenderer() {
        }
        ErrorRenderer.render = function (options) {
            var error = options.error;
            var writeToElement = false;
            var w = options.writer;
            if (!w) {
                if (options.target) {
                    var w = options.target.getView().createWriter();
                }
                else {
                    w = new Retool.Writer("");
                }
                writeToElement = true;
            }
            w.writeTag("div", "alert alert-danger alert-dissmissible", { role: "alert", "data-retool-error": "true" });
            w.writeTag("button", "close", { type: "button", "data-dismiss": "alert" }).writeTag("span", null, { "aria-hidden": "true" }).write("&times;</span>").writeTag("span", "sr-only").text("Close").write('</span></button>');
            //w.writeTag("div","error-icon").writeTag("span","glyphicon glyphicon-exclamation-sign").write('</span></div>');
            if (error.messages && error.messages.length) {
                w.write('<p>');
                var messages = error.messages;
                for (var i = 0; i < messages.length; i++) {
                    if (i > 0) {
                        w.write('<br>');
                    }
                    w.prettyText(messages[i]);
                }
                w.write('</p>');
            }
            var hasFieldErrors = false;
            var fields = error.fields;
            if (fields) {
                for (var key in fields) {
                    hasFieldErrors = true;
                    break;
                }
            }
            if (hasFieldErrors) {
                w.write('<ul>');
                for (var fieldname in fields) {
                    var fieldErrorList = fields[fieldname];
                    if (fieldErrorList.length) {
                        for (var i = 0; i < fieldErrorList.length; i++) {
                            w.write('<li>').text(fieldErrorList[i]).write('</li>');
                        }
                    }
                }
                w.write('</ul>');
            }
            w.write('</div>');
            if (writeToElement) {
                var formElement = ErrorRenderer.getFormElement(options);
                if (formElement) {
                    //if (error.name == "validation_error"){
                    //	formElement.children(["data-retool-error"]).remove();
                    //	}
                    formElement.children("[data-retool-error]").remove();
                    formElement.prepend(w.getStream());
                }
                else {
                    var appErrors = $('#retool-appErrors');
                    if (!appErrors.length) {
                        if (Retool.App.layoutView) {
                            Retool.App.layoutView.getContentElement().prepend('<div id="retool-appErrors"></div>');
                        }
                        else {
                            $('#rto-app-container').prepend('<div id="retool-appErrors"></div>');
                        }
                    }
                    w.appendToElement('#retool-appErrors');
                    $('#retool-appErrors').show();
                }
            }
        };
        ErrorRenderer.removeErrors = function (options) {
            var formElement = ErrorRenderer.getFormElement(options);
            if (formElement) {
                formElement.children('.retool-error').remove();
            }
        };
        ErrorRenderer.getFormElement = function (options) {
            var formElement;
            var target = options.target;
            if (target) {
                formElement = $('#' + target.getElementId() + "_errors");
                if (!formElement.length) {
                    formElement = target.getElement();
                }
            }
            else if (options.targetElement) {
                formElement = options.targetElement;
            }
            return formElement;
        };
        return ErrorRenderer;
    })();
    Retool.ErrorRenderer = ErrorRenderer;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SystemErrorRenderer = (function () {
        function SystemErrorRenderer() {
        }
        SystemErrorRenderer.render = function (w, error) {
            w.writeTag("div", "retool-sys-error");
            w.writeTag("div", "retool-error-icon").writeTag("span", "glyphicon glyphicon-exclamation-sign").write('</span></div>');
            w.writeTag("div", "retool-content");
            SystemErrorRenderer.renderTitle(w, error);
            if (error.messages) {
                SystemErrorRenderer.renderMessages(w, error);
            }
            if (error.source) {
                SystemErrorRenderer.renderSource(w, error.source);
            }
            if (error.script_stack && error.script_stack.items) {
                SystemErrorRenderer.renderScriptStack(w, error.script_stack, error.name);
            }
            if (error.jsStack) {
                SystemErrorRenderer.renderJSStack(w, error.jsStack);
            }
            w.write('</div>');
            w.write('</div>');
        };
        SystemErrorRenderer.formatFilename = function (filename) {
            return Retool.FileSystem.PathInfo.getFilenameWithoutExtension(filename);
        };
        SystemErrorRenderer.renderTitle = function (w, e) {
            var title = e.title;
            if (!title && e.messages && e.messages.length) {
                title = e.messages[0];
            }
            title = title || "Error";
            w.writeTag("h2", null);
            var i = title.indexOf(':');
            if (i == -1) {
                w.text(title);
            }
            else {
                w.writeTag("span", "sub").text(title.substr(0, i)).write('</span>').text(title.substr(i));
            }
            var filename;
            var stackItem = SystemErrorRenderer.getTopScriptStackItem(e);
            if (stackItem) {
                filename = stackItem.filename;
            }
            else if (e.source && e.source.filename) {
                filename = e.source.filename;
            }
            if (filename) {
                w.writeTag("small", null).text("in").write("</small>");
                w.writeTag("em", null).text(SystemErrorRenderer.formatFilename(filename)).write("</em>");
            }
            w.write('</h2>');
        };
        SystemErrorRenderer.getTopScriptStackItem = function (e) {
            if (e.script_stack && e.script_stack.items && e.script_stack.items.length) {
                return e.script_stack.items[0];
            }
            return null;
        };
        SystemErrorRenderer.renderMessages = function (w, e) {
            w.writeTag("p", "retool-message");
            var messages = e.messages;
            var start = 0;
            if (!e.title) {
                start = 1;
            }
            for (var i = start; i < messages.length; i++) {
                if (i > 0) {
                    w.write('<br>');
                }
                w.prettyText(messages[i]);
            }
            w.write('</p>');
        };
        SystemErrorRenderer.renderSource = function (w, source) {
            if (source.codeText || source.codeLink) {
                w.writeTag("div", "retool-codeline");
                if (source.codeLink) {
                    w.writeTag("a", null, { href: "#", "data-id": source.id, "data-action": source.type, "data-file": source.filename }).text(source.codeLink).write('</a> ');
                }
                if (source.codeText) {
                    w.writeTag("span", "retool-code").text(source.codeText).write('</span>');
                }
                w.write('</div>');
            }
        };
        SystemErrorRenderer.renderScriptStack = function (w, scriptStack, errorName) {
            w.writeTag('div', null, { "data-toggle-target": "true" });
            w.writeTag("a", "retool-error-toggle-show retool-alert-link", { href: "#", "data-toggle-class": "retool-show-all" }).text("Show Stack Trace").write('</a>');
            w.writeTag("a", "retool-error-toggle-hide retool-alert-link", { href: "#", "data-toggle-class": "retool-show-all" }).text("Hide Stack Trace").write('</a>');
            w.writeTag("div", "");
            w.writeTag("div", "retool-stack-trace");
            var stackItems = scriptStack.items;
            var count = 0;
            for (var i = stackItems.length - 1; i >= 0; i--) {
                var stackItem = stackItems[i];
                w.write('<div>');
                var methodName = stackItem.method_name;
                if (stackItem.method_name && stackItem.method_name[0] == "@") {
                    w.writeTag("span", "retool-label retool-label-info retool-stack-source").write('ELEMENT EXPRESSION</span> ');
                    methodName = methodName.substr(1);
                }
                else if (stackItem.filename) {
                    var fileType = Retool.FileSystem.FilePath.getType(stackItem.filename);
                    if (fileType == 1 /* Model */) {
                        w.writeTag("span", "retool-label retool-label-warning retool-stack-source").write('MODEL METHOD</span> ');
                    }
                    else if (fileType == 0 /* Template */) {
                        w.writeTag("span", "retool-label retool-label-info retool-stack-source").write('TEMPLATE METHOD</span> ');
                    }
                }
                else if (stackItem.source == "server") {
                    w.writeTag("span", "retool-label retool-label-warning retool-stack-source").write('SERVER METHOD</span> ');
                }
                else {
                    w.writeTag("span", "retool-label retool-label-info retool-stack-source").write('BROWSER METHOD</span> ');
                }
                if (stackItem.elementId) {
                    w.writeTag("a", null, { href: "#", "data-file": stackItem.filename, "data-id": stackItem.elementId, "data-action": "element" });
                    w.writeTag('strong', "retool-stack-method").text(methodName).write(':</strong> ');
                    if (stackItem.expression) {
                        w.text(stackItem.expression);
                    }
                    w.write('</a>');
                }
                else {
                    w.writeTag("a", null, { href: "#", "data-file": stackItem.filename, "data-id": stackItem.line_number, "data-action": "code" });
                    if (methodName) {
                        w.writeTag('strong', "retool-stack-method").text(methodName).write(' </strong>');
                    }
                    if (stackItem.filename) {
                        if (methodName) {
                            w.text(" in ");
                        }
                        w.write('<strong>').text(SystemErrorRenderer.formatFilename(stackItem.filename)).write("</strong>").text("  at line: ").write('<strong>').text(stackItem.line_number).write('</strong>');
                    }
                    w.write('</a>');
                }
                if (i == 0) {
                    w.write(' ').writeTag("span", "retool-label retool-label-danger retool-stack-error");
                    if (errorName == "compile") {
                        w.text("<- COULD NOT COMPILE THIS FILE");
                    }
                    else {
                        w.text("<- ERROR OCCURED HERE");
                    }
                    w.write('</span>');
                }
                count++;
            }
            for (i = 0; i < count; i++) {
                w.write('</div>');
            }
            w.write('</div>');
            w.write('</div>');
            w.write('</div>');
        };
        SystemErrorRenderer.renderJSStack = function (w, stack) {
            var jsStackLines = stack.toString().split('\n');
            for (var j = 0; j < jsStackLines.length; j++) {
                w.text(jsStackLines[j]).write('<br>');
            }
        };
        SystemErrorRenderer.writeErrorsToPage = function (errors) {
            if (!errors || errors.length == 0) {
                // $('#retool-error-bar').remove();
                return;
            }
            var $errorBar = $('#retool-error-bar');
            if (!$errorBar.length) {
                $errorBar = $('<div id="retool-error-bar"></div>');
                $('body').prepend($errorBar);
                $errorBar.on('click', '.retool-error-open-message', function (event) {
                    event.preventDefault();
                    $errorBar.addClass('retool-expanded');
                });
                $errorBar.on('click', '.retool-error-close-message', function (event) {
                    event.preventDefault();
                    $errorBar.removeClass('retool-expanded');
                });
                $errorBar.on('click', '[data-action]', function (event) {
                    event.preventDefault();
                    var action = $(this).data("action");
                    var id = $(this).data("id");
                    var filename = $(this).data("file");
                    if (action == "close") {
                        $('#retool-error-bar').remove();
                        return;
                    }
                    if (action == "element") {
                        var view = Retool.App.contentView;
                        var template = Retool.App.templates.getByFilename(filename);
                        Retool.App.ide.show({ id: id, shiftClick: false, view: view, compiledTemplate: template });
                    }
                    else if (action == "code") {
                        var lineNo = parseInt(id, 10) - 1;
                        Retool.App.ide.gotoCodeLine({ filename: filename, line: lineNo });
                    }
                });
            }
            var w = new Retool.Writer();
            w.writeTag("div", "retool-error-open-message").text("This page contains errors, click to view.").write('</div>');
            w.writeTag("a", "retool-error-close", { href: "#", "data-action": "close" }).write("&times;</a>");
            w.writeTag("div", "retool-error-body");
            w.writeTag("div", "retool-error-close-message").text("Click to hide errors.").write('</div>');
            for (var i = 0; i < errors.length; i++) {
                var error = errors[i];
                SystemErrorRenderer.render(w, error);
            }
            w.write('</div>');
            w.writeToElement($errorBar);
        };
        return SystemErrorRenderer;
    })();
    Retool.SystemErrorRenderer = SystemErrorRenderer;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var PageRenderer = (function () {
        function PageRenderer() {
            this.styleElementManager = new Retool.StyleElementManager();
            if (Retool.browser) {
                this.preparePage();
            }
        }
        PageRenderer.prototype.preparePage = function () {
            // useWebsiteStyles(false);
            var w = new Retool.Writer();
            w.write('<div id="retool-working" style="display:none">Working...</div>');
            w.appendToElement('body');
            this.attachEvents();
            return true;
        };
        PageRenderer.renderUnsupportedBrowser = function () {
            var w = new Retool.Writer();
            w.write('<div id="retool-unsupported-browser">');
            w.write('Thanks for visiting this site.<br><br><br>');
            w.text("It appears that the browser you are using is not supported by this application.");
            w.write('<br><br>');
            w.write("We recommend using <strong>Google Chrome</strong> or <strong>Firefox</strong>.<br><br>To use Internet Explorer you must be on version 10.0 or greater. ");
            w.write('</div>');
            w.appendToElement('body');
        };
        PageRenderer.isUnsupportedBrowser = function () {
            var userAgent = navigator.userAgent;
            if (userAgent) {
                if (userAgent.indexOf('MSIE') != -1) {
                    var ieVersion = PageRenderer.getInternetExplorerVersion();
                    if (ieVersion < 10) {
                        return true;
                    }
                }
            }
            return false;
        };
        PageRenderer.prototype.renderFirstView = function (url) {
            $('#retool-login').remove();
            if (Retool.applicationStartupErrors) {
                var msg = Retool.applicationStartupErrors;
                Retool.displayException(msg);
            }
            this.url = url;
            var w = new Retool.Writer();
            var modal = new Retool.ModalView("modal");
            modal.renderModal(w, "");
            Retool.App.modalView = modal;
            Retool.viewContainers["modal"] = modal;
            w.appendToElement('body');
            Retool.App.layoutView = new Retool.LayoutView("m");
            Retool.viewContainers["m"] = Retool.App.layoutView;
            this.renderTemplate(url.appName, {}, function (err) {
                // $("h1[id^='rt-']").attr('contenteditable',true);
            });
        };
        PageRenderer.prototype.renderTemplate = function (appName, options, done) {
            var layoutName;
            layoutName = appName + ".application";
            var layoutTemplate = Retool.App.templates.get(layoutName);
            options = options || {};
            options.template = layoutTemplate;
            this.renderLayout(options, function (err) {
                if (done) {
                    done(err);
                }
            });
            return layoutTemplate;
        };
        PageRenderer.prototype.renderLayout = function (options, done) {
            var self = this;
            Retool.App.layoutView.render(options, function (err) {
                if (Retool.browser) {
                    self.refreshStylesIfNeeded(options.template);
                }
                if (done) {
                    done(err);
                }
            });
        };
        PageRenderer.prototype.refreshStylesIfNeeded = function (layout) {
            if (this.styleElementManager.stylesNeedRefresh(layout)) {
                this.styleElementManager.updateDocument(layout);
            }
        };
        PageRenderer.prototype.attachEvents = function () {
            if (Retool.eventsAttached) {
                return;
            }
            var $root = $('body');
            $root.on("click", "[id^='rt-']", function (event) {
                if (event.shiftKey) {
                    Retool.raise(this, "onshiftclick", event);
                }
                else {
                    Retool.raise(this, "onclick", event);
                }
            });
            $root.on("blur", "[id^='rt-']", function (event) {
                Retool.raise(this, "onblur", event);
            });
            $root.on("focus", "[id^='rt-']", function (event) {
                Retool.raise(this, "onfocus", event);
            });
            $root.on("keypress", "[id^='rt-']", function (event) {
                Retool.raise(this, "onkeypress", event);
            });
            $root.on("keydown", "[id^='rt-']", function (event) {
                Retool.raise(this, "onkeydown", event);
            });
            $root.on("keyup", "[id^='rt-']", function (event) {
                Retool.raise(this, "onkeyup", event);
            });
            $root.on("change", "[id^='rt-']", function (event) {
                Retool.raise(this, "onchange", event);
            });
            $root.on('click', function (event) {
                Retool.hideDropLists();
            });
            $root.on("click", "dl.tabs > dd", function (event) {
                var $this = $(this);
                var dl = $this.closest('dl');
                dl.children('dd').removeClass('retool-active');
                $this.addClass('retool-active');
                var ul = dl.next("ul");
                ul.children("li").removeClass("retool-active").eq($this.index()).addClass("retool-active");
                event.preventDefault();
            });
            $root.on("click", '.alert .close', function (event) {
                event.preventDefault();
                event.stopPropagation();
                $(this).closest('.alert').remove();
            });
            $root.on("click", '.retool-error .retool-close', function (event) {
                event.preventDefault();
                event.stopPropagation();
                $(this).closest('.retool-error').remove();
            });
            $root.on("click", '[data-toggle-class]', function (event) {
                event.preventDefault();
                event.stopPropagation();
                var className = $(this).data('toggle-class');
                $(this).closest('[data-toggle-target]').toggleClass(className);
            });
            $root.on('focus', '.click-on-focus', function (event) {
                if (!event.shiftKey) {
                    this.click();
                }
            });
            PageRenderer.popStateOn();
            Retool.eventsAttached = true;
        };
        PageRenderer.popStateOn = function () {
            window.onpopstate = function (event) {
                if (Retool.App && Retool.App.viewRenderCount > 1) {
                    var state = event.state;
                    if (!state) {
                        state = { main: window.location.pathname + window.location.search };
                    }
                    if (Retool.App.page.url.toDisplay() != state.main) {
                        Retool.App.layoutView.redirect(null, { url: Retool.Url.fromHistory(state.main), noPushState: true }, function () {
                        });
                    }
                    var sideViewContainer = Retool.viewContainers["s2"];
                    if (state.side) {
                        if (!sideViewContainer || (sideViewContainer.url.toDisplay() != state.side)) {
                            if (!sideViewContainer) {
                            }
                            sideViewContainer.render({ url: Retool.Url.fromHistory(state.side), noPushState: true });
                        }
                    }
                    else {
                        if (sideViewContainer && sideViewContainer.activated) {
                            sideViewContainer.deactivate();
                        }
                    }
                    setTimeout(function () {
                        $('body').get(0).scrollLeft = 99999;
                        $('html').get(0).scrollLeft = 99999;
                    }, 0);
                }
            };
        };
        PageRenderer.popStateOff = function () {
            window.onpopstate = function () {
            };
        };
        PageRenderer.getInternetExplorerVersion = function () {
            var rv = -1; // Return value assumes failure.
            if (navigator.appName == 'Microsoft Internet Explorer') {
                var ua = navigator.userAgent;
                var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
                if (re.exec(ua) != null)
                    rv = parseFloat(RegExp.$1);
            }
            return rv;
        };
        PageRenderer.prototype.clearSelection = function () {
            var sel;
            if (document.selection && document.selection.empty) {
                document.selection.empty();
            }
            else if (window.getSelection) {
                sel = window.getSelection();
                if (sel && sel.removeAllRanges)
                    sel.removeAllRanges();
            }
        };
        return PageRenderer;
    })();
    Retool.PageRenderer = PageRenderer;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var RenderingContext = (function (_super) {
        __extends(RenderingContext, _super);
        function RenderingContext(name, viewModel, model, parent) {
            _super.call(this, null);
            this.model = model;
            this.name = name;
            this.parent = parent;
            this.viewModel = viewModel;
            if (model) {
                this.modelDef = model.modelDef;
            }
        }
        RenderingContext.prototype.getMissingProperty = function (params) {
            var name = params.name;
            if (name == this.name) {
                return this.model;
            }
            var p = this.parent;
            while (p) {
                if (p.name == name) {
                    return p.model;
                }
                p = p.parent;
            }
            if (name == "index") {
                return this.arrayIndex;
            }
            if (name == "parent") {
                return this.parent;
            }
            return null;
        };
        /*
        callMissingMethod(params:VM.ICallParameters):any {
            if (params.name == "encodeURIComponent"){
                return encodeURIComponent(params.getIndex(0));
            }
            if (this.model){
                this.model.callMethod(params);
            }
            else {
                this.viewModel.callMethod(params);
            }
        }
        */
        RenderingContext.prototype.evaluateMethod = function (methodInfo, localProperties) {
            // optimize by setting a local property equal to context name
            if (this.name && this.model) {
                localProperties = localProperties || {};
                localProperties[this.name] = this.model;
            }
            var g = new RenderingContextGlobal(this);
            return Retool.VM.executeMethodSync({ target: this.viewModel, methodInfo: methodInfo, globalTarget: g, localProperties: localProperties });
        };
        RenderingContext.prototype.evaluateMethodAsync = function (methodInfo, done, localProperties) {
            if (this.name && this.model) {
                localProperties = localProperties || {};
                localProperties[this.name] = this.model;
            }
            var g = new RenderingContextGlobal(this);
            return Retool.VM.executeMethodAsync({ target: this.viewModel, methodInfo: methodInfo, globalTarget: g, localProperties: localProperties }, done);
        };
        RenderingContext.prototype.vm_get_index = function (params) {
            return this.arrayIndex;
        };
        RenderingContext.prototype.vm_get_parent = function (params) {
            return this.parent;
        };
        RenderingContext.prototype.vm_set_template = function (params) {
            throw "template property is not settable";
        };
        RenderingContext.prototype.setMissingProperty = function (params) {
            if (this.model) {
                return this.model.setProperty(params);
            }
            this.viewModel.setProperty(params);
        };
        RenderingContext.prototype.getRow = function (index) {
            if (this.model)
                return this.model.getRow(index);
            return null;
        };
        RenderingContext.prototype.getLength = function () {
            if (this.model)
                return this.model.getLength();
            return 0;
        };
        RenderingContext.prototype.copyToPreviousValues = function () {
            if (this.model) {
                this.model.copyToPreviousValues();
                return;
            }
        };
        RenderingContext.prototype.getAppName = function () {
            if (this.viewModel) {
                return this.viewModel.template.appName;
            }
            return null;
        };
        RenderingContext.prototype.getStamp = function () {
            if (this.model)
                return this.model.guid + ":" + this.model.getVersion();
            return "1";
        };
        RenderingContext.prototype.getFieldErrors = function (fieldName) {
            if (this.model)
                return this.model.getFieldErrors(fieldName);
        };
        RenderingContext.prototype.hasErrors = function (fieldName) {
            if (this.model)
                return this.model.hasErrors(fieldName);
            return this.viewModel.hasErrors();
        };
        RenderingContext.prototype.getErrorVersion = function () {
            if (this.model)
                return this.model.errorVersion;
            return this.viewModel.errorVersion;
        };
        RenderingContext.prototype.getError = function () {
            if (this.model)
                return this.model.error;
            return this.viewModel.error;
        };
        RenderingContext.prototype.setError = function (error) {
            if (this.model) {
                this.model.setError(error);
            }
            else {
                this.viewModel.setError(error);
            }
        };
        RenderingContext.prototype.clearError = function () {
            if (this.model) {
                this.model.clearError();
            }
            else {
                this.viewModel.clearError();
            }
        };
        RenderingContext.prototype.getFieldIsLocked = function (fieldName) {
            return false;
        };
        RenderingContext.prototype.getAttribValue = function (element, attrib) {
            if (element._compiled && element._compiled[attrib]) {
                return this.evaluateMethod(element._compiled[attrib]);
            }
            return element[attrib];
        };
        return RenderingContext;
    })(Retool.VM.ObjectBase);
    Retool.RenderingContext = RenderingContext;
    var RenderingContextGlobal = (function (_super) {
        __extends(RenderingContextGlobal, _super);
        function RenderingContextGlobal(context) {
            _super.call(this, null);
            this.context = context;
        }
        RenderingContextGlobal.prototype.getMissingProperty = function (params) {
            var name = params.name;
            var c = this.context;
            if (name == c.name) {
                return c.model;
            }
            var p = c.parent;
            while (p) {
                if (p.name == name) {
                    return p.model;
                }
                p = p.parent;
            }
            if (name == "index") {
                return this.context.arrayIndex;
            }
            if (name == "parent") {
                return this.context.parent;
            }
            return null;
        };
        return RenderingContextGlobal;
    })(Retool.VM.Global);
    Retool.RenderingContextGlobal = RenderingContextGlobal;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var _entityMap = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': '&quot;',
        "'": '&#39;',
        "/": '&#x2F;'
    };
    var Writer = (function () {
        function Writer(type) {
            this.type = type;
            this.stream = "";
            this.afterRenderMethods = [];
            if (type == "ds") {
                this.classPrefix = "rto-";
                this.prefixAllCss = true;
            }
            else {
                this.classPrefix = "";
            }
            this.updatePage = true;
        }
        Writer.prototype.write = function (value) {
            this.stream += value;
            return this;
        };
        Writer.prototype.text = function (value) {
            this.stream += this.escapeHtml(value);
            return this;
        };
        Writer.prototype.escapeHtml = function (string) {
            return String(string).replace(/[&<>"'\/]/g, function (s) {
                return _entityMap[s];
            });
        };
        Writer.prototype.escapeAttr = function (string) {
            return String(string).replace(/[<>\"']/g, function (s) {
                return _entityMap[s];
            });
        };
        Writer.prototype.writeComponentId = function () {
            this.write(" id=\"rt-" + this.component.id + "\"");
            return this;
        };
        Writer.prototype.writeAttr = function (name, value) {
            this.write(" " + name + "=\"" + this.escapeAttr(value) + "\"");
            return this;
        };
        Writer.prototype.writeClass = function (classList) {
            this.write(' class="' + this.makeClassList(classList) + '"');
            return this;
        };
        Writer.prototype.writeHref = function (href) {
            if (this.staticPageMode) {
                href = this.component.createLinkHref(href);
                this.writeAttr("href", href);
            }
            else {
                this.writeAttr("href", "#");
            }
            return this;
        };
        Writer.prototype.writeTag = function (tagName, cssclass, attributes) {
            this.write("<" + tagName);
            if (cssclass) {
                this.writeClass(cssclass);
            }
            if (attributes) {
                for (var key in attributes) {
                    if (key == "id") {
                        this.writeAttr(key, this.classPrefix + attributes[key]);
                    }
                    else if (key == "href" && tagName != "link") {
                        this.writeHref(attributes[key]);
                    }
                    else {
                        this.writeAttr(key, attributes[key]);
                    }
                }
            }
            this.write(">");
            return this;
        };
        Writer.prototype.startTag = function (tagName, cssclass, attributes) {
            this.write("<" + tagName);
            if (!this.staticPageMode && !this.contentOnlyMode) {
                this.writeComponentId();
            }
            if (cssclass) {
                this.writeClass(cssclass);
            }
            if (attributes) {
                for (var key in attributes) {
                    if (key == "href") {
                        this.writeHref(attributes[key]);
                    }
                    else {
                        this.writeAttr(key, attributes[key]);
                    }
                }
            }
            this.write(">");
            this.component.tagName = tagName;
            return this;
        };
        Writer.prototype.endTag = function (tagName) {
            this.write("</" + tagName + ">");
            return this;
        };
        Writer.prototype.render = function (component) {
            if (this.component && !this.contentOnlyMode) {
                // if "light" mode skip this , do not write component id
                var childIndex = this.component.children.length;
                component.id = this.component.id + "-" + childIndex;
                component.parent = this.component;
                this.component.children.push(component);
            }
            else if (!component.id) {
                component.id = "0";
            }
            var restore = this.component;
            this.component = component;
            var restoreLength = this.stream.length;
            var handler = component.helper;
            try {
                handler.renderStartTag(this);
                component.children = [];
                handler.renderContent(this);
                handler.renderEndTag(this);
                handler.afterRender(this);
            }
            catch (e) {
                this.stream = this.stream.substr(0, restoreLength);
                // this.writeComponentError(component,e);
                var err = Retool.VM.VMError.cast(e);
                var attr = component.attr;
                err.addElementSource(attr);
                Retool.App.addError(err);
            }
            this.component = restore;
        };
        Writer.prototype.addAfterRender = function (func) {
            this.afterRenderMethods.push(func);
        };
        Writer.prototype.createComponentForHandler = function (handler, viewElement, dataPrefix, context) {
            var component;
            var isCustom;
            var customComponent;
            var customHelper;
            if (handler.settings.isCustom) {
                customHelper = handler;
                var contentElem = (customHelper).element;
                customComponent = new Retool.Component(viewElement);
                customComponent.helper = handler;
                customComponent.context = context;
                component = new Retool.Component(contentElem);
                component.customComponent = customComponent;
                handler = Retool.Runtime.helpers.get(contentElem.kind) || Retool.Runtime.helpers.get("div");
                isCustom = true;
            }
            else {
                component = new Retool.Component(viewElement);
            }
            component.helper = handler;
            component.dataPrefix = dataPrefix;
            component.parent = this.component;
            if (handler.settings.scopeContainer) {
                var model = handler.computeModel(component, context);
                context = new Retool.RenderingContext(component.attr.var, context.viewModel, model, context);
            }
            else if (isCustom) {
                var componentViewModel = Retool.ViewModel.create(customHelper.componentDef, context.viewModel);
                componentViewModel.customComponent = customComponent;
                componentViewModel.rootComponent = component;
                context = new Retool.RenderingContext(null, componentViewModel, null, context);
                context.type = "component";
                context.yieldContent = viewElement.children;
            }
            component.context = context;
            handler.calculateProperties(component);
            handler.init(component);
            return component;
        };
        Writer.prototype.createChildComponent = function (viewElement, dataPrefix, context) {
            if (!dataPrefix) {
                dataPrefix = this.component.dataPrefix;
            }
            var helper;
            var fieldDef;
            var modelDef = this.component.getModelDef();
            var kind = viewElement.kind;
            if (viewElement.value) {
                if (modelDef) {
                    fieldDef = Retool.App.getField(modelDef, viewElement.value);
                }
            }
            if (kind == "input" || kind == "static") {
                var inputType = "text";
                if (viewElement.type) {
                    inputType = viewElement.type;
                }
                else if (modelDef) {
                    fieldDef = Retool.App.getField(modelDef, viewElement.value);
                    if (fieldDef) {
                        inputType = Retool.Helpers.FieldToInputResolver.resolve(fieldDef.type);
                    }
                }
                if (kind[0] == "s") {
                    helper = Retool.Runtime.helpers.get("static_" + inputType);
                    if (!helper || helper.settings.kind == "r-generic") {
                        helper = Retool.Runtime.helpers.get("static_text");
                    }
                }
                else {
                    helper = Retool.Runtime.helpers.get("input_" + inputType);
                    if (!helper || helper.settings.kind == "r-generic") {
                        helper = Retool.Runtime.helpers.get("input_text");
                    }
                }
            }
            else {
                helper = Retool.Runtime.helpers.get(viewElement.kind);
            }
            if (!helper) {
                helper = Retool.Runtime.helpers.get("div");
            }
            var component = this.createComponentForHandler(helper, viewElement, dataPrefix, context || this.component.context);
            component.fieldDefinition = fieldDef;
            component.dataPrefix = dataPrefix;
            return component;
        };
        Writer.prototype.createRootComponent = function (options) {
            var component;
            if (options.component) {
                component = options.component;
            }
            else {
                var handler = Retool.Runtime.helpers.get(options.element.kind);
                component = new Retool.Component(options.element);
                component.helper = handler;
            }
            component.context = options.context;
            return component;
        };
        Writer.prototype.renderChildren = function (renderFunc, reverse) {
            if (this.component.attr.children) {
                this.renderChildComponents(this.component.attr.children, renderFunc, reverse);
            }
        };
        Writer.prototype.renderChildComponents = function (children, renderFunc, options) {
            var i = 0;
            var inc = 1;
            if (options && options.reverse) {
                i = children.length - 1;
                inc = -1;
            }
            var context = (options && options.context) || this.component.context;
            for (var n = children.length; n > 0; n--) {
                var child = children[i];
                i += inc;
                if (child.kind == "yield") {
                    var yieldElem = this.component.context.yieldContent;
                    if (yieldElem) {
                        var yieldContext = this.component.context.parent;
                        this.renderChildComponents(yieldElem, null, { context: yieldContext });
                    }
                }
                else {
                    var component = this.createChildComponent(child, null, context);
                    var settings = component.helper.settings;
                    if (settings.placeholderOnly) {
                        continue;
                    }
                    if (renderFunc) {
                        renderFunc(component);
                    }
                    else {
                        this.render(component);
                    }
                }
            }
        };
        Writer.prototype.writeToComponent = function (component) {
            if (component.localData.morph || component.helper.settings.morph) {
                Retool.morph.setContent({ start: "rt-" + component.id, end: "rt-" + component.id + "e" }, this.stream);
            }
            else {
                $('#rt-' + component.id).html(this.stream);
            }
            this.processAfterRenderMethods();
        };
        Writer.prototype.writeToElement = function (selector) {
            $(selector).html(this.stream);
            this.processAfterRenderMethods();
        };
        Writer.prototype.appendToElement = function (selector) {
            $(selector).append(this.stream);
            this.processAfterRenderMethods();
        };
        Writer.prototype.writeToElements = function (elements) {
            elements.html(this.stream);
        };
        Writer.prototype.replaceElement = function (selector) {
            $(selector).replaceWith(this.stream);
        };
        Writer.prototype.getStream = function () {
            return this.stream;
        };
        Writer.prototype.getLength = function () {
            return this.stream.length;
        };
        Writer.prototype.truncate = function (n) {
            this.stream = this.stream.substr(0, n);
        };
        Writer.prototype.makeClassList = function (classList) {
            if (classList) {
                var classes = classList.split(' ');
                for (var i = 0; i < classes.length; i++) {
                    if (classes[i]) {
                        if (classes[i][0] == "!") {
                            classes[i] = classes[i].substr(1);
                        }
                        else if (classes[i][0] == "-" || this.prefixAllCss) {
                            classes[i] = this.classPrefix + classes[i];
                        }
                    }
                }
                return classes.join(' ');
            }
            else {
                return "";
            }
        };
        Writer.prototype.makeClass = function (name) {
            return this.classPrefix + name;
        };
        Writer.prototype.processAfterRenderMethods = function () {
            var self = this;
            // wrap in timeout so previous draw can complete
            var methods = this.afterRenderMethods;
            this.afterRenderMethods = [];
            setTimeout(function () {
                if (methods.length) {
                    for (var i = 0; i < methods.length; i++) {
                        methods[i]();
                    }
                }
            }, 1);
        };
        Writer.prototype.prettyText = function (value) {
            if (value) {
                if ($.isArray(value)) {
                    // is array
                    var lines = value;
                    for (var i = 0; i < lines.length; i++) {
                        var line = lines[i];
                        if (i > 0) {
                            this.write('<br>');
                        }
                        this.writePrettyText(line);
                    }
                }
                else {
                    this.writePrettyText(value);
                }
            }
            return this;
        };
        Writer.prototype.writePrettyText = function (text) {
            var segments = text.split('**');
            var strong = false;
            var segment;
            for (var i = 0; i < segments.length; i++) {
                segment = segments[i];
                if (strong) {
                    this.write("<strong>").text(segment).write('</strong>');
                }
                else {
                    this.text(segment);
                }
                strong = !strong;
            }
        };
        Writer.prototype.writeIcon = function (iconName, cssclass, options) {
            var iconInfo = Retool.Icons[iconName];
            if (iconInfo) {
                if (iconInfo.font == "bootstrap") {
                    this.writeTag("span", "glyphicon glyphicon-" + iconInfo.className + " " + (cssclass || ""));
                    if (options && options.nospace) {
                        this.write('</span>');
                    }
                    else {
                        this.write('</span> ');
                    }
                }
            }
            return this;
        };
        Writer.prototype.writeComponentError = function (component, e) {
            this.write("<div").writeAttr("style", "display:inline-block").writeComponentId().write('><div').writeAttr("class", "component-error").write('>');
            this.writeTag("h2", null).text("Component Error: " + component.attr.kind).write('</h2>');
            this.writeTag("div", "error-content");
            if (component.attr.name) {
                this.writeTag("p", null).text("Component Name: " + component.attr.name).write('</p>');
            }
            var error = Retool.VM.VMError.cast(e);
            this.writeTag("p", null);
            if (error.messages) {
                for (var i = 0; i < error.messages.length; i++) {
                    if (i > 0) {
                        this.write("<br>");
                    }
                    this.text(error.messages[i]);
                }
            }
            this.write('</p>');
            if (error.jsStack) {
                this.writeTag("div", "error-stack");
                var stackLines = error.jsStack.toString().split('\n');
                for (var j = 0; j < stackLines.length; j++) {
                    this.text(stackLines[j]).write('<br>');
                }
                this.write('</div>');
            }
            this.write('</div></div>');
        };
        Writer.prototype.writeMorphStart = function () {
            this.startTag('script', null, { type: "text/x-placeholder" }).write('</script>');
        };
        Writer.prototype.writeMorphEnd = function () {
            this.write("<script").writeAttr("id", "rt-" + this.component.id + "e").writeAttr("type", "text/x-placeholder").write('></script>');
        };
        return Writer;
    })();
    Retool.Writer = Writer;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ComponentEvent = (function (_super) {
        __extends(ComponentEvent, _super);
        function ComponentEvent(component, event) {
            _super.call(this, null);
            if (event && event.domEvent) {
                this.domEvent = event.domEvent;
            }
            else {
                this.domEvent = event;
            }
            this.component = component;
            this.target = component;
            this.dirtyViews = [];
        }
        ComponentEvent.findComponent = function (element) {
            if (element) {
                var container = ComponentEvent.findView(element.id);
                if (container) {
                    return container.getComponent(element.id);
                }
            }
            return null;
        };
        ComponentEvent.findView = function (elementId) {
            if (!elementId) {
                return null;
            }
            var segments = elementId.split('-');
            var viewId = segments[1];
            return Retool.viewContainers[viewId];
        };
        ComponentEvent.prototype.raise = function (eventName) {
            this.eventName = eventName;
            this.bubbles = (eventName == "onclick") || (eventName == "onkeypress");
            if (eventName == "onclick") {
                Retool.App.clearErrors();
            }
            this.fireHandler();
        };
        ComponentEvent.prototype.callComponentMethod = function (methodName) {
            this.handled = true;
            this.addDirtyView(this.component.getView());
            this.component.raise({ methodName: methodName, event: this });
            if (!this.paused) {
                this.next();
            }
        };
        ComponentEvent.prototype.fireHandler = function () {
            var handler = this.component.helper;
            if (handler && handler[this.eventName]) {
                this.handled = true;
                handler[this.eventName](this);
                if (!this.paused) {
                    this.next();
                }
            }
            else {
                this.next();
            }
        };
        ComponentEvent.prototype.bubble = function () {
            this.stop = false;
        };
        ComponentEvent.prototype.next = function () {
            if (this.stop || !this.bubbles) {
                this.done();
                return;
            }
            this.component = this.component.parent;
            if (!this.component) {
                this.done();
            }
            else {
                this.fireHandler();
            }
        };
        ComponentEvent.prototype.pause = function () {
            this.paused = true;
        };
        ComponentEvent.prototype.resume = function (err) {
            if (err) {
                if (this.component) {
                    this.component.showFormError(err);
                }
                else {
                    Retool.displayException(err);
                }
            }
            this.next();
        };
        ComponentEvent.prototype.done = function () {
            if (this.eventName == "onclick") {
                Retool.hideDropLists(this.keepDropForComponent);
            }
            if (this.handled) {
                this.updateViews();
                Retool.App.showErrors();
            }
            // but not a designer event?
            // todo:  if method execute or refreshRequired
        };
        ComponentEvent.prototype.stopPropagation = function () {
            this.stop = true;
        };
        ComponentEvent.prototype.preventDefault = function () {
            if (this.domEvent) {
                this.domEvent.preventDefault();
            }
        };
        ComponentEvent.prototype.keepDropOpen = function () {
            this.keepDropForComponent = this.component;
        };
        ComponentEvent.prototype.valueChanged = function (c) {
            var view = c.getView();
            this.addDirtyView(view);
        };
        ComponentEvent.prototype.vm_get_context = function (params) {
            return this.getContext();
        };
        ComponentEvent.prototype.getContext = function () {
            return this.component.context;
        };
        ComponentEvent.prototype.vm_get_filter = function (params) {
            return this.filter;
        };
        ComponentEvent.prototype.vm_targetData = function (params) {
            return this.target.attr.data;
        };
        ComponentEvent.prototype.vm_get_data = function (params) {
            return this.target.attr.data;
        };
        ComponentEvent.prototype.addDirtyView = function (view) {
            var i = this.dirtyViews.indexOf(view);
            if (i == -1) {
                this.dirtyViews.push(view);
            }
        };
        ComponentEvent.prototype.updateViews = function () {
            for (var i = 0; i < this.dirtyViews.length; i++) {
                var view = this.dirtyViews[i];
                var viewModel = view.context.viewModel;
                var method;
                if (viewModel && viewModel.sourceFile) {
                    method = viewModel.getCompiledMethod("calculate");
                }
                if (method) {
                    var proc = Retool.VM.createProcess();
                    proc.viewModel = viewModel;
                    var self = this;
                    proc.onException = function (err) {
                        err = Retool.VM.VMError.cast(err);
                        Retool.App.addError(err);
                    };
                    proc.onComplete = function (result) {
                        var options = {};
                        view.refreshRenderedComponents(options);
                        view.updateDirty();
                        self.setViewFocus(view);
                    };
                    proc.start({ target: viewModel, methodInfo: method, args: null });
                }
                else {
                    view.refreshRenderedComponents({});
                    view.updateDirty();
                    this.setViewFocus(view);
                }
            }
        };
        ComponentEvent.prototype.setViewFocus = function (view) {
            if (this.focus && this.focus.view == view) {
                var focusComponent = view.findComponentByName(this.focus.name, this.focus.index);
                if (focusComponent) {
                    setTimeout(function () {
                        $("#" + focusComponent.getElementId() + " input:visible:enabled:first").focus().select();
                    }, 10);
                }
            }
        };
        ComponentEvent.prototype.vm_focus = function (params) {
            var index = (params.args.length > 1) ? params.args[1] : -1;
            this.setFocus(params.args[0], index);
        };
        ComponentEvent.prototype.setFocus = function (name, index) {
            this.focus = { name: name, index: index, view: this.component.getView() };
        };
        return ComponentEvent;
    })(Retool.VM.ObjectBase);
    Retool.ComponentEvent = ComponentEvent;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var AppIcons = (function () {
        function AppIcons() {
        }
        AppIcons.prototype.toDisplay = function (value) {
            var icon = AppIcons.icons[value];
            if (icon) {
                return icon.text;
            }
            return "";
        };
        AppIcons.prototype.renderList = function (renderItem) {
            for (var iconName in AppIcons.icons) {
                var icon = AppIcons.icons[iconName];
                renderItem(iconName, icon.text, function (w) {
                    w.write('<div class="rto-app-icon color0 app-icon-' + icon.className + '"><span></span></div>');
                    w.text(icon.text);
                });
            }
        };
        AppIcons.write = function (w, icon, color) {
            w.writeTag("div", "app-icon color" + color + " app-icon-" + icon.className).write('<span></span></div>');
        };
        AppIcons.getIcon = function (name) {
            return AppIcons.icons[name];
        };
        AppIcons.icons = {
            "truck": { font: "seta", text: "Truck", className: "truck" },
            "emailcart": { font: "seta", text: "Email - Shopping Cart", className: "emailcart" },
            "printer": { font: "seta", text: "Printer", className: "printer" },
            "saw": { font: "seta", text: "Saw", className: "saw" },
            "docmoney": { font: "seta", text: "Document - Money", className: "docmoney" },
            "phoneinquiry": { font: "seta", text: "Phone - Inquiry", className: "phoneinquiry" },
            "phone": { font: "seta", text: "Phone", className: "phone" },
            "arrowright": { font: "seta", text: "Arrow - Right", className: "arrowright" },
            "checklist": { font: "seta", text: "Checklist", className: "checklist" },
            "socialnetwork": { font: "seta", text: "Social Network", className: "socialnetwork" },
            "mobileinquiry": { font: "seta", text: "Mobile Inquiry", className: "mobileinquiry" },
            "etag": { font: "seta", text: "ETag", className: "etag" },
            "forklift": { font: "seta", text: "Forklift", className: "forklift" },
            "package": { font: "seta", text: "Package", className: "package" },
            "bagmoney": { font: "seta", text: "Bag - Money", className: "bagmoney" },
            "dashboard": { font: "seta", text: "Dashboard", className: "dashboard" },
            "shoppingbasket": { font: "seta", text: "Shopping Basket", className: "shoppingbasket" },
            "calculator": { font: "seta", text: "Calculator", className: "calculator" },
            "calendar": { font: "seta", text: "Calendar", className: "calendar" },
            "swap": { font: "seta", text: "Swap", className: "swap" },
            "ship": { font: "seta", text: "Ship", className: "ship" },
            "bugtrack": { font: "seta", text: "Bug Track", className: "bugtrack" },
            "bugtrack2": { font: "seta", text: "Bug Track 2", className: "bugtrack2" },
            "stopwatch": { font: "seta", text: "Stop Watch", className: "stopwatch" },
            "sliders": { font: "seta", text: "Sliders", className: "sliders" },
            "settings": { font: "seta", text: "Settings", className: "settings" },
            "storm": { font: "seta", text: "Storm", className: "storm" },
            "location": { font: "seta", text: "Location", className: "location" },
            "batteryfull": { font: "seta", text: "Battery - Full", className: "batteryfull" },
            "batterylow": { font: "seta", text: "Battery - Low", className: "batterylow" },
            "pin": { font: "seta", text: "Pin", className: "pin" },
            "lockopen": { font: "seta", text: "Lock - Open", className: "lockopen" },
            "lockclosed": { font: "seta", text: "Lock - Closed", className: "lockclosed" },
            "camera": { font: "seta", text: "Camera", className: "camera" },
            "buscard": { font: "seta", text: "Business Card", className: "buscard" },
            "key": { font: "seta", text: "Key", className: "key" },
            "textballoon": { font: "seta", text: "Text Balloon", className: "textballoon" },
            "mic": { font: "seta", text: "Microphone", className: "mic" },
            "hourglass": { font: "seta", text: "Hourglass", className: "hourglass" },
            "music": { font: "seta", text: "Music", className: "music" },
            "chartpoint": { font: "seta", text: "Chart - Point", className: "chartpoint" },
            "alarmclock": { font: "seta", text: "Alarm Clock", className: "alarmclock" },
            "train": { font: "seta", text: "Train", className: "train" },
            "compass": { font: "seta", text: "Compass", className: "compass" },
            "map": { font: "seta", text: "Map", className: "map" },
            "trash": { font: "seta", text: "Trash", className: "trash" },
            "megaphone": { font: "seta", text: "Megaphone", className: "megaphone" },
            "mapfolded": { font: "seta", text: "Map - Folded", className: "mapfolded" },
            "safe": { font: "seta", text: "Safe", className: "safe" },
            "rocket": { font: "seta", text: "Rocket", className: "rocket" },
            "paperplane": { font: "seta", text: "Paper Plane", className: "paperplane" },
            "todocheck": { font: "seta", text: "Todo - Check", className: "todocheck" },
            "disk": { font: "seta", text: "Disk", className: "disk" },
            "businessman": { font: "seta", text: "Businessman", className: "businessman" },
            "thumbsup": { font: "seta", text: "Thumbs Up", className: "thumbsup" },
            "computer": { font: "seta", text: "Computer", className: "computer" }
        };
        return AppIcons;
    })();
    Retool.AppIcons = AppIcons;
    Retool.addStaticAutoComplete("appicons", AppIcons);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    Retool.Icons = {
        "adjust": { font: "bootstrap", className: "adjust", text: "Adjust" },
        "arrow-down": { font: "bootstrap", className: "arrow-down", text: "Arrow - Down" },
        "arrow-left": { font: "bootstrap", className: "arrow-left", text: "Arrow - Left" },
        "arrow-right": { font: "bootstrap", className: "arrow-right", text: "Arrow - Right" },
        "arrow-up": { font: "bootstrap", className: "arrow-up", text: "Arrow - Up" },
        "asterisk": { font: "bootstrap", className: "asterisk", text: "Asterisk" },
        "backward": { font: "bootstrap", className: "backward", text: "Backward" },
        "ban-circle": { font: "bootstrap", className: "ban-circle", text: "Ban Circle" },
        "barcode": { font: "bootstrap", className: "barcode", text: "Barcode" },
        "bell": { font: "bootstrap", className: "bell", text: "Bell" },
        "bookmark": { font: "bootstrap", className: "bookmark", text: "Bookmark" },
        "bullhorn": { font: "bootstrap", className: "bullhorn", text: "Bullhorn" },
        "calendar": { font: "bootstrap", className: "calendar", text: "Calendar" },
        "camera": { font: "bootstrap", className: "camera", text: "Camera" },
        "certificate": { font: "bootstrap", className: "certificate", text: "Certificate" },
        "check": { font: "bootstrap", className: "ok", text: "Check" },
        "chevron-down": { font: "bootstrap", className: "chevron-down", text: "Chevron - Down" },
        "chevron-left": { font: "bootstrap", className: "chevron-left", text: "Chevron - Left" },
        "chevron-right": { font: "bootstrap", text: "Chevron Right", className: "chevron-right" },
        "chevron-up": { font: "bootstrap", className: "chevron-up", text: "Chevron - Up" },
        "circle-arrow-down": { font: "bootstrap", className: "circle-arrow-down", text: "Circle Arrow - Down" },
        "circle-arrow-left": { font: "bootstrap", className: "circle-arrow-left", text: "Circle Arrow - Left" },
        "circle-arrow-right": { font: "bootstrap", className: "circle-arrow-right", text: "Circle Arrow - Right" },
        "circle-arrow-up": { font: "bootstrap", className: "circle-arrow-up", text: "Circle Arrow - Up" },
        "cloud": { font: "bootstrap", className: "cloud", text: "Cloud" },
        "cloud-download": { font: "bootstrap", className: "cloud-download", text: "Cloud - Download" },
        "cloud-upload": { font: "bootstrap", className: "cloud-upload", text: "Cloud - Upload" },
        "collapse-down": { font: "bootstrap", className: "collapse-down", text: "Collapse - Down" },
        "collapse-up": { font: "bootstrap", className: "collapse-up", text: "Collapse - Up" },
        "cog": { font: "bootstrap", text: "Cog", className: "cog" },
        "comment": { font: "bootstrap", className: "comment", text: "Comment" },
        "credit-card": { font: "bootstrap", className: "credit-card", text: "Credit Card" },
        "cutlery": { font: "bootstrap", className: "cutlery", text: "Cutlery" },
        "dashboard": { font: "bootstrap", className: "dashboard", text: "Dashboard" },
        "download": { font: "bootstrap", className: "download", text: "Download" },
        "earphone": { font: "bootstrap", className: "earphone", text: "Earphone" },
        "edit": { font: "bootstrap", className: "edit", text: "Edit" },
        "envelope": { font: "bootstrap", className: "envelope", text: "Envelope" },
        "exclamation-sign": { font: "bootstrap", className: "exclamation-sign", text: "Exclamation Sign" },
        "euro": { font: "bootstrap", className: "euro", text: "Euro" },
        "expand": { font: "bootstrap", className: "expand", text: "Expand" },
        "export": { font: "bootstrap", className: "export", text: "Export" },
        "facetime-video": { font: "bootstrap", className: "facetime-video", text: "Facetime Video" },
        "fast-backward": { font: "bootstrap", className: "fast-backward", text: "Fast Backward" },
        "fast-forward": { font: "bootstrap", className: "fast-forward", text: "Fast Forward" },
        "file": { font: "bootstrap", className: "file", text: "File" },
        "film": { font: "bootstrap", className: "film", text: "Film" },
        "filter": { font: "bootstrap", className: "filter", text: "Filter" },
        "fire": { font: "bootstrap", className: "fire", text: "Fire" },
        "flag": { font: "bootstrap", className: "flag", text: "Flag" },
        "flash": { font: "bootstrap", className: "flash", text: "Flasg" },
        "folder-close": { font: "bootstrap", className: "folder-close", text: "Folder - Close" },
        "folder-open": { font: "bootstrap", className: "folder-open", text: "Folder - Open" },
        "forward": { font: "bootstrap", className: "forward", text: "Forward" },
        "fullscreen": { font: "bootstrap", className: "fullscreen", text: "Fullscreen" },
        "gbp": { font: "bootstrap", className: "gbp", text: "Greate Britian Pounds" },
        "glass": { font: "bootstrap", className: "glass", text: "Glass" },
        "globe": { font: "bootstrap", className: "globe", text: "Globe" },
        "hand-down": { font: "bootstrap", className: "hand-down", text: "Hand - Down" },
        "hand-left": { font: "bootstrap", className: "hand-left", text: "Hand - Left" },
        "hand-right": { font: "bootstrap", className: "hand-right", text: "Hand - Right" },
        "hand-up": { font: "bootstrap", className: "hand-up", text: "Hand - Up" },
        "heart": { font: "bootstrap", className: "heart", text: "Heart" },
        "heart-empty": { font: "bootstrap", className: "heart-empty", text: "Heart - Empty" },
        "home": { font: "bootstrap", className: "home", text: "Home" },
        "import": { font: "bootstrap", className: "import", text: "Import" },
        "inbox": { font: "bootstrap", className: "inbox", text: "Inbox" },
        "info-sign": { font: "bootstrap", className: "info-sign", text: "Info Sign" },
        "link": { font: "bootstrap", className: "link", text: "Link" },
        "list": { font: "bootstrap", className: "list", text: "List" },
        "list-alt": { font: "bootstrap", className: "list-alt", text: "List - Alt" },
        "lock": { font: "bootstrap", className: "lock", text: "Lock" },
        "log-in": { font: "bootstrap", className: "log-in", text: "Log In" },
        "log-out": { font: "bootstrap", className: "log-out", text: "Log Out" },
        "map-marker": { font: "bootstrap", className: "map-marker", text: "Map Marker" },
        "minus": { font: "bootstrap", className: "minus", text: "Minus" },
        "minus-sign": { font: "bootstrap", className: "minus-sign", text: "Minus Sign" },
        "move": { font: "bootstrap", className: "move", text: "Move" },
        "music": { font: "bootstrap", className: "music", text: "Music" },
        "new-window": { font: "bootstrap", className: "new-window", text: "New Window" },
        "off": { font: "bootstrap", className: "off", text: "Off" },
        "ok-circle": { font: "bootstrap", className: "ok-circle", text: "Ok - Circle" },
        "ok-sign": { font: "bootstrap", className: "ok-sign", text: "Ok - Sign" },
        "paperclip": { font: "bootstrap", className: "paperclip", text: "Paperclip" },
        "pause": { font: "bootstrap", className: "pause", text: "Pause" },
        "pencil": { font: "bootstrap", text: "Pencil", className: "pencil" },
        "phone": { font: "bootstrap", className: "phone", text: "Phone" },
        "phone-alt": { font: "bootstrap", className: "phone-alt", text: "Phone - Alt" },
        "picture": { font: "bootstrap", className: "picture", text: "Picture" },
        "plane": { font: "bootstrap", className: "plane", text: "Plane" },
        "play": { font: "bootstrap", className: "play", text: "Play" },
        "play-circle": { font: "bootstrap", className: "play-circle", text: "Play - Circle" },
        "plus": { font: "bootstrap", className: "plus", text: "Plus" },
        "plus-sign": { font: "bootstrap", className: "plus-sign", text: "Plus Sign" },
        "print": { font: "bootstrap", className: "print", text: "Print" },
        "pushpin": { font: "bootstrap", className: "pushpin", text: "Pushpin" },
        "qrcode": { font: "bootstrap", className: "qrcode", text: "QR Code" },
        "question-sign": { font: "bootstrap", className: "question-sign", text: "Question Sign" },
        "random": { font: "bootstrap", className: "random", text: "Random" },
        "record": { font: "bootstrap", className: "record", text: "Record" },
        "refresh": { font: "bootstrap", className: "refresh", text: "Refresh" },
        "remove": { font: "bootstrap", className: "remove", text: "Remove" },
        "remove-circle": { font: "bootstrap", className: "remove-circle", text: "Remove - Circle" },
        "remove-sign": { font: "bootstrap", className: "remove-sign", text: "Remove - Sign" },
        "repeat": { font: "bootstrap", className: "repeat", text: "Repeat" },
        "resize-full": { font: "bootstrap", className: "resize-full", text: "Resize - Full" },
        "resize-horizontal": { font: "bootstrap", className: "resize-horizontal", text: "Resize- Horizontal" },
        "resize-small": { font: "bootstrap", className: "resize-small", text: "Resize - Small" },
        "resize-vertical": { font: "bootstrap", className: "resize-vertical", text: "Resize - Vertical" },
        "retweet": { font: "bootstrap", className: "retweet", text: "Retweet" },
        "road": { font: "bootstrap", className: "road", text: "Road" },
        "save": { font: "bootstrap", className: "save", text: "Save" },
        "saved": { font: "bootstrap", className: "saved", text: "Saved" },
        "screenshot": { font: "bootstrap", className: "screenshot", text: "Screenshot" },
        "search": { font: "bootstrap", className: "search", text: "Search" },
        "send": { font: "bootstrap", className: "send", text: "Send" },
        "share": { font: "bootstrap", text: "Share", className: "share" },
        "share-alt": { font: "bootstrap", className: "share-alt", text: "Share - Alt" },
        "shopping-cart": { font: "bootstrap", className: "shopping-cart", text: "Shopping Cart" },
        "signal": { font: "bootstrap", className: "signal", text: "Signal" },
        "sort": { font: "bootstrap", className: "sort", text: "Sort" },
        "sort-by-alphabet": { font: "bootstrap", className: "sort-by-alphabet", text: "Sort By Alphabet" },
        "sort-by-alphabet-alt": { font: "bootstrap", className: "sort-by-alphabet-alt", text: "Sort By Alphabet - Alt" },
        "sort-by-attributes": { font: "bootstrap", className: "sort-by-attributes", text: "Sort by Attributes" },
        "sort-by-attributes-alt": { font: "bootstrap", className: "sort-by-attributes-alt", text: "Sort by Attributes - Alt" },
        "star": { font: "bootstrap", className: "star", text: "Star" },
        "star-empty": { font: "bootstrap", className: "star-empty", text: "Star - Empty" },
        "stats": { font: "bootstrap", className: "stats", text: "Stats" },
        "step-backward": { font: "bootstrap", className: "step-backward", text: "Step - Backward" },
        "setp-forward": { font: "bootstrap", className: "step-forward", text: "Step - Forward" },
        "stop": { font: "bootstrap", className: "stop", text: "Stop" },
        "tag": { font: "bootstrap", className: "tag", text: "Tag" },
        "tags": { font: "bootstrap", className: "tags", text: "Tags" },
        "th": { font: "bootstrap", className: "th", text: "Thumbnails" },
        "th-large": { font: "bootstrap", className: "th-large", text: "Thumbnails - Large" },
        "th-list": { font: "bootstrap", className: "th-list", text: "Thumbnails - List" },
        "tasks": { font: "bootstrap", className: "tasks", text: "Tasks" },
        "thumbs-down": { font: "bootstrap", className: "thumbs-down", text: "Thumbs Down" },
        "thumbs-up": { font: "bootstrap", className: "thumbs-up", text: "Thumbs Up" },
        "time": { font: "bootstrap", className: "time", text: "Time" },
        "tower": { font: "bootstrap", className: "tower", text: "Tower" },
        "transfer": { font: "bootstrap", className: "transfer", text: "Transfer" },
        "trash": { font: "bootstrap", className: "trash", text: "Trash" },
        "tree-conifer": { font: "bootstrap", className: "tree-conifer", text: "Tree - Conifer" },
        "tree-deciduous": { font: "bootstrap", className: "tree-deciduous", text: "Tree - Deciduous" },
        "unchecked": { font: "bootstrap", className: "unchecked", text: "Unchecked" },
        "upload": { font: "bootstrap", className: "upload", text: "Upload" },
        "usd": { font: "bootstrap", className: "usd", text: "US Dollars" },
        "user": { font: "bootstrap", text: "User", className: "user" },
        "warning-sign": { font: "bootstrap", className: "warning-sign", text: "Warning Sign" },
        "wrench": { font: "bootstrap", text: "Wrench", className: "wrench" },
        "zoom-in": { font: "bootstrap", className: "zoom-in", text: "Zoom In" },
        "zoom-out": { font: "bootstrap", className: "zoom-out", text: "Zoom Out" }
    };
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Morph = (function () {
        function Morph() {
        }
        Morph.createInstance = function (disableRange) {
            var supportsRange = (!disableRange) && typeof document !== 'undefined' && ('createRange' in document) && (typeof Range !== 'undefined') && Range.prototype.createContextualFragment;
            if (supportsRange) {
                return new Morph();
            }
            else {
                return new MorphIE();
            }
        };
        Morph.prototype.rangeFor = function (target, outerToo) {
            var range = document.createRange();
            var before = document.getElementById(target.start);
            var after = document.getElementById(target.end);
            if (!before || !after) {
                return null;
            }
            if (outerToo) {
                range.setStartBefore(before);
                range.setEndAfter(after);
            }
            else {
                range.setStartAfter(before);
                range.setEndBefore(after);
            }
            return range;
        };
        Morph.prototype.setContent = function (target, html, outerToo) {
            // get a range for the current metamorph object
            var range = this.rangeFor(target, outerToo);
            if (!range)
                return;
            // delete the contents of the range, which will be the
            // nodes between the starting and ending placeholder.
            range.deleteContents();
            // create a new document fragment for the HTML
            var fragment = range.createContextualFragment(html);
            // insert the fragment into the range
            range.insertNode(fragment);
        };
        return Morph;
    })();
    Retool.Morph = Morph;
    var MorphIE = (function () {
        function MorphIE() {
            this.wrapMap = {
                select: [1, "<select multiple='multiple'>", "</select>"],
                fieldset: [1, "<fieldset>", "</fieldset>"],
                table: [1, "<table>", "</table>"],
                tbody: [2, "<table><tbody>", "</tbody></table>"],
                tr: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
                colgroup: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
                map: [1, "<map>", "</map>"],
                _default: [0, "", ""]
            };
            this.checkCapabilities();
        }
        MorphIE.prototype.checkCapabilities = function () {
            var testEl = document.createElement('div');
            testEl.innerHTML = "<div></div>";
            testEl.firstChild.innerHTML = "<script></script>";
            this.needsShy = (testEl.firstChild.innerHTML === '');
            testEl = document.createElement('div');
            testEl.innerHTML = "Test: <script type='text/x-placeholder'></script>Value";
            this.movesWhitespace = (testEl.childNodes[0].nodeValue === 'Test:' && testEl.childNodes[2].nodeValue === ' Value');
        };
        MorphIE.prototype.setContent = function (target, html, outerToo) {
            var start = this.realNode(document.getElementById(target.start));
            var end = document.getElementById(target.end);
            var parentNode = end.parentNode;
            var node, nextSibling, last;
            // make sure that the start and end nodes share the same
            // parent. If not, fix it.
            this.fixParentage(start, end);
            // remove all of the nodes after the starting placeholder and
            // before the ending placeholder.
            node = start.nextSibling;
            while (node) {
                nextSibling = node.nextSibling;
                last = node === end;
                // if this is the last node, and we want to remove it as well,
                // set the `end` node to the next sibling. This is because
                // for the rest of the function, we insert the new nodes
                // before the end (note that insertBefore(node, null) is
                // the same as appendChild(node)).
                //
                // if we do not want to remove it, just break.
                if (last) {
                    if (outerToo) {
                        end = node.nextSibling;
                    }
                    else {
                        break;
                    }
                }
                node.parentNode.removeChild(node);
                // if this is the last node and we didn't break before
                // (because we wanted to remove the outer nodes), break
                // now.
                if (last) {
                    break;
                }
                node = nextSibling;
            }
            // get the first node for the HTML string, even in cases like
            // tables and lists where a simple innerHTML on a div would
            // swallow some of the content.
            node = this.firstNodeFor(start.parentNode, html);
            if (outerToo) {
                start.parentNode.removeChild(start);
            }
            while (node) {
                nextSibling = node.nextSibling;
                parentNode.insertBefore(node, end);
                node = nextSibling;
            }
        };
        MorphIE.prototype.realNode = function (start) {
            while (start.parentNode.tagName === "") {
                start = start.parentNode;
            }
            return start;
        };
        MorphIE.prototype.fixParentage = function (start, end) {
            if (start.parentNode !== end.parentNode) {
                end.parentNode.insertBefore(start, end.parentNode.firstChild);
            }
        };
        MorphIE.prototype.firstNodeFor = function (parentNode, html) {
            var arr = this.wrapMap[parentNode.tagName.toLowerCase()] || this.wrapMap._default;
            var depth = arr[0], start = arr[1], end = arr[2];
            if (this.needsShy) {
                html = '&shy;' + html;
            }
            var element = document.createElement('div');
            this.setInnerHTML(element, start + html + end);
            for (var i = 0; i <= depth; i++) {
                element = element.firstChild;
            }
            // Look for &shy; to remove it.
            if (this.needsShy) {
                var shyElement = element;
                while (shyElement.nodeType === 1 && !shyElement.nodeName) {
                    shyElement = shyElement.firstChild;
                }
                // At this point it's the actual unicode character.
                if (shyElement.nodeType === 3 && shyElement.nodeValue.charAt(0) === "\u00AD") {
                    shyElement.nodeValue = shyElement.nodeValue.slice(1);
                }
            }
            return element;
        };
        MorphIE.prototype.setInnerHTML = function (element, html) {
            var matches = [];
            if (this.movesWhitespace) {
                // Right now we only check for script tags with ids with the
                // goal of targeting morphs.
                html = html.replace(/(\s+)(<script id='([^']+)')/g, function (match, spaces, tag, id) {
                    matches.push([id, spaces]);
                    return tag;
                });
            }
            element.innerHTML = html;
            // If we have to do any whitespace adjustments do them now
            if (matches.length > 0) {
                var len = matches.length, idx;
                for (idx = 0; idx < len; idx++) {
                    var script = this.findChildById(element, matches[idx][0]), node = document.createTextNode(matches[idx][1]);
                    script.parentNode.insertBefore(node, script);
                }
            }
        };
        MorphIE.prototype.findChildById = function (element, id) {
            if (element.getAttribute('id') === id) {
                return element;
            }
            var len = element.childNodes.length, idx, node, found;
            for (idx = 0; idx < len; idx++) {
                node = element.childNodes[idx];
                found = node.nodeType === 1 && this.findChildById(node, id);
                if (found) {
                    return found;
                }
            }
        };
        return MorphIE;
    })();
    Retool.MorphIE = MorphIE;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var StyleElementManager = (function () {
        function StyleElementManager() {
        }
        StyleElementManager.prototype.updateDocument = function (layout) {
            this.layoutHRefMap = {};
            this.domNodes = this.getDomStyleNodes();
            this.getLayoutNodes(layout);
            this.deleteUnusedNodes();
            this.insertNodes();
        };
        StyleElementManager.prototype.deleteUnusedNodes = function () {
            for (var key in this.domNodes) {
                if (!this.layoutHRefMap[key]) {
                    var node = this.domNodes[key];
                    node.remove();
                }
            }
        };
        StyleElementManager.prototype.getLayoutNodes = function (layout) {
            var nodes = [];
            if (layout && layout.definition && layout.definition.elements) {
                var elements = layout.definition.elements;
                for (var i = 0; i < elements.length; i++) {
                    if (elements[i].kind == "r-stylesheet") {
                        var href = elements[i].href;
                        if (href) {
                            var node = this.createNode(href);
                            nodes.push(node);
                            this.layoutHRefMap[href] = href;
                        }
                    }
                }
            }
            this.layoutNodes = nodes;
        };
        StyleElementManager.prototype.createNode = function (href) {
            var existing = this.domNodes[href];
            var segments = href.split('/');
            var folder = segments[0];
            if (folder == "css") {
                if (existing && existing.is("STYLE")) {
                    return existing;
                }
                var cssFile = Retool.App.getFile(href);
                var content = (cssFile) ? cssFile.getContent() : "";
                var w = new Retool.Writer();
                w.writeTag("style", null, { "data-file": href }).write(content).write("<style>");
                return $(w.getStream());
            }
            else {
                if (existing && existing.is("LINK")) {
                    return existing;
                }
                var w = new Retool.Writer();
                var assetLink = Retool.Url.createAssetPath(href);
                w.writeTag("link", null, { href: assetLink, rel: "stylesheet", type: "text/css", "data-file": href });
                return $(w.getStream());
            }
        };
        StyleElementManager.prototype.getDomStyleNodes = function () {
            // create an object containing all existing style elements
            var doc = $(Retool.App.document);
            var elements = doc.find('head [data-file]');
            var existing = {};
            elements.each(function () {
                var $this = $(this);
                existing[$this.data('file')] = $this;
            });
            return existing;
        };
        StyleElementManager.prototype.insertNodes = function () {
            var prev = $(Retool.App.document).find('#retool-style-marker');
            if (!prev.length) {
                prev = $('<style id="retool-style-marker"></style>');
                $(Retool.App.document).find('head').append(prev);
            }
            for (var i = 0; i < this.layoutNodes.length; i++) {
                var node = this.layoutNodes[i];
                var next = prev.next();
                if (next.data("file") != node.data("file")) {
                    node.insertAfter(prev);
                }
                prev = node;
            }
        };
        StyleElementManager.prototype.stylesNeedRefresh = function (layout) {
            var currentList = [];
            var doc = $(Retool.App.document);
            doc.find('head [data-file]').each(function () {
                currentList.push($(this).data("file"));
            });
            var templateList = [];
            if (layout && layout.definition && layout.definition.elements) {
                var elements = layout.definition.elements;
                for (var i = 0; i < elements.length; i++) {
                    if (elements[i].kind == "r-stylesheet") {
                        var href = elements[i].href;
                        templateList.push(href);
                    }
                }
            }
            currentList.sort();
            templateList.sort();
            var c = currentList.join(",");
            var t = templateList.join(",");
            return (c != t);
        };
        return StyleElementManager;
    })();
    Retool.StyleElementManager = StyleElementManager;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ElementFunctions = (function () {
        function ElementFunctions(elem) {
            this.elem = elem;
        }
        ElementFunctions.prototype.firstChildOfKind = function (kind) {
            var children = this.elem.children;
            if (children) {
                for (var i = 0; i < children.length; i++) {
                    if (children[i].kind == kind) {
                        return children[i];
                    }
                }
            }
            return null;
        };
        return ElementFunctions;
    })();
    Retool.ElementFunctions = ElementFunctions;
    function Element(elem) {
        return new ElementFunctions(elem);
    }
    Retool.Element = Element;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ViewModel = (function (_super) {
        __extends(ViewModel, _super);
        function ViewModel(template, parent) {
            _super.call(this, null);
            this.errorVersion = 0;
            this.children = {};
            this.localData = {};
            this.propertyValues = {};
            this.parent = parent;
            this.template = template;
            if (template) {
                this.setSourceFile(template);
            }
        }
        ViewModel.createAsync = function (template, options, done) {
            var c = new ViewModel(template, options.parent);
            if (options.initialValues) {
                var values = options.initialValues;
                for (var key in values) {
                    c.set(key, values[key]);
                }
            }
            c.callConstructor(done);
        };
        ViewModel.create = function (template, parent) {
            var c = new ViewModel(template, parent);
            try {
                c.callConstructor();
            }
            catch (e) {
                var err = Retool.VM.VMError.cast(e);
                Retool.App.addError(err);
                Retool.App.showErrors();
            }
            return c;
        };
        ViewModel.prototype.setSourceFile = function (template) {
            this.sourceFile = template.sourceFile;
            this.myPrototype = ViewModel.getCompiledPrototype(template.sourceFile);
            var templateDef = template.definition;
            if (templateDef) {
                this.actions = templateDef.actions;
            }
            this.definition = templateDef;
        };
        ViewModel.prototype.createChild = function (id, template) {
            var child = ViewModel.create(template, this);
            this.children[id] = child;
            return child;
        };
        ViewModel.prototype.getChild = function (id) {
            return this.children[id];
        };
        ViewModel.prototype.hasErrors = function (fieldName) {
            if (this.error) {
                if (fieldName) {
                    if (this.error.fields) {
                        var fieldErrors = this.error.fields[fieldName];
                        if (fieldErrors && fieldErrors.length) {
                            return true;
                        }
                    }
                }
                else {
                    if (this.error && this.error.messages && this.error.messages.length) {
                        return true;
                    }
                }
            }
            return false;
        };
        ViewModel.prototype.setError = function (error) {
            this.error = error;
            this.errorVersion++;
        };
        ViewModel.prototype.clearError = function () {
            this.error = null;
        };
        ViewModel.prototype.callInitialize = function () {
            var proc = Retool.VM.createProcess();
            proc.debugEnabled = ViewModel.allowDebug();
            proc.viewModel = this;
            var self = this;
            if (this.actions) {
                if (this.actions["init"]) {
                    this.executeAction({ methodName: "init", viewModel: this });
                }
            }
            var initializeMethod = this.getPrototypeMethod("init");
            if (initializeMethod) {
                proc.onException = function (err) {
                    Retool.App.handleVMError(err);
                };
                proc.sync = true;
                proc.start({ target: self, methodInfo: initializeMethod, args: [] });
            }
        };
        ViewModel.allowDebug = function () {
            return (Retool.App.ide && Retool.App.ide.footerVisible());
        };
        ViewModel.tryCompile = function (file) {
            return ViewModel.getCompiledPrototype(file, { ignoreError: true });
        };
        ViewModel.getCompiledPrototype = function (file, options) {
            options = options || {};
            if (Retool.App.ide && (file.requiresCompile || !file.compiledPrototype)) {
                var content = file.getContent();
                var fileInfo = file.getInfo();
                var appName = fileInfo.application;
                var compiledCode;
                var sourceCode;
                if (content) {
                    sourceCode = content.source_code;
                }
                try {
                    if (sourceCode) {
                        var compileOptions = { sourceFile: file, tracking: true, appName: appName };
                        var program = Retool.App.ide.compileProgram(sourceCode, compileOptions);
                        var proto = program.getPrototype();
                        if (proto) {
                            compiledCode = proto;
                        }
                        else {
                            compiledCode = new Retool.VM.Prototype(file.name);
                        }
                    }
                    else {
                        compiledCode = new Retool.VM.Prototype(file.name);
                    }
                    file.compiledPrototype = compiledCode;
                    file.compileError = null;
                    file.requiresCompile = false;
                }
                catch (e) {
                    file.compileError = e.toString();
                    compiledCode = new Retool.VM.Prototype(file.name);
                    file.compiledPrototype = compiledCode;
                    file.requiresCompile = false;
                    if (!options.ignoreError) {
                        var error = Retool.VM.VMError.cast(e);
                        Retool.App.addError(error);
                    }
                }
            }
            if (file.baseFile) {
                file.compiledPrototype.base = ViewModel.getCompiledPrototype(file.baseFile);
            }
            if (!file.compiledPrototype) {
                file.compiledPrototype = new Retool.VM.Prototype(file.name);
            }
            return file.compiledPrototype;
        };
        ViewModel.prototype.hasMethod = function (name) {
            this.myPrototype = ViewModel.getCompiledPrototype(this.sourceFile, { ignoreError: true });
            if (this.getPrototypeMethod(name)) {
                return true;
            }
            if (this.actions && this.actions[name]) {
                return true;
            }
            return false;
        };
        ViewModel.prototype.vm_get_pod = function (params) {
            return this.podInstance;
        };
        ViewModel.prototype.vm_alert = function (params) {
            if (params.args && params.args.length) {
                alert(params.args[0]);
            }
        };
        ViewModel.prototype.vm_get_console = function (params) {
            return {
                log: function (text) {
                    if (Retool.App.ide && text) {
                        Retool.App.ide.consoleLog(text);
                    }
                }
            };
        };
        ViewModel.prototype.vm_get_history = function (params) {
            return history;
        };
        ViewModel.prototype.vm_get_window = function (params) {
            return window;
        };
        ViewModel.prototype.evaluateMethod = function (methodName, args) {
            if (this.actions) {
                return this.executeAction({ methodName: methodName, args: args });
            }
            var target = this;
            target.myPrototype = ViewModel.getCompiledPrototype(target.sourceFile);
            var methodInfo = target.getPrototypeMethod(methodName);
            if (methodInfo) {
                try {
                    var proc = Retool.VM.createProcess();
                    proc.viewModel = this;
                    proc.sync = true;
                    return proc.start({ target: this, methodInfo: methodInfo, args: args });
                }
                catch (e) {
                    return null;
                }
            }
            return null;
        };
        ViewModel.prototype.getCompiledMethod = function (methodName) {
            this.myPrototype = ViewModel.getCompiledPrototype(this.sourceFile);
            /*
            if (this.sourceFile.compileError){
                var err = new VM.VMError("Compile Error: Cannot call function " + methodName + ", invalid syntax in file: " + this.sourceFile.getFullName());
                err.messages.push(this.sourceFile.compileError);
                // this.handleVMError(err,component);
                return null;
            }
            */
            return this.getPrototypeMethod(methodName);
        };
        ViewModel.prototype.executeEventMethod = function (options) {
            if (this.actions) {
                return this.executeAction(options);
            }
            var event = options.event;
            var component = event.component;
            var target = this;
            var self = this;
            var methodInfo = target.getCompiledMethod(options.methodName);
            if (!methodInfo) {
                return false;
            }
            var view;
            if (component) {
                view = component.getView();
            }
            var proc = Retool.VM.createProcess();
            proc.viewModel = this;
            proc.onException = function (err) {
                if (!options.suppressError) {
                    Retool.App.handleVMError(err, component);
                }
            };
            var args = [];
            if (component && methodInfo.params) {
                var context = component.context;
                var mp = methodInfo.params;
                for (var p = 0; p < mp.length; p++) {
                    var pName = mp[p].name;
                    args.push(context.get(pName));
                }
            }
            var outletComponent;
            if (view instanceof Retool.OutletView) {
                outletComponent = new Retool.VM.VMComponent(view.parent);
            }
            else {
                outletComponent = new Retool.VM.VMComponent(view);
            }
            var localProperties = {
                "$$this": new Retool.VM.VMComponent(event.component),
                "$$target": new Retool.VM.VMComponent(event.target),
                "$$outlet": outletComponent
            };
            var startOptions = { component: component, target: this, methodInfo: methodInfo, args: args, localProperties: localProperties };
            if (Retool.App.ide) {
                proc.debugEnabled = ViewModel.allowDebug(); // need to check this
            }
            var currentAppName;
            if (view) {
                currentAppName = view.context.getAppName();
            }
            event.stopPropagation();
            var beforeContentView = Retool.App.contentView;
            proc.onComplete = function (result) {
                if (options.done) {
                    options.done(result);
                }
                event.addDirtyView(Retool.App.layoutView);
                /*
                if (view){
                    if (view instanceof LayoutView){
                        event.addDirtyView(view);
                    }
                    else if (App.contentView == beforeContentView){
                        event.addDirtyView(App.contentView);
                    }
                }
                */
                event.resume();
            };
            event.pause();
            proc.start(startOptions);
            return true;
        };
        ViewModel.prototype.executeAction = function (options) {
            var event = options.event;
            var method = this.actions[options.methodName];
            if (method) {
                var component;
                if (event) {
                    component = event.component;
                }
                try {
                    var result = method.apply(this.actions, [event]);
                    if (component) {
                        var view = component.getView();
                        if (event) {
                            event.addDirtyView(view);
                        }
                    }
                    return true;
                }
                catch (err) {
                    if (component) {
                        component.showFormError(err);
                    }
                    else {
                        Retool.displayException(err);
                    }
                }
            }
            return false;
        };
        ViewModel.prototype.vm_raiseEvent = function (params) {
            if (!this.customComponent)
                return;
            var eventName = params.getIndex(0);
            var data = params.getIndex(1);
            var event = new Retool.ComponentEvent(this.customComponent, null);
            event.data = data;
            event.raise(eventName);
        };
        ViewModel.prototype.vm_close = function (params) {
            var modal = Retool.App.modalView;
            $('#retoolModal').modal('hide');
            if (this.modalProcess) {
                var args = params.getArgs("result");
                this.modalProcess.resume(args.result);
            }
        };
        ViewModel.prototype.getMissingProperty = function (params) {
            if (params.name[0] == "$") {
                if (params.proc.isCodeComplete) {
                    return new Retool.VM.VMComponent(null);
                }
                var c;
                var elemName = params.name.substr(1);
                c = this.rootComponent.findLocalComponentByName(elemName, -1);
                if (c) {
                    return new Retool.VM.VMComponent(c);
                }
            }
            return _super.prototype.getMissingProperty.call(this, params);
        };
        return ViewModel;
    })(Retool.VM.ObjectWithProperties);
    Retool.ViewModel = ViewModel;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Url = (function () {
        function Url(url) {
            if (url) {
                if (typeof url == "string") {
                    this.parse(url, false);
                }
                else {
                    var template = url.template;
                    var segments = template.toLowerCase().split('.');
                    this.appName = segments[0];
                    this.templateName = segments[1];
                    this.query = url.query || {};
                    this.hash = url.hash;
                }
            }
        }
        Url.fromLocation = function (location) {
            var url = new Url();
            url.parse(location.pathname + location.search, true);
            return url;
        };
        Url.fromHistory = function (location) {
            var url = new Url();
            url.parse(location, true);
            return url;
        };
        Url.prototype.parse = function (url, fromLocation) {
            this.query = {};
            if (!url) {
                this.appName = "";
                this.templateName = "";
                return;
            }
            if (url[0] == '/') {
                url = url.substring(1);
            }
            var hashStart = url.indexOf('#');
            var parameterStart = url.indexOf('?');
            if (parameterStart > -1) {
                var parameters = url.substring(parameterStart + 1).split('&');
                for (var i = 0; i < parameters.length; i++) {
                    var parameter = parameters[i].split('=');
                    this.query[parameter[0]] = decodeURIComponent(parameter[1]);
                }
                url = url.substring(0, parameterStart);
            }
            if (hashStart > -1) {
                if (parameterStart > -1) {
                    this.hash = url.substring(hashStart + 1, parameterStart);
                }
                else {
                    this.hash = url.substring(hashStart + 1);
                }
                url = url.substring(0, hashStart);
            }
            var segments = url.split('/');
            var n = segments.length;
            var p = 0;
            if (fromLocation && Retool.App.urlRoot) {
                p += Retool.App.urlRootSegmentCount;
            }
            this.appName = Retool.App.SITE_APP_NAME;
            this.templateName = Url.DEFAULT_TEMPLATE_NAME;
            if (p < n) {
                var firstSeg = segments[p];
                if (firstSeg == Retool.App.ADMIN_APP_NAME) {
                    this.appName = Retool.App.ADMIN_APP_NAME;
                    p++;
                    if (p < n) {
                        var s = segments[p];
                        var template = Retool.App.templates.get(Retool.App.ADMIN_APP_NAME + "." + s);
                        if (template) {
                            this.templateName = s;
                            p++;
                        }
                        else {
                            this.appName = s;
                            p++;
                            if (p < n) {
                                this.templateName = segments[p];
                                p++;
                            }
                        }
                    }
                }
                else {
                    if (firstSeg == Retool.App.SITE_APP_NAME) {
                        p++;
                    }
                    if (p < n && segments[p]) {
                        this.templateName = segments[p];
                        p++;
                    }
                }
            }
            if (p < n) {
                this.query.id = segments[p];
            }
        };
        Url.prototype.toDisplay = function () {
            var display = "";
            if (Retool.App.urlRoot) {
                display += "/" + Retool.App.urlRoot;
            }
            if (this.appName != Retool.App.SITE_APP_NAME) {
                display += "/" + this.appName;
            }
            if (this.templateName != Url.DEFAULT_TEMPLATE_NAME) {
                display += "/" + this.templateName;
            }
            if (this.query.id) {
                display += "/" + this.query.id;
            }
            if (this.hash) {
                display += "#" + this.hash;
            }
            if (!display) {
                display = "/";
            }
            if (this.query) {
                var queryString = "";
                for (var qid in this.query) {
                    if (qid != "id") {
                        var queryValue = this.query[qid];
                        if (Retool.App.isPrimitive(queryValue)) {
                            queryString += "&" + qid + "=" + encodeURIComponent(queryValue);
                        }
                    }
                }
                if (queryString) {
                    display += "?" + queryString.substr(1);
                }
            }
            return display;
        };
        Url.prototype.getPath = function () {
            var path = this.appName + "/" + this.templateName;
            if (this.query.id) {
                path += "/" + this.query.id;
            }
            return path;
        };
        Url.createAssetPath = function (src) {
            if (src) {
                if (src.substr(0, 2) == "//") {
                    return src.substr(1);
                }
                if (src.indexOf('//') != -1) {
                    return src;
                }
                if (Retool.App.appAssetPath) {
                    if (src[0] == "/") {
                        return Retool.App.appAssetPath + src;
                    }
                    else {
                        return Retool.App.appAssetPath + "/" + src;
                    }
                }
                if (src[0] == "/") {
                    return src;
                }
                else {
                    return "/" + src;
                }
            }
            return null;
        };
        Url.createGetPath = function (src) {
            var url;
            return "/" + src;
        };
        Url.forRecordShow = function (path, recordId) {
            var segments = path.split('/');
            if (segments.length > 1) {
                return new Url(segments[0] + "/" + segments[1] + "/" + recordId);
            }
            return new Url(path + "/" + recordId);
        };
        Url.forRecordEdit = function (path, recordId) {
            var segments = path.split('/');
            if (segments.length > 1) {
                return new Url(segments[0] + "/" + segments[1] + "/" + recordId + "/edit");
            }
            return new Url(path + "/" + recordId + "/edit");
        };
        Url.DEFAULT_TEMPLATE_NAME = "index";
        return Url;
    })();
    Retool.Url = Url;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var RoutePattern = (function () {
        function RoutePattern(path, template) {
            this.keys = [];
            this.src = path;
            this.re = this.pathToRegExp(path);
            this.template = template;
        }
        RoutePattern.prototype.pathToRegExp = function (path) {
            var keys = this.keys;
            path = path.concat('/?').replace(/\/\(/g, '(?:/').replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?|\*/g, function (_, slash, format, key, capture, optional) {
                if (_ === "*") {
                    keys.push(undefined);
                    return _;
                }
                keys.push(key);
                slash = slash || '';
                return '' + (optional ? '' : slash) + '(?:' + (optional ? slash : '') + (format || '') + (capture || '([^/]+?)') + ')' + (optional || '');
            }).replace(/([\/.])/g, '\\$1').replace(/\*/g, '(.*)');
            return new RegExp('^' + path + '$', 'i');
        };
        return RoutePattern;
    })();
    Retool.RoutePattern = RoutePattern;
    var RouteMatcher = (function () {
        function RouteMatcher() {
            this.routes = [];
        }
        RouteMatcher.prototype.addRoute = function (path, template) {
            var route = new RoutePattern(path, template);
            this.routes.push(route);
        };
        RouteMatcher.prototype.match = function (uri, startAt) {
            var captures, i = startAt || 0;
            var routes = this.routes;
            for (var len = routes.length; i < len; ++i) {
                var route = routes[i], re = route.re, keys = route.keys, splats = [], params = {};
                if (captures = uri.match(re)) {
                    for (var j = 1, len = captures.length; j < len; ++j) {
                        var key = keys[j - 1], val = typeof captures[j] === 'string' ? decodeURI(captures[j]) : captures[j];
                        if (key) {
                            params[key] = val;
                        }
                        else {
                            splats.push(val);
                        }
                    }
                    return {
                        params: params,
                        splats: splats,
                        route: route,
                        next: i + 1
                    };
                }
            }
            return null;
        };
        return RouteMatcher;
    })();
    Retool.RouteMatcher = RouteMatcher;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var TemplateLocator = (function () {
        function TemplateLocator() {
            this._filePath = Retool.FileSystem.FilePath.forType(0 /* Template */);
            this._ext = Retool.FileSystem.FilePath.DEFAULT_FILE_EXTENSION;
        }
        TemplateLocator.prototype.getFile = function (name) {
            var filename = this.getFilename(name);
            if (filename) {
                return Retool.App.getFile(filename);
            }
            return null;
        };
        TemplateLocator.prototype.getFilename = function (name) {
            if (name) {
                return this._filePath + "/" + name.toLowerCase().replace(/\./g, '/') + this._ext;
            }
        };
        TemplateLocator.prototype.getPathFromFilename = function (filename) {
            var path = Retool.Templates.filenameToName(filename);
            if (path) {
                var segments = path.split('.');
                return segments.join('/');
            }
            return path;
        };
        TemplateLocator.prototype.getByFilename = function (filename) {
            var name = Retool.Templates.filenameToName(filename);
            return this.get(name);
        };
        TemplateLocator.prototype.get = function (name) {
            var file = this.getFile(name);
            if (file) {
                var template = file.compiledContent;
                if (Retool.App.ide && !template) {
                    template = this.createTemplate(name, file, file.getContent());
                    file.compiledContent = template;
                }
                if (template && !template.sourceFile) {
                    template.sourceFile = file;
                }
                return template;
            }
            return null;
        };
        TemplateLocator.prototype.removeFromCache = function (name) {
            var file = this.getFile(name);
            if (file) {
                file.compiledContent = null;
            }
        };
        TemplateLocator.prototype.createTemplate = function (name, file, definition) {
            try {
                name = name.replace(/\//g, '.');
                var t = Retool.App.ide.compileTemplate(name, file, Retool.App);
                return t;
            }
            catch (e) {
                Retool.App.addError(e);
            }
        };
        TemplateLocator.prototype.getDefaultAppTemplate = function () {
            return null;
        };
        TemplateLocator.prototype.getRouteTemplate = function (url) {
            return this.get(url.appName + "." + url.templateName);
        };
        TemplateLocator.prototype.getParams = function (url) {
            // path parameters in the format template/:id/:param_name/:param_value ...
            /*
            var path = url.path;
            var segments:string[];
            
            if (path){
                segments = path.split("/");
                var i = 2;
                if (i < segments.length){
                    params.id = decodeURIComponent(segments[i]);
                }
                i += 2;
                while (i < segments.length){
                    params[decodeURIComponent(segments[i -1])] = decodeURIComponent(segments[i]);
                    i += 2;
                }
            }
            */
            var params = {};
            if (url.query) {
                var query = url.query;
                for (var key in query) {
                    params[key] = query[key];
                }
            }
            return params;
        };
        return TemplateLocator;
    })();
    Retool.TemplateLocator = TemplateLocator;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Templates = (function () {
        function Templates() {
        }
        Templates.filenameToName = function (filename) {
            var info = Retool.FileSystem.PathInfo.parseFilename(filename);
            if (info.path) {
                var segments = info.path.split('/');
                var app = segments[1];
                return app + "." + Retool.FileSystem.PathInfo.getFilenameWithoutExtension(info.filename);
            }
            return null;
        };
        Templates.filenameToAppName = function (filename) {
            var info = Retool.FileSystem.PathInfo.parseFilename(filename);
            if (info.path) {
                var segments = info.path.split('/');
                var appName = segments[1];
                return appName;
            }
            return null;
        };
        return Templates;
    })();
    Retool.Templates = Templates;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ComponentLocator = (function () {
        function ComponentLocator() {
            this._filePath = Retool.FileSystem.FilePath.forType(8 /* Component */);
            this._ext = Retool.FileSystem.FilePath.DEFAULT_FILE_EXTENSION;
        }
        ComponentLocator.prototype.getFile = function (name) {
            var filename = this.getFilename(name);
            if (filename) {
                return Retool.App.getFile(filename);
            }
            return null;
        };
        ComponentLocator.prototype.getFilename = function (name) {
            if (name) {
                return this._filePath + "/" + name.toLowerCase() + this._ext;
            }
        };
        ComponentLocator.prototype.getByFilename = function (filename) {
            var name = this.filenameToName(filename);
            return this.get(name);
        };
        ComponentLocator.prototype.filenameToName = function (filename) {
            return Retool.FileSystem.PathInfo.getFilenameWithoutExtension(filename);
        };
        ComponentLocator.prototype.get = function (name) {
            var file = this.getFile(name);
            if (file) {
                var component = file.compiledContent;
                if (Retool.App.ide && !component) {
                    component = this.createComponent(name, file, file.getContent());
                    file.compiledContent = component;
                }
                if (component && !component.sourceFile) {
                    component.sourceFile = file;
                }
                return component;
            }
            return null;
        };
        ComponentLocator.prototype.wasModified = function (name) {
            this.removeFromCache(name);
            this.buildCustomHelper(name);
        };
        ComponentLocator.prototype.removeFromCache = function (name) {
            var file = this.getFile(name);
            if (file) {
                file.compiledContent = null;
            }
        };
        ComponentLocator.prototype.createComponent = function (name, file, definition) {
            try {
                name = name.replace(/\//g, '.');
                var t = Retool.App.ide.compileComponent(name, file, Retool.App);
                return t;
            }
            catch (e) {
                Retool.App.addError(e);
            }
        };
        ComponentLocator.prototype.buildCustomHelpers = function () {
            var folder = Retool.App.volume.getFolder(this._filePath);
            var self = this;
            if (folder) {
                folder.forEachFile(function (file) {
                    var name = Retool.FileSystem.PathInfo.getFilenameWithoutExtension(file.name);
                    self.buildCustomHelper(name);
                });
            }
        };
        ComponentLocator.prototype.buildCustomHelper = function (name) {
            var component = this.get(name);
            if (component) {
                var helper = Retool.Helpers.Custom.create(component);
                Retool.App.helpers.add(name, helper);
            }
        };
        return ComponentLocator;
    })();
    Retool.ComponentLocator = ComponentLocator;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var FileSystem;
    (function (FileSystem) {
        var PathInfo = (function () {
            function PathInfo() {
            }
            PathInfo.parseFilename = function (pathedFile) {
                var info = new PathInfo();
                if (pathedFile && pathedFile[0] == "/") {
                    pathedFile = pathedFile.substr(1);
                }
                var i = pathedFile.lastIndexOf('/');
                if (i == -1) {
                    info.filename = pathedFile;
                }
                else {
                    info.filename = pathedFile.substr(i + 1);
                    info.path = pathedFile.substr(0, i);
                }
                return info;
            };
            PathInfo.getExtension = function (filename) {
                var i = filename.indexOf('.');
                if (i == -1) {
                    return "";
                }
                else {
                    return filename.substr(i + 1);
                }
            };
            PathInfo.getFilenameWithoutExtension = function (filename) {
                var i = filename.indexOf('.');
                if (i == -1) {
                    return filename;
                }
                else {
                    return filename.substr(0, i);
                }
            };
            PathInfo.getModelPath = function (serviceId) {
                return "/models";
            };
            PathInfo.getParentPath = function (path) {
                if (path && path[path.length - 1] == "/") {
                    path = path.substr(0, path.length - 1);
                }
                var i = path.lastIndexOf('/');
                if (i != -1) {
                    return path.substr(0, i);
                }
                else {
                    return "";
                }
            };
            return PathInfo;
        })();
        FileSystem.PathInfo = PathInfo;
    })(FileSystem = Retool.FileSystem || (Retool.FileSystem = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var FileSystem;
    (function (FileSystem) {
        var File = (function () {
            function File(name, content) {
                this._content = content;
                var segments = name.split("/");
                var name = segments.pop();
                var folderPath;
                if (segments.length) {
                    folderPath = segments.join('/');
                }
                else {
                    folderPath = "";
                }
                if (folderPath && folderPath[0] == "/") {
                    this.path = folderPath.substr(1).toLowerCase();
                }
                else {
                    this.path = folderPath.toLowerCase();
                }
                this.name = name.toLowerCase();
            }
            File.prototype.isFolder = function () {
                return false;
            };
            File.prototype.isFile = function () {
                return true;
            };
            File.prototype.getFullName = function () {
                if (this.path) {
                    return this.path + "/" + this.name;
                }
                else {
                    return this.name;
                }
            };
            File.prototype.getInfo = function () {
                var i = this.name.indexOf('.');
                var info = {};
                if (i == -1) {
                    info.name = this.name;
                    info.extension = "";
                }
                else {
                    info.name = this.name.substr(0, i);
                    info.extension = this.name.substr(i + 1);
                }
                var segments = this.path.split('/');
                info.rootFolder = segments[0];
                info.application = segments[1];
                return info;
            };
            File.prototype.getContent = function () {
                return this._content;
            };
            File.prototype.setContent = function (value) {
                this._content = value;
                var name = this.getFullName();
                this.volume.fileData[name] = value;
            };
            return File;
        })();
        FileSystem.File = File;
    })(FileSystem = Retool.FileSystem || (Retool.FileSystem = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var FileSystem;
    (function (FileSystem) {
        var Folder = (function () {
            function Folder(parentPath, name) {
                this.parentPath = parentPath;
                this.name = name;
                this.entries = {};
            }
            Folder.prototype.isFolder = function () {
                return true;
            };
            Folder.prototype.isFile = function () {
                return false;
            };
            Folder.prototype.getEntries = function (options) {
                return this.entries;
            };
            Folder.prototype.forEachEntry = function (handler) {
                for (var key in this.entries) {
                    var entry = this.entries[key];
                    handler(entry);
                }
            };
            Folder.prototype.isEmpty = function () {
                for (var key in this.entries) {
                    return false;
                }
                return true;
            };
            Folder.prototype.forEachFolder = function (handler, options) {
                var entryList = (options && options.sorted) ? Retool.Sorter.sortedKeys(this.entries) : this.entries;
                for (var key in entryList) {
                    var entry = this.entries[key];
                    if (entry.isFolder()) {
                        handler(entry);
                    }
                }
            };
            Folder.prototype.forEachFile = function (handler, options) {
                var entryList = (options && options.sorted) ? Retool.Sorter.sortedKeys(this.entries) : this.entries;
                for (var key in entryList) {
                    var entry = this.entries[key];
                    if (entry.isFile()) {
                        handler(entry);
                    }
                }
            };
            Folder.prototype.getEntry = function (name) {
                var segments = name.split('/');
                var n = segments.length;
                var entry = this;
                for (var i = 0; i < n; i++) {
                    if (!entry || !entry.isFolder()) {
                        return null;
                    }
                    entry = entry.entries[segments[i]];
                }
                return entry;
            };
            Folder.prototype.getFile = function (name) {
                var entry = this.getEntry(name);
                if (entry && entry.isFile()) {
                    return entry;
                }
                else {
                    return null;
                }
            };
            Folder.prototype.getFolder = function (name) {
                var entry = this.getEntry(name);
                if (entry && entry.isFolder()) {
                    return entry;
                }
                else {
                    return null;
                }
            };
            Folder.prototype.addFileEntry = function (path, file, overwrite) {
                var folder = (path) ? this.createFolder(path, { ignoreExists: true }) : this;
                var existing = folder.entries[file.name];
                if (existing) {
                    if (existing.isFolder()) {
                        throw "Cannot create " + path + "/" + file.name + " , already exists as a folder";
                    }
                    if (!overwrite) {
                        throw "Cannot create " + path + "/" + file.name + " , file already exists";
                    }
                }
                folder.entries[file.name] = file;
            };
            Folder.prototype.removeFile = function (file) {
                delete this.entries[file.name];
            };
            Folder.prototype.createFolder = function (name, options) {
                var segments = name.split('/');
                var n = segments.length;
                var currentFolder = this;
                var entry;
                for (var i = 0; i < n - 1; i++) {
                    entry = currentFolder.entries[segments[i]];
                    if (!entry) {
                        entry = currentFolder.addFolder(segments[i]);
                    }
                    else if (!entry.isFolder()) {
                        throw "Cannot create folder: " + name + " , name already exists as file";
                    }
                    currentFolder = entry;
                }
                var entryName = segments[n - 1];
                var existing = currentFolder.entries[entryName];
                if (existing) {
                    if (!existing.isFolder()) {
                        throw "Cannot create folder: " + name + " , name already exists as file";
                    }
                    if (!options.ignoreExists) {
                        throw "Cannot create folder: " + name + " , folder already exists";
                    }
                    return existing;
                }
                return currentFolder.addFolder(entryName, options.hidden);
            };
            Folder.prototype.deleteFolder = function (name, options) {
                var segments = name.split('/');
                var n = segments.length;
                var currentFolder = this;
                var entry;
                for (var i = 0; i < n - 1; i++) {
                    entry = currentFolder.entries[segments[i]];
                    if (!entry) {
                        entry = currentFolder.addFolder(segments[i]);
                    }
                    else if (!entry.isFolder()) {
                        throw "Unable to delete folder: " + name + " , folder does not exist";
                    }
                    currentFolder = entry;
                }
                var entryName = segments[n - 1];
                var existing = currentFolder.entries[entryName];
                if (existing) {
                    delete currentFolder.entries[entryName];
                }
            };
            Folder.prototype.addFolder = function (name, hidden) {
                var path = (this.parentPath) ? this.parentPath + "/" + this.name : this.name;
                var folder = new Folder(path, name);
                folder.hidden = hidden;
                this.entries[name] = folder;
                return folder;
            };
            Folder.prototype.findAllFiles = function (files) {
                if (!files) {
                    files = [];
                }
                this.forEachFile(function (file) {
                    files.push(file);
                });
                this.forEachFolder(function (folder) {
                    folder.findAllFiles(files);
                });
                return files;
            };
            return Folder;
        })();
        FileSystem.Folder = Folder;
    })(FileSystem = Retool.FileSystem || (Retool.FileSystem = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var FileSystem;
    (function (FileSystem) {
        var Volume = (function () {
            function Volume(name, options) {
                this.name = name;
                this.cache = {};
                this.files = {};
                this.fileData = {};
                this.useFolders = options.useFolders;
                if (this.useFolders) {
                    this.root = new FileSystem.Folder("", "");
                }
            }
            Volume.prototype.addFile = function (file, overwrite) {
                if (this.useFolders) {
                    this.root.addFileEntry(file.path, file, overwrite);
                }
                var name = file.getFullName();
                this.files[name] = file;
                this.fileData[name] = file.getContent();
                file.volume = this;
            };
            Volume.prototype.createFolder = function (name, options) {
                if (!this.useFolders) {
                    return;
                }
                if (name && name[0] == "/") {
                    name = name.substr(1);
                }
                return this.root.createFolder(name, options || {});
            };
            Volume.prototype.getEntries = function (options) {
                return this.root.getEntries(options);
            };
            Volume.prototype.getFile = function (name) {
                if (name && name[0] == "/") {
                    name = name.substr(1);
                }
                var file = this.files[name];
                if (file) {
                    return file;
                }
                var data = this.fileData[name];
                if (data || (name in this.fileData)) {
                    file = new FileSystem.File(name, data);
                    file.volume = this;
                    this.files[name] = file;
                    return file;
                }
                return null;
            };
            Volume.prototype.getFolder = function (name) {
                if (!this.useFolders) {
                    throw "This volume does not use folders";
                }
                if (name && name[0] == "/") {
                    name = name.substr(1);
                }
                return this.root.getFolder(name);
            };
            Volume.prototype.removeFile = function (file) {
                var name = file.getFullName();
                this.files[name] = null;
                delete this.files[name];
                this.fileData[name] = null;
                delete this.fileData[name];
                if (this.useFolders) {
                    var folder = this.getFolder(file.path);
                    if (folder) {
                        folder.removeFile(file);
                    }
                }
            };
            Volume.prototype.removeFolder = function (folder) {
                if (!this.useFolders) {
                    return;
                }
                var parentFolder = (folder.parentPath) ? this.getFolder(folder.parentPath) : this.root;
                if (parentFolder) {
                    delete parentFolder.entries[folder.name];
                }
            };
            Volume.parseFilename = function (fullPath) {
                return FileSystem.PathInfo.parseFilename(fullPath);
            };
            Volume.prototype.findAllFiles = function (files) {
                // do: iterate fileData ? find all usages move foreach when possible
                // so we do not have to create File object for missing
                return this.root.findAllFiles();
            };
            Volume.prototype.forEachFile = function (match, callback) {
                if (match) {
                    var n = match.length;
                    for (var name in this.fileData) {
                        if (name.substr(0, n) == match) {
                            callback(name, this.fileData[name]);
                        }
                    }
                }
                else {
                    for (var name in this.fileData) {
                        callback(name, this.fileData[name]);
                    }
                }
            };
            Volume.prototype.removeAll = function () {
                if (this.useFolders) {
                    this.root = new FileSystem.Folder("", "");
                }
                this.files = {};
                this.fileData = {};
            };
            Volume.prototype.getCache = function (cacheKey) {
                return this.cache[cacheKey];
            };
            Volume.prototype.setCache = function (cacheKey, value) {
                this.cache[cacheKey] = value;
            };
            Volume.prototype.dumpCache = function () {
                this.cache = {};
            };
            Volume.prototype.isEmpty = function () {
                for (var key in this.fileData) {
                    return false;
                }
                return true;
            };
            return Volume;
        })();
        FileSystem.Volume = Volume;
    })(FileSystem = Retool.FileSystem || (Retool.FileSystem = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var FileSystem;
    (function (FileSystem) {
        (function (FileType) {
            FileType[FileType["Template"] = 0] = "Template";
            FileType[FileType["Model"] = 1] = "Model";
            FileType[FileType["Controller"] = 2] = "Controller";
            FileType[FileType["Css"] = 3] = "Css";
            FileType[FileType["Bootstrap"] = 4] = "Bootstrap";
            FileType[FileType["App"] = 5] = "App";
            FileType[FileType["Image"] = 6] = "Image";
            FileType[FileType["Other"] = 7] = "Other";
            FileType[FileType["Component"] = 8] = "Component";
        })(FileSystem.FileType || (FileSystem.FileType = {}));
        var FileType = FileSystem.FileType;
        ;
    })(FileSystem = Retool.FileSystem || (Retool.FileSystem = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var FileSystem;
    (function (FileSystem) {
        var FilePath = (function () {
            function FilePath() {
            }
            FilePath.getType = function (path) {
                var segments = path.split('/');
                switch (segments[0]) {
                    case "models": return 1 /* Model */;
                    case "controllers": return 2 /* Controller */;
                    case "templates":
                        if (segments.length > 1 && segments[1] == "components") {
                            return 8 /* Component */;
                        }
                        return 0 /* Template */;
                    case "bootstrap": return 4 /* Bootstrap */;
                    case "css": return 3 /* Css */;
                    case "images": return 6 /* Image */;
                }
                return null;
            };
            FilePath.forType = function (fileType) {
                switch (fileType) {
                    case 0 /* Template */: return "templates";
                    case 1 /* Model */: return "models";
                    case 2 /* Controller */: return "controllers";
                    case 8 /* Component */: return "templates/components";
                    case 4 /* Bootstrap */: return "bootstrap";
                    case 3 /* Css */: return "css";
                    case 6 /* Image */: return "images";
                }
                return null;
            };
            FilePath.getName = function (filename) {
                var segments = filename.split('/');
                var name = segments[segments.length - 1];
                var i = name.indexOf('.');
                if (i != -1) {
                    return name.substr(0, i);
                }
                return name;
            };
            FilePath.DEFAULT_FILE_EXTENSION = ".retool.js";
            return FilePath;
        })();
        FileSystem.FilePath = FilePath;
    })(FileSystem = Retool.FileSystem || (Retool.FileSystem = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var View = (function (_super) {
        __extends(View, _super);
        function View() {
            _super.apply(this, arguments);
            this.__isView = true;
        }
        View.prototype.render = function (options, done) {
        };
        View.prototype.renderContent = function (w, viewModel) {
            var parentContext = (this.parent) ? this.parent.context : null;
            this.context = new Retool.RenderingContext(null, viewModel, null, parentContext);
            this.helper = Retool.Runtime.helpers.get("viewcontainer");
            this.children = [];
            w.component = this;
            this.renderBreadCrumbs(w);
            var compiledTemplate = viewModel.template;
            this.renderViewElements(w, compiledTemplate.definition.elements);
        };
        View.prototype.renderViewElements = function (w, elements) {
            w.renderChildComponents(elements);
        };
        View.prototype.initialize = function (w) {
        };
        View.prototype.reset = function () {
            this.context = null;
            this.activated = false;
        };
        View.prototype.isLayout = function () {
            return false;
        };
        View.prototype.createWriter = function () {
            return new Retool.Writer();
        };
        View.prototype.redirect = function (event, options, done) {
            var url = options.url;
            this.render({ url: url, addToHistory: options.stackHistory, viewModel: options.viewModel, contentElem: options.contentElem, msg: options.msg }, done);
        };
        View.prototype.getComponent = function (id) {
            var segments = id.split('-');
            if (segments.length < 3) {
                return this;
            }
            return this.getChildComponent(this.children, segments, 2);
        };
        View.prototype.getChildComponent = function (children, segments, segmentIndex) {
            var n = segments.length;
            while (segmentIndex < n) {
                var index = parseInt(segments[segmentIndex], 10);
                segmentIndex++;
                var component = children[index];
                if (segmentIndex >= n) {
                    return component;
                }
                else if (component) {
                    children = component.children;
                }
                else {
                    return null;
                }
            }
            return null;
        };
        View.prototype.getContentElement = function () {
            if (this.parent) {
                return this.parent.getElement();
            }
            else {
                return $('#retool-app');
            }
        };
        View.prototype.getContentId = function () {
            return "retool-content-" + this.id;
        };
        View.prototype.calcVisible = function () {
            return true;
        };
        View.prototype.requiresRender = function () {
            return false;
        };
        View.prototype.renderChanges = function (options) {
            if (this.children) {
                for (var i = 0; i < this.children.length; i++) {
                    var c = this.children[i];
                    c.helper.renderChanges(c, options);
                }
            }
            return false;
        };
        View.prototype.refresh = function (options) {
            this.renderChanges(options);
            if (options && options.done) {
                options.done();
            }
        };
        View.prototype.pushState = function (displayUrl) {
            var push = { main: displayUrl };
            var w = Retool.App.rootWindow;
            var currentState = w.history.state;
            if (currentState) {
                if (currentState.main == push.main && currentState.side == push.side) {
                    return; // nothing changed
                }
            }
            /*
            var sideContainer = viewContainers["s2"];
            if (sideContainer && sideContainer.activated){
                push.side = sideContainer.url.toDisplay();
            }
            else {
                push.side = null;
            }
            var currentState = window.history.state;
            if (currentState){
                if (currentState.main == push.main && currentState.side == push.side){
                    return; // nothing changed
                }
            }
            */
            w.history.pushState(push, "", displayUrl);
        };
        View.prototype.addListener = function (container) {
            this.listeners = this.listeners || [];
            this.listeners.push(container);
        };
        View.prototype.notifyListeners = function (eventName, data) {
            if (this.listeners) {
                for (var i = 0; i < this.listeners.length; i++) {
                    var listener = this.listeners[i];
                    this.notifyComponent(listener, eventName, data);
                }
            }
        };
        View.prototype.notifyComponent = function (c, eventName, data) {
            var handler = c.helper;
            if (handler.onContainerRaise) {
                handler.onContainerRaise.apply(handler, [c, this, eventName, data]);
            }
            if (c.children) {
                var children = c.children;
                for (var i = 0; i < children.length; i++) {
                    var child = children[i];
                    this.notifyComponent(child, eventName, data);
                }
            }
        };
        View.prototype.close = function () {
        };
        View.prototype.renderBreadCrumbs = function (w) {
        };
        View.prototype.beforeRedirect = function (options) {
        };
        View.prototype.showFlashMessage = function (message) {
            var w = new Retool.Writer();
            w.writeTag("div", "flash-message", { id: "flash-message" }).text(message).write('</div>');
            $('#retool-flash-message').remove();
            w.appendToElement('body');
            if (this.flashTimer) {
                clearTimeout(this.flashTimer);
            }
            this.flashTimer = setTimeout(function () {
                $('#retool-flash-message').fadeOut(1500);
            }, 250);
        };
        View.prototype.updateDirty = function () {
        };
        View.prototype.refreshRenderedComponents = function (options) {
            var children = this.children;
            if (children) {
                try {
                    this.refreshRenderedChildren(children, this.context, options);
                }
                catch (e) {
                    var err = Retool.VM.VMError.cast(e);
                    Retool.App.addError(err);
                    Retool.App.showErrors();
                }
            }
            this.updateDirty();
        };
        View.prototype.refreshRenderedComponent = function (component, parentContext, options, eachArray) {
            var helper = component.helper;
            // calc and apply css if it has changed
            // only want to do it it has changed or has a formula, do we cache css in localData if formula
            // set localdata.cssclass after render
            // if calculated
            // or implement, get css, set css for comparison (look at element on calculated elements)
            var cssExpression = component.attr.cssclass;
            if (helper && (component.localData.dynamicCss || (cssExpression && component.attr._compiled && component.attr._compiled.cssclass))) {
                var currentCss = helper.getCssClass(component);
                var computedCss = helper.computeStartTagClass(component);
                if (currentCss != computedCss) {
                    helper.setCssClass(component, computedCss);
                }
            }
            var context = component.context;
            var requiresRender = false;
            var nextEachArray;
            try {
                if (helper) {
                    helper.calculateProperties(component);
                    var currentModelData = (context.model) ? context.model.data : null;
                    if (helper.settings.scopeContainer) {
                        var model = helper.computeModel(component, parentContext);
                        var modelData = (model) ? model.data : null;
                        if (currentModelData != modelData) {
                            requiresRender = true;
                            context.model = model;
                        }
                        else {
                            if (helper.settings.kind == "each") {
                                nextEachArray = model;
                            }
                            requiresRender = helper.requiresRender(component);
                        }
                    }
                    else if (eachArray) {
                        // this component is the direct descendant of an each component
                        var rowModel = eachArray.getRow(context.arrayIndex);
                        var rowModelData = (rowModel) ? rowModel.data : null;
                        if (currentModelData != rowModelData) {
                            requiresRender = true;
                            context.model = rowModel;
                        }
                        else {
                            requiresRender = helper.requiresRender(component);
                        }
                    }
                    else {
                        requiresRender = helper.requiresRender(component);
                    }
                }
            }
            catch (e) {
                var err = Retool.VM.VMError.cast(e);
                var attr = component.attr;
                err.addElementSource(attr);
                throw err;
            }
            var checkChildren = true;
            if (requiresRender) {
                checkChildren = component.renderChanges(options);
            }
            if (checkChildren) {
                var children = component.children;
                if (children) {
                    this.refreshRenderedChildren(children, context, options, nextEachArray);
                }
            }
        };
        View.prototype.refreshRenderedChildren = function (children, context, options, nextEachArray) {
            for (var i = 0; i < children.length; i++) {
                var child = children[i];
                //if (!child.helper.settings.isRenderHelper){
                this.refreshRenderedComponent(child, context, options, nextEachArray);
            }
        };
        return View;
    })(Retool.Component);
    Retool.View = View;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var PageView = (function (_super) {
        __extends(PageView, _super);
        function PageView(id) {
            _super.call(this, {});
            this.id = id;
        }
        PageView.prototype.render = function (options, done) {
            this.activate();
            Retool.App.viewRenderCount++;
            this.beforeRender(options);
            var template = options.template;
            if (!template) {
                this.templateNotFound(options, done);
                return;
            }
            var self = this;
            Retool.App.getInstance(template, function (err, viewModel) {
                if (Retool.App.isRootTemplate(template)) {
                    options.viewModel = viewModel;
                }
                self.getPod(options, done);
            });
        };
        PageView.prototype.getPod = function (options, done) {
            var template = options.template;
            var podName = template.appName;
            var self = this;
            if (podName == Retool.App.ADMIN_APP_NAME || podName == Retool.App.SITE_APP_NAME) {
                this.renderContinue(null, options, done);
            }
            else {
                Retool.App.userApps.getInstance(podName, function (err, pod) {
                    if (err) {
                        Retool.App.addError(Retool.VM.VMError.cast(err));
                        return;
                    }
                    self.renderContinue(pod, options, done);
                });
            }
        };
        PageView.prototype.templateNotFound = function (options, done) {
            var w = this.createWriter();
            this.render404(w);
            this.afterRender(options);
            if (done) {
                done("404");
            }
        };
        PageView.prototype.renderContinue = function (pod, options, done) {
            var w = options.writer || this.createWriter();
            w.noIDE = options.noIDE;
            w.noPushState = options.noPushState;
            var restoreLength = w.getLength();
            var self = this;
            var viewModel;
            var async = {
                error: function (err) {
                    if (!self.context) {
                        var parentContext = (self.parent) ? self.parent.context : null;
                        var name = "";
                        self.context = new Retool.RenderingContext(name, viewModel, null, parentContext);
                    }
                    w.truncate(restoreLength);
                    if (err == "404") {
                        self.render404(w);
                    }
                    else {
                        Retool.App.addError(Retool.VM.VMError.cast(err));
                    }
                    self.writeOutput(w);
                    self.afterRender(options);
                    if (done) {
                        done(err);
                    }
                },
                resume: function (result) {
                    self.writeOutput(w);
                    self.afterRender(options);
                    if (done) {
                        done(null);
                    }
                }
            };
            try {
                var template = options.template;
                if (!template) {
                    throw "404";
                }
                viewModel = options.viewModel;
                //var initialValues = url.query;
                var initialValues = {};
                var settings = this.getViewModel(options);
                if (settings.viewModel) {
                    viewModel = settings.viewModel;
                }
                var initialValues = settings.initialValues || {};
                if (!viewModel) {
                    if (template.definition.viewModelConstructor) {
                        viewModel = new template.definition.viewModelConstructor();
                        viewModel.actions = viewModel;
                    }
                    else {
                        var isContentView = this instanceof Retool.ContentView;
                        Retool.ViewModel.createAsync(template, { initialValues: initialValues, isApp: isContentView }, function (err, c) {
                            viewModel = c;
                            viewModel.rootComponent = self;
                            viewModel.podInstance = pod;
                            self.viewModelCreated(c, options);
                            if (err) {
                                async.error(err);
                            }
                            else {
                                // check to see if another request has been started
                                if (!self.stopped) {
                                    self.renderViewModel(w, viewModel, async);
                                }
                            }
                        });
                        return;
                    }
                }
                this.initViewModelForRender(viewModel);
                viewModel.template = template;
                viewModel.rootComponent = self;
                viewModel.podInstance = pod;
                // viewModel.set("params",options.params);
                if (!self.stopped) {
                    self.renderViewModel(w, viewModel, async);
                }
            }
            catch (e) {
                async.error(e);
            }
        };
        PageView.prototype.initViewModelForRender = function (viewModel) {
        };
        PageView.prototype.viewModelCreated = function (viewModel, options) {
        };
        PageView.prototype.getViewModel = function (options) {
            return {};
        };
        PageView.prototype.renderViewModel = function (w, viewModel, async) {
            if (Retool.browser) {
                Retool.PageTour.hide();
            }
            try {
                this.renderContent(w, viewModel);
                async.resume(w);
            }
            catch (e) {
                var error = new Error();
                var c = w.component;
                if (c) {
                    error.message = "Could not render component: " + c.attr.kind;
                    if (c.attr.name) {
                        error.message += "  (name=" + c.attr.name + ")";
                    }
                    error.message += "  (id=" + c.attr.id + ")\n" + e;
                }
                else {
                    error.message = e.toString();
                }
                error.stack = e.stack;
                async.error(error);
            }
        };
        PageView.prototype.writeOutput = function (w) {
            if (w.updatePage) {
                var element = this.getContentElement();
                w.writeToElement(element);
                if (w.setFocusTo) {
                    if (typeof w.setFocusTo === "function") {
                        w.setFocusTo();
                    }
                    else {
                        $(w.setFocusTo).focus();
                    }
                }
                else {
                    $('#' + this.getElementId() + " [value='']:input:visible:enabled:first").focus();
                }
            }
        };
        PageView.prototype.createViewModel = function () {
        };
        PageView.prototype.render404 = function (w) {
            w.writeTag("div", "error404");
            w.write('<h2><strong>404</strong><span> Page not found</span></h2>');
            w.write('</div>');
            var contentElem = this.getContentElement();
            if (!contentElem.length) {
                contentElem = $('#retool-layout-' + this.id);
            }
            w.writeToElement(contentElem);
        };
        PageView.prototype.beforeRender = function (options) {
            this.autoApplyDesignerAttributes();
        };
        PageView.prototype.afterRender = function (options) {
            if (Retool.browser) {
                Retool.App.showErrors();
            }
        };
        PageView.prototype.autoApplyDesignerAttributes = function () {
            if (Retool.App.ide && Retool.App.ide.visible) {
                Retool.disableRefresh = true;
                Retool.App.ide.autoApplyAttributesDialog();
                Retool.disableRefresh = false;
            }
        };
        PageView.prototype.refresh = function (options) {
            var viewModel = this.context.viewModel;
            var templateId = viewModel.template.id;
            var template = Retool.App.templates.get(templateId);
            var done;
            if (options) {
                done = options.done;
            }
            this.render({ template: template, viewModel: viewModel, noIDE: true }, done);
        };
        PageView.prototype.redirect = function (event, options, done) {
            var url = options.url;
            var outletView = Retool.App.contentView;
            this.beforeRedirect(options);
            var appChanged = false;
            var targetOutlet;
            var currentApp = (Retool.App.page.url) ? Retool.App.page.url.appName : "";
            if (!options.forceCurrentApp && Retool.App.page.url && currentApp != url.appName) {
                Retool.App.page.url = url;
                Retool.App.page.renderTemplate(url.appName, options, done);
                return;
            }
            if (!targetOutlet) {
                targetOutlet = Retool.App.layoutView.appOutlet;
            }
            Retool.App.page.url = url;
            if (targetOutlet) {
                var handler = targetOutlet.helper;
                handler.navigate(targetOutlet, options, function () {
                    Retool.App.layoutView.refreshRenderedComponents({});
                    if (done) {
                        done();
                    }
                });
                /*
                if (event){
                    event.addDirtyView(App.contentView);
                }
                */
                return;
            }
        };
        PageView.prototype.stop = function () {
            this.stopped = true;
        };
        PageView.prototype.getTargetContainer = function (options) {
            return this;
        };
        PageView.prototype.activate = function () {
            //if (!this.activated){
            this.activated = true;
            this.onactivate();
            //}
        };
        PageView.prototype.deactivate = function () {
            //if (this.activated){
            this.activated = false;
            this.ondeactivate();
            // }
        };
        PageView.prototype.onactivate = function () {
        };
        PageView.prototype.ondeactivate = function () {
        };
        PageView.prototype.raiseAppEvent = function (name, event, args) {
            this.context.viewModel.evaluateMethod("events_" + name, args);
        };
        PageView.prototype.publishAppEvent = function (name, event, args) {
            this.doPublishAppEvent(this, name, event, args);
        };
        PageView.prototype.doPublishAppEvent = function (c, name, event, args) {
            c.raiseAppEvent(name, event, args);
            if (c.children) {
                var children = c.children;
                for (var i = 0; i < children.length; i++) {
                    var child = children[i];
                    this.doPublishAppEvent(child, name, event, args);
                }
            }
        };
        return PageView;
    })(Retool.View);
    Retool.PageView = PageView;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var OutletView = (function (_super) {
        __extends(OutletView, _super);
        function OutletView() {
            _super.apply(this, arguments);
        }
        OutletView.prototype.refresh = function (options) {
            var viewModel = this.context.viewModel;
            var templateId = viewModel.template.id;
            var template = Retool.App.templates.get(templateId);
            var done;
            if (options) {
                done = options.done;
            }
            this.render({ template: template, viewModel: viewModel, noIDE: true }, done);
        };
        OutletView.prototype.raiseAppEvent = function (name, event, args) {
            if (this.context) {
                this.context.viewModel.evaluateMethod("app_" + name, args);
            }
        };
        OutletView.prototype.getViewModel = function (options) {
            var initialValues = {};
            initialValues.params = options.params || {};
            return { initialValues: initialValues };
        };
        OutletView.prototype.afterRender = function (options) {
            _super.prototype.afterRender.call(this, options);
        };
        return OutletView;
    })(Retool.PageView);
    Retool.OutletView = OutletView;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ModalView = (function (_super) {
        __extends(ModalView, _super);
        function ModalView() {
            _super.apply(this, arguments);
        }
        ModalView.prototype.renderModal = function (w, css) {
            w.writeTag("div", "modal fade " + (css || ""), { id: "retoolModal", tabIndex: "-1", role: "dialog", "aria-labelledby": "retoolModalLabel", "aria-hidden": "true" });
            w.writeTag("div", "modal-dialog");
            w.writeTag("div", "modal-content");
            w.write("</div></div></div>");
        };
        ModalView.prototype.renderHeader = function (w) {
            w.writeTag("div", "modal-header").writeTag("button", "close", { "data-dismiss": "modal" }).writeTag("span", null, { "aria-hidden": "true" }).write("&times;").write('</span></button>');
            w.writeTag("h4", "modal-title", { id: "retoolModalLabel" }).text("Modal title").write('</h4>');
            w.write('</div>');
        };
        ModalView.prototype.renderBody = function (w) {
            w.writeTag("div", "modal-body-content");
            w.write("</div>");
        };
        ModalView.prototype.renderFooter = function (w) {
            /*
            w.writeTag("div","modal-footer");
            w.writeTag("button","btn btn-default",{"data-dismiss":"modal"}).text("Close").write('</button>\n');
            w.writeTag("button","btn btn-primary").text("Save changes").write('</button>');
            w.write('</div>');
            */
        };
        ModalView.prototype.writeOutput = function (w) {
            var element = $('#retoolModal .modal-content');
            w.writeToElement(element);
        };
        ModalView.prototype.show = function (args) {
            var className = (args && args.className || "");
            $('#retoolModal .modal-dialog').attr('class', "modal-dialog " + className);
            $('#retoolModal').modal('show');
        };
        ModalView.prototype.getViewModel = function (options) {
            var initialValues = {};
            initialValues.params = options.params || {};
            return { initialValues: initialValues };
        };
        ModalView.prototype.refresh = function (options) {
            var viewModel = this.context.viewModel;
            var templateId = viewModel.template.id;
            var template = Retool.App.templates.get(templateId);
            var done;
            if (options) {
                done = options.done;
            }
            this.render({ template: template, viewModel: viewModel, noIDE: true }, done);
        };
        return ModalView;
    })(Retool.PageView);
    Retool.ModalView = ModalView;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ContentView = (function (_super) {
        __extends(ContentView, _super);
        function ContentView() {
            _super.apply(this, arguments);
        }
        ContentView.prototype.beforeRender = function (options) {
            _super.prototype.beforeRender.call(this, options);
        };
        ContentView.prototype.getViewModel = function (options) {
            var initialValues = {};
            initialValues.params = options.params || {};
            return { initialValues: initialValues };
        };
        ContentView.prototype.viewModelCreated = function (viewModel, options) {
        };
        ContentView.prototype.afterRender = function (options) {
            _super.prototype.afterRender.call(this, options);
            if (Retool.browser) {
                if (!options.noPushState && Retool.App.modifyWindowUrl) {
                    try {
                        var displayUrl = Retool.App.page.url.toDisplay();
                        //this.pushState(displayUrl);
                        Retool.App.rootWindow.history.pushState({ main: displayUrl }, "", displayUrl);
                    }
                    catch (e) {
                    }
                }
                if (Retool.App.ide && !options.noIDE) {
                    if (this.context) {
                        var template = this.getTemplate();
                        Retool.App.ide.attachToViewContainer({ view: this, compiledTemplate: template });
                    }
                }
                Retool.App.clearErrors(); // todo: only after main outlet
            }
        };
        return ContentView;
    })(Retool.PageView);
    Retool.ContentView = ContentView;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var LayoutView = (function (_super) {
        __extends(LayoutView, _super);
        function LayoutView() {
            _super.apply(this, arguments);
        }
        LayoutView.prototype.refresh = function (options) {
            var viewModel = this.context.viewModel;
            var templateId = viewModel.template.id;
            var template = Retool.App.templates.get(templateId);
            var done;
            options = options || {};
            var self = this;
            this.render({ template: template, viewModel: viewModel, noIDE: options.noIDE }, function done() {
                var layout = self.context.viewModel.template;
                Retool.App.page.refreshStylesIfNeeded(layout);
                /*
                var outlet = self.appOutlet;
                var contentView = App.contentView;
                if (outlet && contentView){
                    var outletHandler = <Helpers.Outlet>outlet.helper;
                    var viewModel = contentView.context.viewModel;
                    if (viewModel){
                        outletHandler.navigate(outlet,{url:viewModel.url,noPushState:true,viewModel:viewModel,noIDE:true},null);
                    }
                }
                */
            });
        };
        LayoutView.prototype.initViewModelForRender = function (viewModel) {
            viewModel.children = {};
        };
        return LayoutView;
    })(Retool.PageView);
    Retool.LayoutView = LayoutView;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var AutoCompleteList = (function () {
        function AutoCompleteList(id, cssPrefix, writerType) {
            this.id = id;
            this.cssPrefix = cssPrefix;
            this.writerType = writerType;
            this.minCharsToTriggerDrop = 3;
            this.fetchSequence = 0;
        }
        AutoCompleteList.prototype.getDrop = function () {
            var drop = $('#' + this.id);
            if (!drop.length) {
                var w = new Retool.Writer(this.writerType);
                w.write('<div id="' + this.id + '" class="' + this.cssPrefix + '-autocomplete" style="left:100px;top:100px">');
                w.write('</div>');
                w.appendToElement('body');
                drop = $('#' + this.id);
                var self = this;
                drop.on('click', function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    var $target = $(event.target);
                    var a = $target.closest('A');
                    if (a.length && a.data("action")) {
                        self.raiseAction(a.data("action"));
                        return;
                    }
                    var li = $target.closest('li');
                    if (li.length) {
                        self.choose(li);
                        self.hide();
                    }
                });
            }
            return drop;
        };
        AutoCompleteList.prototype.initForComponent = function (c) {
            this.activeComponent = c;
            if (c.localData.dropRenderer) {
                this.renderer = c.localData.dropRenderer;
                this.minCharsToTriggerDrop = this.renderer.minCharsToTriggerDrop;
                this.closeOnSpaceBar = this.renderer.closeOnSpaceBar;
                this.bubbleEnterKey = c.attr.bubbleEnterKey;
            }
        };
        AutoCompleteList.prototype.show = function (c) {
            this.updateContent(c);
        };
        AutoCompleteList.prototype.setFilter = function (value) {
            this.filterValue = value;
        };
        AutoCompleteList.prototype.updateContent = function (c) {
            this.showTriggered = true;
            if (this.timer) {
                clearTimeout(this.timer);
            }
            this.timer = null;
            var drop = this.getDrop();
            if (this.activeComponent != c || !this.dropVisible) {
                this.initForComponent(c);
                drop.hide();
                var minWidth = c.getElement().width();
                drop.css('min-width', minWidth + "px");
                this.fetchContent();
                return;
            }
            var dataRefreshRequired = false;
            if (this.dataFilter) {
                if (this.filterValue && this.filterValue.substr(0, this.dataFilter.length) == this.dataFilter) {
                    dataRefreshRequired = false;
                }
                else {
                    dataRefreshRequired = true;
                }
            }
            if (dataRefreshRequired) {
                this.fetchContent();
            }
            else {
                var localFilter = this.filterValue;
                this.filterLocally(localFilter);
                drop.find('li.active').removeClass('active');
                drop.find('li:visible').first().addClass('active');
                this.positionDrop();
            }
        };
        AutoCompleteList.prototype.raiseAction = function (action) {
            if (this.renderer) {
                var w = new Retool.Writer();
                this.renderer.onAction(action, w);
                if (w.getStream().length) {
                    var drop = this.getDrop();
                    w.writeToElements(drop);
                }
            }
        };
        AutoCompleteList.prototype.renderContent = function (w) {
            if (!this.activeComponent) {
                return;
            }
            var drop = this.getDrop();
            drop.hide();
            w.writeToElements(drop);
            var localFilter = this.filterValue;
            this.filterLocally(localFilter);
            drop.show();
            this.dropVisible = true;
            drop.find('li.active').removeClass('active');
            drop.find('li:visible').first().addClass('active');
            this.positionDrop();
        };
        AutoCompleteList.prototype.positionDrop = function () {
            var drop = this.getDrop();
            var elem = this.activeComponent.getElement();
            if (!elem.is(":input")) {
                elem = this.activeComponent.getElement(":input").first();
            }
            var inputElem = elem.get(0);
            var pos = Retool.Page.getDropListPosition(inputElem, drop[0]);
            if ($(inputElem).closest('#rto-footer').length) {
                $('#rto-footer').append(drop);
            }
            else {
                $('body').append(drop);
            }
            if (pos.above) {
                drop.addClass('retool-above');
            }
            else {
                drop.removeClass('retool-above');
            }
            drop.css('left', pos.left + "px").css('top', pos.top + "px");
        };
        AutoCompleteList.prototype.hide = function () {
            if (this.timer) {
                clearTimeout(this.timer);
            }
            this.timer = null;
            this.activeComponent = null;
            this.dropVisible = false;
            this.filterValue = null;
            this.dataFilter = null;
            this.showTriggered = false;
            this.renderer = null;
            $('#' + this.id).hide();
        };
        AutoCompleteList.prototype.sendKey = function (c, e) {
            if (this.dropVisible) {
                if (e.which == 40) {
                    this.move(1);
                    e.preventDefault();
                    e.stopPropagation();
                }
                if (e.which == 38) {
                    this.move(-1);
                    e.preventDefault();
                    e.stopPropagation();
                }
                else if (e.which == 27) {
                    this.hide();
                    e.preventDefault();
                    e.stopPropagation();
                }
                else if (e.which == 9 || e.which == 13 || (this.closeOnSpaceBar && e.which == 32)) {
                    if (this.activeComponent) {
                        if (!this.renderer || !this.renderer.noAutoSelect()) {
                            this.chooseCurrent();
                        }
                        this.hide();
                        if (e.which == 13) {
                            if (!this.bubbleEnterKey) {
                                e.preventDefault();
                                e.stopPropagation();
                            }
                        }
                    }
                }
            }
            else {
                if (e.which == 40) {
                    this.filterValue = "";
                    this.updateContent(c);
                }
                else if (e.which == 9) {
                    this.hide();
                }
                else if (e.which == 13) {
                    this.hide();
                }
            }
        };
        AutoCompleteList.prototype.chooseCurrent = function () {
            var drop = this.getDrop();
            var current = drop.find('li.active');
            if (current.length) {
                this.choose(current);
            }
        };
        AutoCompleteList.prototype.choose = function (li) {
            var index = li.data("index");
            if (index == "error") {
                return;
            }
            var info = this.renderer.getRowInfo(index);
            this.activeComponent.helper.setValueFromDrop(this.activeComponent, { value: info.id, text: info.text, data: info.data });
        };
        AutoCompleteList.prototype.move = function (increment) {
            var drop = this.getDrop();
            var ul = drop.find('ul')[0];
            if (ul.childNodes.length == 0) {
                return;
            }
            var current = drop.find('li.active');
            if (current.length) {
                var index = current.index();
                var newIndex = index + increment;
                if (newIndex < 0) {
                    newIndex = 0;
                }
                if (newIndex > (ul.childNodes.length - 1)) {
                    newIndex = ul.childNodes.length - 1;
                }
                current.removeClass('active');
                if (increment > 0) {
                    var newCurrent = current.nextAll(':visible:first');
                }
                else {
                    var newCurrent = current.prevAll(':visible:first');
                }
                newCurrent.addClass('active');
                if (newCurrent.length) {
                    Retool.Page.scrollElementIntoView(newCurrent[0], drop[0]);
                }
            }
            else if (increment > 0) {
                var first = drop.find('li:visible').first();
                first.addClass('active');
                Retool.Page.scrollElementIntoView(first[0], drop[0]);
            }
            else {
                var last = drop.find('li:visible').last();
                last.addClass('active');
                Retool.Page.scrollElementIntoView(last[0], drop[0]);
            }
        };
        AutoCompleteList.prototype.sendKeyUp = function (c, e, value) {
            this.filterValue = value;
            if (e.which == 38 || e.which == 40 || e.which == 9 || e.which == 13 || e.which == 16 || e.which == 39 || e.which == 37) {
                return;
            }
            if (e.which == 27) {
                e.stopPropagation();
                return;
            }
            if (value.length == 0 && !this.dropVisible) {
                return; // do not show if value is now empty
            }
            if (this.activeComponent != c) {
                this.initForComponent(c);
            }
            if (this.dropVisible || (!this.showTriggered && value.length >= this.minCharsToTriggerDrop)) {
                this.updateContent(c);
            }
            else if (!this.timer && !this.showTriggered) {
                this.activeComponent = c;
                var self = this;
                this.timer = setTimeout(function () {
                    self.timerElapsed();
                }, 500);
            }
        };
        AutoCompleteList.prototype.timerElapsed = function () {
            this.timer = null;
            if (!this.dropVisible) {
                this.filterValue = this.activeComponent.getElement("input").val();
                this.updateContent(this.activeComponent);
            }
        };
        AutoCompleteList.prototype.filterLocally = function (value) {
            if (this.localFilterFields) {
                return this.filterUsingFields(value);
            }
            var drop = this.getDrop();
            var items = drop.find('li');
            value = $.trim(value).toLowerCase();
            var len = value.length;
            var filter = this.getFilter(value);
            var self = this;
            var model = new Retool.ObjectModel({}, { modelDef: null });
            var context = new Retool.DropdownContext("row", Retool.ViewModel.create(), model);
            items.each(function () {
                var item = $(this);
                var index = item.data("index");
                if (index != "error") {
                    if (self.renderer.filterMatch(context, filter, index)) {
                        item.show();
                    }
                    else {
                        item.hide();
                    }
                }
            });
        };
        AutoCompleteList.prototype.getFilter = function (value) {
            if (this.renderer) {
                return this.renderer.getFilter(value);
            }
            return new Retool.DropdownFilter(value);
        };
        AutoCompleteList.prototype.filterUsingFields = function (value) {
            var drop = this.getDrop();
            var items = drop.find('li');
            value = $.trim(value).toLowerCase();
            var len = value.length;
            var fields = this.localFilterFields;
            var index = 0;
            var include;
            var dataRows = this.dataRows;
            items.each(function () {
                var item = $(this);
                include = false;
                for (var i = 0; i < fields.length; i++) {
                    var field = fields[i];
                    var row = dataRows[index];
                    var fieldValue = row[field].toLowerCase();
                    if (fieldValue.length >= len) {
                        if (fieldValue.substr(0, len) == value) {
                            include = true;
                            break;
                        }
                    }
                }
                if (include) {
                    item.show();
                }
                else {
                    item.hide();
                }
                index++;
            });
        };
        AutoCompleteList.prototype.fetchContent = function () {
            this.dataRows = null;
            this.localFilterFields = null;
            if (this.renderer) {
                var w = new Retool.Writer(this.writerType);
                w.contentOnlyMode = true;
                var self = this;
                if (!self.renderer.hasFiltering()) {
                    this.dataFilter = "";
                }
                else {
                    this.dataFilter = this.filterValue;
                }
                var seq = ++this.fetchSequence;
                this.renderer.fetch(this.dataFilter, function (results) {
                    if (self.fetchSequence != seq) {
                        return; // abort because another fetch has been fired
                    }
                    if (typeof results == "string") {
                        self.renderError(w, results);
                        self.renderer.rows = null;
                        self.dataFilter = "!!error";
                    }
                    else {
                        self.renderer.renderContainer(w, results);
                        if (self.fetchSequence != seq) {
                            return;
                        }
                        self.renderer.rows = results;
                    }
                    self.renderContent(w);
                });
            }
        };
        AutoCompleteList.prototype.renderError = function (w, msg) {
            w.writeTag("ul", "dropdown-menu dropdown-error");
            w.writeTag("p", "text-danger").text(msg).write('</p>');
            w.write("</ul>");
        };
        AutoCompleteList.prototype.getStaticList = function (filter) {
        };
        return AutoCompleteList;
    })();
    Retool.AutoCompleteList = AutoCompleteList;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var FieldDroplistInfo = (function () {
        function FieldDroplistInfo() {
        }
        FieldDroplistInfo.createForElement = function (element) {
            var info = new FieldDroplistInfo();
            var children = element.children;
            if (children && children.length) {
                var firstChild = children[0];
                if (firstChild.kind == "partial") {
                    var viewPath = firstChild.view;
                    var template = Retool.App.templates.get(viewPath);
                    var viewDef = template.definition;
                    if (viewDef.elements && viewDef.elements.length && viewDef.elements[0].kind == "fielddroplist") {
                        var fieldDroplist = info.fieldDroplist = viewDef.elements[0];
                        //info.modelId = modelLocator.getIdByViewPath(viewPath);
                        info.route = viewPath;
                        info.dataMethod = fieldDroplist.dataMethod;
                        info.filterRequired = fieldDroplist.filterRequired;
                        if (fieldDroplist.filterFields) {
                            info.filterFields = fieldDroplist.filterFields.split(',');
                        }
                    }
                }
            }
            return info;
        };
        FieldDroplistInfo.createRenderer = function (c) {
            var element = c.attr;
            var dropdownElement = Retool.Element(element).firstChildOfKind("dropdown");
            if (dropdownElement) {
                return FieldDroplistInfo.createForDropElement(c, dropdownElement);
            }
            else if (element.droptype) {
                if (element.droptype == "generic") {
                    var drop = new Retool.OptionListDropdown(c, null);
                    drop.dropdownOptions = element.dropItems;
                    return drop;
                }
                else {
                    return Retool.getStaticAutoComplete(element.droptype, c);
                }
            }
            var partial = Retool.Element(element).firstChildOfKind("partial");
            if (partial) {
                var t = Retool.App.templates.get(partial.template);
                var viewDef = t.definition;
                if (viewDef.elements && viewDef.elements.length && viewDef.elements[0].kind == "dropdown") {
                    dropdownElement = viewDef.elements[0];
                    var renderer = FieldDroplistInfo.createForDropElement(c, dropdownElement);
                    renderer.viewModel = Retool.ViewModel.create(t);
                    return renderer;
                }
            }
            else if (element.type == "date") {
                return new Retool.DatePicker(c, null);
            }
            return null;
        };
        FieldDroplistInfo.createForDropElement = function (c, dropdownElement) {
            var dropdownOptions = FieldDroplistInfo.createOptionListDropdown(dropdownElement);
            if (dropdownOptions.length) {
                var renderer = new Retool.OptionListDropdown(c, dropdownElement);
                renderer.dropdownOptions = dropdownOptions;
                return renderer;
            }
            if (dropdownElement.value) {
                return new Retool.BoundPropertyDropdown(c, dropdownElement);
            }
            if (dropdownElement.name) {
                return new Retool.CodePopulatedDropdown(c, dropdownElement);
            }
        };
        FieldDroplistInfo.createOptionListDropdown = function (dropdownElement) {
            var children = dropdownElement.children;
            var options = [];
            if (children) {
                for (var i = 0; i < children.length; i++) {
                    var elem = children[i];
                    if (elem.kind == "option") {
                        options.push({ id: elem.value, text: elem.text });
                    }
                }
            }
            return options;
        };
        return FieldDroplistInfo;
    })();
    Retool.FieldDroplistInfo = FieldDroplistInfo;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var DropdownRenderer = (function () {
        function DropdownRenderer(c, dropdownElement) {
            this.minCharsToTriggerDrop = 3;
            this.dropdownElement = dropdownElement;
            this.component = c;
            this.viewModel = c.context.viewModel;
            if (dropdownElement) {
                this.rootElement = this.findAnchorElement(dropdownElement);
                if (dropdownElement.autoshownumchars) {
                    try {
                        this.minCharsToTriggerDrop = parseInt(dropdownElement.autoshownumchars, 10);
                    }
                    catch (e) {
                    }
                }
            }
        }
        DropdownRenderer.prototype.toDisplay = function (value) {
            return value;
        };
        DropdownRenderer.prototype.render = function (w, done) {
        };
        DropdownRenderer.prototype.renderRow = function (w, row) {
            if (this.rootElement) {
                w.renderChildren();
            }
            else {
                w.writeTag("a", null, { href: "#" }).text(row.text || row.id).write('</a>');
            }
        };
        DropdownRenderer.prototype.fetch = function (filter, done) {
        };
        DropdownRenderer.prototype.allowAnyValue = function () {
            if (this.component.attr.allowNonDrop) {
                return true;
            }
            return false;
        };
        DropdownRenderer.prototype.noAutoSelect = function () {
            return false;
        };
        DropdownRenderer.prototype.hasFiltering = function () {
            if (this.dropdownElement) {
                return this.dropdownElement.datafiltering;
            }
            return false;
        };
        DropdownRenderer.prototype.getRowInfo = function (index) {
            var row = this.rows[index];
            var context = new Retool.DropdownContext("row", this.viewModel, new Retool.ObjectModel(row, { modelDef: null }));
            var id;
            if (this.dropdownElement && this.dropdownElement.dropvalue) {
                id = context.getAttribValue(this.dropdownElement, "dropvalue");
            }
            else {
                id = row.id;
            }
            var text;
            if (this.dropdownElement && this.dropdownElement.text) {
                text = context.getAttribValue(this.dropdownElement, "text");
            }
            else {
                text = row.text || row.id;
            }
            return { id: id, text: (text || id) };
        };
        DropdownRenderer.prototype.renderContainer = function (w, rows) {
            var viewModel = this.viewModel;
            var root = w.createRootComponent({ element: { kind: "dropdown", children: [this.rootElement] }, viewModel: viewModel, context: null });
            w.component = root;
            w.component.children = [];
            w.component.id = "drp";
            var model = new Retool.ObjectModel({}, { modelDef: null });
            var context = new Retool.DropdownContext("row", viewModel, model);
            root.context = context;
            this.renderRows(w, rows, context);
        };
        DropdownRenderer.prototype.renderRows = function (w, rows, context) {
            w.writeTag("ul", "dropdown-menu");
            if (rows) {
                for (var i = 0; i < rows.length; i++) {
                    w.writeTag("li", null, { "data-index": i });
                    context.model.data = rows[i];
                    this.renderRow(w, rows[i]);
                    w.write("</li>");
                }
            }
            w.write("</ul>");
        };
        DropdownRenderer.prototype.filterMatch = function (context, filter, index) {
            context.filter = filter;
            var row = this.rows[index];
            if (this.dropdownElement && this.dropdownElement.filter) {
                context.model.data = row;
                return context.getAttribValue(this.dropdownElement, "filter");
            }
            else {
                return filter.matches(row.text);
            }
        };
        DropdownRenderer.prototype.renderOption = function (w, data, renderFunc) {
        };
        DropdownRenderer.prototype.onAction = function (action, w) {
        };
        DropdownRenderer.prototype.getFilter = function (value) {
            return new Retool.DropdownFilter(value);
        };
        DropdownRenderer.prototype.findAnchorElement = function (element) {
            return Retool.Element(element).firstChildOfKind("a");
        };
        return DropdownRenderer;
    })();
    Retool.DropdownRenderer = DropdownRenderer;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var OptionListDropdown = (function (_super) {
        __extends(OptionListDropdown, _super);
        function OptionListDropdown() {
            _super.apply(this, arguments);
            this.minCharsToTriggerDrop = 1;
        }
        OptionListDropdown.prototype.toDisplay = function (value) {
            for (var i = 0; i < this.dropdownOptions.length; i++) {
                var option = this.dropdownOptions[i];
                if (option == value) {
                    return value;
                }
                if (option.id && option.id == value) {
                    return option.text;
                }
            }
            return "";
        };
        OptionListDropdown.prototype.fetch = function (filter, done) {
            if (this.dropdownOptions) {
                for (var i = 0; i < this.dropdownOptions.length; i++) {
                    if (typeof this.dropdownOptions[i] == "string") {
                        this.dropdownOptions[i] = { id: this.dropdownOptions[i], text: this.dropdownOptions[i] };
                    }
                }
            }
            done(this.dropdownOptions);
        };
        return OptionListDropdown;
    })(Retool.DropdownRenderer);
    Retool.OptionListDropdown = OptionListDropdown;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var CodePopulatedDropdown = (function (_super) {
        __extends(CodePopulatedDropdown, _super);
        function CodePopulatedDropdown(c, dropdownElement) {
            _super.call(this, c, dropdownElement);
            this.elementName = dropdownElement.name;
        }
        CodePopulatedDropdown.prototype.toDisplay = function (value) {
            if (this.dropdownElement && this.dropdownElement.text) {
                var c = this.component;
                var context = c.context;
                var i = (c.attr.value) ? c.attr.value.lastIndexOf('.') : -1;
                if (i != -1) {
                    var relatedObj = context.get(c.attr.value.substr(0, i));
                    context = new Retool.RenderingContext("temp", context.viewModel, new Retool.ObjectModel(relatedObj, { modelDef: null }));
                }
                return context.getAttribValue(this.dropdownElement, "text");
            }
            return value;
        };
        CodePopulatedDropdown.prototype.fetch = function (filter, done) {
            var self = this;
            var event = new Retool.ComponentEvent(this.component, null);
            event.filter = filter || "";
            this.viewModel.executeEventMethod({ methodName: this.elementName + "_populate", event: event, done: function (result) {
                if (result instanceof Retool.ArrayModel) {
                    result = result.getArray();
                }
                self.dropdownOptions = result;
                done(result);
            } });
        };
        CodePopulatedDropdown.prototype.getRowInfo = function (index) {
            var info = _super.prototype.getRowInfo.call(this, index);
            var c = this.component;
            var i = c.attr.value.lastIndexOf('.');
            if (i != -1) {
                info.data = this.rows[index];
            }
            return info;
        };
        return CodePopulatedDropdown;
    })(Retool.DropdownRenderer);
    Retool.CodePopulatedDropdown = CodePopulatedDropdown;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var BoundPropertyDropdown = (function (_super) {
        __extends(BoundPropertyDropdown, _super);
        function BoundPropertyDropdown(c, dropdownElement) {
            _super.call(this, c, dropdownElement);
            this.minCharsToTriggerDrop = 1;
            this.dropdownOptions = c.context.viewModel.get(dropdownElement.value);
        }
        BoundPropertyDropdown.prototype.toDisplay = function (value) {
            for (var i = 0; i < this.dropdownOptions.length; i++) {
                var option = this.dropdownOptions[i];
                if (option == value) {
                    return value;
                }
                if (option.id && option.id == value) {
                    return option.text;
                }
            }
            return "";
        };
        return BoundPropertyDropdown;
    })(Retool.DropdownRenderer);
    Retool.BoundPropertyDropdown = BoundPropertyDropdown;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var DropdownContext = (function (_super) {
        __extends(DropdownContext, _super);
        function DropdownContext() {
            _super.apply(this, arguments);
        }
        DropdownContext.prototype.getMissingProperty = function (params) {
            if (params.name == "filter") {
                return this.filter;
            }
            return _super.prototype.getMissingProperty.call(this, params);
        };
        return DropdownContext;
    })(Retool.RenderingContext);
    Retool.DropdownContext = DropdownContext;
    var DropdownFilter = (function () {
        function DropdownFilter(value) {
            this.value = value.toLowerCase();
            this.length = value.length;
        }
        DropdownFilter.prototype.matches = function (compare) {
            return (compare && compare.substr(0, this.length).toLowerCase() == this.value);
        };
        DropdownFilter.prototype.matchesAny = function (compare) {
            return (compare && compare.toLowerCase().indexOf(this.value) != -1);
        };
        DropdownFilter.prototype.matchesEnd = function (compare) {
            return (compare && compare.length >= this.length && compare.toLowerCase().substr(compare.length - this.length) == this.value);
        };
        return DropdownFilter;
    })();
    Retool.DropdownFilter = DropdownFilter;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var DatePicker = (function (_super) {
        __extends(DatePicker, _super);
        function DatePicker(c, dropdownElement) {
            _super.call(this, c, dropdownElement);
            this.minCharsToTriggerDrop = 1;
            var value = c.getFieldValue();
            var baseDate;
            if (value instanceof Date) {
                baseDate = value;
                this.current = baseDate;
            }
            else {
                baseDate = new Date();
            }
            this.year = baseDate.getFullYear();
            this.month = baseDate.getMonth();
        }
        DatePicker.prototype.allowAnyValue = function () {
            return true;
        };
        DatePicker.prototype.hasFiltering = function () {
            return false;
        };
        DatePicker.prototype.toDisplay = function (value) {
            if (!value)
                return "";
            return Retool.DateFormatter.format(value);
        };
        DatePicker.prototype.fetch = function (filter, done) {
            done([]);
        };
        DatePicker.prototype.noAutoSelect = function () {
            return true;
        };
        DatePicker.prototype.filterMatch = function (context, filter, index) {
            return true;
        };
        DatePicker.prototype.getRowInfo = function (index) {
            var selectedDate = this.dateAddDays(this.baseYear, this.baseMonth, this.baseDay, index);
            var d = Retool.DateFormatter.format(selectedDate);
            return { id: d, text: d };
        };
        DatePicker.prototype.renderContainer = function (w, rows) {
            var curValue = this.component.getFieldValue();
            if (curValue instanceof Date) {
                this.current = curValue;
            }
            else {
                this.current = null;
            }
            w.writeTag("ul", "dropdown-menu date-picker");
            w.writeTag("div", "date-header");
            w.writeTag("a", "month-prev", { href: "#", "data-action": "prevMonth" }).write('<span class="glyphicon glyphicon-circle-arrow-left"></span></a>');
            w.text(Retool.DateFormatter.getMonthName(this.month) + " " + this.year);
            w.writeTag("a", "month-next", { href: "#", "data-action": "nextMonth" }).write('<span class="glyphicon glyphicon-circle-arrow-right"></span></a>');
            w.write('</div>');
            this.renderDates(w);
            w.write("</ul>");
        };
        DatePicker.prototype.renderDates = function (w) {
            var dayName = new Array('Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa');
            var month = this.month;
            var year = this.year;
            if (month == 0) {
                this.baseYear = year - 1;
                this.baseMonth = 11;
            }
            else {
                this.baseYear = year;
                this.baseMonth = month - 1;
            }
            var prevMonthDays = this.daysInMonth(this.baseYear, this.baseMonth);
            var curMonthDays = this.daysInMonth(year, month);
            var firstDayOfMonth = new Date(year, month, 1).getDay();
            var startDay = (firstDayOfMonth == 0) ? prevMonthDays - 6 : prevMonthDays - firstDayOfMonth + 1;
            var col = 0;
            var row = 0;
            var d = startDay;
            var v = "";
            var inPrevMonth = true;
            var inCurMonth = false;
            var today = new Date();
            this.baseDay = startDay;
            var todayIndex = this.dateDiffDays(this.baseYear, this.baseMonth, this.baseDay, today.getFullYear(), today.getMonth(), today.getDate());
            var currentIndex = -1;
            if (this.current) {
                currentIndex = this.dateDiffDays(this.baseYear, this.baseMonth, this.baseDay, this.current.getUTCFullYear(), this.current.getUTCMonth(), this.current.getUTCDate());
            }
            w.writeTag("table", null);
            w.write("<thead><tr>");
            for (col = 0; col <= 6; col++) {
                w.write("<th>" + dayName[col] + "</th>");
            }
            w.write("</tr></thead>");
            var dayIndex = 0;
            w.write("<tbody>");
            for (row = 0; row <= 5; row++) {
                w.write("<tr>");
                for (col = 0; col <= 6; col++) {
                    var css = "";
                    if (inCurMonth) {
                        if (dayIndex == todayIndex) {
                            css = "today";
                        }
                    }
                    else {
                        css = "inactive";
                    }
                    if (dayIndex == currentIndex) {
                        css = "current";
                    }
                    w.writeTag("td", null).writeTag("li", css, { "data-index": dayIndex });
                    w.writeTag("a", null, { href: "#" }).text(d.toString()).write("</a>");
                    w.write("</li></td>");
                    d++;
                    dayIndex++;
                    if (inPrevMonth) {
                        if (d > prevMonthDays) {
                            d = 1;
                            inPrevMonth = false;
                            inCurMonth = true;
                        }
                    }
                    else if (inCurMonth) {
                        if (d > curMonthDays) {
                            d = 1;
                            inCurMonth = false;
                        }
                    }
                }
                w.write("</tr>");
            }
            w.write("</tbody></table>");
        };
        DatePicker.prototype.onAction = function (action, w) {
            if (action == "prevMonth") {
                this.goPreviousMonth();
                this.renderContainer(w, null);
            }
            else if (action == "nextMonth") {
                this.goNextMonth();
                this.renderContainer(w, null);
            }
        };
        DatePicker.prototype.goPreviousMonth = function () {
            if (this.month == 0) {
                this.month = 11;
                this.year--;
            }
            else {
                this.month--;
            }
        };
        DatePicker.prototype.goNextMonth = function () {
            if (this.month == 11) {
                this.month = 0;
                this.year++;
            }
            else {
                this.month++;
            }
        };
        DatePicker.prototype.dateDiffDays = function (year, month, day, year2, month2, day2) {
            var ms = Date.UTC(year2, month2, day2) - Date.UTC(year, month, day);
            return ms / 1000 / 60 / 60 / 24;
        };
        DatePicker.prototype.dateAddDays = function (year, month, day, numDays) {
            var dt = Date.UTC(year, month, day) + numDays * 1000 * 60 * 60 * 24;
            return new Date(dt);
        };
        DatePicker.prototype.utcDateToString = function (dt) {
            var year = dt.getUTCFullYear().toString();
            var month = (dt.getUTCMonth() + 1).toString();
            var day = dt.getUTCDate().toString();
            return Retool.StringHelper.padZero(month, 2) + "-" + Retool.StringHelper.padZero(day, 2) + "-" + year;
        };
        DatePicker.prototype.daysInMonth = function (year, month) {
            var d = Date.UTC(year, month + 1, 1) - Date.UTC(year, month, 1);
            d = d / 1000 / 60 / 60 / 24;
            return d;
        };
        return DatePicker;
    })(Retool.DropdownRenderer);
    Retool.DatePicker = DatePicker;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Adapters;
    (function (Adapters) {
        var RestRunner = (function () {
            function RestRunner(commandFormatter) {
                this.commandFormatter = commandFormatter;
            }
            RestRunner.prototype.executeBatch = function (request, settings) {
                try {
                    this.doExecuteBatch(request, settings);
                }
                catch (e) {
                    request.error(e);
                }
            };
            RestRunner.prototype.executeSingle = function (request, settings) {
                try {
                    this.doExecuteSingle(request, settings);
                }
                catch (e) {
                    request.error(e);
                }
            };
            RestRunner.prototype.doExecuteSingle = function (request, settings) {
                var method = request.method;
                var command = this.getCommand(method);
                var url = settings.url + "/" + command.method;
                var type = "POST";
                var headers = {};
                if (this.commandFormatter.getHeaders) {
                    headers = this.commandFormatter.getHeaders(request);
                }
                var self = this;
                this.sendData({
                    type: type,
                    url: url,
                    data: JSON.stringify(command.body),
                    contentType: "application/json",
                    headers: headers,
                    success: function (data) {
                        var response;
                        if (command.response) {
                            response = command.response.apply(self.commandFormatter, [data]);
                        }
                        if (!response) {
                            response = { result: null };
                        }
                        request.success(response);
                    },
                    error: function (error) {
                        request.error(error);
                    }
                });
            };
            RestRunner.prototype.doExecuteBatch = function (request, settings) {
                var commands = [];
                var formParts;
                for (var i = 0; i < request.methods.length; i++) {
                    var method = request.methods[i];
                    var command = this.getCommand(method);
                    commands.push(command);
                    if (command.formParts) {
                        formParts = command.formParts;
                    }
                }
                var url = settings.url;
                var type = "POST";
                var requests = this.commandFormatter.buildBatch(request, commands);
                var headers = {};
                if (this.commandFormatter.getHeaders) {
                    headers = this.commandFormatter.getHeaders(request);
                }
                var data;
                var contentType;
                if (formParts) {
                    var formData = new FormData();
                    formData.append('request', JSON.stringify(requests));
                    for (var key in formParts) {
                        formData.append(key, formParts[key]);
                    }
                    data = formData;
                    contentType = false;
                }
                else {
                    data = (Retool.browser) ? JSON.stringify(requests) : requests;
                    contentType = "application/json";
                }
                var self = this;
                var callData = {
                    type: type,
                    url: url,
                    data: data,
                    headers: headers,
                    contentType: contentType,
                    success: function (data) {
                        var responses = [];
                        for (var i = 0; i < commands.length; i++) {
                            var responseData = data[i];
                            var command = commands[i];
                            var response;
                            if (command.response) {
                                response = command.response.apply(self.commandFormatter, [responseData]);
                            }
                            if (!response) {
                                response = { result: null };
                            }
                            responses.push(response);
                        }
                        request.success(responses);
                    },
                    error: function (error) {
                        request.error(error);
                    }
                };
                // perform a call back, which interesting
                if (Retool.browser) {
                    this.sendData(callData);
                }
                else {
                    Retool.App.sendData(callData);
                }
            };
            RestRunner.prototype.getCommand = function (method) {
                var methodName = "model_call";
                var func = this.commandFormatter[methodName];
                if (func) {
                    return func.apply(this.commandFormatter, [method]);
                }
                else {
                    throw "Unknown method " + methodName;
                }
            };
            RestRunner.prototype.getAuthToken = function (xhr) {
                var token = xhr.getResponseHeader("X-Retool-Auth-Token");
                if (token) {
                    if (token == "destroy") {
                        Retool.App.sessionToken = null;
                    }
                    else {
                        Retool.App.sessionToken = token;
                    }
                }
            };
            RestRunner.prototype.sendData = function (params) {
                var self = this;
                var settings = {
                    "type": params.type,
                    "url": params.url,
                    "dataType": 'json',
                    "contentType": params.contentType,
                    "headers": params.headers,
                    crossDomain: true,
                    processData: false,
                    cache: false,
                    success: function (data, a, xhr) {
                        self.getAuthToken(xhr);
                        params.success(data);
                    },
                    error: function (xhr, b, c) {
                        params.error(xhr);
                    }
                };
                if (params.data) {
                    settings["data"] = params.data;
                }
                if (this.withCredentials) {
                    settings.xhrFields = {
                        withCredentials: true
                    };
                }
                $.ajax(settings);
            };
            return RestRunner;
        })();
        Adapters.RestRunner = RestRunner;
    })(Adapters = Retool.Adapters || (Retool.Adapters = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Adapters;
    (function (Adapters) {
        var RetoolServerAdapter = (function () {
            function RetoolServerAdapter() {
                this.restRunner = new Adapters.RestRunner(this);
                this.restRunner.withCredentials = true;
            }
            RetoolServerAdapter.prototype.executeSingle = function (request) {
                var url = Retool.App.apiHost;
                this.restRunner.executeSingle(request, {
                    url: url
                });
            };
            RetoolServerAdapter.prototype.executeBatch = function (request) {
                var url = Retool.App.apiHost;
                url += "batch/";
                this.restRunner.executeBatch(request, {
                    url: url
                });
            };
            RetoolServerAdapter.prototype.getHeaders = function (request) {
                var headers = {
                    "x-retool-project": Retool.App.projectId
                };
                var token = Retool.App.getSessionToken();
                if (token) {
                    headers["Authorization"] = "Bearer " + token;
                }
                return headers;
            };
            RetoolServerAdapter.prototype.buildBatch = function (request, commands) {
                var requests = [];
                for (var i = 0; i < commands.length; i++) {
                    var command = commands[i];
                    var body = command.body;
                    body.method = command.method;
                    requests.push(body);
                }
                return requests;
            };
            RetoolServerAdapter.prototype.model_call = function (method) {
                var className = method.className.toLowerCase();
                var body = { "arguments": method.args };
                var modelInstance = method.modelInstance;
                if (modelInstance) {
                    body.modelInstance = { isNew: modelInstance.getIsNew(), attributes: modelInstance.data }; // only send .data keep ref to model instance 
                }
                return {
                    method: className + "." + method.method,
                    body: body,
                    response: function (data) {
                        if (data.meta) {
                            var meta = data.meta;
                            if (meta.type) {
                                var vmType = Retool.VM.getType(meta.type);
                                if (meta.is_target) {
                                    modelInstance.data = data.result;
                                    modelInstance.isNew = meta.args.isNew;
                                }
                                else if (vmType && vmType.constructorFunc.deserialize) {
                                    try {
                                        data.result = vmType.constructorFunc.deserialize(meta, data.result);
                                    }
                                    catch (e) {
                                    }
                                }
                            }
                        }
                        return data;
                    }
                };
            };
            return RetoolServerAdapter;
        })();
        Adapters.RetoolServerAdapter = RetoolServerAdapter;
    })(Adapters = Retool.Adapters || (Retool.Adapters = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var RequestMethod = (function () {
        function RequestMethod(id, className, method) {
            this.id = id;
            this.className = className;
            this.method = method;
        }
        return RequestMethod;
    })();
    Retool.RequestMethod = RequestMethod;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Request = (function () {
        function Request(options) {
            this.methods = [];
            if (options) {
                this.type = options.type;
            }
        }
        Request.prototype.add = function (options) {
            var id = (this.methods.length + 1).toString();
            var method = new Retool.RequestMethod(id, options.className, options.method);
            method.args = options.args;
            method.modelInstance = options.modelInstance;
            method.success = options.success;
            method.error = options.error;
            this.methods.push(method);
            return method;
        };
        Request.prototype.execute = function (options) {
            var done = (options) ? options.done : null;
            if (this.methods.length) {
                var firstMethod = this.methods[0];
                var methodName = firstMethod.method.split('.');
                var adapter = Retool.Runtime.requestAdapter;
                var allowBatch = true;
                if (this.type == "accounts") {
                    allowBatch = false;
                }
                if (adapter.executeBatch && allowBatch) {
                    this.executeAsBatch(adapter, done);
                }
                else {
                    this.executeAsSingle(adapter, done);
                }
            }
        };
        Request.prototype.executeAsBatch = function (adapter, done) {
            this.done = done;
            var self = this;
            if (this.type != "touch") {
                Retool.showLoading(0);
                if (Retool.App.ide) {
                    // if there are pending file save request piggy back them onto this request
                    var fileSaveRequest = Retool.App.ide.getFileSaveQueueRequest();
                    if (fileSaveRequest) {
                        this.methods = fileSaveRequest.methods.concat(this.methods);
                    }
                }
            }
            var adapterRequest = {
                type: this.type,
                methods: this.methods,
                success: function (data) {
                    Retool.hideLoading();
                    self.success(data);
                },
                error: function (error) {
                    Retool.hideLoading();
                    if (error.status == 426) {
                        Retool.displayUpgradeRequired();
                        return;
                    }
                    Retool.displayException(new Retool.VM.VMError(error.responseText || error));
                }
            };
            adapter.executeBatch(adapterRequest);
        };
        Request.prototype.redirectToLogin = function () {
            var redirect;
            if (this.targetUrl) {
                redirect = this.targetUrl;
            }
            var urlPath = "web/pages/login";
            if (redirect) {
                urlPath += "?redirect=" + encodeURIComponent(redirect.toString());
            }
            Retool.App.layoutView.render({ url: new Retool.Url(urlPath) }, null);
        };
        Request.prototype.redirectToAdministratorLogin = function () {
            window.location = window.location;
        };
        Request.prototype.success = function (data) {
            var responses = data;
            if (this.beforeProcessResponses) {
                this.beforeProcessResponses(responses);
            }
            var autoErrorHandling = true;
            if (this.type == "touch") {
                autoErrorHandling = false;
            }
            else {
                Retool.touchCount = 0; // reset
            }
            for (var i = 0; i < this.methods.length; i++) {
                var requestMethod = this.methods[i];
                var response = this.findResponse(responses, i);
                if (!response) {
                    Retool.displayException("Missing response at index: " + i);
                }
                try {
                    if (response.error) {
                        if (autoErrorHandling) {
                            if (response.error.code == "101") {
                            }
                            else if (response.error.code == "102") {
                                this.redirectToAdministratorLogin();
                                return;
                            }
                        }
                        requestMethod.error(response);
                    }
                    else {
                        requestMethod.success(response);
                    }
                }
                catch (e) {
                    Retool.displayException(e);
                }
            }
            if (this.done) {
                this.done(data);
            }
        };
        Request.prototype.executeAsSingle = function (adapter, done) {
            Retool.showLoading(70);
            var self = this;
            this.responses = [];
            this.currentExecutingMethodIndex = -1;
            this.currentExecutingAdapter = adapter;
            this.done = done;
            this.next();
        };
        Request.prototype.next = function () {
            this.currentExecutingMethodIndex++;
            if (this.currentExecutingMethodIndex >= this.methods.length) {
                this.success(this.responses);
                Retool.hideLoading();
            }
            else {
                var self = this;
                var adapterRequest = {
                    type: this.type,
                    method: this.methods[this.currentExecutingMethodIndex],
                    success: function (data) {
                        self.responses.push(data);
                        self.next();
                    },
                    error: function (error) {
                        self.responses.push({ exception: { message: error.responseText || error } });
                        self.next();
                    }
                };
                this.currentExecutingAdapter.executeSingle(adapterRequest);
            }
        };
        Request.prototype.findResponse = function (responses, index) {
            if (index < responses.length) {
                return responses[index];
            }
            return null;
        };
        return Request;
    })();
    Retool.Request = Request;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var HelperLocator = (function () {
            function HelperLocator() {
                this._helpers = {};
            }
            HelperLocator.prototype.add = function (name, helper) {
                if (!helper.settings) {
                    helper.settings = {};
                }
                helper.settings.kind = name;
                this._helpers[name] = helper;
            };
            HelperLocator.prototype.get = function (name) {
                var r = this._helpers[name];
                if (r) {
                    return r;
                }
                return this._helpers["r-generic"];
            };
            HelperLocator.prototype.getAll = function () {
                var list = [];
                for (var key in this._helpers) {
                    var item = this._helpers[key];
                    if (item.settings) {
                        item.settings.kind = key;
                    }
                    list.push(item);
                }
                return list;
            };
            HelperLocator.prototype.createCustom = function () {
                return new Helpers.Custom();
            };
            return HelperLocator;
        })();
        Helpers.HelperLocator = HelperLocator;
        Retool.Runtime.helpers = new HelperLocator();
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var HelperBase = (function () {
            function HelperBase() {
                this.allowableChildren = [];
                this.properties = null;
            }
            HelperBase.prototype.init = function (component) {
            };
            HelperBase.prototype.computeModel = function (component, context) {
                return null;
            };
            HelperBase.prototype.renderContent = function (w) {
            };
            HelperBase.prototype.renderStartTag = function (w) {
                if (this.settings.morph) {
                    w.writeMorphStart();
                }
            };
            HelperBase.prototype.renderEndTag = function (w) {
                if (this.settings.morph) {
                    w.writeMorphEnd();
                }
                else {
                    w.endTag(w.component.tagName);
                }
            };
            HelperBase.prototype.afterRender = function (w) {
            };
            HelperBase.prototype.getValue = function (component) {
            };
            HelperBase.prototype.requiresRender = function (c) {
                return false;
            };
            HelperBase.prototype.calculateProperties = function (c) {
                if (!c.customComponent)
                    return;
                var helper = c.customComponent.helper;
                var customAttributes = helper.properties;
                if (!customAttributes)
                    return;
                var attribList = customAttributes.list;
                if (attribList && attribList.length) {
                    var context = c.context;
                    var parentContext = context.parent;
                    var attr = c.customComponent.attr;
                    var propertyValues = context.viewModel.propertyValues;
                    var params;
                    if (propertyValues.params) {
                        params = propertyValues.params;
                    }
                    else {
                        params = propertyValues.params = {};
                    }
                    var compiled = attr._compiled;
                    var done = null;
                    for (var i = 0; i < attribList.length; i++) {
                        var p = attribList[i];
                        var name = p.name;
                        var value;
                        if (compiled && compiled[name]) {
                            if (done) {
                                value = parentContext.evaluateMethodAsync(compiled[name], done, { settings: attr });
                            }
                            value = parentContext.evaluateMethod(compiled[name], { settings: attr });
                        }
                        else {
                            value = attr[name];
                        }
                        params[name] = value;
                    }
                }
            };
            HelperBase.prototype.createFromToolbox = function (item) {
            };
            HelperBase.prototype.buildEditor = function (builder) {
            };
            HelperBase.prototype.map = function (element, compiler) {
                compiler.compileChildren(element);
            };
            HelperBase.prototype.getInspectorInfo = function (element) {
                var info = {};
                if (element.text) {
                    info.literal = element.text;
                }
                if (element.value) {
                    info.field = element.value;
                }
                if (element.name) {
                    info.name = element.name;
                }
                else if (element.cssclass) {
                    info.cssclass = element.cssclass;
                }
                return info;
            };
            HelperBase.prototype.closeDialog = function (component) {
                if (component.parent) {
                    component.parent.helper.closeDialog(component.parent);
                }
            };
            HelperBase.prototype.setValueFromDrop = function (component, data) {
            };
            HelperBase.prototype.renderChanges = function (component, options) {
                var writer = component.createWriter();
                component.children = [];
                try {
                    this.renderContent(writer);
                }
                catch (e) {
                    var writer = component.createWriter(); // clear
                    writer.writeComponentError(component, e);
                }
                writer.writeToComponent(component);
                /*
                if (writer.resizeDesigner && App.ide){
                    App.ide.resize();
                }
                */
                if (writer.setFocusTo) {
                    if (typeof writer.setFocusTo === "function") {
                        writer.setFocusTo();
                    }
                    else {
                        $(writer.setFocusTo).focus();
                    }
                }
                return false;
            };
            HelperBase.prototype.onshiftclick = function (event) {
                Retool.App.ide.clearSelection();
                var c = event.component;
                if (c.context.type == "component") {
                    while (c && !c.customComponent) {
                        c = c.parent;
                    }
                }
                var view = c.getView();
                var partial = c.closest('partial');
                var compiledTemplate;
                if (c.customComponent) {
                    compiledTemplate = c.context.parent.viewModel.template;
                }
                else {
                    compiledTemplate = c.getTemplate();
                }
                if (partial) {
                    compiledTemplate = Retool.App.templates.get(partial.getAttr('template'));
                }
                if (compiledTemplate.sourceFile) {
                    var id = (c.customComponent) ? c.customComponent.attr.id : c.attr.id;
                    Retool.App.ide.show({ id: id, shiftClick: true, view: view, compiledTemplate: compiledTemplate });
                }
                if (!event.allowDefaultAction) {
                    event.preventDefault();
                }
                event.stopPropagation();
                Retool.App.page.clearSelection();
            };
            HelperBase.prototype.getDesignerModelContext = function (element, parentModelDef) {
                if (element.model) {
                    return element.model;
                }
                return null;
            };
            HelperBase.prototype.fireDefaultButton = function (e, selector) {
                var target = $(selector);
                var prefix = Retool.elemInsideDesigner(selector) ? Retool.designerClassPrefix : Retool.appClassPrefix;
                var buttonContainer = target.closest('[data-default-btn-container]');
                if (buttonContainer.length) {
                    var button = buttonContainer.find('[data-default-btn]').first()[0];
                    if (button) {
                        if (e) {
                            Retool.raise(target, "onblur", e);
                        }
                        button.click();
                    }
                }
            };
            HelperBase.prototype.getLabel = function (c) {
                if (c.attr.label == "(field)") {
                    var modelDef = c.getModelDef();
                    if (modelDef && c.attr.value) {
                        return Retool.App.getMultiSegmentFieldLabel(modelDef, c.attr.value).join(' ');
                    }
                }
                return c.attr.label || "";
            };
            HelperBase.prototype.showForEdit = function (c) {
                return !this.settings.showOnly;
            };
            HelperBase.prototype.getCssClass = function (c) {
                return c.getElement().attr('class');
            };
            HelperBase.prototype.setCssClass = function (c, cssClass) {
                c.getElement().attr('class', cssClass);
            };
            HelperBase.prototype.computeStartTagClass = function (component) {
                return component.computeClass(null);
            };
            HelperBase.prototype.getScopeContainer = function (c) {
                return null;
            };
            HelperBase.prototype.getBlocks = function (children) {
                var elseIndex = this.findElse(children);
                if (elseIndex == -1) {
                    return { mainBlock: children, elseBlock: null };
                }
                else {
                    return { mainBlock: children.slice(0, elseIndex), elseBlock: children.slice(elseIndex + 1) };
                }
            };
            HelperBase.prototype.findElse = function (children) {
                for (var i = 0; i < children.length; i++) {
                    if (children[i].kind == "else") {
                        return i;
                    }
                }
                return -1;
            };
            HelperBase.prototype.onclick = function (event, options) {
                var c = event.component;
                var attr = c.attr;
                var handled;
                if (attr.role) {
                    Helpers.RoleHandler.onclick(event, c);
                    handled = true;
                }
                else if (attr.href) {
                    c.navigateToHref(event);
                    handled = true;
                }
                if (attr.name) {
                    handled = handled || c.raise({ methodName: "onclick", event: event });
                }
                this.afterClick(event, handled);
            };
            HelperBase.prototype.afterClick = function (event, handled) {
                var c = event.component;
                if (c.attr.toggle == "dropdown") {
                    event.keepDropOpen();
                }
                else {
                    c.getElement().closest('.dropdown').removeClass('open');
                }
                if (handled) {
                    event.preventDefault();
                    event.stopPropagation();
                }
            };
            HelperBase.prototype.getSupportedEvents = function (list) {
                list.push("onclick");
            };
            return HelperBase;
        })();
        Helpers.HelperBase = HelperBase;
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var FieldToInputResolver = (function () {
            function FieldToInputResolver() {
            }
            FieldToInputResolver.resolve = function (fieldType) {
                return FieldToInputResolver.map[fieldType] || "text";
            };
            FieldToInputResolver.map = {
                "boolean": "checkbox",
                "date": "date",
                "datetime": "datetime",
                "email": "email",
                "money": "money",
                "integer": "integer",
                "number": "number",
                "objectid": "objectid",
                "phone": "tel",
                "string": "text",
                "text": "textarea",
                "url": "url"
            };
            return FieldToInputResolver;
        })();
        Helpers.FieldToInputResolver = FieldToInputResolver;
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Custom = (function (_super) {
            __extends(Custom, _super);
            function Custom() {
                _super.apply(this, arguments);
                this.settings = { "container": false, "toolbox": false, label: "custom", dropKind: "helper", glyph: "]", tourstop: false, category: "html", expandOnCreate: true };
                this.allowableChildren = ['block', 'inline', 'table', 'buttonbar', 'input'];
            }
            Custom.prototype.renderStartTag = function (w) {
                return;
                var c = w.component;
                w.startTag(c.attr.kind, this.computeStartTagClass(w.component));
            };
            Custom.prototype.renderEndTag = function (w) {
                return;
            };
            Custom.prototype.renderContent = function (w) {
                w.renderChildComponents([this.element]);
            };
            Custom.prototype.buildEditor = function (list) {
                if (this.properties) {
                    list.concat(this.properties);
                }
            };
            Custom.prototype.getInspectorInfo = function (element) {
                var info = {};
                info.expression = element.expression;
                return info;
            };
            Custom.create = function (component) {
                var helper = new Custom();
                helper.settings = { "container": component.isContainer, toolbox: true, label: component.name, isCustom: true };
                helper.properties = component.customAttributes;
                helper.element = component.contentElement;
                helper.settings.dropKind = component.dropKind;
                helper.settings.isCustom = true;
                helper.componentDef = component;
                return helper;
            };
            return Custom;
        })(Helpers.HelperBase);
        Helpers.Custom = Custom;
        Retool.Runtime.helpers.add("r-custom", new Custom());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var RoleHandler = (function () {
            function RoleHandler() {
            }
            RoleHandler.onclick = function (event, c) {
                var role = c.attr.role;
                switch (role) {
                    case "dropdown":
                        RoleHandler.dropdown(event, c);
                        break;
                    case "navbar-collapse":
                        RoleHandler.navbarCollapse(event, c);
                        break;
                    case "tab":
                        RoleHandler.tab(event, c);
                        break;
                }
            };
            RoleHandler.dropdown = function (event, c) {
                var container = c.getElement().closest('.dropdown');
                //event.keepDropForComponent = component.parent;
                event.keepDropOpen();
                container.addClass('open');
            };
            RoleHandler.navbarCollapse = function (event, c) {
                $('.navbar-collapse').collapse('toggle');
            };
            RoleHandler.tab = function (event, c) {
                var parent = c.parent;
                if (parent) {
                    for (var i = 0; i < parent.children.length; i++) {
                        var child = parent.children[i];
                        if (child.attr.role == "tab") {
                            if (child == c) {
                                child.localData.forceActive = "active";
                                child.getElement().addClass('active');
                            }
                            else {
                                child.localData.forceActive = "inactive";
                                child.getElement().removeClass('active');
                            }
                        }
                    }
                }
                var view = c.getView();
                var href = c.attr.href;
                var toggleTarget;
                if (href.length && href[0] == "#") {
                    toggleTarget = href.substr(1);
                }
                else {
                    toggleTarget = href;
                }
                var root = c.getTemplateRoot();
                var tab = view.findLocalComponentByName(toggleTarget, -1);
                if (tab) {
                    RoleHandler.activateTab(tab);
                }
            };
            RoleHandler.activateTab = function (tab) {
                var tabElem = tab.getElement();
                tabElem.parent().children('.active').removeClass('active');
                tabElem.addClass('active');
            };
            RoleHandler.getHelperDrop = function () {
                return { droptype: "generic", allowNonDrop: true, dropItems: ['dropdown', 'nav', 'navbar-collapse', 'tab', 'tabpanel'] };
            };
            return RoleHandler;
        })();
        Helpers.RoleHandler = RoleHandler;
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var BlockBase = (function (_super) {
            __extends(BlockBase, _super);
            function BlockBase(options) {
                _super.call(this);
                this.settings = { tagName: "div", "container": true, "toolbox": true, label: "div", dropKind: "block", glyph: "f", tourstop: true, expandOnCreate: true, category: "html" };
                this.allowableChildren = ['block', 'inline', 'table', 'buttonbar', 'input'];
                for (var key in options) {
                    this.settings[key] = options[key];
                }
            }
            BlockBase.prototype.renderStartTag = function (writer) {
                writer.startTag(this.settings.tagName, this.computeStartTagClass(writer.component));
            };
            BlockBase.prototype.renderContent = function (w) {
                var c = w.component;
                try {
                    c.renderTextContent(w);
                }
                catch (e) {
                }
                w.renderChildren();
            };
            BlockBase.prototype.requiresRender = function (c) {
                return c.blockChanged();
            };
            BlockBase.prototype.buildEditor = function (builder) {
                builder.addTextProp("text", "Text");
                BlockBase.addStandardEditor(builder);
            };
            BlockBase.addStandardEditor = function (builder) {
                builder.addTextProp("cssclass", "Css Class");
                builder.addTextProp("role", "Role", Helpers.RoleHandler.getHelperDrop());
            };
            return BlockBase;
        })(Helpers.HelperBase);
        Helpers.BlockBase = BlockBase;
        Retool.Runtime.helpers.add("div", new BlockBase({ tagName: "div", label: "div", glyph: "f" }));
        Retool.Runtime.helpers.add("aside", new BlockBase({ tagName: "aside", label: "aside", glyph: "f" }));
        Retool.Runtime.helpers.add("address", new BlockBase({ tagName: "address", label: "address", glyph: "f" }));
        Retool.Runtime.helpers.add("article", new BlockBase({ tagName: "article", label: "article", glyph: "f" }));
        Retool.Runtime.helpers.add("blockquote", new BlockBase({ tagName: "blockquote", label: "blockquote", glyph: "f" }));
        Retool.Runtime.helpers.add("dd", new BlockBase({ tagName: "dd", label: "dd", glyph: "f" }));
        Retool.Runtime.helpers.add("dl", new BlockBase({ tagName: "dl", label: "dl", glyph: "f" }));
        Retool.Runtime.helpers.add("dt", new BlockBase({ tagName: "dt", label: "dt", glyph: "f" }));
        Retool.Runtime.helpers.add("footer", new BlockBase({ tagName: "footer", label: "footer", glyph: "f" }));
        Retool.Runtime.helpers.add("header", new BlockBase({ tagName: "header", label: "header", glyph: "f" }));
        Retool.Runtime.helpers.add("nav", new BlockBase({ tagName: "nav", label: "nav", glyph: "f" }));
        Retool.Runtime.helpers.add("ol", new BlockBase({ tagName: "ol", label: "ol", glyph: "f" }));
        Retool.Runtime.helpers.add("p", new BlockBase({ tagName: "p", label: "p", glyph: "u" }));
        Retool.Runtime.helpers.add("pre", new BlockBase({ tagName: "pre", label: "pre", glyph: "f" }));
        Retool.Runtime.helpers.add("section", new BlockBase({ tagName: "section", label: "section", glyph: "f" }));
        Retool.Runtime.helpers.add("ul", new BlockBase({ tagName: "ul", label: "ul", glyph: "X" }));
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Br = (function (_super) {
            __extends(Br, _super);
            function Br() {
                _super.apply(this, arguments);
                this.settings = { "toolbox": true, label: "br", dropKind: "inline", glyph: "a", category: "html" };
            }
            Br.prototype.renderStartTag = function (writer) {
                writer.startTag("br", this.computeStartTagClass(writer.component));
            };
            Br.prototype.renderContent = function (writer) {
            };
            Br.prototype.renderEndTag = function () {
                // no ending tag
            };
            return Br;
        })(Helpers.HelperBase);
        Helpers.Br = Br;
        Retool.Runtime.helpers.add("br", new Br());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Fieldset = (function (_super) {
            __extends(Fieldset, _super);
            function Fieldset() {
                _super.apply(this, arguments);
                this.settings = { "container": true, "toolbox": true, label: "fieldset", glyph: "i", tourstop: true, expandOnCreate: true, dropKind: "block" };
                this.allowableChildren = ['input', 'block', 'inline', 'datafield', 'button', 'fieldset', 'column'];
            }
            Fieldset.prototype.renderStartTag = function (writer) {
                writer.startTag("fieldset", this.computeStartTagClass(writer.component));
            };
            Fieldset.prototype.computeStartTagClass = function (c) {
                var attr = c.attr;
                var cssclass = (attr.horizontal) ? "form-horizontal " : "";
                return c.computeClass(cssclass);
            };
            Fieldset.prototype.renderContent = function (w) {
                var attr = w.component.attr;
                if (attr.text) {
                    w.write('<legend>').text(attr.text).write('</legend>');
                }
                w.renderChildren();
            };
            Fieldset.prototype.buildEditor = function (builder) {
                builder.addTextProp("text", "Text");
                Helpers.BlockBase.addStandardEditor(builder);
                builder.addCheckbox("horizontal", "Horizontal");
                builder.addTextProp("labelWidth", "Label Width (cols)");
            };
            return Fieldset;
        })(Helpers.HelperBase);
        Helpers.Fieldset = Fieldset;
        var HorizontalFieldSetRenderer = (function () {
            function HorizontalFieldSetRenderer(fieldSet) {
                var labelWidth;
                try {
                    labelWidth = parseInt(fieldSet.attr.labelWidth, 10);
                }
                catch (e) {
                }
                if (!labelWidth) {
                    labelWidth = 2;
                }
                this.labelCls = "col-lg-" + labelWidth;
                this.fieldCls = "col-lg-" + (12 - labelWidth);
                this.offsetCls = "col-lg-offset-" + labelWidth;
            }
            HorizontalFieldSetRenderer.prototype.render = function (writer, data) {
                var component = writer.component;
                var handler = component.helper;
                var labelWidth;
                if (data.locked) {
                    writer.writeTag("label", this.labelCls + " control-label").text(handler.getLabel(component)).write('</label>');
                    writer.writeTag("div", this.fieldCls + " control-data");
                    if (data.fieldErrors) {
                        writer.writeTag("div", "has-error !retool-input-state input-ro");
                    }
                    else {
                        writer.writeTag("div", "!retool-input-state input-ro");
                    }
                    handler.renderLocked(writer, data.value, data.fieldErrors);
                    writer.write('</div></div>');
                }
                else {
                    if (handler.suppressLabel) {
                        writer.writeTag("div", this.fieldCls + " " + this.offsetCls);
                    }
                    else {
                        writer.writeTag("label", this.labelCls + " control-label").text(handler.getLabel(component)).write('</label>');
                        writer.writeTag("div", this.fieldCls + " control-data");
                    }
                    if (data.fieldErrors) {
                        writer.writeTag("div", "has-error !retool-input-state input-edit");
                    }
                    else {
                        writer.writeTag("div", "!retool-input-state input-edit");
                    }
                    handler.renderInputElement(writer, data.value, false, data.fieldErrors);
                    writer.write('</div></div>');
                }
            };
            return HorizontalFieldSetRenderer;
        })();
        Helpers.HorizontalFieldSetRenderer = HorizontalFieldSetRenderer;
        var VerticalFieldSetRenderer = (function () {
            function VerticalFieldSetRenderer(fieldSet) {
            }
            VerticalFieldSetRenderer.prototype.render = function (writer, data) {
                var component = writer.component;
                var handler = component.helper;
                var inputState = (data.locked) ? "input-ro" : "input-edit";
                if (data.fieldErrors) {
                    writer.writeTag("div", "has-error !retool-input-state " + inputState);
                }
                else {
                    writer.writeTag("div", "!retool-input-state " + inputState);
                }
                if (data.locked) {
                    writer.writeTag("label", "control-label").text(handler.getLabel(component)).write('</label>');
                    handler.renderLocked(writer, data.value, data.fieldErrors);
                }
                else {
                    if (!handler.suppressLabel) {
                        writer.writeTag("label", "control-label").text(handler.getLabel(component)).write('</label>');
                    }
                    handler.renderInputElement(writer, data.value, false, data.fieldErrors);
                }
                writer.write("</div>");
            };
            return VerticalFieldSetRenderer;
        })();
        Helpers.VerticalFieldSetRenderer = VerticalFieldSetRenderer;
        Retool.Runtime.helpers.add("fieldset", new Fieldset());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var FormBase = (function (_super) {
            __extends(FormBase, _super);
            function FormBase() {
                _super.apply(this, arguments);
            }
            FormBase.prototype.onkeypress = function (e) {
                var de = e.domEvent;
                if (de.which == 13) {
                    de.preventDefault();
                    de.stopPropagation();
                    this.fireDefaultButton(e, de.target);
                }
            };
            FormBase.prototype.renderContent = function (writer) {
                var c = writer.component;
                if (c.context.getError()) {
                    Retool.ErrorRenderer.render({ error: c.context.getError(), writer: writer });
                }
                this.renderInner(writer);
                c.localData.renderedErrorVersion = c.context.getErrorVersion();
            };
            FormBase.prototype.renderInner = function (w) {
            };
            FormBase.prototype.renderChanges = function (c) {
                if (c.context.getError()) {
                    Retool.ErrorRenderer.render({ error: c.context.getError(), targetElement: c.getElement() });
                }
                else {
                    Retool.ErrorRenderer.removeErrors({ targetElement: c.getElement() });
                }
                c.localData.renderedErrorVersion = c.context.getErrorVersion();
                return true; // process children
            };
            FormBase.prototype.requiresRender = function (c) {
                return (c.context.getErrorVersion() != c.localData.renderedErrorVersion);
            };
            return FormBase;
        })(Helpers.HelperBase);
        Helpers.FormBase = FormBase;
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Form = (function (_super) {
            __extends(Form, _super);
            function Form() {
                _super.apply(this, arguments);
                this.settings = { "container": true, "toolbox": true, label: "form", dropKind: "block", glyph: "r", tourstop: true, expandOnCreate: true, category: "", componentClass: "form", canFetch: true };
                this.allowableChildren = ['block', 'inline', 'fieldset', 'titlebar', 'editbar', 'row', 'table', 'relationship', 'tabs'];
            }
            Form.prototype.renderStartTag = function (writer) {
                writer.startTag("div", this.computeStartTagClass(writer.component), { role: "form", "data-default-btn-container": "true" });
            };
            Form.prototype.computeStartTagClass = function (c) {
                return c.computeClass(null);
            };
            Form.prototype.renderInner = function (writer) {
                var c = writer.component;
                var cls = "edit ";
                // this.renderTutorialStepBanner(writer,1,"Create your first customers","Add a few customers so you can track opportunities.")
                writer.renderChildren();
                var focus;
                if (writer.setFocusTo) {
                    focus = function () {
                        $("#" + writer.setFocusTo).focus();
                    };
                }
                else {
                    focus = function () {
                        $("#" + c.getElementId() + " input:visible:enabled:first").focus();
                    };
                }
            };
            Form.prototype.buildEditor = function (builder) {
                Helpers.BlockBase.addStandardEditor(builder);
                // builder.addTextProp("dataMethod","Data Method");
                builder.addCheckbox("editMode", "Edit Mode");
            };
            Form.prototype.renderTutorialStepBanner = function (w, stepNumber, text, instructions) {
                w.writeTag("div", "tutorial-heading").writeTag("div", "panel radius");
                w.write('<h5>').writeTag("span", "step").write(stepNumber.toString() + '</span> ').text(text).write('</h5>');
                w.write('<p>').text(instructions).write('</p>');
                w.writeTag("a", "button", { href: "#" }).text("I've completed this step").write('</a>');
                w.write('</div></div>');
            };
            return Form;
        })(Helpers.FormBase);
        Helpers.Form = Form;
        Retool.Runtime.helpers.add("form", new Form());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var FormGroup = (function (_super) {
            __extends(FormGroup, _super);
            function FormGroup() {
                _super.apply(this, arguments);
                this.settings = { "container": true, "toolbox": true, label: "form-group", dropKind: "block", glyph: "f", tourstop: true, expandOnCreate: true, category: "html" };
                this.allowableChildren = ['block', 'inline', 'table', 'buttonbar', 'input'];
            }
            FormGroup.prototype.renderStartTag = function (writer) {
                var c = writer.component;
                var css = this.computeStartTagClass(c);
                if (c.attr.type == "inline") {
                    css += " form-inline";
                }
                else if (c.attr.type == "horizontal") {
                    css += " form-horizontal";
                }
                writer.startTag("div", css);
            };
            FormGroup.prototype.renderContent = function (writer) {
                var c = writer.component;
                var attr = c.attr;
                var type = (attr.type || "basic");
                var labelWidth;
                if (attr.labelwidth) {
                    try {
                        labelWidth = parseInt(attr.labelwidth, 10);
                    }
                    catch (e) {
                    }
                }
                if (!labelWidth || labelWidth > 11) {
                    labelWidth = 2;
                }
                c.localData.formGroup = { type: type, labelColSize: labelWidth, inputColSize: 12 - labelWidth };
                writer.renderChildren();
            };
            FormGroup.prototype.buildEditor = function (builder) {
                builder.addTextProp("type", "Form Type", { droptype: "generic", allowNonDrop: true, dropItems: ['basic', 'horizontal', 'inline'] });
                Helpers.BlockBase.addStandardEditor(builder);
                builder.addTextProp("labelwidth", "Label Width (1-11)");
            };
            return FormGroup;
        })(Helpers.HelperBase);
        Helpers.FormGroup = FormGroup;
        Retool.Runtime.helpers.add("formgroup", new FormGroup());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Hr = (function (_super) {
            __extends(Hr, _super);
            function Hr() {
                _super.apply(this, arguments);
                this.settings = { "toolbox": true, label: "hr", dropKind: 'inline', glyph: "p", category: "html" };
            }
            Hr.prototype.renderStartTag = function (writer) {
                writer.startTag("hr", this.computeStartTagClass(writer.component));
            };
            Hr.prototype.renderContent = function (writer) {
            };
            Hr.prototype.buildEditor = function (builder) {
                builder.addTextProp("cssclass", "Css Class");
            };
            return Hr;
        })(Helpers.HelperBase);
        Helpers.Hr = Hr;
        Retool.Runtime.helpers.add("hr", new Hr());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Li = (function (_super) {
            __extends(Li, _super);
            function Li() {
                _super.apply(this, arguments);
                this.settings = { "container": true, "toolbox": true, label: "li", dropKind: "block", glyph: "Y", tourstop: true, category: "html" };
                this.allowableChildren = ['block', 'inline', 'table', 'buttonbar'];
            }
            Li.prototype.renderStartTag = function (w) {
                var attr = w.component.attr;
                w.startTag("li", this.computeStartTagClass(w.component));
            };
            Li.prototype.computeStartTagClass = function (c) {
                var href = c.getAttr("href");
                var css;
                if (href && (c.attr.showActive == "partial" || c.attr.showActive == "exact")) {
                    href = c.resolveHref(href);
                    var match = this.urlMatch(Retool.App.page.url.getPath(), href, c.attr.showActive == "exact");
                    if (match) {
                        css = "active";
                    }
                }
                else if (c.attr.value) {
                    var value = c.getAttr("value");
                    if (value == c.attr.data) {
                        css = "active";
                    }
                }
                return c.computeClass(css);
            };
            Li.prototype.urlMatch = function (pagePath, href, exact) {
                var pageSegments = pagePath.split('/');
                var hrefSegments = href.split('/');
                // if matching an index template then add the implied index to page path if missing
                if (hrefSegments.length > 1 && hrefSegments[1] == "index" && pageSegments.length == 1) {
                    pageSegments.push("index");
                }
                if (exact && (pageSegments.length != hrefSegments.length))
                    return false;
                for (var i = 0; i < hrefSegments.length; i++) {
                    if (i >= pageSegments.length) {
                        return false;
                    }
                    if (hrefSegments[i] != pageSegments[i]) {
                        return false;
                    }
                }
                return true;
            };
            Li.prototype.renderContent = function (w) {
                var c = w.component;
                var attr = c.attr;
                var hasNav = (attr.href || attr.role == "navitem");
                if (hasNav) {
                    c.localData.dynamicCss = true;
                }
                if (w.component.attr.icon) {
                    w.writeIcon(w.component.attr.icon);
                }
                if (hasNav) {
                    w.writeTag("a", null, { href: "#" });
                }
                c.renderTextContent(w);
                w.renderChildren();
                if (hasNav) {
                    w.write('</a>');
                }
            };
            Li.prototype.onclick = function (event) {
                return _super.prototype.onclick.call(this, event, { allowBindValue: true });
            };
            Li.prototype.requiresRender = function (component) {
                return component.blockChanged();
            };
            Li.prototype.buildEditor = function (builder) {
                builder.addTextProp("text", "Text");
                Helpers.BlockBase.addStandardEditor(builder);
                builder.addTextProp("href", "Href");
                builder.addTextProp("outlet", "Outlet");
                builder.addTextProp("showActive", "Url Active Match", { droptype: "generic", allowNonDrop: false, dropItems: ['never', 'partial', 'exact'] });
                builder.addTextProp("icon", "Icon");
            };
            return Li;
        })(Helpers.HelperBase);
        Helpers.Li = Li;
        Retool.Runtime.helpers.add("li", new Li());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var HeadingBase = (function (_super) {
            __extends(HeadingBase, _super);
            function HeadingBase(options) {
                _super.call(this);
                this.settings = { tagName: "h1", "container": true, "toolbox": true, label: "h1", dropKind: "block", glyph: "u", tourstop: true, expandOnCreate: false, category: "html" };
                this.allowableChildren = ['block', 'inline', 'table', 'buttonbar', 'input'];
                for (var key in options) {
                    this.settings[key] = options[key];
                }
            }
            HeadingBase.prototype.renderStartTag = function (writer) {
                writer.startTag(this.settings.tagName, this.computeStartTagClass(writer.component));
            };
            HeadingBase.prototype.renderContent = function (w) {
                var c = w.component;
                try {
                    c.renderTextContent(w);
                }
                catch (e) {
                }
                w.renderChildren();
            };
            HeadingBase.prototype.requiresRender = function (c) {
                return c.blockChanged();
            };
            HeadingBase.prototype.buildEditor = function (builder) {
                builder.addTextProp("text", "Text");
                Helpers.BlockBase.addStandardEditor(builder);
                builder.addKindProp("headingSize", "size", "Size");
                builder.addTextProp("icon", "Icon");
            };
            HeadingBase.addStandardEditor = function (builder) {
                builder.addTextProp("cssclass", "Css Class");
                builder.addTextProp("role", "Role", Helpers.RoleHandler.getHelperDrop());
            };
            HeadingBase.prototype.onclick = function (event) {
                var component = event.component;
                if (component.attr.name) {
                    component.raise({ methodName: "onclick", event: event });
                }
                event.preventDefault();
                event.stopPropagation();
            };
            return HeadingBase;
        })(Helpers.HelperBase);
        Helpers.HeadingBase = HeadingBase;
        Retool.Runtime.helpers.add("h1", new HeadingBase({ tagName: "h1", label: "h1", glyph: "u" }));
        Retool.Runtime.helpers.add("h2", new HeadingBase({ tagName: "h2", label: "h2", glyph: "u" }));
        Retool.Runtime.helpers.add("h3", new HeadingBase({ tagName: "h3", label: "h3", glyph: "u" }));
        Retool.Runtime.helpers.add("h4", new HeadingBase({ tagName: "h4", label: "h4", glyph: "u" }));
        Retool.Runtime.helpers.add("h5", new HeadingBase({ tagName: "h5", label: "h5", glyph: "u" }));
        Retool.Runtime.helpers.add("h6", new HeadingBase({ tagName: "h6", label: "h6", glyph: "u" }));
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Button = (function (_super) {
            __extends(Button, _super);
            function Button() {
                _super.apply(this, arguments);
                this.settings = { "toolbox": true, container: true, label: "button", glyph: "b", tourstop: true, dropKind: "inline", hasScriptEvents: true };
                this.allowableChildren = ['block', 'inline', 'table', 'buttonbar', 'input'];
            }
            Button.prototype.getInfo = function () {
                // return general info about the component
            };
            Button.prototype.allowDrop = function (source) {
                // return true if the source can be dropped as a child of this
            };
            Button.prototype.buildEditor = function (builder) {
                builder.addTextProp("text", "Text");
                Helpers.InlineBase.addStandardEditor(builder);
                builder.addTextProp("href", "Href");
                builder.addTextProp("outlet", "Outlet");
                builder.addCheckbox("defaultButton", "Is Default");
                builder.addTextProp("icon", "Icon");
            };
            Button.prototype.getModelContext = function () {
                // return the model context of children
            };
            Button.prototype.renderStartTag = function (w) {
                var attr = w.component.attr;
                var attribs = { href: attr.href };
                if (attr.tabindex) {
                    attribs.tabindex = attr.tabindex;
                }
                if (attr.defaultButton) {
                    attribs["data-default-btn"] = "true";
                }
                if (attr.toggle) {
                }
                w.startTag("button", this.computeStartTagClass(w.component), attribs);
            };
            Button.prototype.computeStartTagClass = function (component) {
                /*
                if (component.localData.active){
                    return component.computeClass("btn active");
                }
                */
                return component.computeClass(null);
            };
            Button.prototype.renderContent = function (w) {
                var c = w.component;
                if (c.attr.icon) {
                    w.writeIcon(c.attr.icon);
                }
                c.renderTextContent(w);
                w.renderChildren();
            };
            Button.prototype.requiresRender = function (component) {
                return component.blockChanged();
            };
            Button.prototype.afterRender = function (writer) {
                writer.write("\n");
            };
            Button.prototype.createFromToolbox = function (item) {
                item.text = "Button";
                item.cssclass = "btn";
            };
            Button.prototype.onclick = function (event) {
                return _super.prototype.onclick.call(this, event, { allowBindValue: true });
            };
            return Button;
        })(Helpers.HelperBase);
        Helpers.Button = Button;
        Retool.Runtime.helpers.add("button", new Button());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var ButtonGroup = (function (_super) {
            __extends(ButtonGroup, _super);
            function ButtonGroup() {
                _super.apply(this, arguments);
                this.settings = { "container": true, "toolbox": true, label: "button-group", glyph: "d", dropKind: "block", expandOnCreate: true };
                this.allowableChildren = ['inline', 'block'];
            }
            ButtonGroup.prototype.renderStartTag = function (writer) {
                writer.startTag("div", this.computeStartTagClass(writer.component));
            };
            ButtonGroup.prototype.computeStartTagClass = function (component) {
                return component.computeClass("btn-group clearfix");
            };
            ButtonGroup.prototype.renderContent = function (writer) {
                var c = writer.component;
                if (c.attr.value) {
                    var value = c.getFieldValue();
                    c.localData.renderedValue = value;
                    writer.renderChildren(function (child) {
                        child.localData.active = child.attr.data == value;
                        writer.render(child);
                    });
                }
                else {
                    writer.renderChildren();
                }
            };
            ButtonGroup.prototype.onclick = function (event) {
                var c = event.component;
                if (c.attr.value) {
                    if (event.target.attr.kind == "button") {
                        c.setFieldValue(event.target.attr.data);
                        event.valueChanged(c);
                        event.stopPropagation();
                    }
                }
                if (c.attr.name) {
                    c.raise({ methodName: "onclick", event: event });
                }
            };
            ButtonGroup.prototype.requiresRender = function (c) {
                if (c.attr.value) {
                    return (c.getFieldValue() != c.localData.renderedValue);
                }
                return false;
            };
            ButtonGroup.prototype.buildEditor = function (builder) {
                Helpers.InlineBase.addStandardEditor(builder);
                builder.addTextProp("value", "Value");
            };
            return ButtonGroup;
        })(Helpers.HelperBase);
        Helpers.ButtonGroup = ButtonGroup;
        Retool.Runtime.helpers.add("buttongroup", new ButtonGroup());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Dropdown = (function (_super) {
            __extends(Dropdown, _super);
            function Dropdown() {
                _super.apply(this, arguments);
                this.settings = { "container": true, "toolbox": true, label: "dropdown", dropKind: "block", glyph: "g", expandOnCreate: true, category: "html" };
                this.allowableChildren = ['block', 'inline', 'table', 'buttonbar', 'input'];
                this.attributes = { filter: { implicitExpression: true }, dropvalue: { expression: true } };
            }
            Dropdown.prototype.renderStartTag = function (writer) {
                return;
            };
            Dropdown.prototype.renderEndTag = function (w) {
                return;
            };
            Dropdown.prototype.buildEditor = function (builder) {
                builder.addTextProp("text", "Text");
                builder.addTextProp("dropvalue", "Value");
                builder.addTextProp("filter", "Filter");
                builder.addCheckbox("datafiltering", "Remote Filtering");
                builder.addTextProp("autoshownumchars", "Auto Show Num Chars");
            };
            Dropdown.prototype.createFromToolbox = function (item) {
                item.children = [];
                item.children.push({ kind: "option", value: "1", text: "Item 1" });
                var a = { kind: "a", text: "{{text}}" };
                item.children.push(a);
            };
            return Dropdown;
        })(Helpers.HelperBase);
        Helpers.Dropdown = Dropdown;
        Retool.Runtime.helpers.add("dropdown", new Dropdown());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var For = (function (_super) {
            __extends(For, _super);
            function For() {
                _super.apply(this, arguments);
                this.settings = { "container": true, "toolbox": true, label: "#for", dropKind: "helper", glyph: "]", tourstop: false, category: "helpers", morph: true, expandOnCreate: true, command: true, scopeContainer: true };
                this.allowableChildren = ['*'];
            }
            For.prototype.computeModel = function (c, context) {
                var attr = c.attr;
                if (attr._compiled && attr._compiled.obj) {
                    var rows = context.evaluateMethod(attr._compiled.obj);
                    if (rows && !rows.getLength) {
                        if (Array.isArray(rows)) {
                            rows = new Retool.ArrayModel(rows);
                        }
                        else if (isFinite(rows)) {
                            var series = [];
                            var n = parseInt(rows);
                            if (n) {
                                series[n - 1] = n - 1;
                            }
                            rows = new Retool.ArrayModel(series);
                        }
                    }
                    return rows;
                }
                else if (context.model) {
                    return context.model;
                }
                return null;
            };
            For.prototype.renderContent = function (w) {
                var c = w.component;
                var attr = c.attr;
                if (attr.children) {
                    var rows = c.context.model;
                    if (!rows) {
                        throw "Each expects an array value, current value is undefined";
                    }
                    var n = rows.getLength();
                    var blocks = this.getBlocks(c.attr.children); // could cache this in local data? or map, with else point?
                    if (n) {
                        var pageSize = 0;
                        try {
                            pageSize = parseInt(attr.pageSize, 10);
                        }
                        catch (e) {
                        }
                        rows.pageSize = pageSize;
                        var start;
                        if (pageSize) {
                            start = (rows.getPage() - 1) * pageSize;
                            var last = start + pageSize;
                            if (last > n) {
                                last = n;
                            }
                        }
                        else {
                            start = 0;
                            last = n;
                        }
                        for (var i = start; i < last; i++) {
                            var row = rows.getRow(i);
                            var context = new Retool.RenderingContext(attr.var, c.context.viewModel, row, c.context);
                            context.arrayIndex = i;
                            w.renderChildComponents(blocks.mainBlock, function (child) {
                                w.render(child);
                            }, { context: context });
                        }
                    }
                    else if (blocks.elseBlock) {
                        w.renderChildComponents(blocks.elseBlock, function (child) {
                            w.render(child);
                        });
                    }
                }
                c.localData.renderedStamp = c.context.getStamp();
            };
            For.prototype.requiresRender = function (c) {
                return c.context.getStamp() != c.localData.renderedStamp;
            };
            For.prototype.buildEditor = function (builder) {
                builder.addTextProp("var", "Variable");
                builder.addTextProp("obj", "Object", { droptype: "variables", allowNonDrop: true });
                builder.addTextProp("pageSize", "Page Size");
            };
            For.prototype.getScopeContainer = function (c) {
                if (c.attr.obj) {
                    return c;
                }
                return null;
            };
            For.prototype.getInspectorInfo = function (element) {
                var info = {};
                // info.field = element.obj;
                return info;
            };
            return For;
        })(Helpers.HelperBase);
        Helpers.For = For;
        Retool.Runtime.helpers.add("r-for", new For());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Else = (function (_super) {
            __extends(Else, _super);
            function Else() {
                _super.apply(this, arguments);
                this.settings = { "container": false, "toolbox": true, label: "#else", dropKind: "else", glyph: "]", tourstop: false, category: "helpers", command: true };
                this.allowableChildren = ['*'];
            }
            Else.prototype.renderStartTag = function (w) {
                return;
            };
            Else.prototype.renderEndTag = function (w) {
                return;
            };
            Else.prototype.renderContent = function (w) {
                w.renderChildren();
            };
            return Else;
        })(Helpers.HelperBase);
        Helpers.Else = Else;
        Retool.Runtime.helpers.add("r-else", new Else());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var If = (function (_super) {
            __extends(If, _super);
            function If() {
                _super.apply(this, arguments);
                this.settings = { "container": true, "toolbox": true, label: "#if", dropKind: "helper", glyph: "]", tourstop: false, category: "helpers", morph: true, expandOnCreate: true, command: true };
                this.allowableChildren = ['*'];
            }
            If.prototype.renderContent = function (w) {
                var c = w.component;
                var value = this.getValue(c);
                if (c.attr.children) {
                    var blocks = this.getBlocks(c.attr.children);
                    if (value) {
                        w.renderChildComponents(blocks.mainBlock);
                    }
                    else if (blocks.elseBlock) {
                        w.renderChildComponents(blocks.elseBlock);
                    }
                }
                c.localData.renderedValue = value;
            };
            If.prototype.requiresRender = function (c) {
                var value = this.getValue(c);
                return value != c.localData.renderedValue;
            };
            If.prototype.getValue = function (c) {
                var method;
                if (c.attr._compiled) {
                    method = c.attr._compiled["condition"];
                }
                if (method) {
                    var result = c.context.evaluateMethod(method);
                    if (result) {
                        return true;
                    }
                }
                return false;
            };
            If.prototype.buildEditor = function (builder) {
                builder.addTextProp("condition", "Condition");
            };
            If.prototype.getInspectorInfo = function (element) {
                var info = {};
                info.expression = element.condition;
                return info;
            };
            return If;
        })(Helpers.HelperBase);
        Helpers.If = If;
        Retool.Runtime.helpers.add("r-if", new If());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var With = (function (_super) {
            __extends(With, _super);
            function With() {
                _super.apply(this, arguments);
                this.settings = { "container": true, "toolbox": true, label: "#with", dropKind: "helper", glyph: "]", tourstop: false, category: "helpers", morph: true, expandOnCreate: true, command: true, scopeContainer: true };
                this.allowableChildren = ['*'];
            }
            With.prototype.computeModel = function (c, context) {
                var attr = c.attr;
                if (attr._compiled && attr._compiled.obj) {
                    var value = context.evaluateMethod(attr._compiled.obj);
                    return value;
                }
                return null;
            };
            With.prototype.renderContent = function (w) {
                var c = w.component;
                w.renderChildren();
                c.localData.renderedStamp = c.context.getStamp();
            };
            With.prototype.buildEditor = function (builder) {
                builder.addTextProp("obj", "Object", { droptype: "variables", allowNonDrop: true });
                builder.addTextProp("var", "Variable");
            };
            With.prototype.requiresRender = function (c) {
                return c.context.getStamp() != c.localData.renderedStamp;
            };
            With.prototype.getScopeContainer = function (c) {
                if (c.attr.obj) {
                    return c;
                }
                return null;
            };
            With.prototype.getInspectorInfo = function (element) {
                var info = {};
                info.field = element.obj;
                return info;
            };
            return With;
        })(Helpers.HelperBase);
        Helpers.With = With;
        Retool.Runtime.helpers.add("r-with", new With());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Yield = (function (_super) {
            __extends(Yield, _super);
            function Yield() {
                _super.apply(this, arguments);
                this.settings = { "container": false, "toolbox": true, label: "#yield", dropKind: "helper", glyph: "]", tourstop: false, category: "helpers", expandOnCreate: true, command: true };
            }
            Yield.prototype.renderStartTag = function (w) {
                return;
            };
            Yield.prototype.renderEndTag = function () {
                return;
            };
            Yield.prototype.renderContent = function (w) {
                var c = w.component;
                // render Context.container.children
            };
            return Yield;
        })(Helpers.HelperBase);
        Helpers.Yield = Yield;
        Retool.Runtime.helpers.add("r-yield", new Yield());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Property = (function (_super) {
            __extends(Property, _super);
            function Property() {
                _super.apply(this, arguments);
                this.settings = { "container": false, "toolbox": true, label: "#property", dropKind: "helper", glyph: "]", tourstop: false, category: "helpers", expandOnCreate: false, command: true };
            }
            Property.prototype.renderStartTag = function (w) {
                return;
            };
            Property.prototype.renderEndTag = function () {
                return;
            };
            Property.prototype.renderContent = function (w) {
            };
            Property.prototype.buildEditor = function (builder) {
                builder.addTextProp("text", "Text");
                builder.addTextProp("type", "Type", { droptype: "generic", allowNonDrop: false, dropItems: ["text", "checkbox"] });
            };
            return Property;
        })(Helpers.HelperBase);
        Helpers.Property = Property;
        Retool.Runtime.helpers.add("r-property", new Property());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var InlineBase = (function (_super) {
            __extends(InlineBase, _super);
            function InlineBase(options) {
                _super.call(this);
                this.settings = { tagName: "span", "container": true, "toolbox": true, dropKind: "inline", glyph: "_", tourstop: true, category: "html" };
                this.allowableChildren = ['inline'];
                for (var key in options) {
                    this.settings[key] = options[key];
                }
            }
            InlineBase.prototype.renderStartTag = function (w) {
                w.startTag(this.settings.tagName, this.computeStartTagClass(w.component));
            };
            InlineBase.prototype.renderContent = function (w) {
                var c = w.component;
                c.renderTextContent(w);
                w.renderChildren();
            };
            InlineBase.prototype.requiresRender = function (c) {
                return c.blockChanged();
            };
            InlineBase.prototype.buildEditor = function (builder) {
                builder.addTextProp("text", "Text");
                InlineBase.addStandardEditor(builder);
            };
            InlineBase.addStandardEditor = function (builder) {
                builder.addTextProp("cssclass", "Css Class");
                builder.addTextProp("role", "Role", Helpers.RoleHandler.getHelperDrop());
            };
            return InlineBase;
        })(Helpers.HelperBase);
        Helpers.InlineBase = InlineBase;
        Retool.Runtime.helpers.add("strong", new InlineBase({ tagName: "strong", label: "strong", glyph: "_" }));
        Retool.Runtime.helpers.add("b", new InlineBase({ tagName: "b", label: "b", glyph: "u" }));
        Retool.Runtime.helpers.add("i", new InlineBase({ tagName: "i", label: "i", glyph: "u" }));
        Retool.Runtime.helpers.add("u", new InlineBase({ tagName: "u", label: "u", glyph: "u" }));
        Retool.Runtime.helpers.add("small", new InlineBase({ tagName: "small", label: "small", glyph: "^" }));
        Retool.Runtime.helpers.add("abbr", new InlineBase({ tagName: "abbr", label: "abbr", glyph: "u" }));
        Retool.Runtime.helpers.add("cite", new InlineBase({ tagName: "cite", label: "cite", glyph: "u" }));
        Retool.Runtime.helpers.add("code", new InlineBase({ tagName: "code", label: "code", glyph: "u" }));
        Retool.Runtime.helpers.add("dfn", new InlineBase({ tagName: "dfn", label: "dfn", glyph: "u" }));
        Retool.Runtime.helpers.add("em", new InlineBase({ tagName: "em", label: "em", glyph: "u" }));
        Retool.Runtime.helpers.add("samp", new InlineBase({ tagName: "samp", label: "samp", glyph: "u" }));
        Retool.Runtime.helpers.add("var", new InlineBase({ tagName: "var", label: "var", glyph: "u" }));
        Retool.Runtime.helpers.add("q", new InlineBase({ tagName: "q", label: "q", glyph: "u" }));
        Retool.Runtime.helpers.add("span", new InlineBase({ tagName: "span", label: "span", glyph: "u" }));
        Retool.Runtime.helpers.add("sub", new InlineBase({ tagName: "sub", label: "sub", glyph: "u" }));
        Retool.Runtime.helpers.add("sup", new InlineBase({ tagName: "sup", label: "sup", glyph: "u" }));
        Retool.Runtime.helpers.add("mark", new InlineBase({ tagName: "mark", label: "mark", glyph: "u" }));
        Retool.Runtime.helpers.add("del", new InlineBase({ tagName: "del", label: "del", glyph: "u" }));
        Retool.Runtime.helpers.add("s", new InlineBase({ tagName: "s", label: "s", glyph: "u" }));
        Retool.Runtime.helpers.add("ins", new InlineBase({ tagName: "ins", label: "ins", glyph: "u" }));
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Anchor = (function (_super) {
            __extends(Anchor, _super);
            function Anchor() {
                _super.apply(this, arguments);
                this.settings = { "toolbox": true, container: true, label: "a", dropKind: 'inline', glyph: "q", tourstop: true, category: "html", hasScriptEvents: true };
                this.allowableChildren = ['block', 'inline', 'table', 'buttonbar', 'input'];
            }
            Anchor.prototype.getInfo = function () {
                // return general info about the component
            };
            Anchor.prototype.allowDrop = function (source) {
                // return true if the source can be dropped as a child of this
            };
            Anchor.prototype.buildEditor = function (builder) {
                builder.addTextProp("text", "Text");
                Helpers.InlineBase.addStandardEditor(builder);
                builder.addTextProp("href", "Href");
                builder.addTextProp("outlet", "Outlet");
                builder.addTextProp("icon", "Icon");
            };
            Anchor.prototype.getModelContext = function () {
                // return the model context of children
            };
            Anchor.prototype.renderStartTag = function (writer) {
                var attr = writer.component.attr;
                var attribs = { href: attr.href };
                if (attr.tabindex) {
                    attribs["tabindex"] = attr.tabindex;
                }
                writer.startTag("a", this.computeStartTagClass(writer.component), attribs);
            };
            Anchor.prototype.renderContent = function (w) {
                var c = w.component;
                var attr = c.attr;
                if (attr.icon) {
                    w.writeIcon(attr.icon);
                }
                c.renderTextContent(w);
                w.renderChildren();
            };
            Anchor.prototype.requiresRender = function (c) {
                return c.blockChanged();
            };
            Anchor.prototype.afterRender = function (writer) {
                // writer.write("\n");
            };
            Anchor.prototype.onclick = function (event) {
                return _super.prototype.onclick.call(this, event, { allowBindValue: true });
            };
            Anchor.prototype.createFromToolbox = function (item) {
                item.text = "Link";
            };
            return Anchor;
        })(Helpers.HelperBase);
        Helpers.Anchor = Anchor;
        Retool.Runtime.helpers.add("a", new Anchor());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Img = (function (_super) {
            __extends(Img, _super);
            function Img() {
                _super.apply(this, arguments);
                this.settings = { "container": false, "toolbox": true, label: "img", dropKind: "inline", glyph: "f", tourstop: true, category: "html" };
                this.allowableChildren = ['block', 'inline', 'table', 'buttonbar'];
            }
            Img.prototype.renderStartTag = function (writer) {
                var c = writer.component;
                var attr = c.attr;
                var src = attr.src;
                src = c.getAttr("src");
                var imgAttrib = { src: Retool.Url.createAssetPath(src) };
                if (attr.height || attr.width) {
                    imgAttrib["style"] = "width:" + attr.width + ";height:" + attr.height;
                }
                writer.startTag("img", this.computeStartTagClass(c), imgAttrib);
            };
            Img.prototype.renderContent = function (writer) {
            };
            Img.prototype.renderEndTag = function (writer) {
                // no end tag
            };
            Img.prototype.buildEditor = function (builder) {
                builder.addTextProp("src", "Src");
                builder.addTextProp("width", "Width");
                builder.addTextProp("height", "Height");
                Helpers.InlineBase.addStandardEditor(builder);
            };
            Img.prototype.getInspectorInfo = function (element) {
                var info = _super.prototype.getInspectorInfo.call(this, element);
                if (element.src) {
                    info.path = element.src;
                }
                return info;
            };
            return Img;
        })(Helpers.HelperBase);
        Helpers.Img = Img;
        Retool.Runtime.helpers.add("img", new Img());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Text = (function (_super) {
            __extends(Text, _super);
            function Text() {
                _super.apply(this, arguments);
                this.settings = { "container": false, "toolbox": true, label: "text", dropKind: "inline", glyph: "u", tourstop: true, category: "html", morph: true };
            }
            Text.prototype.renderStartTag = function (w) {
                var compiled = w.component.attr._compiled;
                if (compiled && compiled.text) {
                    _super.prototype.renderStartTag.call(this, w);
                }
                return;
            };
            Text.prototype.renderEndTag = function (w) {
                var compiled = w.component.attr._compiled;
                if (compiled && compiled.text) {
                    _super.prototype.renderEndTag.call(this, w);
                }
                return;
            };
            Text.prototype.renderContent = function (w) {
                var c = w.component;
                c.renderTextContent(w);
            };
            Text.prototype.requiresRender = function (component) {
                return component.blockChanged();
            };
            Text.prototype.buildEditor = function (builder) {
                builder.addNote("text", "Text");
            };
            return Text;
        })(Helpers.HelperBase);
        Helpers.Text = Text;
        Retool.Runtime.helpers.add("text", new Text());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var InputBase = (function (_super) {
            __extends(InputBase, _super);
            function InputBase() {
                _super.apply(this, arguments);
                this.settings = { "container": true, label: "input", tourstop: true, isInput: true, dropKind: "inline", glyph: "L", category: "", dropAsKind: "input" };
                this.allowableChildren = ['block', 'inline', 'table', 'buttonbar', 'fielddroplist'];
            }
            InputBase.prototype.init = function (c) {
                c.localData.formGroup = c.getFormGroup();
                _super.prototype.init.call(this, c);
            };
            InputBase.prototype.renderContent = function (writer) {
                var c = writer.component;
                var context = c.context;
                var fieldErrors = context.getFieldErrors(c.attr.value);
                var locked;
                if (this.isStatic()) {
                    locked = true;
                }
                else {
                    locked = c.attr.readonly || (c.fieldDefinition && (c.fieldDefinition.locked || (c.fieldDefinition.locked_edit)));
                    if (!locked && c.attr.value) {
                        locked = context.getFieldIsLocked(c.attr.value);
                    }
                }
                var value = c.getFieldValue();
                var renderer = c.localData.renderer;
                if (!renderer) {
                    var fieldSet = c.closest('fieldset');
                    if (fieldSet) {
                        renderer = fieldSet.localData.renderer;
                    }
                }
                if (renderer) {
                    renderer.render(writer, { fieldErrors: fieldErrors, locked: locked, value: value });
                }
                else {
                    if (!c.localData.noLabel) {
                        this.renderLabel(writer, c);
                    }
                    if (c.localData.inputWrapClass) {
                        writer.write('<div class="' + c.localData.inputWrapClass + '">');
                        this.renderInputElement(writer, value, locked, fieldErrors);
                        writer.write('</div>');
                    }
                    else {
                        this.renderInputElement(writer, value, locked, fieldErrors);
                    }
                    c.localData.renderedErrorVersion = c.context.getErrorVersion();
                }
                c.localData.renderedValue = value;
            };
            InputBase.prototype.renderLabel = function (w, component) {
                var label = this.getLabel(component);
                var css;
                var showEmpty;
                var formGroup = component.localData.formGroup;
                if (formGroup && formGroup.type == "horizontal") {
                    showEmpty = true;
                    css = "control-label col-sm-" + formGroup.labelColSize;
                }
                if (label || showEmpty) {
                    w.writeTag("label", css).text(label).write('</label>');
                }
            };
            InputBase.prototype.renderLocked = function (writer, value, fieldErrors) {
                var c = writer.component;
                writer.writeTag("p", "form-control-static");
                if (c.attr.isDrop) {
                    writer.writeTag("a", "related-rec-link", { href: "#" }).text(this.toDisplay(c, value)).write('</a>');
                }
                else {
                    var displayValue = this.toDisplay(c, value);
                    this.renderIcon(writer, value);
                    if (value) {
                        writer.text(displayValue);
                    }
                    else {
                        writer.write("&nbsp;");
                    }
                }
                writer.write("</p>");
            };
            InputBase.prototype.isStatic = function () {
                return false;
            };
            InputBase.prototype.renderIcon = function (writer, value) {
            };
            InputBase.prototype.getValue = function (component) {
                return component.getFieldValue();
            };
            InputBase.prototype.renderInputElement = function (writer, value, locked, fieldErrors) {
                // needs to be implemented on each class
            };
            InputBase.prototype.getInputElement = function (c) {
                var elem = c.getElement();
                if (elem.is(":input")) {
                    return elem;
                }
                return c.getElement(":input").first();
            };
            InputBase.prototype.toDisplay = function (c, value) {
                if (value) {
                    return value;
                }
                return "";
            };
            InputBase.prototype.renderFieldErrors = function (w, fieldErrors) {
                if (fieldErrors) {
                    w.write("<div").writeAttr("class", "retool-field-errors").write(">"); // no writer prefixing (always retool-field-errors)
                    this.renderFieldErrorsContent(w, fieldErrors);
                    w.write('</div>');
                }
                else {
                    w.component.localData.renderedErrorVersion = 0;
                }
            };
            InputBase.prototype.renderFieldErrorsContent = function (writer, fieldErrors) {
                var component = writer.component;
                if (fieldErrors) {
                    for (var i = 0; i < fieldErrors.length; i++) {
                        if (i > 0) {
                            writer.write('<br>');
                        }
                        writer.writeTag("small", null).text(fieldErrors[i]).write("</small>");
                    }
                }
                component.localData.renderedErrorVersion = component.context.getErrorVersion();
            };
            InputBase.prototype.renderChangesErrors = function (component, inputElem) {
                var fieldErrors = component.context.getFieldErrors(component.attr.value);
                // var wrapperElem = component.getElement('.retool-input-state');
                // var errorsElem = component.getElement('.retool-field-errors');
                var elem = component.getElement();
                if (fieldErrors) {
                    elem.addClass("has-error");
                }
                else {
                    elem.removeClass("has-error");
                }
                component.localData.renderedErrorVersion = component.context.getErrorVersion();
            };
            InputBase.prototype.fieldValuesAreEqual = function (a, b) {
                return a == b;
            };
            InputBase.prototype.requiresRender = function (c) {
                if (c.attr.value) {
                    var field = c.attr.value;
                    var value = c.getFieldValue();
                    if (!this.fieldValuesAreEqual(value, c.localData.renderedValue)) {
                        return true;
                    }
                    if (c.localData.renderedErrorVersion) {
                        // if was previously rendered with error and no longer has error, or error version is different then re-render
                        if (!c.context.hasErrors(field) || c.localData.renderedErrorVersion != c.context.getErrorVersion()) {
                            return true;
                        }
                    }
                    else {
                        if (c.context.hasErrors(field)) {
                            return true;
                        }
                    }
                }
                return false;
            };
            InputBase.prototype.onclick = function (event) {
                var target = $(event.domEvent.target);
                var relatedRecordLink = target.closest('.related-rec-link');
                if (relatedRecordLink.length) {
                    var c = event.component;
                    var relationship = Retool.App.getFieldRelationship(c.getModelDef(), c.attr.value);
                    if (relationship && c.attr.route) {
                        var relatedModelDef = Retool.App.models.getDefinition(relationship.model);
                        var relatedId = c.getFieldValue();
                        var url = Retool.Url.forRecordShow(c.attr.route, relatedId);
                        c.redirect(event, { url: url, stackHistory: true });
                    }
                    event.preventDefault();
                    return;
                }
                event.handled = false;
            };
            InputBase.prototype.map = function (element, compiler) {
                element.isDrop = false;
                if (element.droptype) {
                    element.isDrop = true;
                }
                else if (element.type == "date") {
                    element.isDrop = true;
                }
                else if (element.children && element.children.length) {
                    var firstChild = element.children[0];
                    if (firstChild.kind == "dropdown" || firstChild.kind == "partial") {
                        element.isDrop = true;
                    }
                }
                _super.prototype.map.call(this, element, compiler);
            };
            InputBase.prototype.buildEditor = function (builder) {
                builder.addTextProp("value", "Value", { droptype: "variables", allowNonDrop: true });
                builder.addCheckbox("readonly", "Readonly");
                builder.addTextProp("label", "Label");
                builder.addTextProp("placeholder", "Placeholder");
                Helpers.InlineBase.addStandardEditor(builder);
                builder.addTextProp("width", "Width");
                builder.addTextProp("type", "Type", { droptype: "generic", allowNonDrop: true, dropItems: ["text", "checkbox", "date", "datetime", "email", "integer", "money", "number", "objectid", "password", "tel", "textarea", "url"] });
                builder.addTextProp("format", "Format");
                builder.addTextProp("addonlefticon", "Addon Icon - Left", { droptype: "icons" });
                builder.addTextProp("addonlefttext", "Addon Text - Left");
                builder.addTextProp("addonrighticon", "Addon Icon - Right", { droptype: "icons" });
                builder.addTextProp("addonrighttext", "Addon Text - Right");
                builder.addTextProp("feedbackicon", "Feedback Icon", { droptype: "icons", allowNonDrop: true });
                builder.addCheckbox("navigationKeys", "Allow Navigation Keys");
                builder.addTextProp("helptext", "Help Text");
                builder.addTextProp("size", "Size", { droptype: "generic", allowNonDrop: true, dropItems: ['normal', 'large', 'small'] });
            };
            InputBase.prototype.getSupportedEvents = function (list) {
                _super.prototype.getSupportedEvents.call(this, list);
                list.push("onchange");
                list.push("onenterkey");
            };
            return InputBase;
        })(Helpers.HelperBase);
        Helpers.InputBase = InputBase;
        Retool.Runtime.helpers.add("input", new InputBase());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var InputTextBase = (function (_super) {
            __extends(InputTextBase, _super);
            function InputTextBase() {
                _super.apply(this, arguments);
            }
            InputTextBase.prototype.renderStartTag = function (writer) {
                var c = writer.component;
                var css = this.computeStartTagClass(c);
                var attr = c.attr;
                c.localData.needsInputGroup = (attr.addonlefticon || attr.isDrop || attr.addonlefttext || attr.addonrighttext || attr.addonrighticon || attr.feedbackicon);
                var formGroup = c.localData.formGroup;
                if (formGroup && formGroup.type) {
                    c.localData.endTag = true;
                    if (attr.feedbackicon) {
                        css += " has-feedback";
                    }
                    if (formGroup.type == "horizontal") {
                        if (attr.size == "large") {
                            css += " form-group-lg";
                        }
                        else if (attr.size == "small") {
                            css += " form-group-sm";
                        }
                    }
                    writer.startTag("div", css + " form-group");
                }
                else if (c.localData.needsInputGroup) {
                    ;
                    writer.startTag("div", "input-group " + (css || ""));
                    c.localData.endTag = true;
                    c.localData.rootIsInputGroup = true;
                }
                else {
                    return;
                }
                if (attr.isDrop) {
                    c.localData.dropRenderer = Retool.FieldDroplistInfo.createRenderer(c);
                }
            };
            InputTextBase.prototype.renderEndTag = function (w) {
                if (w.component.localData.endTag) {
                    w.write("</div>");
                }
            };
            InputTextBase.prototype.computeStartTagClass = function (c) {
                if (c.context.hasErrors(c.attr.value)) {
                    return c.computeClass("has-error");
                }
                return c.computeClass(null);
            };
            InputTextBase.prototype.getInputType = function (c) {
                return "text";
            };
            InputTextBase.prototype.renderInputElement = function (w, value, readonly, fieldErrors) {
                var c = w.component;
                var attr = c.attr;
                var formGroup = c.localData.formGroup;
                if (formGroup && formGroup.type == "horizontal") {
                    w.writeTag('div', "col-sm-" + formGroup.inputColSize);
                }
                if (c.localData.needsInputGroup) {
                    if (!c.localData.rootIsInputGroup) {
                        w.writeTag("div", "input-group");
                    }
                    if (attr.addonlefticon || attr.addonlefttext) {
                        w.writeTag("div", "input-group-addon");
                        if (attr.addonlefticon) {
                            w.writeIcon(attr.addonlefticon, null, { nospace: true });
                        }
                        if (attr.addonlefttext) {
                            if (attr.addonlefticon) {
                                w.write(" ");
                            }
                            w.text(attr.addonlefttext);
                        }
                        w.write("</div>");
                    }
                }
                var cssclass = "form-control";
                if (attr.cssclass) {
                    cssclass += " " + attr.cssclass;
                }
                if (attr.size == "large") {
                    cssclass += " input-lg";
                }
                else if (attr.size == "small") {
                    cssclass += " input-sm";
                }
                var attribs = { type: this.getInputType(c) };
                if (!c.localData.endTag) {
                    attribs.id = c.getElementId();
                }
                if (attr.placeholder) {
                    attribs.placeholder = attr.placeholder;
                }
                if (attr.tabindex) {
                    attribs.tabindex = attr.tabindex;
                }
                if (readonly) {
                    attribs.readonly = "readonly";
                }
                var displayValue = this.toDisplay(c, value);
                attribs.value = displayValue;
                w.writeTag("input", cssclass, attribs);
                if (attr.addonrighticon || attr.addonrighttext) {
                    w.writeTag("div", "input-group-addon");
                    if (attr.addonrighticon) {
                        w.writeIcon(attr.addonrighticon, null, { nospace: true });
                    }
                    if (attr.addonrighttext) {
                        if (attr.addonrighticon) {
                            w.write(" ");
                        }
                        w.text(attr.addonrighttext);
                    }
                    w.write("</div>");
                }
                if (attr.isDrop) {
                    w.writeTag("a", "input-group-addon retool-drop-btn", { href: "#", tabindex: "-1" }).writeIcon("chevron-down", null, { nospace: true }).write('</a>');
                }
                if (c.localData.needsInputGroup && !c.localData.rootIsInputGroup) {
                    w.write("</div>");
                }
                if (attr.feedbackicon) {
                    w.writeIcon(attr.feedbackicon, "form-control-feedback");
                }
                if (attr.helptext) {
                    w.writeTag("span", "help-block").text(attr.helptext).write('</span>');
                }
                if (formGroup && formGroup.type == "horizontal") {
                    w.write('</div>');
                }
                c.beforeEditValue = "!~undefined";
            };
            InputTextBase.prototype.toDisplay = function (c, value) {
                var attr = c.attr;
                if (attr.isDrop && value) {
                    if (c.localData.dropRenderer) {
                        return c.localData.dropRenderer.toDisplay(value);
                    }
                }
                return this.formatValue(c, value);
            };
            InputTextBase.prototype.renderChanges = function (component) {
                var value = component.getFieldValue();
                var inputElem = this.getInputElement(component);
                if (inputElem.length) {
                    inputElem.val(this.toDisplay(component, value));
                    this.renderChangesErrors(component, inputElem);
                }
                else {
                    var w = new Retool.Writer();
                    w.component = component;
                    this.renderLocked(w, value, null);
                    w.replaceElement(component.getElement("p"));
                }
                component.localData.renderedValue = value;
                return false;
            };
            InputTextBase.prototype.onblur = function (event) {
                var c = event.component;
                this.formatLostFocus(c);
                var inputElem = this.getInputElement(c);
                if (c.beforeEditValue == "!~undefined")
                    return;
                // var inputElem = target.is("input") ? target : target.find("input").first();
                var attr = c.attr;
                if (attr.isDrop && c.localData.dropRenderer && !c.localData.dropRenderer.allowAnyValue()) {
                    if (inputElem.val()) {
                        inputElem.val(c.localData.dropDisplayValue);
                    }
                    else {
                        c.setFieldValue("");
                        c.localData.dropDisplayValue = "";
                        c.setRelatedData(attr.value, {});
                    }
                }
                else {
                    var value = inputElem.val();
                    if (value != c.beforeEditValue) {
                        var dataValue = c.setFieldValue(value);
                        if (attr.onchange) {
                            attr.onchange.apply(c);
                        }
                        c.localData.renderedValue = dataValue;
                        // inputElem.val(this.toDisplay(c,dataValue));
                        c.beforeEditValue = value;
                        event.valueChanged(c);
                        if (attr.name) {
                            c.raise({ methodName: "onchange", event: event });
                        }
                    }
                }
            };
            InputTextBase.prototype.onkeypress = function (event) {
                var c = event.component;
                var attr = c.attr;
                if (attr.isDrop) {
                    var autoComplete = Retool.getAutoComplete(c.getElement());
                    autoComplete.sendKey(c, event.domEvent);
                    return;
                }
            };
            InputTextBase.prototype.onkeydown = function (event) {
                var c = event.component;
                if (c.attr.isDrop) {
                    var autoComplete = Retool.getAutoComplete(c.getElement());
                    autoComplete.sendKey(c, event.domEvent);
                }
                if (c.attr.navigationKeys) {
                    this.navigationKeyDown(event);
                }
            };
            InputTextBase.prototype.navigationKeyDown = function (event) {
                var code = event.domEvent.keyCode;
                var rowInc = 0;
                var colInc = 0;
                switch (code) {
                    case 38:
                        rowInc = -1;
                        break;
                    case 40:
                        rowInc = 1;
                        break;
                    case 37:
                        colInc = -1;
                        break;
                    case 39:
                        colInc = 1;
                        break;
                    default: return;
                }
                if (rowInc || colInc) {
                    this.setTableCellFocus(event, colInc, rowInc);
                }
            };
            InputTextBase.prototype.setTableCellFocus = function (event, colInc, rowInc) {
                var c = event.component;
                var cell = c.getElement().closest('td');
                if (!cell.length)
                    return;
                var row = cell.closest('tr').get(0);
                if (!row)
                    return;
                var table = cell.closest('table').get(0);
                if (!table)
                    return;
                cell = cell.get(0);
                var cellIndex = cell.cellIndex;
                var rowIndex = row.rowIndex;
                cellIndex += colInc;
                rowIndex += rowInc;
                if (cellIndex < 0) {
                    cellIndex = 0;
                }
                else if (cellIndex >= row.cells.length) {
                    cellIndex = row.cells.length - 1;
                }
                if (rowIndex < 0) {
                    rowIndex = 0;
                }
                else if (rowIndex >= table.rows.length) {
                    rowIndex = table.rows.length - 1;
                }
                var focusCell = table.rows[rowIndex].cells[cellIndex];
                if (focusCell) {
                    $(focusCell).find('input').focus().select();
                }
                event.preventDefault();
            };
            InputTextBase.prototype.setValueFromDrop = function (c, data) {
                var inputElem = this.getInputElement(c);
                inputElem.val(data.text);
                c.localData.dropDisplayValue = data.text;
                c.setRelatedData(c.attr.value, data.data);
                c.setFieldValue(data.value);
                if (c.attr.onchange) {
                    c.attr.onchange.apply(c);
                }
                c.localData.renderedValue = data.value;
                c.beforeEditValue = data.text;
                var event = new Retool.ComponentEvent(c, null);
                event.callComponentMethod("onchange");
                inputElem.focus();
            };
            InputTextBase.prototype.onfocus = function (event) {
                var target = $(event.domEvent.target);
                var c = event.component;
                event.keepDropOpen();
                var inputElem = this.getInputElement(c);
                if (inputElem.length) {
                    var value = inputElem.val();
                    c.beforeEditValue = value;
                    if (c.attr.isDrop) {
                        c.localData.dropDisplayValue = value;
                    }
                }
            };
            InputTextBase.prototype.formatValue = function (c, value) {
                return value;
            };
            InputTextBase.prototype.formatLostFocus = function (c) {
                var inputElem = this.getInputElement(c);
                var value = inputElem.val();
                var displayValue = this.formatValue(c, value);
                if (displayValue != value) {
                    inputElem.val(displayValue);
                }
            };
            InputTextBase.prototype.onkeyup = function (event) {
                var c = event.component;
                var attr = event.component.attr;
                if (attr.isDrop) {
                    var inputElem = this.getInputElement(c);
                    var value = inputElem.val();
                    var autoComplete = Retool.getAutoComplete(inputElem);
                    autoComplete.sendKeyUp(c, event.domEvent, value);
                }
                else if (attr.onkeyup) {
                    var inputElem = this.getInputElement(c);
                    var value = inputElem.val();
                    attr.onkeyup.apply(value, [event]);
                }
                else {
                    var de = event.domEvent;
                    if (de.which == 13) {
                        var c = event.component;
                        if (c.attr.name && c.context.viewModel.hasMethod(attr.name + "_onenterkey")) {
                            de.preventDefault();
                            de.stopPropagation();
                            if (event) {
                                event.stopPropagation();
                                this.onblur(event);
                            }
                            c.raise({ methodName: "onenterkey", event: event });
                            return;
                        }
                        if (c.attr.navigationKeys) {
                            de.preventDefault();
                            de.stopPropagation();
                            this.setTableCellFocus(event, 0, 1);
                        }
                    }
                }
            };
            InputTextBase.prototype.onclick = function (event) {
                var c = event.component;
                if (c.attr.isDrop) {
                    event.keepDropOpen();
                    var target = $(event.domEvent.target);
                    event.preventDefault();
                    event.stopPropagation();
                    var drpbtn = target.closest('.retool-drop-btn');
                    if (drpbtn.length) {
                        var autoComplete = Retool.getAutoComplete(target);
                        autoComplete.setFilter("");
                        autoComplete.show(c);
                        var inputElem = this.getInputElement(c);
                        inputElem.focus();
                        return;
                    }
                }
                _super.prototype.onclick.call(this, event);
            };
            return InputTextBase;
        })(Helpers.InputBase);
        Helpers.InputTextBase = InputTextBase;
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var InputDate = (function (_super) {
            __extends(InputDate, _super);
            function InputDate() {
                _super.apply(this, arguments);
            }
            InputDate.prototype.onclick = function (event) {
                event.keepDropOpen();
                var target = $(event.domEvent.target);
                var drpbtn = target.closest('.input-drpbtn');
                if (drpbtn.length) {
                    var drop = $('#retool-calendar-drop');
                    if (!drop.length) {
                        InputDate.createDrop();
                    }
                    InputDate.showDrop(event.component, null);
                    event.preventDefault();
                    return;
                }
                _super.prototype.onclick.call(this, event);
            };
            InputDate.prototype.formatValue = function (c, value) {
                if (!value)
                    return "";
                return Retool.DateFormatter.format(value);
            };
            InputDate.prototype.fieldValuesAreEqual = function (a, b) {
                var date1 = Retool.DateFormatter.parseISODate(a);
                var date2 = Retool.DateFormatter.parseISODate(b);
                if (!date1 && !date2) {
                    return true;
                }
                if (!date1 || !date2) {
                    return false;
                }
                return (date1.getTime() == date2.getTime());
            };
            InputDate.prototype.formatLostFocus = function (c) {
                var inputElem = c.getElement("input");
                var value = inputElem.val();
                var dateValue = Retool.DateFormatter.parseDateFromInput(value);
                inputElem.val(Retool.DateFormatter.format(dateValue));
            };
            InputDate.createDrop = function () {
                var w = new Retool.Writer();
                w.write('<div id="retool-calendar-drop" class="retool-calendar-drop" style="left:100px;top:100px">');
                w.write('</div>');
                w.appendToElement('body');
                var self = InputDate;
                $('#retool-calendar-drop').on('click', 'td a', function (event) {
                    event.preventDefault();
                    var $cell = $(event.target).closest('TD');
                    if ($cell.length == 0)
                        return;
                    var cell = $cell[0];
                    var row = $cell.closest('TR')[0];
                    var colIndex = cell.cellIndex;
                    var rowIndex = row.rowIndex;
                    if (rowIndex >= 1) {
                        var d = (rowIndex - 1) * 7 + colIndex;
                        var selectedDate = self.dateAddDays(self.baseYear, self.baseMonth, self.baseDay, d);
                        self.activeComponent.helper.setValueFromDrop(self.activeComponent, { value: self.utcDateToString(selectedDate), text: self.utcDateToString(selectedDate) });
                        self.hideDrop();
                    }
                    event.stopPropagation();
                }).on('click', '.retool-ltarrow', function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    if (self.month == 0) {
                        self.month = 11;
                        self.year--;
                    }
                    else {
                        self.month--;
                    }
                    InputDate.renderDropContent();
                }).on('click', '.retool-rtarrow', function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    if (self.month == 11) {
                        self.month = 0;
                        self.year++;
                    }
                    else {
                        self.month++;
                    }
                    InputDate.renderDropContent();
                }).on('click', function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                });
            };
            InputDate.showDrop = function (component, baseDate) {
                if (baseDate == null) {
                    baseDate = new Date();
                }
                var self = InputDate;
                self.year = baseDate.getFullYear();
                self.month = baseDate.getMonth();
                self.renderDropContent();
                $('#retool-calendar-drop').show();
                var pos = self.getDropListPosition(component.getElement("input")[0], $('#retool-calendar-drop')[0]);
                $('#retool-calendar-drop').css('left', pos.left + "px").css('top', (pos.top - 1) + "px");
                self.activeComponent = component;
            };
            InputDate.hideDrop = function () {
                $('#retool-calendar-drop').hide();
                InputDate.activeComponent = null;
            };
            InputDate.renderDropContent = function () {
                var w = new Retool.Writer();
                InputDate.renderDropHeader(w);
                InputDate.getCalendar(w);
                w.writeToElement('#retool-calendar-drop');
            };
            InputDate.renderDropHeader = function (w) {
                var self = InputDate;
                w.write('<div class="retool-header">');
                w.write('<div class="retool-month">');
                w.text(Retool.DateFormatter.getMonthName(self.month) + " " + self.year);
                w.write('</div>');
                w.write('<div class="retool-ltarrow"><span class="glyphicon glyphicon-circle-arrow-left"></span></div>');
                w.write('<div class="retool-rtarrow"><span class="glyphicon glyphicon-circle-arrow-right"></span></div>');
                w.write('</div>');
            };
            InputDate.getCalendar = function (w) {
                var dayName = new Array('Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat');
                var self = InputDate;
                var month = self.month;
                var year = self.year;
                if (month == 0) {
                    self.baseYear = year - 1;
                    self.baseMonth = 11;
                }
                else {
                    self.baseYear = year;
                    self.baseMonth = month - 1;
                }
                var prevMonthDays = self.daysInMonth(self.baseYear, self.baseMonth);
                var curMonthDays = self.daysInMonth(year, month);
                var firstDayOfMonth = new Date(year, month, 1).getDay();
                var startDay = (firstDayOfMonth == 0) ? prevMonthDays - 6 : prevMonthDays - firstDayOfMonth + 1;
                var col = 0;
                var row = 0;
                var d = startDay;
                var v = "";
                var inPrevMonth = true;
                var inCurMonth = false;
                var today = new Date();
                self.baseDay = startDay;
                var todayIndex = self.dateDiffDays(self.baseYear, self.baseMonth, self.baseDay, today.getFullYear(), today.getMonth(), today.getDate());
                w.write("<table>");
                w.write("<thead><tr>");
                for (col = 0; col <= 6; col++) {
                    w.write("<th>" + dayName[col] + "</th>");
                }
                w.write("</tr></thead>");
                var dayIndex = 0;
                w.write("<tbody>");
                for (row = 0; row <= 5; row++) {
                    w.write("<tr>");
                    for (col = 0; col <= 6; col++) {
                        if (inCurMonth) {
                            if (dayIndex == todayIndex) {
                                w.write("<td class='retool-today'");
                            }
                            else {
                                w.write("<td");
                            }
                        }
                        else {
                            w.write("<td class='retool-inactive'");
                        }
                        w.write("><a href='#'>" + d.toString() + "</a></td>");
                        d++;
                        dayIndex++;
                        if (inPrevMonth) {
                            if (d > prevMonthDays) {
                                d = 1;
                                inPrevMonth = false;
                                inCurMonth = true;
                            }
                        }
                        else if (inCurMonth) {
                            if (d > curMonthDays) {
                                d = 1;
                                inCurMonth = false;
                            }
                        }
                    }
                    w.write("</tr>");
                }
                w.write("</tbody></table>");
                return v;
            };
            InputDate.dateDiffDays = function (year, month, day, year2, month2, day2) {
                var ms = Date.UTC(year2, month2, day2) - Date.UTC(year, month, day);
                return ms / 1000 / 60 / 60 / 24;
            };
            InputDate.dateAddDays = function (year, month, day, numDays) {
                var dt = Date.UTC(year, month, day) + numDays * 1000 * 60 * 60 * 24;
                return new Date(dt);
            };
            InputDate.utcDateToString = function (dt) {
                var year = dt.getUTCFullYear().toString();
                var month = (dt.getUTCMonth() + 1).toString();
                var day = dt.getUTCDate().toString();
                return Retool.StringHelper.padZero(month, 2) + "-" + Retool.StringHelper.padZero(day, 2) + "-" + year;
            };
            InputDate.daysInMonth = function (year, month) {
                var d = Date.UTC(year, month + 1, 1) - Date.UTC(year, month, 1);
                d = d / 1000 / 60 / 60 / 24;
                return d;
            };
            InputDate.getDropListPosition = function (inputElem, dropListElem) {
                var inDesigner = $(inputElem).closest('#rto-ds').length > 0;
                var scrollTop = (inDesigner) ? 0 : Retool.Page.scrollTop();
                var sp = Retool.Page.getElementScreenPosition(inputElem);
                var y = sp.y + inputElem.offsetHeight;
                var winSize = Retool.Page.getWindowSize();
                if ((y - scrollTop + dropListElem.offsetHeight) > (winSize.height - 35)) {
                    y = sp.y - dropListElem.offsetHeight + 2;
                }
                var x = sp.x;
                return { "top": y, "left": x };
            };
            return InputDate;
        })(Helpers.InputTextBase);
        Helpers.InputDate = InputDate;
        Retool.Runtime.helpers.add("input_date", new InputDate());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var InputDateTime = (function (_super) {
            __extends(InputDateTime, _super);
            function InputDateTime() {
                _super.apply(this, arguments);
            }
            InputDateTime.prototype.computeStartTagClass = function (c) {
                return c.computeClass("form-group retool-datetime-box");
            };
            InputDateTime.prototype.formatValue = function (c, value) {
                if (!value)
                    return "";
                return Retool.DateFormatter.formatDateTime(value);
            };
            InputDateTime.prototype.formatLostFocus = function (c) {
                var inputElem = c.getElement("input");
                var value = inputElem.val();
                var dateValue = Retool.DateFormatter.parseDateTimeFromInput(value);
                inputElem.val(Retool.DateFormatter.formatDateTime(dateValue));
            };
            return InputDateTime;
        })(Helpers.InputDate);
        Helpers.InputDateTime = InputDateTime;
        Retool.Runtime.helpers.add("input_datetime", new InputDateTime());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var InputCheckbox = (function (_super) {
            __extends(InputCheckbox, _super);
            function InputCheckbox() {
                _super.apply(this, arguments);
                this.suppressLabel = true;
            }
            InputCheckbox.prototype.renderStartTag = function (writer) {
                var c = writer.component;
                var css;
                var formGroup = c.localData.formGroup;
                if (formGroup && formGroup.type == "horizontal") {
                    css = c.computeClass("form-group");
                }
                else {
                    css = c.computeClass("checkbox");
                }
                writer.startTag("div", css);
            };
            InputCheckbox.prototype.renderInputElement = function (writer, value, readonly, fieldErrors) {
                var c = writer.component;
                var formGroup = c.localData.formGroup;
                if (formGroup && formGroup.type == "horizontal") {
                    writer.writeTag("div", "col-sm-offset-" + formGroup.labelColSize + " col-sm-" + formGroup.inputColSize).writeTag("div", "checkbox");
                }
                writer.writeTag("label", null);
                var attrib = { type: "checkbox" };
                if (value && value != "0") {
                    attrib.checked = "checked";
                }
                if (readonly) {
                    attrib.disabled = "disabled";
                }
                if (c.attr.tabindex) {
                    attrib.tabindex = c.attr.tabindex;
                }
                c.localData.readonly = readonly;
                writer.writeTag("input", null, attrib).write(" ");
                writer.text(c.getFieldLabel());
                writer.write('</label>');
                if (formGroup && formGroup.type == "horizontal") {
                    writer.write('</div></div>');
                }
            };
            InputCheckbox.prototype.renderLabel = function (writer, component) {
                return; // no label
            };
            InputCheckbox.prototype.renderLocked = function (writer, value, fieldErrors) {
                writer.writeTag("p", "form-control-static");
                if (value && value != "0") {
                    writer.write("Yes");
                }
                else {
                    writer.write("No");
                }
                writer.write("</p>");
            };
            InputCheckbox.prototype.renderChanges = function (component) {
                var value = component.getFieldValue();
                var inputElem = component.getElement("input").get(0);
                if (inputElem) {
                    if (value && value != "0") {
                        inputElem.checked = true;
                    }
                    else {
                        inputElem.checked = false;
                    }
                }
                else {
                    var w = new Retool.Writer();
                    w.component = component;
                    this.renderLocked(w, value, null);
                    w.replaceElement(component.getElement("p"));
                }
                component.localData.renderedValue = value;
                return false;
            };
            InputCheckbox.prototype.onclick = function (event) {
                var component = event.component;
                if (component.localData.readonly) {
                    return;
                }
                var input = $('#' + component.getElementId() + " input").get(0);
                if (!input) {
                    return;
                }
                var value = input.checked;
                if (event.domEvent.target.tagName != "INPUT") {
                    if (event.domEvent.target.tagName != "SPAN")
                        return;
                    value = !value;
                    if (value) {
                        input.checked = true;
                    }
                    else {
                        input.checked = false;
                    }
                }
                if (value) {
                    component.setFieldValue(1);
                }
                else {
                    component.setFieldValue(0);
                }
                event.valueChanged(component);
                if (component.attr.onchange) {
                    component.attr.onchange.apply(component);
                }
                if (component.attr.name) {
                    component.raise({ methodName: "onchange", event: event });
                }
                component.localData.renderedValue = value;
            };
            return InputCheckbox;
        })(Helpers.InputBase);
        Helpers.InputCheckbox = InputCheckbox;
        Retool.Runtime.helpers.add("input_checkbox", new InputCheckbox());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var InputText = (function (_super) {
            __extends(InputText, _super);
            function InputText() {
                _super.apply(this, arguments);
                this.settings = { toolbox: "true", "container": true, label: "input", tourstop: true, isInput: true, dropKind: "inline", glyph: "L", category: "", dropAsKind: "input" };
            }
            return InputText;
        })(Helpers.InputTextBase);
        Helpers.InputText = InputText;
        Retool.Runtime.helpers.add("input_text", new InputText());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var InputPassword = (function (_super) {
            __extends(InputPassword, _super);
            function InputPassword() {
                _super.apply(this, arguments);
            }
            InputPassword.prototype.getInputType = function (c) {
                return "password";
            };
            return InputPassword;
        })(Helpers.InputTextBase);
        Helpers.InputPassword = InputPassword;
        Retool.Runtime.helpers.add("input_password", new InputPassword());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var InputEmail = (function (_super) {
            __extends(InputEmail, _super);
            function InputEmail() {
                _super.apply(this, arguments);
            }
            InputEmail.prototype.renderIcon = function (w, value) {
                if (value) {
                    w.writeIcon("envelope");
                }
            };
            InputEmail.prototype.renderLocked = function (writer, value, fieldErrors) {
                var c = writer.component;
                writer.writeTag("p", "form-control-static");
                writer.write('<a class="email-link"').writeAttr("href", "mailto:" + value).write('>');
                var displayValue = this.toDisplay(c, value);
                this.renderIcon(writer, value);
                if (value) {
                    writer.text(displayValue);
                }
                else {
                    writer.write("&nbsp;");
                }
                writer.write("</a></p>");
            };
            return InputEmail;
        })(Helpers.InputTextBase);
        Helpers.InputEmail = InputEmail;
        Retool.Runtime.helpers.add("input_email", new InputEmail());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var InputMoney = (function (_super) {
            __extends(InputMoney, _super);
            function InputMoney() {
                _super.apply(this, arguments);
            }
            InputMoney.prototype.formatValue = function (c, value) {
                return Retool.NumberFormatter.formatMoney(value, c.attr.format);
            };
            return InputMoney;
        })(Helpers.InputTextBase);
        Helpers.InputMoney = InputMoney;
        Retool.Runtime.helpers.add("input_money", new InputMoney());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var InputInteger = (function (_super) {
            __extends(InputInteger, _super);
            function InputInteger() {
                _super.apply(this, arguments);
            }
            InputInteger.prototype.formatValue = function (c, value) {
                return Retool.NumberFormatter.formatInt(value, c.attr.format);
            };
            return InputInteger;
        })(Helpers.InputTextBase);
        Helpers.InputInteger = InputInteger;
        Retool.Runtime.helpers.add("input_integer", new InputInteger());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var InputTextArea = (function (_super) {
            __extends(InputTextArea, _super);
            function InputTextArea() {
                _super.apply(this, arguments);
            }
            InputTextArea.prototype.renderStartTag = function (writer) {
                writer.startTag("div", this.computeStartTagClass(writer.component));
            };
            InputTextArea.prototype.computeStartTagClass = function (c) {
                return c.computeClass("form-group txtarea");
            };
            InputTextArea.prototype.renderInputElement = function (writer, value, locked, fieldErrors) {
                var css = "form-control";
                if (fieldErrors) {
                    css += " error";
                }
                var attr = writer.component.attr;
                var attribs = {};
                if (attr.placeholder) {
                    attribs.placeholder = attr.placeholder;
                }
                if (attr.tabindex) {
                    attribs.tabindex = attr.tabindex;
                }
                writer.writeTag("textarea", css, attribs);
                if (value) {
                    writer.text(value);
                }
                writer.write("</textarea>");
            };
            InputTextArea.prototype.renderChanges = function (component) {
                var value = component.getFieldValue();
                var inputElem = component.getElement("textarea");
                if (inputElem.length) {
                    inputElem.val(value);
                    component.localData.renderedValue = value;
                }
                else {
                    var w = new Retool.Writer();
                    w.component = component;
                    this.renderLocked(w, value, null);
                    w.replaceElement(component.getElement("p"));
                }
                return false;
            };
            InputTextArea.prototype.onblur = function (event) {
                var target = $(event.domEvent.target);
                var inputElem = target.is("textarea") ? target : target.find("textarea").first;
                var value = inputElem.val();
                var c = event.component;
                if (value != c.beforeEditValue) {
                    c.setFieldValue(value);
                    if (c.attr.onchange) {
                        c.attr.onchange.apply(c);
                    }
                    c.localData.renderedValue = value;
                    c.beforeEditValue = value;
                    event.valueChanged(c);
                    if (c.attr.name) {
                        c.raise({ methodName: "onchange", event: event });
                    }
                }
            };
            InputTextArea.prototype.onfocus = function (event) {
                var target = $(event.domEvent.target);
                var inputElem = target.is("textarea") ? target : target.find("textarea").first;
                var value = inputElem.val();
                event.component.beforeEditValue = value;
            };
            InputTextArea.prototype.onkeypress = function (event) {
                var de = event.domEvent;
                if (de.which == 13) {
                    de.stopPropagation();
                }
            };
            return InputTextArea;
        })(Helpers.InputBase);
        Helpers.InputTextArea = InputTextArea;
        Retool.Runtime.helpers.add("input_textarea", new InputTextArea());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var InputNumber = (function (_super) {
            __extends(InputNumber, _super);
            function InputNumber() {
                _super.apply(this, arguments);
            }
            InputNumber.prototype.formatValue = function (c, value) {
                return Retool.NumberFormatter.formatNumber(value, c.attr.format);
            };
            return InputNumber;
        })(Helpers.InputTextBase);
        Helpers.InputNumber = InputNumber;
        Retool.Runtime.helpers.add("input_number", new InputNumber());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var InputObjectID = (function (_super) {
            __extends(InputObjectID, _super);
            function InputObjectID() {
                _super.apply(this, arguments);
            }
            return InputObjectID;
        })(Helpers.InputTextBase);
        Helpers.InputObjectID = InputObjectID;
        Retool.Runtime.helpers.add("input_objectid", new InputObjectID());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var InputTel = (function (_super) {
            __extends(InputTel, _super);
            function InputTel() {
                _super.apply(this, arguments);
            }
            InputTel.prototype.renderIcon = function (w, value) {
                if (value) {
                    w.writeIcon("earphone");
                }
            };
            return InputTel;
        })(Helpers.InputTextBase);
        Helpers.InputTel = InputTel;
        Retool.Runtime.helpers.add("input_tel", new InputTel());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var InputPicklist = (function (_super) {
            __extends(InputPicklist, _super);
            function InputPicklist() {
                _super.apply(this, arguments);
            }
            InputPicklist.prototype.renderStartTag = function (writer) {
                writer.startTag("div", this.computeStartTagClass(writer.component));
            };
            InputPicklist.prototype.computeStartTagClass = function (c) {
                return c.computeClass("form-group");
            };
            InputPicklist.prototype.renderInputElement = function (w, value, locked, fieldErrors) {
                w.write('<select');
                var css = "form-control";
                if (fieldErrors) {
                    css + " error";
                }
                w.writeAttr("class", css);
                w.write('>');
                var valueList = w.component.attr.listvalues || w.component.fieldDefinition.listvalues;
                var items = (valueList) ? valueList.split(',') : [];
                var found = false;
                value = value || ""; // convert undefined or null to string
                for (var i = 0; i < items.length; i++) {
                    var item = items[i].split('=');
                    w.write('<option').writeAttr("value", item[0]);
                    if (item[0] == value) {
                        w.writeAttr("selected", "selected");
                        found = true;
                    }
                    w.write('>').text(item[1]).write('</option>');
                }
                if (!found) {
                    w.write('<option').writeAttr("value", "!!!").write('>Unknown value</option>');
                }
                w.write('</select>');
            };
            InputPicklist.prototype.renderLocked = function (writer, value, fieldErrors) {
                if (value) {
                    value = value;
                }
                var displayValue = Retool.FieldHelper.format(writer.component.fieldDefinition, value);
                writer.writeTag("p", "form-control-static");
                writer.text(displayValue);
                writer.write("</p>");
            };
            InputPicklist.prototype.onchange = function (event) {
                var c = event.component;
                var inputElem = c.getElement("select");
                var value = inputElem.val();
                if (value == "!!!") {
                    // unknown value
                    return;
                }
                c.setFieldValue(value);
                if (c.attr.onchange) {
                    c.attr.onchange.apply(c);
                }
                c.localData.renderedValue = value;
                event.valueChanged(c);
                if (c.attr.name) {
                    c.raise({ methodName: "onchange", event: event });
                }
            };
            return InputPicklist;
        })(Helpers.InputBase);
        Helpers.InputPicklist = InputPicklist;
        Retool.Runtime.helpers.add("input_picklist", new InputPicklist());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var InputUrl = (function (_super) {
            __extends(InputUrl, _super);
            function InputUrl() {
                _super.apply(this, arguments);
            }
            return InputUrl;
        })(Helpers.InputTextBase);
        Helpers.InputUrl = InputUrl;
        Retool.Runtime.helpers.add("input_url", new InputUrl());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var FileInput = (function (_super) {
            __extends(FileInput, _super);
            function FileInput() {
                _super.apply(this, arguments);
                this.settings = { "container": false, "toolbox": true, label: "file-input", dropKind: "inline", glyph: "u", tourstop: true, expandOnCreate: true };
                this.allowableChildren = ['block', 'inline', 'table', 'buttonbar'];
            }
            FileInput.prototype.renderStartTag = function (w) {
                w.startTag("button", this.computeStartTagClass(w.component));
            };
            FileInput.prototype.computeStartTagClass = function (component) {
                return component.computeClass("btn");
            };
            FileInput.prototype.renderContent = function (w) {
                var c = w.component;
                c.renderTextContent(w);
                w.write('<input type="file" style="display:none" size="10">');
            };
            FileInput.prototype.requiresRender = function (component) {
                return component.blockChanged();
            };
            FileInput.prototype.buildEditor = function (builder) {
                builder.addTextProp("text", "Text");
                Helpers.InlineBase.addStandardEditor(builder);
                builder.addTextProp("icon", "Icon");
            };
            FileInput.prototype.onclick = function (event) {
                var component = event.component;
                var target = $(event.domEvent.target).get(0);
                if (target.tagName == "INPUT") {
                    return;
                }
                else {
                    var input = component.getElement("input").get(0);
                    input.click();
                }
                event.preventDefault();
            };
            FileInput.prototype.onchange = function (event) {
                var c = event.component;
                var fileElem = c.getElement("input").get(0);
                var files = fileElem.files;
                if (files.length) {
                    if (c.attr.name) {
                        var args = { files: files };
                        c.raise({ methodName: "onclick", event: event, args: args });
                    }
                }
            };
            return FileInput;
        })(Helpers.HelperBase);
        Helpers.FileInput = FileInput;
        Retool.Runtime.helpers.add("fileinput", new FileInput());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Option = (function (_super) {
            __extends(Option, _super);
            function Option() {
                _super.apply(this, arguments);
                this.settings = { "container": false, "toolbox": true, label: "option", dropKind: "inline", glyph: "Y", expandOnCreate: true, category: "html" };
                this.allowableChildren = ['block', 'inline', 'table', 'buttonbar', 'input'];
            }
            Option.prototype.renderStartTag = function (writer) {
                return;
            };
            Option.prototype.renderEndTag = function (w) {
                return;
            };
            Option.prototype.buildEditor = function (builder) {
                builder.addTextProp("value", "Value");
                builder.addTextProp("text", "Text");
            };
            return Option;
        })(Helpers.HelperBase);
        Helpers.Option = Option;
        Retool.Runtime.helpers.add("option", new Option());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var DashboardWidget = (function (_super) {
            __extends(DashboardWidget, _super);
            function DashboardWidget() {
                _super.apply(this, arguments);
                this.settings = { "toolbox": true, label: "dashboard-widget", dropKind: "block", glyph: "C", category: "widget" };
            }
            DashboardWidget.prototype.renderStartTag = function (writer) {
                writer.startTag("div", this.computeStartTagClass(writer.component));
            };
            DashboardWidget.prototype.computeStartTagClass = function (component) {
                return component.computeClass("dashboard-widget");
            };
            DashboardWidget.prototype.renderContent = function (w) {
                var c = w.component;
                if (c.attr.type == "line" || c.attr.type == "bar") {
                    this.renderChart(w);
                    return;
                }
                if (c.attr.type == "value") {
                    this.renderValue(w);
                    return;
                }
                this.renderC3Gauge(w);
                return;
                var elemId = c.getElementId() + "_canvas";
                var attr = c.attr;
                w.writeTag("div", "title").text(c.getAttr("text")).write("</div>");
                w.write('<canvas id="' + elemId + '" width="300" height="150"></canvas>');
                w.addAfterRender(function () {
                    c.getAttr('expression', function (value) {
                        var fmt = attr.format || "0";
                        var formatted = Retool.NumberFormatter.format(value, fmt);
                        var opts = {
                            lines: 12,
                            angle: 0.15,
                            lineWidth: 0.44,
                            pointer: {
                                length: 0.89,
                                strokeWidth: 0.057,
                                color: '#000000' // Fill color
                            },
                            limitMax: 'false',
                            colorStart: '#92c13d',
                            colorStop: '#92c13d',
                            strokeColor: '#E0E0E0',
                            generateGradient: true
                        };
                        var target = document.getElementById(elemId); // your canvas element
                        var gauge = new Gauge(target).setOptions(opts); // create sexy gauge!
                        gauge.maxValue = attr.max_value; // set max gauge value
                        gauge.minValue = attr.min_value || 0;
                        gauge.animationSpeed = 1; // set animation speed (32 is default value)
                        gauge.set(value); // set actual value
                    });
                });
                w.writeTag("div", "subtitle").text(c.getAttr("subtitle")).write('</div>');
            };
            DashboardWidget.prototype.renderC3Gauge = function (w) {
                var c = w.component;
                var elemId = c.getElementId() + "_inner";
                w.writeTag("div", "title").text(c.getAttr("text")).write("</div>");
                w.writeTag("div", null, { id: elemId }).write('</div>');
                w.addAfterRender(function () {
                    c.getAttr('expression', function (value) {
                        var chart = c3.generate({
                            width: 300,
                            bindto: '#' + elemId,
                            data: {
                                columns: [['data', value]],
                                type: 'gauge'
                            },
                            gauge: {
                                min: c.attr.min_value,
                                max: c.attr.max_value
                            },
                            color: {
                                pattern: ['#54accd', '#15a589'],
                                threshold: {
                                    values: [c.attr.max_value * 0.8]
                                }
                            }
                        });
                        window.onresize = null;
                    });
                });
            };
            DashboardWidget.prototype.renderContent1 = function (w) {
                /*
                var elemId = w.component.getElementId() + "_inner";
                var attr = w.component.attr;
                var value = attr.value;
                var fmt = attr.format || "cz";
    
                var formatted = NumberHelper.formatNumber(value,fmt);
                w.write('<div id="' + elemId + '" class="inner">');
                w.write('<div class="value">').text(formatted).write('</div>');
                w.write('<div class="title">').text(attr.text).write('</div>');
                if (attr.subtitle){
                    w.write('<div class="subtitle">').text(attr.subtitle).write('</div>');
                }
                var icon = AppIcons.icons[attr.icon];
                if (icon){
                    AppIcons.write(w,icon,attr.iconcolor || "0");
                }
                
                try {
                    var radialGauge = RetoolDashboard.Widget.create({DisplayType: attr.displaytype,ScaleFactor:attr.scale_factor,MaxValue:attr.max_value,
                        MinValue:attr.min_value,WarningValue:attr.warning_value,CriticalValue:attr.critical_value,LowerValueBetter:attr.lower_value_better});
                    w.component.localData.widget = radialGauge;
                    
                    var data = [{value: value || 0 }];
                    w.addAfterRender(function(){radialGauge.render(elemId,data)});
                }
                catch(e){
                    w.text(e);
                }
                w.write('</div>');
                */
            };
            DashboardWidget.prototype.renderChart = function (w) {
                var c = w.component;
                var attr = c.attr;
                var type = attr.type;
                w.writeTag("div", "title").text(c.getAttr("text")).write("</div>");
                w.writeTag("canvas", null, { height: "450", width: "973" }).write("<canvas>");
                var elemId = c.getElementId();
                var self = this;
                w.addAfterRender(function () {
                    c.getAttr("expression", function (result) {
                        try {
                            var colors = ['rgba(220,220,220,0.2)', '#54accd'];
                            var labels;
                            if (result.labels && attr.label_format) {
                                labels = self.formatLabels(result.labels, attr.label_format);
                            }
                            else {
                                labels = result.labels;
                            }
                            var data = {
                                labels: labels,
                                datasets: []
                            };
                            var colorIndex = 0;
                            if (result.datasets) {
                                for (var i = 0; i < result.datasets.length; i++) {
                                    var dataset = result.datasets[i];
                                    if (dataset) {
                                        var d = {
                                            label: dataset.label,
                                            fillColor: colors[colorIndex],
                                            strokeColor: "rgba(220,220,220,1)",
                                            pointColor: "rgba(220,220,220,1)",
                                            pointStrokeColor: "#fff",
                                            pointHighlightFill: "#fff",
                                            pointHighlightStroke: "rgba(220,220,220,1)",
                                            data: dataset.data
                                        };
                                        data.datasets.push(d);
                                        colorIndex++;
                                    }
                                }
                            }
                            var ctx = $('#' + elemId + " canvas").get(0).getContext("2d");
                            var options = { responsive: false, datasetStrokeWidth: 2 };
                            var g;
                            if (type == "line") {
                                g = new Chart(ctx).Line(data, options);
                            }
                            else {
                                g = new Chart(ctx).Bar(data, options);
                            }
                        }
                        catch (e) {
                        }
                    });
                });
            };
            DashboardWidget.prototype.formatLabels = function (labels, fmt) {
                var out = [];
                for (var i = 0; i < labels.length; i++) {
                    var label = labels[i];
                    var f = Retool.DateFormatter.format(label, fmt);
                    if (f) {
                        out.push(f);
                    }
                    else {
                        out.push(label);
                    }
                }
                return out;
            };
            DashboardWidget.prototype.renderValue = function (w) {
                var c = w.component;
                var attr = c.attr;
                var elemId = c.getElementId();
                w.writeTag("div", "panel widget");
                w.writeTag("div", "panel-body bg-info text-center");
                w.writeTag("div", "widget-value").write('</div>');
                w.writeTag("p", null).text(c.getAttr('text')).write('</p>');
                w.write('</div>');
                w.write('</div>');
                w.addAfterRender(function () {
                    c.getAttr('expression', function (value) {
                        var fmt = attr.format || "0";
                        var formatted = Retool.NumberFormatter.format(value, fmt);
                        var w = new Retool.Writer();
                        w.text(formatted);
                        w.writeToElement("#" + elemId + " .widget-value");
                    });
                });
            };
            DashboardWidget.prototype.buildEditor = function (builder) {
                builder.addTextProp("type", "Type");
                builder.addTextProp("text", "Text");
                builder.addTextProp("subtitle", "Sub-Title");
                builder.addTextProp("icon", "Icon", { droptype: "appicons" });
                builder.addTextProp("iconcolor", "Color", { droptype: "colors" });
                builder.addTextProp("expression", "Value");
                builder.addTextProp("format", "Value Format");
                builder.addTextProp("label_format", "Label Format");
                builder.addTextProp("scale_factor", "Scale Factor");
                builder.addTextProp("min_value", "Minimum");
                builder.addTextProp("max_value", "Maximum");
                builder.addTextProp("warning_value", "Warning Level");
                builder.addTextProp("critical_value", "Critical Value");
                builder.addCheckbox("lower_value_better", "Lower values are better");
                builder.addTextProp("cssclass", "Css Class");
            };
            DashboardWidget.prototype.getInspectorInfo = function (element) {
                var info = {};
                if (element.expression) {
                    info.expression = element.expression;
                }
                return info;
            };
            DashboardWidget.prototype.createFromToolbox = function (item) {
                item.text = "My widget";
                item.subtitle = "($k)";
                item.displaytype = "radial";
                item.value = 165000;
                item.scale_factor = 1000;
                item.max_value = 200000;
                item.critical_value = 80000;
                item.warning_value = 120000;
            };
            return DashboardWidget;
        })(Helpers.HelperBase);
        Helpers.DashboardWidget = DashboardWidget;
        Retool.Runtime.helpers.add("dashboardwidget", new DashboardWidget());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Dialog = (function (_super) {
            __extends(Dialog, _super);
            function Dialog() {
                _super.apply(this, arguments);
            }
            Dialog.prototype.renderStartTag = function (writer) {
                writer.startTag("div", "panel " + (writer.component.attr.cssclass || ""));
            };
            Dialog.prototype.renderContent = function (writer) {
                var component = writer.component;
                writer.writeTag("div", "panel-heading").writeTag("div", "panel-title").prettyText(component.attr.title);
                writer.write("</div></div>");
                writer.writeTag("div", "panel-body");
                writer.renderChildren();
                writer.write('</div>');
                var component = writer.component;
                var focus;
                if (writer.setFocusTo) {
                    focus = function () {
                        $("#" + writer.setFocusTo).focus();
                    };
                }
                else {
                    focus = function () {
                        $("#" + component.getElementId() + " input:visible:enabled:first").focus();
                    };
                }
                writer.addAfterRender(focus);
            };
            return Dialog;
        })(Helpers.FormBase);
        Helpers.Dialog = Dialog;
        Retool.Runtime.helpers.add("dialog", new Dialog());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Generic = (function (_super) {
            __extends(Generic, _super);
            function Generic() {
                _super.apply(this, arguments);
            }
            Generic.prototype.renderStartTag = function (writer) {
                var c = writer.component;
                writer.startTag(c.attr.kind, this.computeStartTagClass(c));
            };
            return Generic;
        })(Helpers.BlockBase);
        Helpers.Generic = Generic;
        Retool.Runtime.helpers.add("r-generic", new Generic({ toolbox: false, label: null }));
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var NotesActivity = (function (_super) {
            __extends(NotesActivity, _super);
            function NotesActivity() {
                _super.apply(this, arguments);
                this.settings = { "container": false, "toolbox": true, "showOnly": true, label: "notes-activity", dropKind: "block", glyph: "E", tourstop: true, category: "widget" };
            }
            NotesActivity.prototype.requiresRender = function (component) {
                return component.context != component.localData.renderedDataSource;
            };
            NotesActivity.prototype.getWhere = function (element, viewModel) {
                return [];
            };
            NotesActivity.prototype.renderContent = function (w) {
                this.renderCreateNew(w);
                var rows = w.component.context;
                var n = rows.getLength();
                var attr = (rows && n) ? null : { "style": "display:none" };
                w.writeTag("div", "activity-stream-content", attr);
                if (rows && n) {
                    for (var i = 0; i < n; i++) {
                        var message = rows.getRow(i);
                        var c = w.createChildComponent({ kind: "activitymessage", id: "1", message: message, hideModel: true });
                        w.render(c);
                    }
                }
                w.write('</div>');
                w.component.localData.renderedDatarSource = rows;
            };
            NotesActivity.prototype.renderCreateNew = function (w) {
                w.writeTag("div", "btn-panel");
                w.writeTag("button", "btn btn-link", { "data-name": "create" }).writeTag("span", "glyphicon glyphicon-plus").write('</span> ').text("Add a note").write('</button>');
                w.write("</div>");
                w.writeTag("div", "activity-stream-add", { "style": "display:none" });
                w.write('<div>');
                w.write('<textarea placeholder="Write a note..."></textarea>');
                w.write('</div>');
                w.writeTag("div", "activity-stream-attach");
                w.writeIcon("paperclip").text('Add attachment ').write('<input type="file" size="10">');
                w.write('</div>');
                w.writeTag("div", "btn-panel");
                w.writeTag("button", "btn btn-primary", { "data-name": "save" }).text("Save").write('</button>');
                w.writeTag("button", "btn btn-link", { "data-name": "cancel" }).text("Cancel").write('</button>');
                w.write('</div>');
                w.write('</div>');
            };
            return NotesActivity;
        })(Helpers.HelperBase);
        Helpers.NotesActivity = NotesActivity;
        Retool.Runtime.helpers.add("activity", new NotesActivity());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var TourStop = (function (_super) {
            __extends(TourStop, _super);
            function TourStop() {
                _super.apply(this, arguments);
                this.settings = { "toolbox": true, label: "tour-stop", dropKind: "block", glyph: "F", placeholderOnly: true, tourstop: true, category: "widget" };
            }
            TourStop.prototype.renderStartTag = function (writer) {
                return;
            };
            TourStop.prototype.renderContent = function (writer) {
            };
            TourStop.prototype.buildEditor = function (builder) {
                builder.addTextProp("tourelement", "Element Id");
            };
            return TourStop;
        })(Helpers.HelperBase);
        Helpers.TourStop = TourStop;
        Retool.Runtime.helpers.add("tourstop", new TourStop());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Tutorial = (function (_super) {
            __extends(Tutorial, _super);
            function Tutorial() {
                _super.apply(this, arguments);
                this.settings = { "container": true, "toolbox": true, label: "tutorial", dropKind: "block", glyph: "G", tourstop: false, category: "widget" };
                this.allowableChildren = ['tutorialstep'];
            }
            Tutorial.prototype.renderStartTag = function (writer) {
                writer.startTag("section", this.computeStartTagClass(writer.component));
            };
            Tutorial.prototype.computeStartTagClass = function (c) {
                return c.computeClass("tutorial");
            };
            Tutorial.prototype.renderContent = function (w) {
                var c = w.component;
                var totalWeight = 0;
                var completedWeight = 0;
                var attr = c.attr;
                if (attr.children) {
                    for (var i = 0; i < attr.children.length; i++) {
                        var child = attr.children[i];
                        var childId = (c.dataPrefix) ? c.dataPrefix + "." + child.id : child.id;
                        var completed = c.localData[childId];
                        var weight = 1;
                        try {
                            weight = parseInt(child.weight, 10);
                            if (weight < 1) {
                                weight = 1;
                            }
                        }
                        catch (e) {
                        }
                        if (completed) {
                            completedWeight += (weight || 1);
                        }
                        totalWeight += (weight || 1);
                    }
                }
                var percentComplete = 0;
                if (totalWeight) {
                    percentComplete = Math.ceil(completedWeight * 100 / totalWeight);
                    if (percentComplete > 100) {
                        percentComplete = 100;
                    }
                }
                var width = (percentComplete > 10) ? percentComplete : 10;
                w.write('<h5>Tutorial Progress </h5>');
                w.write('<div class="meter">');
                if (percentComplete) {
                    w.write('<span').writeAttr("style", "width:" + width + "%").write('><span class="pull-right percent">').text(percentComplete + "%").write('</span></span>');
                }
                else {
                    w.write('<span class="not-started">0%</span>');
                }
                w.write('</div>');
                w.write('<fieldset>');
                w.write('<ul>');
                var stepNumber = 1;
                w.renderChildren(function (component) {
                    component.localData.stepNumber = stepNumber++;
                    w.render(component);
                });
                w.write('</ul>');
                w.write('</fieldset>');
            };
            Tutorial.prototype.buildEditor = function (builder) {
                builder.addTextProp("text", "Text");
                builder.addTextProp("description", "Description");
                builder.addTextProp("cssclass", "Css Class");
            };
            return Tutorial;
        })(Helpers.HelperBase);
        Helpers.Tutorial = Tutorial;
        Retool.Runtime.helpers.add("tutorial", new Tutorial());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var TutorialStep = (function (_super) {
            __extends(TutorialStep, _super);
            function TutorialStep() {
                _super.apply(this, arguments);
                this.settings = { "container": false, "toolbox": true, label: "tutorial-step", glyph: "H", tourstop: false, category: "widget" };
            }
            TutorialStep.prototype.renderStartTag = function (writer) {
                writer.startTag("li", this.computeStartTagClass(writer.component));
            };
            TutorialStep.prototype.computeStartTagClass = function (c) {
                var completed = c.localData[c.getDataId()];
                return c.computeClass((completed) ? "completed" : "");
            };
            TutorialStep.prototype.renderContent = function (w) {
                var c = w.component;
                var completed = c.localData[c.getDataId()];
                var stepNumber = c.localData.stepNumber;
                w.write('<div class="row"><div class="col-md-8"><p>');
                if (completed) {
                    w.writeIcon("check");
                }
                else {
                    w.write('<span class="step">').text(stepNumber.toString()).write('</span> ');
                }
                w.text(c.attr.text);
                w.write('</p></div>');
                w.write('<div class="col-md-4">');
                if (completed) {
                    w.write('<h5 class="pull-right">Completed!</h5>');
                }
                else {
                    w.write('<a href="#" class="tutorial-btn">').text(c.attr.buttontext).write('</a>');
                }
                w.write('</div>');
                w.write('</div>');
            };
            TutorialStep.prototype.buildEditor = function (builder) {
                builder.addTextProp("text", "Text");
                builder.addTextProp("buttontext", "Button Text");
                builder.addTextProp("href", "Href");
                builder.addTextProp("weight", "Progress Weight");
                builder.addNote("instructions", "Instructions");
                builder.addTextProp("cssclass", "Css Class");
            };
            TutorialStep.prototype.onclick = function (event) {
                var component = event.component;
                if (component.attr.href) {
                    component.navigateToHref(event);
                }
                event.preventDefault();
            };
            return TutorialStep;
        })(Helpers.HelperBase);
        Helpers.TutorialStep = TutorialStep;
        Retool.Runtime.helpers.add("tutorialstep", new TutorialStep());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var ModalHeader = (function (_super) {
            __extends(ModalHeader, _super);
            function ModalHeader() {
                _super.apply(this, arguments);
                this.settings = { "container": true, "toolbox": true, label: "modal-header", dropKind: "block", glyph: "Z", tourstop: true, expandOnCreate: true, category: "nav" };
                this.allowableChildren = ['block', 'inline', 'table', 'buttonbar'];
            }
            ModalHeader.prototype.renderStartTag = function (w) {
                w.startTag("div", this.computeStartTagClass(w.component));
            };
            ModalHeader.prototype.computeStartTagClass = function (c) {
                return c.computeClass("modal-header");
            };
            ModalHeader.prototype.renderContent = function (w) {
                var c = w.component;
                w.writeTag("button", "close", { "data-dismiss": "modal" }).writeTag("span", null, { "aria-hidden": "true" }).write("&times;").write('</span></button>');
                var text = c.getAttr("text");
                if (text) {
                    w.writeTag("div", "modal-title");
                    c.renderTextContent(w);
                    w.write("</div>");
                }
                w.renderChildren();
            };
            ModalHeader.prototype.buildEditor = function (builder) {
                builder.addTextProp("text", "Text");
                builder.addTextProp("cssclass", "Css Class");
            };
            return ModalHeader;
        })(Helpers.HelperBase);
        Helpers.ModalHeader = ModalHeader;
        Retool.Runtime.helpers.add("modalheader", new ModalHeader());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var IFrame = (function (_super) {
            __extends(IFrame, _super);
            function IFrame() {
                _super.apply(this, arguments);
                this.settings = { "container": false, "toolbox": true, label: "iframe", dropKind: "block", glyph: "r", tourstop: true };
            }
            IFrame.prototype.renderStartTag = function (writer) {
                writer.startTag("div", this.computeStartTagClass(writer.component));
            };
            IFrame.prototype.renderContent = function (writer) {
                var c = writer.component;
                writer.writeTag("iframe", null, { src: c.getAttr('src') });
                writer.write('</iframe>');
            };
            IFrame.prototype.buildEditor = function (builder) {
                builder.addTextProp("cssclass", "Css Class");
                builder.addTextProp("src", "Src");
            };
            return IFrame;
        })(Helpers.HelperBase);
        Helpers.IFrame = IFrame;
        Retool.Runtime.helpers.add("iframe", new IFrame());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Outlet = (function (_super) {
            __extends(Outlet, _super);
            function Outlet() {
                _super.apply(this, arguments);
                this.settings = { "container": false, "toolbox": true, label: "outlet", dropKind: "block", glyph: "]", tourstop: true, category: "helpers", command: true, isTemplateRoot: true };
            }
            Outlet.prototype.renderStartTag = function (w) {
                w.startTag("div", null);
            };
            Outlet.prototype.renderContent = function (w) {
                var c = w.component;
                var view = c.getView();
                var self = this;
                var name = (c.attr.name || "main");
                var url;
                name = c.attr.name;
                if (name == "main") {
                    var layoutView = view;
                    layoutView.appOutlet = c;
                    url = Retool.App.page.url;
                }
                var viewModel;
                if (Retool.App.ide) {
                    viewModel = c.context.viewModel.getChild(c.attr.id);
                }
                w.addAfterRender(function () {
                    self.renderPanelOutletContent(view, c, { url: url, noIDE: w.noIDE, viewModel: viewModel, noPushState: w.noPushState });
                });
            };
            Outlet.prototype.renderInline = function (w, c) {
                var view = c.getView();
                var name = c.attr.name || Outlet.APP_OUTLET_NAME;
                if (w.data["outlet-" + name]) {
                    var data = w.data["outlet-" + name];
                    var url = new Retool.Url(data.url);
                    var contentView = new Retool.OutletView(c.id + "-0");
                    contentView.parent = c;
                    c.children = [contentView];
                    contentView.render({ url: url, noPushState: true, noIDE: true, writer: w }, function (err) {
                    });
                    w.component = c;
                }
            };
            Outlet.prototype.navigate = function (c, options, done) {
                var view = c.getView();
                this.renderPanelOutletContent(view, c, options, done);
            };
            Outlet.prototype.hide = function (c) {
                c.children = null;
                c.getElement().html(null);
            };
            Outlet.prototype.renderPanelOutletContent = function (view, c, options, done) {
                var template;
                var params;
                if (options.viewModel && options.viewModel.template) {
                    template = Retool.App.templates.get(options.viewModel.template.id);
                }
                else if (options.url) {
                    template = Retool.App.templates.getRouteTemplate(options.url);
                    params = Retool.App.templates.getParams(options.url);
                }
                else {
                    template = options.template;
                    if (!template) {
                        var templateName = c.attr.template;
                        template = Retool.App.templates.get(templateName);
                    }
                    params = options.params;
                    if (!params) {
                        params = c.getAttr('params') || {};
                    }
                }
                if (c.children && c.children.length) {
                    var current = c.children[0];
                    current.stop();
                }
                var childView;
                var name = c.attr.name || "main";
                name = c.attr.name;
                if (name == "main") {
                    var contentView = new Retool.ContentView(c.id + "-0");
                    childView = contentView;
                    Retool.App.contentView = contentView;
                }
                else {
                    var outletView = new Retool.OutletView(c.id + "-0");
                    outletView.parentView = view;
                    childView = outletView;
                }
                if (!template && !options.url) {
                    c.children = null;
                    return;
                }
                childView.parent = c; // need to add to my children (which can only ever be one)
                c.children = [childView];
                childView.render({ template: template, noIDE: options.noIDE, params: params, noPushState: options.noPushState, viewModel: options.viewModel }, function () {
                    if (childView.context) {
                        c.context.viewModel.children[c.attr.id] = childView.context.viewModel;
                    }
                    if (done) {
                        done();
                    }
                });
            };
            Outlet.prototype.buildEditor = function (builder) {
                builder.addTextProp("template", "Template");
                builder.addTextProp("params", "Params");
            };
            Outlet.prototype.getInspectorInfo = function (element) {
                var info = _super.prototype.getInspectorInfo.call(this, element);
                if (element.template) {
                    info.path = element.template;
                    // todo: get full path name ( inspector needs to pass in info)
                    info.fileLink = element.template;
                }
                return info;
            };
            Outlet.APP_OUTLET_NAME = "app";
            Outlet.ROUTE_OUTLET_NAME = "route";
            return Outlet;
        })(Helpers.HelperBase);
        Helpers.Outlet = Outlet;
        Retool.Runtime.helpers.add("r-outlet", new Outlet());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Partial = (function (_super) {
            __extends(Partial, _super);
            function Partial() {
                _super.apply(this, arguments);
                this.settings = { "container": false, "toolbox": true, label: "partial", dropKind: "inline", glyph: "]", tourstop: false, category: "helpers", command: true, isTemplateRoot: true, scopeContainer: true };
            }
            Partial.prototype.renderStartTag = function (w) {
                var c = w.component;
                if (c.hasExpr('template')) {
                    w.writeMorphStart();
                    w.component.localData.morph = true;
                }
            };
            Partial.prototype.renderEndTag = function (w) {
                if (w.component.localData.morph) {
                    w.writeMorphEnd();
                }
            };
            Partial.prototype.computeModel = function (c, context) {
                return context.model;
            };
            Partial.prototype.renderContent = function (w) {
                var c = w.component;
                var context = c.context;
                var templateId = c.getAttr('template');
                var template = Retool.App.templates.get(templateId);
                if (template) {
                    var renderedViewModel = context.viewModel.getChild(c.attr.id);
                    var viewModel = renderedViewModel || Retool.ViewModel.create(template, context.viewModel);
                    context.viewModel.children[c.attr.id] = viewModel;
                    var partialContext = new Retool.RenderingContext("", viewModel, context.model, context);
                    var elements = template.definition.elements;
                    var dataPrefix = (c.dataPrefix) ? c.dataPrefix + "." + c.attr.id : c.attr.id;
                    for (var i = 0; i < elements.length; i++) {
                        var element = elements[i];
                        var child = w.createChildComponent(element, dataPrefix);
                        child.context = partialContext;
                        w.render(child);
                    }
                }
                c.localData.renderedTemplateId = templateId;
            };
            Partial.prototype.requiresRender = function (c) {
                var templateId = c.getAttr('template');
                return (templateId != c.localData.renderedTemplateId);
            };
            Partial.prototype.buildEditor = function (builder) {
                builder.addTextProp("template", "Template");
            };
            Partial.prototype.getInspectorInfo = function (element) {
                var info = _super.prototype.getInspectorInfo.call(this, element);
                if (element.template) {
                    info.path = element.template;
                    // todo: get full path name ( inspector needs to pass in info)
                    info.fileLink = element.template;
                }
                return info;
            };
            return Partial;
        })(Helpers.HelperBase);
        Helpers.Partial = Partial;
        Retool.Runtime.helpers.add("r-partial", new Partial());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Render = (function (_super) {
            __extends(Render, _super);
            function Render() {
                _super.apply(this, arguments);
                this.settings = { "container": false, "toolbox": true, label: "render", dropKind: "inline", glyph: "]", tourstop: false, category: "helpers", command: true, isTemplateRoot: true };
            }
            Render.prototype.renderStartTag = function (w) {
                w.startTag("div", null);
            };
            Render.prototype.renderContent = function (writer) {
                var c = writer.component;
                var active = this.getRouteActive(c);
                if (active) {
                    var viewModel = c.parent.context.viewModel.getChild(c.attr.id);
                    var contentView = new Retool.PageView(c.id + "-0");
                    c.children = [contentView];
                    contentView.parent = c;
                    var url = new Retool.Url(c.attr.template);
                    writer.addAfterRender(function () {
                        contentView.render({ url: url, viewModel: viewModel, writer: null }, null);
                    });
                }
            };
            Render.prototype.navigate = function (c, options) {
                var view = c.getView();
                var contentView = new Retool.PageView(c.id + "-0");
                contentView.parent = c;
                c.children = [contentView];
                var addToHistory = false;
                contentView.render({ url: options.url, addToHistory: addToHistory }, null);
            };
            Render.prototype.getRouteActive = function (c) {
                var pageUrl = Retool.App.page.url;
                var segments = pageUrl.getPath().split('/');
                var active = false;
                var path = c.attr.path || "";
                /*
                if (segments.length < 4){
                    active  = (path == App.APP_TEMPLATE_NAME);
                }
                else {
                    var pagePath = segments.slice(3).join('/');
                    if (pagePath == path){
                        active = true;
                    }
                    else if (pagePath.substr(0,path.length + 1) == (path + "/")){
                        active = true;
                    }
                }
                */
                return active;
            };
            Render.prototype.buildEditor = function (builder) {
                builder.addTextProp("path", "Path");
                builder.addTextProp("template", "Template");
            };
            Render.prototype.map = function (element, compiler) {
                compiler.addChildTemplate(element, element.template);
            };
            Render.prototype.getInspectorInfo = function (element) {
                var info = _super.prototype.getInspectorInfo.call(this, element);
                if (element.template) {
                    info.path = element.template;
                    // todo: get full path name ( inspector needs to pass in info)
                    info.fileLink = element.template;
                }
                return info;
            };
            return Render;
        })(Helpers.HelperBase);
        Helpers.Render = Render;
        Retool.Runtime.helpers.add("render", new Render());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Stylesheet = (function (_super) {
            __extends(Stylesheet, _super);
            function Stylesheet() {
                _super.apply(this, arguments);
                this.settings = { "container": false, "toolbox": true, label: "stylesheet", dropKind: "inline", glyph: "^", tourstop: true, category: "html" };
                this.allowableChildren = ['inline'];
            }
            Stylesheet.prototype.renderStartTag = function (w) {
                return;
            };
            Stylesheet.prototype.renderEndTag = function (w) {
                return;
            };
            Stylesheet.prototype.renderContent = function (w) {
                return; // no render placehoder only
            };
            Stylesheet.prototype.buildEditor = function (builder) {
                builder.addNote("href", "Href");
            };
            return Stylesheet;
        })(Helpers.HelperBase);
        Helpers.Stylesheet = Stylesheet;
        Retool.Runtime.helpers.add("r-stylesheet", new Stylesheet());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var ViewContainer = (function (_super) {
            __extends(ViewContainer, _super);
            function ViewContainer() {
                _super.apply(this, arguments);
                this.allowableChildren = ['block', 'inline', 'fieldset', 'titlebar', 'editbar', 'row', 'table', 'relationship', 'tabs', 'fielddroplist'];
                this.settings = { isView: true };
            }
            return ViewContainer;
        })(Helpers.HelperBase);
        Helpers.ViewContainer = ViewContainer;
        Retool.Runtime.helpers.add("viewcontainer", new ViewContainer());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var StaticBase = (function (_super) {
            __extends(StaticBase, _super);
            function StaticBase() {
                _super.apply(this, arguments);
                this.settings = { "container": true, label: "static", tourstop: true, dropKind: "inline", glyph: "L", category: "", dropAsKind: "static" };
                this.allowableChildren = ['block', 'inline', 'table', 'buttonbar', 'fielddroplist'];
            }
            StaticBase.prototype.init = function (c) {
                _super.prototype.init.call(this, c);
                c.localData.formGroup = c.getFormGroup();
            };
            StaticBase.prototype.renderStartTag = function (writer) {
                var c = writer.component;
                var css = this.computeStartTagClass(c);
                var attr = c.attr;
                var formGroup = c.localData.formGroup;
                if (formGroup && formGroup.type) {
                    c.localData.endTag = true;
                    if (formGroup.type == "horizontal") {
                        if (attr.size == "large") {
                            css += " form-group-lg";
                        }
                        else if (attr.size == "small") {
                            css += " form-group-sm";
                        }
                    }
                    writer.startTag("div", css + " form-group");
                }
                else {
                    return;
                }
            };
            StaticBase.prototype.renderEndTag = function (w) {
                if (w.component.localData.endTag) {
                    w.write("</div>");
                }
            };
            StaticBase.prototype.renderContent = function (w) {
                var c = w.component;
                var context = c.context;
                this.renderLabel(w, c);
                var value = this.getValue(c);
                var formGroup = c.localData.formGroup;
                if (formGroup && formGroup.type == "horizontal") {
                    w.writeTag('div', "col-sm-" + formGroup.inputColSize);
                }
                w.writeTag("p", "form-control-static");
                this.renderValue(w, c, value);
                w.renderChildren();
                w.write('</p>');
                if (formGroup && formGroup.type == "horizontal") {
                    w.write('</div>');
                }
                c.localData.renderedValue = value;
            };
            StaticBase.prototype.renderLabel = function (w, c) {
                var label = this.getLabel(c);
                var css;
                var showEmpty;
                var formGroup = c.localData.formGroup;
                if (formGroup && formGroup.type == "horizontal") {
                    showEmpty = true;
                    css = "control-label col-sm-" + formGroup.labelColSize;
                }
                if (label || showEmpty) {
                    w.writeTag("label", css).text(label).write('</label>');
                }
            };
            StaticBase.prototype.renderValue = function (w, c, value) {
                if (value) {
                    w.text(value);
                }
            };
            StaticBase.prototype.getValue = function (c) {
                return c.getFieldValue();
            };
            StaticBase.prototype.fieldValuesAreEqual = function (a, b) {
                return a == b;
            };
            StaticBase.prototype.requiresRender = function (c) {
                if (c.attr.value) {
                    var value = this.getValue(c);
                    if (!this.fieldValuesAreEqual(value, c.localData.renderedValue)) {
                        return true;
                    }
                }
                return false;
            };
            StaticBase.prototype.buildEditor = function (builder) {
                builder.addTextProp("value", "Value", { droptype: "variables", allowNonDrop: true });
                builder.addTextProp("label", "Label");
                builder.addTextProp("cssclass", "Css Class");
                builder.addTextProp("type", "Type", { droptype: "generic", allowNonDrop: true, dropItems: ["text", "checkbox", "date", "datetime", "email", "integer", "money", "number", "objectid", "password", "tel", "textarea", "url"] });
                builder.addTextProp("format", "Format");
                builder.addTextProp("size", "Size", { droptype: "generic", allowNonDrop: true, dropItems: ['normal', 'large', 'small'] });
            };
            return StaticBase;
        })(Helpers.HelperBase);
        Helpers.StaticBase = StaticBase;
        Retool.Runtime.helpers.add("static", new StaticBase());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var StaticText = (function (_super) {
            __extends(StaticText, _super);
            function StaticText() {
                _super.call(this);
                this.settings.toolbox = true;
            }
            return StaticText;
        })(Helpers.StaticBase);
        Helpers.StaticText = StaticText;
        Retool.Runtime.helpers.add("static_text", new StaticText());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var StaticCheckbox = (function (_super) {
            __extends(StaticCheckbox, _super);
            function StaticCheckbox() {
                _super.apply(this, arguments);
            }
            StaticCheckbox.prototype.renderValue = function (w, c, value) {
                if (value) {
                    w.text("Yes");
                }
                else {
                    w.text("No");
                }
            };
            return StaticCheckbox;
        })(Helpers.StaticBase);
        Helpers.StaticCheckbox = StaticCheckbox;
        Retool.Runtime.helpers.add("static_checkbox", new StaticCheckbox());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var StaticDate = (function (_super) {
            __extends(StaticDate, _super);
            function StaticDate() {
                _super.apply(this, arguments);
            }
            StaticDate.prototype.renderValue = function (w, c, value) {
                w.text(Retool.DateFormatter.format(value, c.attr.format));
            };
            return StaticDate;
        })(Helpers.StaticBase);
        Helpers.StaticDate = StaticDate;
        Retool.Runtime.helpers.add("static_date", new StaticDate());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var StaticDateTime = (function (_super) {
            __extends(StaticDateTime, _super);
            function StaticDateTime() {
                _super.apply(this, arguments);
            }
            StaticDateTime.prototype.renderValue = function (w, c, value) {
                var dateValue = Retool.DateFormatter.parseDateTimeFromInput(value);
                w.text(Retool.DateFormatter.formatDateTime(dateValue, c.attr.format));
            };
            return StaticDateTime;
        })(Helpers.StaticBase);
        Helpers.StaticDateTime = StaticDateTime;
        Retool.Runtime.helpers.add("static_datetime", new StaticDateTime());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var StaticEmail = (function (_super) {
            __extends(StaticEmail, _super);
            function StaticEmail() {
                _super.apply(this, arguments);
            }
            StaticEmail.prototype.renderValue = function (w, c, value) {
                if (value) {
                    w.writeTag("a", null, { href: "mailto:" + value }).text(value).write('</a>');
                }
            };
            return StaticEmail;
        })(Helpers.StaticBase);
        Helpers.StaticEmail = StaticEmail;
        Retool.Runtime.helpers.add("static_email", new StaticEmail());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var StaticMoney = (function (_super) {
            __extends(StaticMoney, _super);
            function StaticMoney() {
                _super.apply(this, arguments);
            }
            StaticMoney.prototype.renderValue = function (w, c, value) {
                var f = Retool.NumberFormatter.formatMoney(value, c.attr.format);
                w.text(f);
            };
            return StaticMoney;
        })(Helpers.StaticBase);
        Helpers.StaticMoney = StaticMoney;
        Retool.Runtime.helpers.add("static_money", new StaticMoney());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var StaticInteger = (function (_super) {
            __extends(StaticInteger, _super);
            function StaticInteger() {
                _super.apply(this, arguments);
            }
            StaticInteger.prototype.renderValue = function (w, c, value) {
                var f = Retool.NumberFormatter.formatInt(value, c.attr.format);
                w.text(f);
            };
            return StaticInteger;
        })(Helpers.StaticBase);
        Helpers.StaticInteger = StaticInteger;
        Retool.Runtime.helpers.add("static_integer", new StaticInteger());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var StaticNumber = (function (_super) {
            __extends(StaticNumber, _super);
            function StaticNumber() {
                _super.apply(this, arguments);
            }
            StaticNumber.prototype.renderValue = function (w, c, value) {
                var f = Retool.NumberFormatter.formatNumber(value, c.attr.format);
                w.text(f);
            };
            return StaticNumber;
        })(Helpers.StaticBase);
        Helpers.StaticNumber = StaticNumber;
        Retool.Runtime.helpers.add("static_number", new StaticNumber());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var StaticObjectID = (function (_super) {
            __extends(StaticObjectID, _super);
            function StaticObjectID() {
                _super.apply(this, arguments);
            }
            StaticObjectID.prototype.renderValue = function (w, c, value) {
                if (value) {
                    w.text(value);
                }
            };
            return StaticObjectID;
        })(Helpers.StaticBase);
        Helpers.StaticObjectID = StaticObjectID;
        Retool.Runtime.helpers.add("static_objectid", new StaticObjectID());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var StaticPassword = (function (_super) {
            __extends(StaticPassword, _super);
            function StaticPassword() {
                _super.apply(this, arguments);
            }
            StaticPassword.prototype.renderValue = function (w, c, value) {
                w.text("*******");
            };
            return StaticPassword;
        })(Helpers.StaticBase);
        Helpers.StaticPassword = StaticPassword;
        Retool.Runtime.helpers.add("static_password", new StaticPassword());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var StaticTel = (function (_super) {
            __extends(StaticTel, _super);
            function StaticTel() {
                _super.apply(this, arguments);
            }
            StaticTel.prototype.renderValue = function (w, c, value) {
                if (value) {
                    w.writeTag("a", null, { href: "tel:" + value }).text(value).write('</a>');
                }
            };
            return StaticTel;
        })(Helpers.StaticBase);
        Helpers.StaticTel = StaticTel;
        Retool.Runtime.helpers.add("static_tel", new StaticTel());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var StaticTextArea = (function (_super) {
            __extends(StaticTextArea, _super);
            function StaticTextArea() {
                _super.apply(this, arguments);
            }
            StaticTextArea.prototype.renderValue = function (w, c, value) {
                if (value) {
                    w.text(value);
                }
            };
            return StaticTextArea;
        })(Helpers.StaticBase);
        Helpers.StaticTextArea = StaticTextArea;
        Retool.Runtime.helpers.add("static_textarea", new StaticTextArea());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var StaticUrl = (function (_super) {
            __extends(StaticUrl, _super);
            function StaticUrl() {
                _super.apply(this, arguments);
            }
            StaticUrl.prototype.renderValue = function (w, c, value) {
                if (value) {
                    w.writeTag("a", null, { href: value }).text(value).write('</a>');
                }
            };
            return StaticUrl;
        })(Helpers.StaticBase);
        Helpers.StaticUrl = StaticUrl;
        Retool.Runtime.helpers.add("static_url", new StaticUrl());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Table = (function (_super) {
            __extends(Table, _super);
            function Table() {
                _super.apply(this, arguments);
                this.settings = { "container": true, "toolbox": true, "showOnly": true, label: "table", glyph: "x", tourstop: true, category: "table", expandOnCreate: true };
                this.allowableChildren = ['thead', 'tbody', 'tgroup', 'tfoot', 'tr'];
            }
            Table.prototype.renderStartTag = function (w) {
                w.startTag("table", this.computeStartTagClass(w.component));
            };
            Table.prototype.computeStartTagClass = function (c) {
                return c.computeClass(null);
            };
            Table.prototype.renderContent = function (writer) {
                writer.renderChildren();
            };
            Table.prototype.buildEditor = function (builder) {
                Helpers.BlockBase.addStandardEditor(builder);
            };
            return Table;
        })(Helpers.HelperBase);
        Helpers.Table = Table;
        Retool.Runtime.helpers.add("table", new Table());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Tr = (function (_super) {
            __extends(Tr, _super);
            function Tr() {
                _super.apply(this, arguments);
                this.settings = { "container": true, "toolbox": true, label: "tr", glyph: "~", category: "table", expandOnCreate: true };
                this.allowableChildren = ['td', 'th'];
            }
            Tr.prototype.renderStartTag = function (writer) {
                writer.startTag("tr", this.computeStartTagClass(writer.component));
            };
            Tr.prototype.renderContent = function (writer) {
                writer.renderChildren();
            };
            Tr.prototype.onclick = function (event) {
                var c = event.component;
                if (c.attr.name) {
                    c.raise({ methodName: "onclick", event: event });
                }
                event.preventDefault();
            };
            Tr.prototype.buildEditor = function (builder) {
                Helpers.BlockBase.addStandardEditor(builder);
            };
            return Tr;
        })(Helpers.HelperBase);
        Helpers.Tr = Tr;
        Retool.Runtime.helpers.add("tr", new Tr());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Td = (function (_super) {
            __extends(Td, _super);
            function Td() {
                _super.apply(this, arguments);
                this.settings = { "container": true, "toolbox": true, label: "td", glyph: "z", tourstop: true, category: "table" };
                this.allowableChildren = ['block', 'inline'];
            }
            Td.prototype.renderStartTag = function (w) {
                var attr = w.component.attr;
                if (attr.colspan) {
                    w.startTag("td", this.computeStartTagClass(w.component), { "colspan": attr.colspan });
                }
                else {
                    w.startTag("td", this.computeStartTagClass(w.component));
                }
            };
            Td.prototype.renderContent = function (w) {
                var c = w.component;
                c.renderTextContent(w);
                w.renderChildren();
            };
            Td.prototype.onclick = function (event) {
                var component = event.component;
                if (component.attr.name) {
                    component.raise({ methodName: "onclick", event: event });
                }
                event.preventDefault();
            };
            Td.prototype.requiresRender = function (c) {
                return c.blockChanged();
            };
            Td.prototype.buildEditor = function (builder) {
                builder.addTextProp("text", "Text");
                builder.addTextProp("colspan", "Column Span");
                Helpers.BlockBase.addStandardEditor(builder);
            };
            return Td;
        })(Helpers.HelperBase);
        Helpers.Td = Td;
        Retool.Runtime.helpers.add("td", new Td());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Th = (function (_super) {
            __extends(Th, _super);
            function Th() {
                _super.apply(this, arguments);
                this.settings = { "container": true, "toolbox": true, label: "th", glyph: "{", tourstop: true, category: "table" };
                this.allowableChildren = ['block', 'inline'];
            }
            Th.prototype.renderStartTag = function (w) {
                var attr = w.component.attr;
                if (attr.colspan) {
                    w.startTag("th", this.computeStartTagClass(w.component), { "colspan": attr.colspan });
                }
                else {
                    w.startTag("th", this.computeStartTagClass(w.component));
                }
            };
            Th.prototype.computeStartTagClass = function (c) {
                var sortClass = "";
                /*
                var table = c.closest('table');
                if (table){
                    var tableHandler = <TableHandler>table.helper;
                    var collectionOrder = tableHandler.getCollectionOrder(table);
                    
                    if (collectionOrder){
                        if (collectionOrder.field == c.attr.value){
                            sortClass = (collectionOrder.dir == -1) ? "sortdesc " : "sortasc ";
                        }
                    }
                }
                */
                return c.computeClass(sortClass);
            };
            Th.prototype.renderContent = function (w) {
                var c = w.component;
                var asLink = c.attr.data;
                c.localData.renderedSortName = "";
                c.localData.renderedSortDescending = false;
                if (asLink) {
                    var array = c.context.model;
                    var caret = false;
                    var sort = array.sort;
                    var css = "";
                    if (sort && sort.name == c.attr.data) {
                        caret = true;
                        c.localData.renderedSortName = c.attr.data;
                        if (sort.descending) {
                            c.localData.renderedSortDescending = true;
                        }
                        else {
                            css = "dropup";
                        }
                    }
                    w.writeTag("a", css, { href: "#", tabindex: "-1" });
                    c.renderTextContent(w);
                    if (caret) {
                        w.write(" ").writeTag("span", "caret").write('</span>');
                    }
                    w.write("</a>");
                }
                else {
                    c.renderTextContent(w);
                }
                w.renderChildren();
            };
            Th.prototype.onclick = function (event) {
                var c = event.component;
                if (c.attr.data) {
                    var array = c.context.model;
                    if (array.sort && array.sort.name == c.attr.data) {
                        array.sort.descending = !array.sort.descending;
                    }
                    else {
                        array.sort = { name: c.attr.data, descending: false };
                    }
                }
                if (c.attr.name) {
                    c.raise({ methodName: "onclick", event: event });
                }
                event.preventDefault();
            };
            Th.prototype.requiresRender = function (c) {
                if (c.attr.data) {
                    var array = c.context.model;
                    if (array.sort) {
                        if (c.localData.renderedSortName != array.sort.name) {
                            return true;
                        }
                        if (c.localData.renderedSortDescending != array.sort.descending) {
                            return true;
                        }
                    }
                    else if (c.localData.renderedSortName) {
                        return true;
                    }
                }
                return false;
            };
            Th.prototype.buildEditor = function (builder) {
                builder.addTextProp("text", "Text");
                builder.addTextProp("value", "Value", { droptype: "variables" });
                builder.addTextProp("colspan", "Column Span");
                Helpers.BlockBase.addStandardEditor(builder);
            };
            return Th;
        })(Helpers.HelperBase);
        Helpers.Th = Th;
        Retool.Runtime.helpers.add("th", new Th());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Thead = (function (_super) {
            __extends(Thead, _super);
            function Thead() {
                _super.apply(this, arguments);
                this.settings = { "container": true, "toolbox": true, label: "thead", glyph: "|", category: "table", expandOnCreate: true };
                this.allowableChildren = ['tr'];
            }
            Thead.prototype.renderStartTag = function (writer) {
                writer.startTag("thead", this.computeStartTagClass(writer.component));
            };
            Thead.prototype.renderContent = function (writer) {
                writer.renderChildren();
            };
            Thead.prototype.onclick = function (event) {
                var c = event.component;
                if (c.attr.name) {
                    c.raise({ methodName: "onclick", event: event });
                }
                event.preventDefault();
            };
            Thead.prototype.buildEditor = function (builder) {
                Helpers.BlockBase.addStandardEditor(builder);
            };
            return Thead;
        })(Helpers.HelperBase);
        Helpers.Thead = Thead;
        Retool.Runtime.helpers.add("thead", new Thead());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Tbody = (function (_super) {
            __extends(Tbody, _super);
            function Tbody() {
                _super.apply(this, arguments);
                this.settings = { "container": true, "toolbox": true, label: "tbody", glyph: "y", category: "table", expandOnCreate: true, hasScriptEvents: true };
                this.allowableChildren = ['tr'];
            }
            Tbody.prototype.renderStartTag = function (writer) {
                writer.startTag("tbody", this.computeStartTagClass(writer.component));
            };
            Tbody.prototype.computeStartTagClass = function (c) {
                return c.computeClass(null);
            };
            Tbody.prototype.renderContent = function (writer) {
                writer.renderChildren();
            };
            Tbody.prototype.onclick = function (event) {
                var c = event.component;
                if (c.attr.name) {
                    c.raise({ methodName: "onclick", event: event });
                }
                event.preventDefault();
            };
            Tbody.prototype.createFromToolbox = function (item) {
                item.children = [];
                var tr = { kind: "tr" };
                item.children.push(tr);
            };
            Tbody.prototype.buildEditor = function (builder) {
                Helpers.BlockBase.addStandardEditor(builder);
            };
            return Tbody;
        })(Helpers.HelperBase);
        Helpers.Tbody = Tbody;
        Retool.Runtime.helpers.add("tbody", new Tbody());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var RowSelector = (function (_super) {
            __extends(RowSelector, _super);
            function RowSelector() {
                _super.apply(this, arguments);
                this.settings = { "container": false, "toolbox": true, label: "row-selector", glyph: "~", category: "table", dropKind: "inline" };
            }
            RowSelector.prototype.renderStartTag = function (writer) {
                var c = writer.component;
                writer.startTag("div", c.computeClass("row-selector"));
                var th = c.closest('th');
                if (th) {
                    c.localData.header = true;
                }
            };
            RowSelector.prototype.renderContent = function (w) {
                var attrib = { type: "checkbox" };
                var c = w.component;
                var value = this.getSelected(c);
                if (value && value != "0") {
                    attrib.checked = "checked";
                }
                w.writeTag("input", null, attrib);
                c.localData.renderedValue = value;
            };
            RowSelector.prototype.getSelected = function (c) {
                var array = this.getArray(c);
                if (array) {
                    if (!c.localData.header) {
                        return array.getSelected(c.context.arrayIndex);
                    }
                }
                return false;
            };
            RowSelector.prototype.requiresRender = function (c) {
                var value = this.getSelected(c);
                return value != c.localData.renderedValue;
            };
            RowSelector.prototype.getArray = function (c) {
                if (c.localData.header) {
                    return c.context.model;
                }
                if (c.context.parent) {
                    return c.context.parent.model;
                }
                return null;
            };
            RowSelector.prototype.onclick = function (event, shiftClick) {
                var c = event.component;
                var input = $('#' + c.getElementId() + " input").get(0);
                if (!input) {
                    return;
                }
                var value = input.checked;
                if (event.domEvent.target.tagName == "DIV") {
                    value = !value;
                    if (value) {
                        input.checked = true;
                    }
                    else {
                        input.checked = false;
                    }
                }
                var context = c.context;
                var array = this.getArray(c);
                event.stopPropagation();
                if (array) {
                    if (c.localData.header) {
                        if (array.getSelected(0)) {
                            array.selectAll(false);
                        }
                        else {
                            array.selectAll(true);
                        }
                    }
                    else {
                        if (shiftClick) {
                            event.allowDefaultAction = true;
                            var start = array.lastClicked || 0;
                            var end = c.context.arrayIndex;
                            if (start > end) {
                                var t = start;
                                start = end;
                                end = t;
                            }
                            while (start <= end) {
                                array.setSelected(start, value);
                                start++;
                            }
                        }
                        else {
                            array.lastClicked = context.arrayIndex;
                            array.setSelected(context.arrayIndex, value);
                        }
                    }
                }
                event.valueChanged(c);
                c.localData.renderedValue = value;
                if (c.attr.name) {
                    c.raise({ methodName: "onclick", event: event });
                }
            };
            RowSelector.prototype.onshiftclick = function (event) {
                this.onclick(event, true);
                _super.prototype.onshiftclick.call(this, event);
            };
            RowSelector.prototype.renderChanges = function (c) {
                var value = this.getSelected(c);
                var inputElem = c.getElement("input").get(0);
                if (inputElem) {
                    if (value && value != "0") {
                        inputElem.checked = true;
                    }
                    else {
                        inputElem.checked = false;
                    }
                }
                c.localData.renderedValue = value;
                return false;
            };
            RowSelector.prototype.buildEditor = function (builder) {
                Helpers.BlockBase.addStandardEditor(builder);
            };
            return RowSelector;
        })(Helpers.HelperBase);
        Helpers.RowSelector = RowSelector;
        Retool.Runtime.helpers.add("r-row-selector", new RowSelector());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Pagination = (function (_super) {
            __extends(Pagination, _super);
            function Pagination() {
                _super.apply(this, arguments);
                this.settings = { "container": false, "toolbox": true, label: "pagination", glyph: "G", category: "table", dropKind: "block", expandOnCreate: false };
            }
            Pagination.prototype.renderStartTag = function (writer) {
                writer.startTag("ul", writer.component.computeClass("pagination"));
            };
            Pagination.prototype.renderContent = function (w) {
                var c = w.component;
                var array = c.context.model;
                var pageSize = array.pageSize || 99999;
                var numRows = array.getLength();
                var numPages = Math.ceil(numRows / pageSize);
                var currentPage = array.getPage();
                var css;
                for (var i = 1; i <= numPages; i++) {
                    css = (currentPage == i) ? "active" : "";
                    w.writeTag("li", css).writeTag("a", null, { href: "#", "data-page": i }).text(i.toString());
                    w.write('</a></li>');
                }
                c.localData.renderedPage = currentPage;
            };
            Pagination.prototype.requiresRender = function (c) {
                var array = c.context.model;
                var currentPage = array.getPage();
                return (currentPage != c.localData.renderedPage);
            };
            Pagination.prototype.onclick = function (event) {
                var c = event.component;
                var page = $(event.domEvent.target).data('page');
                if (page) {
                    var array = c.context.model;
                    array.setPage(page);
                    array.incVersion();
                    event.valueChanged(c);
                }
                event.stopPropagation();
                if (c.attr.name) {
                    c.raise({ methodName: "onclick", event: event });
                }
                event.preventDefault();
            };
            Pagination.prototype.buildEditor = function (builder) {
                Helpers.BlockBase.addStandardEditor(builder);
            };
            return Pagination;
        })(Helpers.HelperBase);
        Helpers.Pagination = Pagination;
        Retool.Runtime.helpers.add("r-pagination", new Pagination());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var ChartBase = (function (_super) {
            __extends(ChartBase, _super);
            function ChartBase() {
                _super.apply(this, arguments);
            }
            ChartBase.prototype.computeDimensions = function (c) {
                var width = 4;
                var height = 4;
                try {
                    width = parseInt(c.attr.width, 10) || 4;
                }
                catch (e) {
                }
                try {
                    height = parseInt(c.attr.height, 10) || 4;
                }
                catch (e) {
                }
                var widFactor = 80;
                var htFactor = 80;
                return { width: (widFactor * width) - 17, height: htFactor * height };
            };
            return ChartBase;
        })(Helpers.HelperBase);
        Helpers.ChartBase = ChartBase;
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var ValueChart = (function (_super) {
            __extends(ValueChart, _super);
            function ValueChart() {
                _super.apply(this, arguments);
                this.settings = { "toolbox": true, label: "value-chart", dropKind: "block", glyph: "C", category: "widget" };
            }
            ValueChart.prototype.renderStartTag = function (writer) {
                writer.startTag("div", this.computeStartTagClass(writer.component));
            };
            ValueChart.prototype.computeStartTagClass = function (component) {
                return component.computeClass("dashboard-widget");
            };
            ValueChart.prototype.renderContent = function (w) {
                var c = w.component;
                var attr = c.attr;
                var elemId = c.getElementId();
                var dimen = this.computeDimensions(c);
                var style = "width:" + dimen.width + "px;height:" + dimen.height + "px";
                w.writeTag("div", "value-chart", { style: style });
                w.writeTag("p", null);
                if (attr.icon) {
                    w.writeIcon(attr.icon);
                }
                w.text(c.getAttr('text')).write('</p>');
                w.writeTag("div", "widget-value").write('</div>');
                w.write('</div>');
                w.addAfterRender(function () {
                    c.getAttr('expression', function (value) {
                        var fmt = attr.format || "#,##0;-#,##0;0";
                        var formatted = Retool.NumberFormatter.format(value, fmt);
                        var w = new Retool.Writer();
                        w.text(formatted);
                        w.writeToElement("#" + elemId + " .widget-value");
                    });
                });
            };
            ValueChart.prototype.buildEditor = function (builder) {
                builder.addTextProp("type", "Type");
                builder.addTextProp("text", "Text");
                builder.addTextProp("cssclass", "Css Class");
                builder.addTextProp("subtitle", "Sub-Title");
                builder.addTextProp("icon", "Icon");
                builder.addTextProp("expression", "Value");
                builder.addTextProp("width", "Width");
                builder.addTextProp("height", "Height");
                builder.addTextProp("format", "Value Format");
                builder.addTextProp("label_format", "Label Format");
            };
            ValueChart.prototype.getInspectorInfo = function (element) {
                var info = {};
                if (element.expression) {
                    info.expression = element.expression;
                }
                return info;
            };
            ValueChart.prototype.createFromToolbox = function (item) {
                item.text = "My widget";
                item.value = 10;
            };
            return ValueChart;
        })(Helpers.ChartBase);
        Helpers.ValueChart = ValueChart;
        Retool.Runtime.helpers.add("value-chart", new ValueChart());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var GaugeChart = (function (_super) {
            __extends(GaugeChart, _super);
            function GaugeChart() {
                _super.apply(this, arguments);
                this.settings = { "toolbox": true, label: "gauge-chart", dropKind: "block", glyph: "C", category: "widget" };
            }
            GaugeChart.prototype.renderStartTag = function (writer) {
                writer.startTag("div", this.computeStartTagClass(writer.component));
            };
            GaugeChart.prototype.computeStartTagClass = function (component) {
                return component.computeClass("dashboard-widget");
            };
            GaugeChart.prototype.renderContent = function (w) {
                var c = w.component;
                var elemId = c.getElementId() + "_inner";
                var dimen = this.computeDimensions(c);
                var style = "width:" + dimen.width + "px;height:" + dimen.height + "px";
                w.writeTag("div", "gauge-chart", { style: style });
                w.writeTag("div", "title").text(c.getAttr("text")).write("</div>");
                w.writeTag("div", null, { id: elemId }).write('</div>');
                w.write('</div>');
                w.addAfterRender(function () {
                    c.getAttr('expression', function (value) {
                        var chart = c3.generate({
                            width: 300,
                            bindto: '#' + elemId,
                            data: {
                                columns: [['data', value]],
                                type: 'gauge'
                            },
                            gauge: {
                                min: c.attr.min_value,
                                max: c.attr.max_value
                            },
                            color: {
                                pattern: ['#3498db', '#18bc9c'],
                                threshold: {
                                    values: [c.attr.max_value * 0.8]
                                }
                            }
                        });
                        window.onresize = null;
                    });
                });
            };
            GaugeChart.prototype.buildEditor = function (builder) {
                builder.addTextProp("type", "Type");
                builder.addTextProp("text", "Text");
                builder.addTextProp("subtitle", "Sub-Title");
                builder.addTextProp("min_value", "Minimum");
                builder.addTextProp("max_value", "Maximum");
                builder.addTextProp("icon", "Icon");
                builder.addTextProp("expression", "Value");
                builder.addTextProp("format", "Value Format");
                builder.addTextProp("label_format", "Label Format");
                builder.addTextProp("width", "Width");
                builder.addTextProp("height", "Height");
                builder.addTextProp("cssclass", "Css Class");
            };
            GaugeChart.prototype.getInspectorInfo = function (element) {
                var info = {};
                if (element.expression) {
                    info.expression = element.expression;
                }
                return info;
            };
            GaugeChart.prototype.createFromToolbox = function (item) {
                item.text = "My widget";
                item.displaytype = "radial";
                item.value = 10;
                item.max_value = 100;
                item.critical_value = 20;
                item.warning_value = 60;
            };
            return GaugeChart;
        })(Helpers.ChartBase);
        Helpers.GaugeChart = GaugeChart;
        Retool.Runtime.helpers.add("gauge-chart", new GaugeChart());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var SeriesChart = (function (_super) {
            __extends(SeriesChart, _super);
            function SeriesChart() {
                _super.apply(this, arguments);
                this.settings = { "toolbox": true, label: "series-chart", dropKind: "block", glyph: "C", category: "widget" };
            }
            SeriesChart.prototype.renderStartTag = function (writer) {
                writer.startTag("div", this.computeStartTagClass(writer.component));
            };
            SeriesChart.prototype.computeStartTagClass = function (component) {
                return component.computeClass("dashboard-widget");
            };
            SeriesChart.prototype.renderContent = function (w) {
                var c = w.component;
                var attr = c.attr;
                var type = attr.type;
                var dimen = this.computeDimensions(c);
                var style = "width:" + dimen.width + "px;height:" + dimen.height + "px";
                w.writeTag("div", "series-chart", { style: style });
                w.writeTag("div", "title").text(c.getAttr("text")).write("</div>");
                w.writeTag("canvas", null, { height: dimen.height - 50, width: dimen.width - 40 }).write("<canvas>");
                w.write("</div>");
                var elemId = c.getElementId();
                var self = this;
                w.addAfterRender(function () {
                    c.getAttr("expression", function (result) {
                        try {
                            var colors = ['rgba(220,220,220,0.2)', '#3498db'];
                            var labels;
                            if (result.labels && attr.label_format) {
                                labels = self.formatLabels(result.labels, attr.label_format);
                            }
                            else {
                                labels = result.labels;
                            }
                            var data = {
                                labels: labels,
                                datasets: []
                            };
                            var colorIndex = 0;
                            if (result.datasets) {
                                for (var i = 0; i < result.datasets.length; i++) {
                                    var dataset = result.datasets[i];
                                    if (dataset) {
                                        var d = {
                                            label: dataset.label,
                                            fillColor: colors[colorIndex],
                                            strokeColor: "rgba(220,220,220,1)",
                                            pointColor: "rgba(220,220,220,1)",
                                            pointStrokeColor: "#fff",
                                            pointHighlightFill: "#fff",
                                            pointHighlightStroke: "rgba(220,220,220,1)",
                                            data: dataset.data
                                        };
                                        data.datasets.push(d);
                                        colorIndex++;
                                    }
                                }
                            }
                            var ctx = $('#' + elemId + " canvas").get(0).getContext("2d");
                            var options = { responsive: false, datasetStrokeWidth: 2 };
                            var g;
                            if (type == "line") {
                                g = new Chart(ctx).Line(data, options);
                            }
                            else {
                                g = new Chart(ctx).Bar(data, options);
                            }
                        }
                        catch (e) {
                        }
                    });
                });
            };
            SeriesChart.prototype.formatLabels = function (labels, fmt) {
                var out = [];
                for (var i = 0; i < labels.length; i++) {
                    var label = labels[i];
                    var f = Retool.DateFormatter.format(label, fmt);
                    if (f) {
                        out.push(f);
                    }
                    else {
                        out.push(label);
                    }
                }
                return out;
            };
            SeriesChart.prototype.buildEditor = function (builder) {
                builder.addTextProp("type", "Type");
                builder.addTextProp("text", "Text");
                builder.addTextProp("subtitle", "Sub-Title");
                builder.addTextProp("icon", "Icon");
                builder.addTextProp("width", "Width");
                builder.addTextProp("height", "Height");
                builder.addTextProp("expression", "Value");
                builder.addTextProp("format", "Value Format");
                builder.addTextProp("label_format", "Label Format");
                builder.addTextProp("scale_factor", "Scale Factor");
                builder.addTextProp("cssclass", "Css Class");
            };
            SeriesChart.prototype.getInspectorInfo = function (element) {
                var info = {};
                if (element.expression) {
                    info.expression = element.expression;
                }
                return info;
            };
            SeriesChart.prototype.createFromToolbox = function (item) {
                item.text = "My series";
                item.subtitle = "($k)";
            };
            return SeriesChart;
        })(Helpers.ChartBase);
        Helpers.SeriesChart = SeriesChart;
        Retool.Runtime.helpers.add("series-chart", new SeriesChart());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Lessons;
    (function (Lessons) {
        var LessonManager = (function () {
            function LessonManager(app) {
                this.app = app;
            }
            LessonManager.prototype.start = function () {
                //$('#retool-app').remove();
                //$('body').append(w.getStream());
                Retool.App.init();
                Retool.App.ide = this.app.ide;
                this.copyLessons();
                var w = new Retool.Writer();
                return;
                this.render(w);
            };
            LessonManager.prototype.copyLessons = function () {
                var app = this.app;
                var volume = app.volume;
                var lessonApp = Retool.App;
                var n = volume;
                var files = volume.findAllFiles();
                var lessonVolume = new Retool.FileSystem.Volume("lessons", { useFolders: false });
                for (var i = 0; i < files.length; i++) {
                    var file = files[i];
                    lessonVolume.addFile(file);
                }
                lessonApp.volume = lessonVolume;
            };
            LessonManager.prototype.render = function (w) {
                Retool.App.layoutView = new CourseView("m");
                Retool.viewContainers["m"] = Retool.App.layoutView;
                var template = Retool.App.templates.get("lessons.index");
                Retool.App.layoutView.render({ template: template, noIDE: true }, function done() {
                });
            };
            return LessonManager;
        })();
        Lessons.LessonManager = LessonManager;
        var CourseView = (function (_super) {
            __extends(CourseView, _super);
            function CourseView() {
                _super.apply(this, arguments);
            }
            CourseView.prototype.renderViewElements = function (w, elements) {
                _super.prototype.renderViewElements.call(this, w, elements);
            };
            return CourseView;
        })(Retool.LayoutView);
        Lessons.CourseView = CourseView;
    })(Lessons = Retool.Lessons || (Retool.Lessons = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Course = (function (_super) {
            __extends(Course, _super);
            function Course() {
                _super.apply(this, arguments);
                this.settings = { "container": true, "toolbox": true, label: "course", dropKind: "block", glyph: "Z", tourstop: true, expandOnCreate: true, category: "nav" };
                this.allowableChildren = ['block', 'inline', 'table', 'buttonbar'];
            }
            Course.prototype.renderStartTag = function (w) {
                w.startTag("div", this.computeStartTagClass(w.component));
            };
            Course.prototype.computeStartTagClass = function (c) {
                return c.computeClass("course");
            };
            Course.prototype.init = function (c) {
                _super.prototype.init.call(this, c);
                var lessonIndex = c.context.get("lessonIndex");
                var lessons = this.getLessons(c);
                if (!lessonIndex || lessonIndex > lessons.length) {
                    c.context.set("lessonIndex", 1);
                }
                c.localData.lessons = lessons;
                c.localData.lessonCount = lessons.length;
            };
            Course.prototype.getLessons = function (c) {
                var lessons = [];
                if (c.attr.children) {
                    for (var i = 0; i < c.attr.children.length; i++) {
                        var child = c.attr.children[i];
                        if (child.kind == "lesson") {
                            lessons.push(child);
                        }
                    }
                }
                return lessons;
            };
            Course.prototype.renderContent = function (w) {
                var c = w.component;
                var lessonIndex = c.context.get("lessonIndex");
                w.writeTag("section", "banner").writeTag("h5", null);
                c.renderTextContent(w);
                this.buildMenu(w, c, lessonIndex);
                w.write("</h5></section>");
                w.writeTag("div", "lesson-content");
                this.renderLesson(w, c, lessonIndex - 1);
                w.write('</div>');
                w.writeTag("section", "bottom");
                w.writeTag("button", "btn btn-success pull-right", { "data-action": "next" }).text("Next").write('</button>');
                w.write("</section>");
                c.localData.renderedLesson = lessonIndex;
            };
            Course.prototype.buildMenu = function (w, c, lessonIndex) {
                w.writeTag("div", "dropdown lesson-drop");
                w.writeTag("a", "btn btn-lesson-drop ", { href: "#", "data-action": "dropdown" }).text(lessonIndex + "/" + c.localData.lessonCount).write('</a>');
                w.writeTag("ul", "dropdown-menu pull-right");
                var lessons = c.localData.lessons;
                for (var i = 0; i < lessons.length; i++) {
                    var lesson = lessons[i];
                    w.writeTag("li", null).writeTag("a", null, { href: "#", "data-action": "lesson", "data-index": i + 1 }).write("<strong>").text((i + 1).toString()).text(". ").write('</strong>').text(lesson.text).write("</a></li>");
                }
                w.write("</ul>");
                w.write("</div>");
            };
            Course.prototype.requiresRender = function (c) {
                if (c.localData.renderedLesson != c.context.get("lessonIndex")) {
                    return true;
                }
                return false;
            };
            Course.prototype.renderLesson = function (w, c, index) {
                var lessons = c.localData.lessons;
                var lesson = lessons[index];
                w.renderChildComponents([lesson]);
            };
            Course.prototype.buildEditor = function (builder) {
                builder.addTextProp("text", "Text");
                builder.addTextProp("cssclass", "Css Class");
            };
            Course.prototype.onclick = function (event) {
                var c = event.component;
                var $target = $(event.domEvent.target);
                var action = $target.data("action");
                if (action == "next") {
                    var index = c.context.get("lessonIndex");
                    index++;
                    if (index > c.localData.lessonCount) {
                        index = 1;
                    }
                    c.context.set("lessonIndex", index);
                    event.addDirtyView(c.getView());
                }
                if (action == "lesson") {
                    var i = parseInt($target.data("index"));
                    c.context.set("lessonIndex", i);
                    event.addDirtyView(c.getView());
                }
                if (action == "dropdown") {
                    $target.closest('.dropdown').toggleClass('open');
                    event.keepDropForComponent = c;
                    event.stopPropagation();
                }
                event.preventDefault();
            };
            return Course;
        })(Helpers.HelperBase);
        Helpers.Course = Course;
        Retool.Runtime.helpers.add("course", new Course());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var Lesson = (function (_super) {
            __extends(Lesson, _super);
            function Lesson() {
                _super.apply(this, arguments);
                this.settings = { "container": true, "toolbox": true, label: "lesson", dropKind: "block", glyph: "Z", tourstop: true, expandOnCreate: true, category: "nav" };
                this.allowableChildren = ['block', 'inline', 'table', 'buttonbar'];
            }
            Lesson.prototype.renderStartTag = function (w) {
                w.startTag("div", this.computeStartTagClass(w.component));
            };
            Lesson.prototype.computeStartTagClass = function (c) {
                return c.computeClass("lesson");
            };
            Lesson.prototype.renderContent = function (w) {
                var c = w.component;
                w.writeTag("section", "lesson-title").writeTag("h3", null);
                c.renderTextContent(w);
                w.write("</h3></section>");
                w.renderChildren();
            };
            Lesson.prototype.buildEditor = function (builder) {
                builder.addTextProp("text", "Text");
                builder.addTextProp("cssclass", "Css Class");
            };
            return Lesson;
        })(Helpers.HelperBase);
        Helpers.Lesson = Lesson;
        Retool.Runtime.helpers.add("lesson", new Lesson());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Helpers;
    (function (Helpers) {
        var LessonDemo = (function (_super) {
            __extends(LessonDemo, _super);
            function LessonDemo() {
                _super.apply(this, arguments);
                this.settings = { "toolbox": true, container: true, label: "lesson-demo", dropKind: 'inline', glyph: "q", tourstop: true, category: "html", hasScriptEvents: true };
                this.allowableChildren = ['block', 'inline', 'table', 'buttonbar', 'input'];
            }
            LessonDemo.prototype.buildEditor = function (builder) {
                builder.addTextProp("text", "Text");
                builder.addTextProp("src", "Src");
                builder.addTextProp("cssclass", "Css Class");
            };
            LessonDemo.prototype.renderStartTag = function (writer) {
                var attr = writer.component.attr;
                var attribs = { href: attr.href };
                if (attr.tabindex) {
                    attribs["tabindex"] = attr.tabindex;
                }
                writer.startTag("a", this.computeStartTagClass(writer.component), attribs);
            };
            LessonDemo.prototype.renderContent = function (w) {
                var c = w.component;
                var attr = c.attr;
                c.renderTextContent(w);
                w.renderChildren();
            };
            LessonDemo.prototype.requiresRender = function (c) {
                return c.blockChanged();
            };
            LessonDemo.prototype.afterRender = function (writer) {
                // writer.write("\n");
            };
            LessonDemo.prototype.onclick = function (event) {
                var c = event.component;
                if (c.attr.src) {
                    Retool.App.ide.showDemo(c.attr.src);
                }
                event.preventDefault();
                event.stopPropagation();
            };
            LessonDemo.prototype.createFromToolbox = function (item) {
                item.text = "Demo";
                item.cssclass = "btn-demo";
            };
            return LessonDemo;
        })(Helpers.HelperBase);
        Helpers.LessonDemo = LessonDemo;
        Retool.Runtime.helpers.add("lessondemo", new LessonDemo());
    })(Helpers = Retool.Helpers || (Retool.Helpers = {}));
})(Retool || (Retool = {}));
/*!
 * jQuery Cookie Plugin v1.3.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD. Register as anonymous module.
		define(['jquery'], factory);
	} else {
		// Browser globals.
		factory(jQuery);
	}
}(function ($) {

	var pluses = /\+/g;

	function decode(s) {
		if (config.raw) {
			return s;
		}
		return decodeURIComponent(s.replace(pluses, ' '));
	}

	function decodeAndParse(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}

		s = decode(s);

		try {
			return config.json ? JSON.parse(s) : s;
		} catch(e) {}
	}

	var config = $.cookie = function (key, value, options) {

		// Write
		if (value !== undefined) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === 'number') {
				var days = options.expires, t = options.expires = new Date();
				t.setDate(t.getDate() + days);
			}

			value = config.json ? JSON.stringify(value) : String(value);

			return (document.cookie = [
				config.raw ? key : encodeURIComponent(key),
				'=',
				config.raw ? value : encodeURIComponent(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path    ? '; path=' + options.path : '',
				options.domain  ? '; domain=' + options.domain : '',
				options.secure  ? '; secure' : ''
			].join(''));
		}

		// Read
		var cookies = document.cookie.split('; ');
		var result = key ? undefined : {};
		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = parts.join('=');

			if (key && key === name) {
				result = decodeAndParse(cookie);
				break;
			}

			if (!key) {
				result[name] = decodeAndParse(cookie);
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) !== undefined) {
			// Must not alter options, thus extending a fresh object...
			$.cookie(key, '', $.extend({}, options, { expires: -1 }));
			return true;
		}
		return false;
	};

}));
(function(){var AnimatedText,AnimatedTextFactory,Bar,BaseDonut,BaseGauge,Donut,Gauge,GaugePointer,TextRenderer,ValueUpdater,addCommas,cutHex,formatNumber,mergeObjects,secondsToString,updateObjectValues,_ref,_ref1,__hasProp={}.hasOwnProperty,__extends=function(child,parent){for(var key in parent){if(__hasProp.call(parent,key))child[key]=parent[key];}function ctor(){this.constructor=child;}ctor.prototype=parent.prototype;child.prototype=new ctor();child.__super__=parent.prototype;return child;};(function(){var browserRequestAnimationFrame,isCancelled,lastId,vendor,vendors,_i,_len;vendors=['ms','moz','webkit','o'];for(_i=0,_len=vendors.length;_i<_len;_i++){vendor=vendors[_i];if(window.requestAnimationFrame){break;}
window.requestAnimationFrame=window[vendor+'RequestAnimationFrame'];window.cancelAnimationFrame=window[vendor+'CancelAnimationFrame']||window[vendor+'CancelRequestAnimationFrame'];}
browserRequestAnimationFrame=null;lastId=0;isCancelled={};if(!requestAnimationFrame){window.requestAnimationFrame=function(callback,element){var currTime,id,lastTime,timeToCall;currTime=new Date().getTime();timeToCall=Math.max(0,16-(currTime-lastTime));id=window.setTimeout(function(){return callback(currTime+timeToCall);},timeToCall);lastTime=currTime+timeToCall;return id;};return window.cancelAnimationFrame=function(id){return clearTimeout(id);};}else if(!window.cancelAnimationFrame){browserRequestAnimationFrame=window.requestAnimationFrame;window.requestAnimationFrame=function(callback,element){var myId;myId=++lastId;browserRequestAnimationFrame(function(){if(!isCancelled[myId]){return callback();}},element);return myId;};return window.cancelAnimationFrame=function(id){return isCancelled[id]=true;};}})();String.prototype.hashCode=function(){var char1,hash,i,_i,_ref;hash=0;if(this.length===0){return hash;}
for(i=_i=0,_ref=this.length;0<=_ref?_i<_ref:_i>_ref;i=0<=_ref?++_i:--_i){char1=this.charCodeAt(i);hash=((hash<<5)-hash)+char1;hash=hash&hash;}
return hash;};secondsToString=function(sec){var hr,min;hr=Math.floor(sec/3600);min=Math.floor((sec-(hr*3600))/60);sec-=(hr*3600)+(min*60);sec+='';min+='';while(min.length<2){min='0'+min;}
while(sec.length<2){sec='0'+sec;}
hr=hr?hr+':':'';return hr+min+':'+sec;};formatNumber=function(num){return addCommas(num.toFixed(0));};updateObjectValues=function(obj1,obj2){var key,val;for(key in obj2){if(!__hasProp.call(obj2,key))continue;val=obj2[key];obj1[key]=val;}
return obj1;};mergeObjects=function(obj1,obj2){var key,out,val;out={};for(key in obj1){if(!__hasProp.call(obj1,key))continue;val=obj1[key];out[key]=val;}
for(key in obj2){if(!__hasProp.call(obj2,key))continue;val=obj2[key];out[key]=val;}
return out;};addCommas=function(nStr){var rgx,x,x1,x2;nStr+='';x=nStr.split('.');x1=x[0];x2='';if(x.length>1){x2='.'+x[1];}
rgx=/(\d+)(\d{3})/;while(rgx.test(x1)){x1=x1.replace(rgx,'$1'+','+'$2');}
return x1+x2;};cutHex=function(nStr){if(nStr.charAt(0)==="#"){return nStr.substring(1,7);}
return nStr;};ValueUpdater=(function(){ValueUpdater.prototype.animationSpeed=32;function ValueUpdater(addToAnimationQueue,clear){if(addToAnimationQueue==null){addToAnimationQueue=true;}
this.clear=clear!=null?clear:true;if(addToAnimationQueue){AnimationUpdater.add(this);}}
ValueUpdater.prototype.update=function(force){var diff;if(force==null){force=false;}
if(force||this.displayedValue!==this.value){if(this.ctx&&this.clear){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);}
diff=this.value-this.displayedValue;if(Math.abs(diff/this.animationSpeed)<=0.001){this.displayedValue=this.value;}else{this.displayedValue=this.displayedValue+diff/this.animationSpeed;}
this.render();return true;}
return false;};return ValueUpdater;})();BaseGauge=(function(_super){__extends(BaseGauge,_super);function BaseGauge(){_ref=BaseGauge.__super__.constructor.apply(this,arguments);return _ref;}
BaseGauge.prototype.displayScale=1;BaseGauge.prototype.setTextField=function(textField){return this.textField=textField instanceof TextRenderer?textField:new TextRenderer(textField);};BaseGauge.prototype.setMinValue=function(minValue,updateStartValue){var gauge,_i,_len,_ref1,_results;this.minValue=minValue;if(updateStartValue==null){updateStartValue=true;}
if(updateStartValue){this.displayedValue=this.minValue;_ref1=this.gp||[];_results=[];for(_i=0,_len=_ref1.length;_i<_len;_i++){gauge=_ref1[_i];_results.push(gauge.displayedValue=this.minValue);}
return _results;}};BaseGauge.prototype.setOptions=function(options){if(options==null){options=null;}
this.options=mergeObjects(this.options,options);if(this.textField){this.textField.el.style.fontSize=options.fontSize+'px';}
if(this.options.angle>.5){this.gauge.options.angle=.5;}
this.configDisplayScale();return this;};BaseGauge.prototype.configDisplayScale=function(){var backingStorePixelRatio,devicePixelRatio,height,prevDisplayScale,width;prevDisplayScale=this.displayScale;if(this.options.highDpiSupport===false){delete this.displayScale;}else{devicePixelRatio=window.devicePixelRatio||1;backingStorePixelRatio=this.ctx.webkitBackingStorePixelRatio||this.ctx.mozBackingStorePixelRatio||this.ctx.msBackingStorePixelRatio||this.ctx.oBackingStorePixelRatio||this.ctx.backingStorePixelRatio||1;this.displayScale=devicePixelRatio/backingStorePixelRatio;}
if(this.displayScale!==prevDisplayScale){width=this.canvas.G__width||this.canvas.width;height=this.canvas.G__height||this.canvas.height;this.canvas.width=width*this.displayScale;this.canvas.height=height*this.displayScale;this.canvas.style.width=""+width+"px";this.canvas.style.height=""+height+"px";this.canvas.G__width=width;this.canvas.G__height=height;}
return this;};return BaseGauge;})(ValueUpdater);TextRenderer=(function(){function TextRenderer(el){this.el=el;}
TextRenderer.prototype.render=function(gauge){return this.el.innerHTML=formatNumber(gauge.displayedValue);};return TextRenderer;})();AnimatedText=(function(_super){__extends(AnimatedText,_super);AnimatedText.prototype.displayedValue=0;AnimatedText.prototype.value=0;AnimatedText.prototype.setVal=function(value){return this.value=1*value;};function AnimatedText(elem,text){this.elem=elem;this.text=text!=null?text:false;this.value=1*this.elem.innerHTML;if(this.text){this.value=0;}}
AnimatedText.prototype.render=function(){var textVal;if(this.text){textVal=secondsToString(this.displayedValue.toFixed(0));}else{textVal=addCommas(formatNumber(this.displayedValue));}
return this.elem.innerHTML=textVal;};return AnimatedText;})(ValueUpdater);AnimatedTextFactory={create:function(objList){var elem,out,_i,_len;out=[];for(_i=0,_len=objList.length;_i<_len;_i++){elem=objList[_i];out.push(new AnimatedText(elem));}
return out;}};GaugePointer=(function(_super){__extends(GaugePointer,_super);GaugePointer.prototype.displayedValue=0;GaugePointer.prototype.value=0;GaugePointer.prototype.options={strokeWidth:0.035,length:0.1,color:"#000000"};function GaugePointer(gauge){this.gauge=gauge;this.ctx=this.gauge.ctx;this.canvas=this.gauge.canvas;GaugePointer.__super__.constructor.call(this,false,false);this.setOptions();}
GaugePointer.prototype.setOptions=function(options){if(options==null){options=null;}
updateObjectValues(this.options,options);this.length=this.canvas.height*this.options.length;this.strokeWidth=this.canvas.height*this.options.strokeWidth;this.maxValue=this.gauge.maxValue;this.minValue=this.gauge.minValue;this.animationSpeed=this.gauge.animationSpeed;return this.options.angle=this.gauge.options.angle;};GaugePointer.prototype.render=function(){var angle,centerX,centerY,endX,endY,startX,startY,x,y;angle=this.gauge.getAngle.call(this,this.displayedValue);centerX=this.canvas.width/2;centerY=this.canvas.height*0.9;x=Math.round(centerX+this.length*Math.cos(angle));y=Math.round(centerY+this.length*Math.sin(angle));startX=Math.round(centerX+this.strokeWidth*Math.cos(angle-Math.PI/2));startY=Math.round(centerY+this.strokeWidth*Math.sin(angle-Math.PI/2));endX=Math.round(centerX+this.strokeWidth*Math.cos(angle+Math.PI/2));endY=Math.round(centerY+this.strokeWidth*Math.sin(angle+Math.PI/2));this.ctx.fillStyle=this.options.color;this.ctx.beginPath();this.ctx.arc(centerX,centerY,this.strokeWidth,0,Math.PI*2,true);this.ctx.fill();this.ctx.beginPath();this.ctx.moveTo(startX,startY);this.ctx.lineTo(x,y);this.ctx.lineTo(endX,endY);return this.ctx.fill();};return GaugePointer;})(ValueUpdater);Bar=(function(){function Bar(elem){this.elem=elem;}
Bar.prototype.updateValues=function(arrValues){this.value=arrValues[0];this.maxValue=arrValues[1];this.avgValue=arrValues[2];return this.render();};Bar.prototype.render=function(){var avgPercent,valPercent;if(this.textField){this.textField.text(formatNumber(this.value));}
if(this.maxValue===0){this.maxValue=this.avgValue*2;}
valPercent=(this.value/this.maxValue)*100;avgPercent=(this.avgValue/this.maxValue)*100;$(".bar-value",this.elem).css({"width":valPercent+"%"});return $(".typical-value",this.elem).css({"width":avgPercent+"%"});};return Bar;})();Gauge=(function(_super){__extends(Gauge,_super);Gauge.prototype.elem=null;Gauge.prototype.value=[20];Gauge.prototype.maxValue=80;Gauge.prototype.minValue=0;Gauge.prototype.displayedAngle=0;Gauge.prototype.displayedValue=0;Gauge.prototype.lineWidth=40;Gauge.prototype.paddingBottom=0.1;Gauge.prototype.percentColors=null;Gauge.prototype.options={colorStart:"#6fadcf",colorStop:void 0,gradientType:0,strokeColor:"#e0e0e0",pointer:{length:0.8,strokeWidth:0.035},angle:0.15,lineWidth:0.44,fontSize:40,limitMax:false};function Gauge(canvas){this.canvas=canvas;Gauge.__super__.constructor.call(this);this.percentColors=null;if(typeof G_vmlCanvasManager!=='undefined'){this.canvas=window.G_vmlCanvasManager.initElement(this.canvas);}
this.ctx=this.canvas.getContext('2d');this.gp=[new GaugePointer(this)];this.setOptions();this.render();}
Gauge.prototype.setOptions=function(options){var gauge,_i,_len,_ref1;if(options==null){options=null;}
Gauge.__super__.setOptions.call(this,options);this.configPercentColors();this.lineWidth=this.canvas.height*(1-this.paddingBottom)*this.options.lineWidth;this.radius=this.canvas.height*(1-this.paddingBottom)-this.lineWidth;this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);this.render();_ref1=this.gp;for(_i=0,_len=_ref1.length;_i<_len;_i++){gauge=_ref1[_i];gauge.setOptions(this.options.pointer);gauge.render();}
return this;};Gauge.prototype.configPercentColors=function(){var bval,gval,i,rval,_i,_ref1,_results;this.percentColors=null;if(this.options.percentColors!==void 0){this.percentColors=new Array();_results=[];for(i=_i=0,_ref1=this.options.percentColors.length-1;0<=_ref1?_i<=_ref1:_i>=_ref1;i=0<=_ref1?++_i:--_i){rval=parseInt((cutHex(this.options.percentColors[i][1])).substring(0,2),16);gval=parseInt((cutHex(this.options.percentColors[i][1])).substring(2,4),16);bval=parseInt((cutHex(this.options.percentColors[i][1])).substring(4,6),16);_results.push(this.percentColors[i]={pct:this.options.percentColors[i][0],color:{r:rval,g:gval,b:bval}});}
return _results;}};Gauge.prototype.set=function(value){var i,max_hit,val,_i,_j,_len,_ref1;if(!(value instanceof Array)){value=[value];}
if(value.length>this.gp.length){for(i=_i=0,_ref1=value.length-this.gp.length;0<=_ref1?_i<_ref1:_i>_ref1;i=0<=_ref1?++_i:--_i){this.gp.push(new GaugePointer(this));}}
i=0;max_hit=false;for(_j=0,_len=value.length;_j<_len;_j++){val=value[_j];if(val>this.maxValue){this.maxValue=this.value*1.1;max_hit=true;}
this.gp[i].value=val;this.gp[i++].setOptions({maxValue:this.maxValue,angle:this.options.angle});}
this.value=value[value.length-1];if(max_hit){if(!this.options.limitMax){return AnimationUpdater.run();}}else{return AnimationUpdater.run();}};Gauge.prototype.getAngle=function(value){return(1+this.options.angle)*Math.PI+((value-this.minValue)/(this.maxValue-this.minValue))*(1-this.options.angle*2)*Math.PI;};Gauge.prototype.getColorForPercentage=function(pct,grad){var color,endColor,i,rangePct,startColor,_i,_ref1;if(pct===0){color=this.percentColors[0].color;}else{color=this.percentColors[this.percentColors.length-1].color;for(i=_i=0,_ref1=this.percentColors.length-1;0<=_ref1?_i<=_ref1:_i>=_ref1;i=0<=_ref1?++_i:--_i){if(pct<=this.percentColors[i].pct){if(grad===true){startColor=this.percentColors[i-1];endColor=this.percentColors[i];rangePct=(pct-startColor.pct)/(endColor.pct-startColor.pct);color={r:Math.floor(startColor.color.r*(1-rangePct)+endColor.color.r*rangePct),g:Math.floor(startColor.color.g*(1-rangePct)+endColor.color.g*rangePct),b:Math.floor(startColor.color.b*(1-rangePct)+endColor.color.b*rangePct)};}else{color=this.percentColors[i].color;}
break;}}}
return'rgb('+[color.r,color.g,color.b].join(',')+')';};Gauge.prototype.getColorForValue=function(val,grad){var pct;pct=(val-this.minValue)/(this.maxValue-this.minValue);return this.getColorForPercentage(pct,grad);};Gauge.prototype.render=function(){var displayedAngle,fillStyle,gauge,h,w,_i,_len,_ref1,_results;w=this.canvas.width/2;h=this.canvas.height*(1-this.paddingBottom);displayedAngle=this.getAngle(this.displayedValue);if(this.textField){this.textField.render(this);}
this.ctx.lineCap="butt";if(this.options.customFillStyle!==void 0){fillStyle=this.options.customFillStyle(this);}else if(this.percentColors!==null){fillStyle=this.getColorForValue(this.displayedValue,true);}else if(this.options.colorStop!==void 0){if(this.options.gradientType===0){fillStyle=this.ctx.createRadialGradient(w,h,9,w,h,70);}else{fillStyle=this.ctx.createLinearGradient(0,0,w,0);}
fillStyle.addColorStop(0,this.options.colorStart);fillStyle.addColorStop(1,this.options.colorStop);}else{fillStyle=this.options.colorStart;}
this.ctx.strokeStyle=fillStyle;this.ctx.beginPath();this.ctx.arc(w,h,this.radius,(1+this.options.angle)*Math.PI,displayedAngle,false);this.ctx.lineWidth=this.lineWidth;this.ctx.stroke();this.ctx.strokeStyle=this.options.strokeColor;this.ctx.beginPath();this.ctx.arc(w,h,this.radius,displayedAngle,(2-this.options.angle)*Math.PI,false);this.ctx.stroke();_ref1=this.gp;_results=[];for(_i=0,_len=_ref1.length;_i<_len;_i++){gauge=_ref1[_i];_results.push(gauge.update(true));}
return _results;};return Gauge;})(BaseGauge);BaseDonut=(function(_super){__extends(BaseDonut,_super);BaseDonut.prototype.lineWidth=15;BaseDonut.prototype.displayedValue=0;BaseDonut.prototype.value=33;BaseDonut.prototype.maxValue=80;BaseDonut.prototype.minValue=0;BaseDonut.prototype.options={lineWidth:0.10,colorStart:"#6f6ea0",colorStop:"#c0c0db",strokeColor:"#eeeeee",shadowColor:"#d5d5d5",angle:0.35};function BaseDonut(canvas){this.canvas=canvas;BaseDonut.__super__.constructor.call(this);if(typeof G_vmlCanvasManager!=='undefined'){this.canvas=window.G_vmlCanvasManager.initElement(this.canvas);}
this.ctx=this.canvas.getContext('2d');this.setOptions();this.render();}
BaseDonut.prototype.getAngle=function(value){return(1-this.options.angle)*Math.PI+((value-this.minValue)/(this.maxValue-this.minValue))*((2+this.options.angle)-(1-this.options.angle))*Math.PI;};BaseDonut.prototype.setOptions=function(options){if(options==null){options=null;}
BaseDonut.__super__.setOptions.call(this,options);this.lineWidth=this.canvas.height*this.options.lineWidth;this.radius=this.canvas.height/2-this.lineWidth/2;return this;};BaseDonut.prototype.set=function(value){this.value=value;if(this.value>this.maxValue){this.maxValue=this.value*1.1;}
return AnimationUpdater.run();};BaseDonut.prototype.render=function(){var displayedAngle,grdFill,h,start,stop,w;displayedAngle=this.getAngle(this.displayedValue);w=this.canvas.width/2;h=this.canvas.height/2;if(this.textField){this.textField.render(this);}
grdFill=this.ctx.createRadialGradient(w,h,39,w,h,70);grdFill.addColorStop(0,this.options.colorStart);grdFill.addColorStop(1,this.options.colorStop);start=this.radius-this.lineWidth/2;stop=this.radius+this.lineWidth/2;this.ctx.strokeStyle=this.options.strokeColor;this.ctx.beginPath();this.ctx.arc(w,h,this.radius,(1-this.options.angle)*Math.PI,(2+this.options.angle)*Math.PI,false);this.ctx.lineWidth=this.lineWidth;this.ctx.lineCap="round";this.ctx.stroke();this.ctx.strokeStyle=grdFill;this.ctx.beginPath();this.ctx.arc(w,h,this.radius,(1-this.options.angle)*Math.PI,displayedAngle,false);return this.ctx.stroke();};return BaseDonut;})(BaseGauge);Donut=(function(_super){__extends(Donut,_super);function Donut(){_ref1=Donut.__super__.constructor.apply(this,arguments);return _ref1;}
Donut.prototype.strokeGradient=function(w,h,start,stop){var grd;grd=this.ctx.createRadialGradient(w,h,start,w,h,stop);grd.addColorStop(0,this.options.shadowColor);grd.addColorStop(0.12,this.options._orgStrokeColor);grd.addColorStop(0.88,this.options._orgStrokeColor);grd.addColorStop(1,this.options.shadowColor);return grd;};Donut.prototype.setOptions=function(options){var h,start,stop,w;if(options==null){options=null;}
Donut.__super__.setOptions.call(this,options);w=this.canvas.width/2;h=this.canvas.height/2;start=this.radius-this.lineWidth/2;stop=this.radius+this.lineWidth/2;this.options._orgStrokeColor=this.options.strokeColor;this.options.strokeColor=this.strokeGradient(w,h,start,stop);return this;};return Donut;})(BaseDonut);window.AnimationUpdater={elements:[],animId:null,addAll:function(list){var elem,_i,_len,_results;_results=[];for(_i=0,_len=list.length;_i<_len;_i++){elem=list[_i];_results.push(AnimationUpdater.elements.push(elem));}
return _results;},add:function(object){return AnimationUpdater.elements.push(object);},run:function(){var animationFinished,elem,_i,_len,_ref2;animationFinished=true;_ref2=AnimationUpdater.elements;for(_i=0,_len=_ref2.length;_i<_len;_i++){elem=_ref2[_i];if(elem.update()){animationFinished=false;}}
if(!animationFinished){return AnimationUpdater.animId=requestAnimationFrame(AnimationUpdater.run);}else{return cancelAnimationFrame(AnimationUpdater.animId);}}};window.Gauge=Gauge;window.Donut=Donut;window.BaseDonut=BaseDonut;window.TextRenderer=TextRenderer;}).call(this);if (window.parent && window.parent.Retool && window.parent.Retool.App.initialized){
	jQuery(document).ready(function(){Retool.ready({});});
}
else {
	jQuery(document).ready(function(){Retool.drawIdeToggle();});
}