var Retool;
(function (Retool) {
    var DataServices = (function () {
        function DataServices() {
            this._handlers = {};
            this._providers = {};
            if (process.env.SQLSERVER_HOST) {
                this._handlers["sqlserver"] = this.getSqlServerDatabase;
                var sqlserver = new Retool.SqlServer.Provider();
                this._sqlServer = sqlserver;
                this._providers["sqlserver"] = sqlserver;
            }
        }
        DataServices.prototype.getDatabase = function (context, providerName) {
            var handler = this._handlers[providerName];
            var self = this;
            if (handler) {
                return handler.apply(self, [context]);
            }
            return null;
        };
        DataServices.prototype.getProvider = function (providerName) {
            return this._providers[providerName];
        };
        DataServices.prototype.getSqlServerDatabase = function (context) {
            return new Retool.SqlServer.Database(this._sqlServer, "[RETOOL-SPARSE]");
        };
        return DataServices;
    })();
    Retool.DataServices = DataServices;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    function makeAsync(callback) {
        return {
            error: function (err) {
                callback(err, null);
            },
            resume: function (result) {
                callback(null, result);
            }
        };
    }
    Retool.makeAsync = makeAsync;
    function isObject(arg) {
        return '[object Object]' == toString.call(arg);
    }
    Retool.isObject = isObject;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Index = (function () {
        function Index() {
        }
        Index.prototype.start = function (options) {
            var app;
            var express = require('express');
            var bodyParser = require('body-parser');
            app = express();
            var self = this;
            var timestamp = options.timestamp.toString() || "1.001";
            app.once('mount', function onmount(parent) {
                // pop sub-app off stack
                parent._router.stack.pop();
                options.mountpath = app.mountpath;
                var config = options.config;
                var path = require('path');
                Retool.Server.initialize(options, function (err, result) {
                    if (err) {
                        parent.emit('error', err);
                        return;
                    }
                    Retool.Server.started = true;
                });
                parent.use(self.allowCrossDomain);
                /*
                var favicon = require('serve-favicon');
                
                
                parent.use(favicon(assetPath + "/favicon.ico"));
                parent.use("/assets",express.static(assetPath));

                */
                parent.use(function startup(req, res, next) {
                    if (Retool.Server.started) {
                        next();
                        return;
                    }
                    res.status(503).send("Server is starting");
                });
                if (process.env.REDIS_HOST) {
                    var redis = require('redis'), redisPort = process.env.REDIS_PORT || 6379, redisHost = process.env.REDIS_HOST || "127.0.0.1";
                    var redisOpt = {};
                    if (process.env.REDIS_PWD) {
                        redisOpt.auth_pass = process.env.REDIS_PWD;
                    }
                    var redisClient = redis.createClient(redisPort, redisHost, redisOpt);
                    console.log("using redis...");
                }
                else {
                    console.log("missing redis host information...");
                }
                var expireSec = 30 * 60; // 30 minutes
                var sessionStore = new Retool.RetoolAuthSessionStore(redisClient, { expire: expireSec });
                var sessionManager = new Retool.SessionManager(sessionStore);
                Retool.Server.sessionManager = sessionManager;
                if (process.env.ALLOW_HTTP != "true") {
                    parent.use(self.checkSSL);
                }
                parent.use(bodyParser.raw({ limit: 1048576 }));
                parent.use(bodyParser.json({ limit: 1048576 }));
                parent.use("/api/1/*", function (req, res) {
                    self.processRequest(req, res);
                });
                /*
                parent.get(["/ide","/ide/*"],function(req,res){
                    self.sendIndexPage(req,res,"index-ide.html",assetPath,timestamp);
                });
            

                parent.get("/*",function(req,res){
                    self.sendIndexPage(req,res,"index-ide.html",assetPath,timestamp);
                });
                */
            });
            return app;
        };
        Index.prototype.sendIndexPage = function (req, res, name, assetPath, timestamp) {
            var version = timestamp;
            var apiHost = req.headers["x-retool-api"];
            var path = require('path');
            if (!apiHost) {
                var hostSegments = req.hostname.split('.');
                var n = hostSegments.length;
                apiHost = "ide." + hostSegments[n - 2] + "." + hostSegments[n - 1];
            }
            var accountsHost = apiHost;
            var fs = require('fs');
            var page = fs.readFileSync(path.join(assetPath, name), "utf8");
            page = page.replace(/\$API_HOST\$/g, apiHost);
            page = page.replace(/\$ACCOUNTS_HOST\$/g, accountsHost);
            page = page.replace(/\$VERSION\$/g, version);
            res.send(page);
        };
        Index.prototype.processRequest = function (req, res) {
            //todo: session_check
            res.header('Cache-Control', 'private, no-cache, no-store, must-revalidate');
            res.header('Expires', '-1');
            res.header('Pragma', 'no-cache');
            var params = req.params[0];
            var segments = params.split('/');
            if (segments[0] == "batch") {
                var batchRunner = new Retool.BatchRunner(req.body, req, res);
                batchRunner.run();
            }
            else {
                this.executeNonBatch(segments, req, res);
            }
        };
        Index.prototype.executeNonBatch = function (segments, req, res) {
            var body = req.body;
            var args;
            if (req.is("application/json")) {
                args = body.arguments || {};
            }
            else {
                args = { body: body };
            }
            if (req.query) {
                for (var key in req.query) {
                    args[key] = req.query[key];
                }
            }
            if (segments.length > 1) {
                args.id = segments[1];
            }
            var fullMethod = segments[0];
            var methodSegments = fullMethod.split('.');
            var fullLength = 2;
            if (methodSegments[0] == "models" || methodSegments[0] == "api") {
                fullLength = 3;
            }
            if (methodSegments.length < fullLength) {
                switch (req.method) {
                    case "GET":
                        if (segments.length > 1) {
                            fullMethod += ".find";
                        }
                        else {
                            fullMethod += ".query";
                            args = { query: args };
                        }
                        break;
                    case "POST":
                        fullMethod += ".create";
                        args.body = body;
                        break;
                    case "PUT":
                        fullMethod += ".update";
                        args.body = body;
                        break;
                    case "DELETE":
                        fullMethod += ".destroy";
                        break;
                }
            }
            var batch = [{ method: fullMethod, arguments: args, body: body }];
            var batchRunner = new Retool.BatchRunner(batch, req, res);
            batchRunner.singleResponse = true;
            batchRunner.run();
        };
        Index.prototype.checkSSL = function (req, res, next) {
            var schema = (req.headers['x-forwarded-proto'] || '').toLowerCase();
            var port = req.headers['x-forwarded-port'] || '';
            if (schema === 'https' && port === "443") {
                next();
            }
            else {
                res.redirect('https://' + req.headers.host + req.url);
            }
        };
        Index.prototype.allowCrossDomain = function (req, res, next) {
            var origin = req.headers.origin;
            if (origin) {
                var first = origin.indexOf(":");
                if (first != -1) {
                    var last = origin.lastIndexOf(":");
                    if (first != last) {
                        origin = origin.substr(0, last);
                    }
                }
                var allowOriginHost = "." + process.env.ALLOW_ORIGIN_HOST;
                if (true || allowOriginHost && origin && origin.length > allowOriginHost.length && origin.substr(origin.length - allowOriginHost.length) == allowOriginHost) {
                    res.header('Access-Control-Allow-Origin', req.headers.origin);
                }
                else {
                    res.header('Access-Control-Allow-Origin', null);
                }
                res.header('Access-Control-Allow-Credentials', 'true');
                res.header('Access-Control-Max-Age', 600);
                res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS,PATCH');
                res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, Content-Length, X-Requested-With,X-Retool-Project');
                res.header('Access-Control-Expose-Headers', "X-Retool-Auth-Token");
            }
            // intercept OPTIONS method
            if ('OPTIONS' == req.method) {
                res.send(200);
            }
            else {
                next();
            }
        };
        return Index;
    })();
    Retool.Index = Index;
    function startServer(options) {
        var caller = require('caller');
        var path = require('path');
        var index = new Retool.Index();
        options = options || {};
        options.basedir = options.basedir || path.dirname(caller());
        return index.start(options);
    }
    Retool.startServer = startServer;
})(Retool || (Retool = {}));
module.exports = Retool;
var Retool;
(function (Retool) {
    var Server = (function () {
        function Server() {
        }
        Server.initialize = function (options, done) {
            Server.userApplications = new Retool.UserApplicationCache();
            var dotenv = require('dotenv');
            dotenv.load();
            var path = require('path');
            var basedir = options.basedir;
            var config;
            if (options.config) {
                config = options.config;
            }
            else if (process.env.NODE_ENV == "production") {
                config = {};
            }
            else {
                //config = require("config.json");
                config = {};
            }
            Server.config = config;
            if (process.env.PROJECT_FOLDER) {
                Server.projectFolder = path.resolve(process.env.PROJECT_FOLDER);
                Server.ensureProjectFolder();
            }
            var HttpsAgent = require('agentkeepalive').HttpsAgent;
            Server.keepAliveAgent = new HttpsAgent({ keepAlive: true, keepAliveMsecs: 5000 });
            Server.hostName = process.env.ALLOW_ORIGIN_HOST;
            Server.initVM();
            Server.initDB(config);
            Server.createBaseApplication();
            Server.loadSystemApplication();
            Server.initStaticInstances();
            Server.data = new Retool.DataServices();
            Server.databases.orchestrate = new Retool.Orchestrate.Database(null);
            Server.databases.keen = new Retool.Keen.Database(null);
            /*
            var mongo = new Mongo.Database();
            Server.databases.mongo = mongo;
            mongo.connect(function(err){
                console.log("connected to mongo err:" + err);
                done(err,null);
            });
*/
            /*
            var auth = new VM.StormpathAuth();
            Server.auth = auth;
            auth.init(function(err,result){
                done(null,null);
            });
            */
            Server.page = new Retool.ServerRendering.Page();
            done(null, null);
        };
        Server.initVM = function () {
            Retool.VM.globalObj = new Retool.VM.Global(null);
            Retool.VM.addType("Date", Date, Date);
            Retool.VM.addType("Math", Math, Math);
            Retool.VM.addType("JSON", null, JSON);
            Retool.VM.addType("Number", Number, Number);
            Retool.VM.addType("Array", Array, Array);
            var n = Number;
            n.parseFloat = parseFloat;
            //ObjectModel.compilePrototype();
            Server.compilePrototype(Retool.ORMModel);
            var orchModel = Retool.Orchestrate.Model;
            var ormModel = Retool.ORMModel;
            orchModel.prototype.staticPrototype = ormModel.prototype.staticPrototype;
            var keenModel = Retool.Keen.Model;
            keenModel.prototype.staticPrototype = ormModel.prototype.staticPrototype;
            // RestRequest.compilePrototype();
        };
        Server.compilePrototype = function (obj) {
            var vmFunc = obj.prototype.vm;
            if (vmFunc) {
                obj.prototype.staticPrototype = Retool.IDE.JavascriptCompiler.compileFunctionClass(vmFunc);
            }
        };
        Server.initDB = function (config) {
            if (process.env.MONGO) {
                config.mongo = { connection_string: process.env.MONGO };
            }
            if (config.mysql || process.env.RDS_HOSTNAME) {
                var nodeMySql = require('mysql');
                if (config.mysql) {
                    Server.mySqlPool = nodeMySql.createPool({
                        connectionLimit: 10,
                        host: config.mysql.host,
                        user: config.mysql.user,
                        password: config.mysql.password,
                        multipleStatements: true
                    });
                }
                else if (process.env.RDS_HOSTNAME) {
                    Server.mySqlPool = nodeMySql.createPool({
                        connectionLimit: 10,
                        host: process.env.RDS_HOSTNAME,
                        user: process.env.RDS_USERNAME,
                        password: process.env.RDS_PASSWORD,
                        port: process.env.RDS_PORT,
                        multipleStatements: true
                    });
                }
            }
        };
        Server.getProjectFolder = function (projectId) {
            var path = require('path');
            /*
            if (projectId){
                return path.join(Server.projectFolder,projectId);
            }
            */
            return Server.projectFolder;
        };
        Server.ensureProjectFolder = function () {
            var folder = Server.getProjectFolder();
            var fs = require("fs");
            if (!fs.existsSync(folder)) {
                Retool.NodeFs.mkdir_sync(folder);
            }
        };
        Server.createBaseApplication = function () {
            var volume = new Retool.FileSystem.Volume("bases", { useFolders: false });
            //volume.addFile(new BaseModels.User().file);
            //volume.addFile(new BaseModels.Account().file);
            Server.baseApplication = new Retool.ApplicationBaseMerger(volume);
        };
        Server.loadSystemApplication = function () {
            var volume = new Retool.FileSystem.Volume("system", { useFolders: false });
            Server.systemApp = new Retool.Application("$system");
            for (var i = 0; i < Server.systemModelTypes.length; i++) {
                var file = Server.loadSystemModelType(Server.systemModelTypes[i]);
                volume.addFile(file);
            }
            Server.systemApp.load(volume);
        };
        Server.initStaticInstances = function () {
            var types = Retool.VM.types;
            for (var key in types) {
                var type = types[key];
                var si = type.staticInstance;
                if (si && si.initStatic) {
                    si.initStatic();
                }
            }
        };
        Server.isSystemNamespace = function (value) {
            return (value == "System");
        };
        Server.loadSystemModelType = function (modelType) {
            var builder = new Retool.SchemaBuilder();
            var m = new modelType(null);
            m.define(builder);
            builder.def.modelType = modelType;
            if (m.vm) {
                builder.setSource(m.vm, m.staticPrototype);
            }
            return builder.file;
        };
        Server.hasIDERole = function (session, projectId) {
            return false;
        };
        Server.addSystemModel = function (modelType) {
            this.systemModelTypes.push(modelType);
        };
        Server.getDatabase = function (name) {
            return this.databases[name];
        };
        Server.getApplication = function (accountId, appName, callback) {
            var context = new Retool.Context();
            context.app = new Retool.SystemProject(appName);
            var src = new Retool.VM.Src();
            var async = Retool.makeAsync(function (err, volume) {
                if (err) {
                    return callback(err);
                }
                else {
                    return callback(null, volume);
                }
            });
            var files = src.getVolume(context, async);
        };
        Server.systemModelTypes = [];
        Server.databases = {};
        return Server;
    })();
    Retool.Server = Server;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var IDE;
    (function (IDE) {
        var ElementAttribute = (function () {
            function ElementAttribute(name) {
                this.name = name;
            }
            return ElementAttribute;
        })();
        IDE.ElementAttribute = ElementAttribute;
    })(IDE = Retool.IDE || (Retool.IDE = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var IDE;
    (function (IDE) {
        var ElementAttributeList = (function () {
            function ElementAttributeList() {
                this.list = [];
            }
            ElementAttributeList.prototype.add = function (attr) {
                this.list.push(attr);
            };
            ElementAttributeList.prototype.addTextProp = function (name, text, options) {
                var a = new IDE.ElementAttribute(name);
                a.text = text;
                a.type = "text";
                if (options) {
                    a.allowNonDrop = options.allowNonDrop;
                    a.droptype = options.droptype;
                    a.dropItems = options.dropItems;
                }
                this.list.push(a);
            };
            ElementAttributeList.prototype.addCheckbox = function (name, text) {
                var a = new IDE.ElementAttribute(name);
                a.type = "checkbox";
                a.text = text;
                this.list.push(a);
            };
            ElementAttributeList.prototype.addNote = function (name, text, options) {
                var a = new IDE.ElementAttribute(name);
                a.type = "note";
                a.text = text;
                if (options) {
                    a.cssclass = options.cssclass;
                }
                this.list.push(a);
            };
            ElementAttributeList.prototype.addKindProp = function (type, name, text) {
                var a = new IDE.ElementAttribute(name);
                a.type = type;
                a.text = text;
                this.list.push(a);
            };
            ElementAttributeList.prototype.concat = function (list) {
                if (!list)
                    return;
                var items = list.list;
                for (var i = 0; i < items.length; i++) {
                    this.list.push(items[i]);
                }
            };
            return ElementAttributeList;
        })();
        IDE.ElementAttributeList = ElementAttributeList;
    })(IDE = Retool.IDE || (Retool.IDE = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ElementFunctions = (function () {
        function ElementFunctions(elem) {
            this.elem = elem;
        }
        ElementFunctions.prototype.firstChildOfKind = function (kind) {
            var children = this.elem.children;
            if (children) {
                for (var i = 0; i < children.length; i++) {
                    if (children[i].kind == kind) {
                        return children[i];
                    }
                }
            }
            return null;
        };
        return ElementFunctions;
    })();
    Retool.ElementFunctions = ElementFunctions;
    function Element(elem) {
        return new ElementFunctions(elem);
    }
    Retool.Element = Element;
})(Retool || (Retool = {}));
/*
    source from parse5.js
*/
var Retool;
(function (Retool) {
    var IDE;
    (function (IDE) {
        var HTMLParser = (function () {
            function HTMLParser() {
            }
            HTMLParser.parse = function (code) {
                var htmlParser = new HTMLParser();
                var parser = new HTMLParser.parse5.Parser(HTMLParser.parse5.TreeAdapters.htmlparser2);
                var tree = parser.parseFragment(code);
                return htmlParser.translate(tree);
            };
            HTMLParser.prototype.translate = function (tree) {
                var root = {};
                if (tree && tree.children && tree.children.length) {
                    for (var i = 0, m = tree.children.length; i < m; i++) {
                        var node = tree.children[i];
                        this.parseNode(node, root);
                    }
                }
                return root.children || [];
            };
            HTMLParser.prototype.parseNode = function (node, root) {
                if (node.type === "tag") {
                    this.buildHTMLElement(node, root);
                }
                else if (node.type === "text") {
                    this.buildHTMLLiteral(node, root);
                }
            };
            HTMLParser.prototype.buildHTMLElement = function (node, parent) {
                var element = {
                    kind: node.name
                };
                parent.children = parent.children || [];
                parent.children.push(element);
                var attributes = node.attribs;
                if (attributes) {
                    for (var name in attributes) {
                        var value = attributes[name];
                        if (name === 'class') {
                            name = 'cssclass';
                        }
                        if (name !== 'kind' && name !== 'children') {
                            element[name] = value;
                        }
                    }
                }
                if (node.children && node.children.length) {
                    for (var i = 0, m = node.children.length; i < m; i++) {
                        var child = node.children[i];
                        this.parseNode(child, element);
                    }
                }
            };
            HTMLParser.prototype.buildHTMLLiteral = function (node, parent) {
                var value = node.data;
                if (typeof value === "string") {
                    value = value.replace(/\n/g, "").replace(/\t/g, "").replace(/\s+/g, " ");
                }
                var last;
                if (parent.children && parent.children.length) {
                    last = parent.children[parent.children.length - 1];
                }
                if (value && value !== " ") {
                    if (!parent.text && !parent.children) {
                        parent.text = value;
                    }
                    else if (!last) {
                        parent.text += value;
                    }
                    else if (last.kind === "text") {
                        last.text += value;
                    }
                    else {
                        parent.children = parent.children || [];
                        parent.children.push({
                            kind: 'text',
                            text: value
                        });
                    }
                }
            };
            HTMLParser.isSelfClosing = function (tag) {
                tag = tag.toUpperCase();
                return (tag === "AREA" || tag === "BASE" || tag === "BASEFONT" || tag === "BGSOUND" || tag === "BR" || tag === "COL" || tag === "EMBED" || tag === "FRAME" || tag === "HR" || tag === "IMG" || tag === "INPUT" || tag === "KEYGEN" || tag === "LINK" || tag === "MENUITEM" || tag === "META" || tag === "PARAM" || tag === "SOURCE" || tag === "TRACK" || tag === "WBR");
            };
            return HTMLParser;
        })();
        IDE.HTMLParser = HTMLParser;
    })(IDE = Retool.IDE || (Retool.IDE = {}));
})(Retool || (Retool = {}));
/*
    source from esprima.js
*/
var Retool;
(function (Retool) {
    var IDE;
    (function (IDE) {
        var JavascriptParser = (function () {
            function JavascriptParser() {
            }
            JavascriptParser.parse = function (code, options) {
                if (!options) {
                    options = { tracking: true };
                }
                var parserOptions = {};
                if (options.tracking) {
                    parserOptions["loc"] = true;
                }
                var syntaxTree = JavascriptParser.esprima.parse(code, parserOptions);
                return syntaxTree;
            };
            JavascriptParser.tokenize = function (code) {
                return JavascriptParser.esprima.tokenize(code);
            };
            return JavascriptParser;
        })();
        IDE.JavascriptParser = JavascriptParser;
    })(IDE = Retool.IDE || (Retool.IDE = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var IDE;
    (function (IDE) {
        var JavascriptCompiler = (function () {
            function JavascriptCompiler(options) {
                this.loop_level_flags = [];
                if (options) {
                    this.sourceFile = options.sourceFile;
                    this.appName = options.appName;
                    this.allowHTML = options.allowHTML;
                }
            }
            JavascriptCompiler.compileClass = function (className, code, options) {
                if (!options) {
                    options = { tracking: true };
                }
                var compiler = new JavascriptCompiler(options);
                compiler.sourceCode = code;
                var tree;
                try {
                    tree = IDE.JavascriptParser.parse(code, options);
                }
                catch (e) {
                    var error = JavascriptCompiler.castParseError(e, code);
                    if (options.sourceFile) {
                        error.source.filename = options.sourceFile.getFullName();
                    }
                    throw error;
                }
                if (!tree)
                    compiler.throwError("Invalid Option: syntax tree required.");
                compiler.init();
                compiler.initClass();
                compiler.buildClassStatements(tree.body);
                return compiler.classDefinition;
            };
            JavascriptCompiler.getSourceFromFunction = function (func) {
                var src = func.toString();
                var i = src.indexOf("{");
                src = src.substr(i + 1);
                i = src.lastIndexOf("}");
                src = src.substr(0, i);
                src = src.replace(/RetoolVMCode\./g, '');
                return src;
            };
            JavascriptCompiler.compileFunctionClass = function (func) {
                var src = JavascriptCompiler.getSourceFromFunction(func);
                return JavascriptCompiler.compileClass("", src, { tracking: true });
            };
            JavascriptCompiler.castParseError = function (e, code) {
                // because the syntax parser throws an exception with the format:
                // Line 1: Unexpected token >
                // we should format it's error into a json parseable object then rethrow
                var error = new Retool.VM.VMError();
                error.source = {};
                if (e.description) {
                    error.messages = [e.description];
                    error.source = {
                        type: "code",
                        line: e.lineNumber,
                        column: e.column,
                        codeLink: "Line: " + e.lineNumber,
                        id: e.lineNumber
                    };
                    var lines = code.split('\n');
                    if (e.lineNumber && e.lineNumber <= lines.length) {
                        error.source.codeText = lines[e.lineNumber - 1];
                    }
                }
                else {
                    error.messages = [e.toString()];
                }
                return error;
            };
            JavascriptCompiler.compileProject = function (code, options) {
                if (!options) {
                    options = { tracking: true };
                }
                var compiler = new JavascriptCompiler(options);
                compiler.sourceCode = code;
                var tree;
                try {
                    tree = IDE.JavascriptParser.parse(code, options);
                }
                catch (e) {
                    var error = JavascriptCompiler.castParseError(e, code);
                    if (options.sourceFile) {
                        error.source.filename = options.sourceFile.getFullName();
                    }
                    throw error;
                }
                return compiler.compileProject(tree);
            };
            JavascriptCompiler.compileProgram = function (code, options) {
                if (!options) {
                    options = { tracking: true };
                }
                var compiler = new JavascriptCompiler(options);
                compiler.sourceCode = code;
                var tree;
                try {
                    tree = IDE.JavascriptParser.parse(code, options);
                }
                catch (e) {
                    var error = JavascriptCompiler.castParseError(e, code);
                    if (options.sourceFile) {
                        error.source.filename = options.sourceFile.getFullName();
                    }
                    throw error;
                }
                return compiler.compileProgram(tree);
            };
            JavascriptCompiler.formatError = function (message, startLine, startColumn) {
                return '{"error": "' + message + '", "line": ' + startLine + ', "column": ' + startColumn + '}';
            };
            JavascriptCompiler.prototype.compileProgram = function (tree) {
                if (!tree)
                    this.throwError("Invalid Option: syntax tree required.");
                this.init();
                this.program = new IDE.Program();
                this.buildProgram(tree);
                return this.program;
            };
            JavascriptCompiler.prototype.compileProject = function (tree) {
                if (!tree)
                    this.throwError("Invalid Option: syntax tree required.");
                this.init();
                this.project = new IDE.Project();
                this.buildProject(tree);
                return this.project;
            };
            JavascriptCompiler.prototype.init = function () {
                this.start_line = 0;
                this.start_column = 0;
            };
            JavascriptCompiler.prototype.initClass = function () {
                this.classDefinition = new Retool.VM.Prototype("");
                this.classDefinition.properties = {};
                this.classDefinition.methods = {};
            };
            JavascriptCompiler.prototype.createLdValue = function (value) {
                return { "opcode": "ldvalue", "value": value, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createCrLoc = function (name, numArgs) {
                return { "opcode": "crloc", "name": name, "argCount": numArgs, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createCrProp = function (name, numArgs) {
                return { "opcode": "crprop", "name": name, "argCount": numArgs, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createLdLoc = function (name) {
                var namespace;
                if (name >= 'A' && name <= 'Z') {
                    var segments = name.split('.');
                    var n = segments.length;
                    name = segments.pop();
                    namespace = segments.join('.');
                }
                else if (name === "undefined") {
                    return { "opcode": "ldvalue", "value": undefined, "line": this.start_line, "column": this.start_column };
                }
                return { "opcode": "ldloc", "name": name, "line": this.start_line, "column": this.start_column, "namespace": namespace };
            };
            JavascriptCompiler.prototype.createLdProp = function (name) {
                return { "opcode": "ldprop", "name": name, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createLdPropC = function () {
                return { "opcode": "ldpropc", "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createLdThisProp = function (name) {
                return { "opcode": "ldthisprop", "name": name, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createLdThisPropC = function () {
                return { "opcode": "ldthispropc", "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createInc = function () {
                return { "opcode": "inc", "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createIncLoc = function (name) {
                return { "opcode": "incloc", "name": name, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createDec = function () {
                return { "opcode": "dec", "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createIncProp = function (name) {
                return { "opcode": "incprop", "name": name, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createDecLoc = function (name) {
                return { "opcode": "decloc", "name": name, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createDecProp = function (name) {
                return { "opcode": "decprop", "name": name, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createCallLoc = function (name, numArgs) {
                return { "opcode": "callloc", "name": name, "argCount": numArgs, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createCallProp = function (name, numArgs) {
                return { "opcode": "callprop", "name": name, "argCount": numArgs, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createCallPropC = function (numArgs) {
                return { "opcode": "callpropc", "argCount": numArgs, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createCallThisProp = function (name, numArgs) {
                return { "opcode": "callthisprop", "name": name, "argCount": numArgs, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createCallSuperProp = function (name, numArgs) {
                return { "opcode": "callsuper", "name": name, "argCount": numArgs, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createCallThisPropC = function (numArgs) {
                return { "opcode": "callthispropc", "argCount": numArgs, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createNewObj = function (name, numArgs) {
                return { "opcode": "newobj", "name": name, "argCount": numArgs, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createRetVal = function () {
                return { "opcode": "retval", "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createRet = function () {
                return { "opcode": "ret", "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createPop = function () {
                return { "opcode": "pop", "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createNot = function () {
                return { "opcode": "not", "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createNeg = function () {
                return { "opcode": "neg", "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createThrowValue = function () {
                return { "opcode": "throwvalue", "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createDebug = function () {
                return { "opcode": "debug", "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createDup = function () {
                return { "opcode": "dup", "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.pushBrFalse = function (instructions, steps) {
                var last = (instructions.length) ? instructions[instructions.length - 1] : null;
                var br = { "opcode": "brfalse", "offset": steps };
                if (last) {
                    br.line = last.line;
                    br.column = last.column;
                }
                else {
                    br.line = 1;
                    br.column = 1;
                }
                instructions.push(br);
            };
            JavascriptCompiler.prototype.pushBrTrue = function (instructions, steps) {
                var last = (instructions.length) ? instructions[instructions.length - 1] : null;
                var br = { "opcode": "brtrue", "offset": steps };
                if (last) {
                    br.line = last.line;
                    br.column = last.column;
                }
                else {
                    br.line = 1;
                    br.column = 1;
                }
                instructions.push(br);
            };
            JavascriptCompiler.prototype.pushBr = function (instructions, steps) {
                var last = (instructions.length) ? instructions[instructions.length - 1] : null;
                var br = { "opcode": "br", "offset": steps };
                if (last) {
                    br.line = last.line;
                    br.column = last.column;
                }
                else {
                    br.line = 1;
                    br.column = 1;
                }
                instructions.push(br);
            };
            JavascriptCompiler.prototype.createBr = function (steps) {
                return { "opcode": "br", "offset": steps, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createStLoc = function (name) {
                return { "opcode": "stloc", "name": name, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createStProp = function (name) {
                return { "opcode": "stprop", "name": name, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createStPropC = function () {
                return { "opcode": "stpropc", "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createStThisProp = function (name) {
                return { "opcode": "stthisprop", "name": name, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createStThisPropC = function () {
                return { "opcode": "stthispropc", "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createLdValueThis = function () {
                return { "opcode": "ldvaluethis", "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createStPropLv = function (name) {
                return { "opcode": "stproplv", "name": name, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createGetEnum = function (name) {
                return { "opcode": "getenum", "name": name, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createNextEnum = function (name, offset, iteratorId) {
                return { "opcode": "nextenum", "name": name, "offset": offset, "enumprop": iteratorId, "line": this.start_line, "column": this.start_column };
            };
            JavascriptCompiler.prototype.createBinaryOperator = function (operator) {
                switch (operator) {
                    case "+":
                        return { "opcode": "add", "line": this.start_line, "column": this.start_column };
                    case "-":
                        return { "opcode": "sub", "line": this.start_line, "column": this.start_column };
                    case "*":
                        return { "opcode": "mult", "line": this.start_line, "column": this.start_column };
                    case "/":
                        return { "opcode": "div", "line": this.start_line, "column": this.start_column };
                    case "%":
                        return { "opcode": "rem", "line": this.start_line, "column": this.start_column };
                    case "!=":
                        return { "opcode": "cmpnoteq", "line": this.start_line, "column": this.start_column };
                    case "!==":
                        return { "opcode": "cmpstnoteq", "line": this.start_line, "column": this.start_column };
                    case "==":
                        return { "opcode": "cmpeq", "line": this.start_line, "column": this.start_column };
                    case "===":
                        return { "opcode": "cmpsteq", "line": this.start_line, "column": this.start_column };
                    case ">":
                        return { "opcode": "cmpgreater", "line": this.start_line, "column": this.start_column };
                    case "<":
                        return { "opcode": "cmpless", "line": this.start_line, "column": this.start_column };
                    case ">=":
                        return { "opcode": "cmpgreatereq", "line": this.start_line, "column": this.start_column };
                    case "<=":
                        return { "opcode": "cmplesseq", "line": this.start_line, "column": this.start_column };
                    default:
                        this.throwError(operator + ' is not a supported operator');
                }
            };
            JavascriptCompiler.prototype.createAssignmentOperator = function (operator) {
                var instructions = [];
                switch (operator) {
                    case "=":
                        break;
                    case "+=":
                        instructions.push(this.createBinaryOperator("+"));
                        break;
                    case "-=":
                        instructions.push(this.createBinaryOperator("-"));
                        break;
                    case "/=":
                        instructions.push(this.createBinaryOperator("/"));
                        break;
                    case "*=":
                        instructions.push(this.createBinaryOperator("*"));
                        break;
                    default:
                        this.throwError("unknown assigment operator");
                }
                return instructions;
            };
            JavascriptCompiler.prototype.track = function (statement) {
                if (statement.loc) {
                    this.start_line = statement.loc.start.line;
                    this.start_column = statement.loc.start.column;
                }
            };
            JavascriptCompiler.prototype.buildHTMLExpression = function (expression, element) {
                switch (expression.type) {
                    case "XJSElement":
                        this.track(expression);
                        return this.buildHTMLElement(expression, element);
                    case "Literal":
                        this.track(expression);
                        return this.buildHTMLLiteral(expression, element);
                }
            };
            JavascriptCompiler.prototype.buildHTMLElement = function (expression, parent) {
                var element = {
                    kind: expression.openingElement.name.name
                };
                parent.children = parent.children || [];
                parent.children.push(element);
                var attributes = expression.openingElement.attributes;
                if (attributes && attributes.length) {
                    for (var i = 0, m = attributes.length; i < m; i++) {
                        var attribute = attributes[i], name = attribute.name.name;
                        if (name === 'class') {
                            name = 'cssclass';
                        }
                        if (name !== 'kind' && name !== 'children') {
                            element[name] = attribute.value.value;
                        }
                    }
                }
                if (expression.children && expression.children.length) {
                    for (var i = 0, m = expression.children.length; i < m; i++) {
                        var child = expression.children[i];
                        this.buildHTMLExpression(child, element);
                    }
                }
            };
            JavascriptCompiler.prototype.buildHTMLLiteral = function (expression, parent) {
                var value = expression.value;
                if (typeof value === "string") {
                    value = value.replace(/\n/g, "").replace(/\t/g, "").replace(/\s+/g, " ");
                }
                var last;
                if (parent.children && parent.children.length) {
                    last = parent.children[parent.children.length - 1];
                }
                if (value && value !== " ") {
                    if (!parent.text) {
                        parent.text = value;
                    }
                    else if (!last) {
                        parent.text += value;
                    }
                    else if (last.kind === "text") {
                        last.text += value;
                    }
                    else {
                        parent.children = parent.children || [];
                        parent.children.push({
                            kind: 'text',
                            text: value
                        });
                    }
                }
            };
            JavascriptCompiler.prototype.buildStatement = function (statement) {
                switch (statement.type) {
                    case "FunctionDeclaration":
                        this.track(statement);
                        this.throwError("function declaration not supported");
                    case "VariableDeclaration":
                        this.track(statement);
                        return this.buildVariableDeclaration(statement);
                    case "ArrayExpression":
                        return this.buildArrayExpression(statement);
                    case "BinaryExpression":
                        return this.buildBinaryExpression(statement);
                    case "UpdateExpression":
                        return this.buildUpdateExpression(statement);
                    case "NewExpression":
                        return this.buildNewExpression(statement);
                    case "ObjectExpression":
                        return this.buildObjectExpression(statement);
                    case "ThisExpression":
                        return this.buildThisExpression(statement);
                    case "UnaryExpression":
                        return this.buildUnaryExpression(statement);
                    case "MemberExpression":
                        return this.buildMemberExpression(statement);
                    case "AssignmentExpression":
                        return this.buildAssignmentExpression(statement);
                    case "LogicalExpression":
                        return this.buildLogicalExpression(statement);
                    case "ConditionalExpression":
                        return this.buildConditionalExpression(statement);
                    case "CallExpression":
                        return this.buildCallExpression(statement);
                    case "Literal":
                        return this.buildLiteral(statement);
                    case "Identifier":
                        return this.buildIdentifier(statement);
                    case "BlockStatement":
                        return this.buildBlockStatement(statement);
                    case "ExpressionStatement":
                        this.track(statement);
                        return this.buildExpressionStatement(statement);
                    case "ForStatement":
                        this.track(statement);
                        return this.buildForStatement(statement);
                    case "ForInStatement":
                        this.track(statement);
                        return this.buildForInStatement(statement);
                    case "WhileStatement":
                        this.track(statement);
                        return this.buildWhileStatement(statement);
                    case "DoWhileStatement":
                        this.track(statement);
                        return this.buildDoWhileStatement(statement);
                    case "ReturnStatement":
                        this.track(statement);
                        return this.buildReturnStatement(statement);
                    case "IfStatement":
                        this.track(statement);
                        return this.buildIfStatement(statement);
                    case "BreakStatement":
                        this.track(statement);
                        return this.buildBreakStatement(statement);
                    case "ContinueStatement":
                        this.track(statement);
                        return this.buildContinueStatement(statement);
                    case "SwitchStatement":
                        this.track(statement);
                        return this.buildSwitchStatement(statement);
                    case "TryStatement":
                        this.track(statement);
                        return this.buildTryStatement(statement);
                    case "ThrowStatement":
                        this.track(statement);
                        return this.buildThrowStatement(statement);
                    case "DebuggerStatement":
                        this.track(statement);
                        return this.buildDebuggerStatement(statement);
                    case "EmptyStatement":
                        return [];
                    case "HTMLExpressionStatement":
                        this.throwError("Unexpected token <");
                    default:
                        this.track(statement);
                        this.throwError(statement.type + " is not yet supported");
                }
            };
            JavascriptCompiler.prototype.buildProgram = function (tree) {
                this.track(tree);
                if (tree.type !== "Program") {
                    this.throwError("invalid source tree");
                }
                var statement;
                for (var i = 0; i < tree.body.length; i++) {
                    statement = tree.body[i];
                    switch (statement.type) {
                        case "ClassDeclaration":
                            this.buildClass(statement);
                            break;
                        case "ObjectExpression":
                            var instructions = this.buildObjectExpression(statement);
                            var methodInfo = new Retool.VM.MethodInfo("");
                            methodInfo.instructions = instructions;
                            this.program.sections.push({
                                type: "json",
                                content: methodInfo
                            });
                            break;
                        case "HTMLExpressionStatement":
                            if (!this.allowHTML) {
                                this.throwError("only classes can be declared at the program level");
                                return;
                            }
                            var element = {};
                            this.buildHTMLExpression(statement.expression, element);
                            if (element.children && element.children.length) {
                                var child = element.children[0], last;
                                var sections = this.program.sections;
                                if (sections.length) {
                                    last = sections[sections.length - 1];
                                }
                                if (last && last.type === "html") {
                                    last.content.push(child);
                                }
                                else {
                                    sections.push({
                                        type: "html",
                                        content: [child]
                                    });
                                }
                            }
                            break;
                        default:
                            this.throwError("only classes can be declared at the program level");
                            break;
                    }
                }
                return this.program;
            };
            JavascriptCompiler.prototype.buildProject = function (tree) {
                this.track(tree);
                console.log(JSON.stringify(tree, null, 2));
                if (tree.type !== "Program") {
                    this.throwError("invalid project tree");
                }
                var statement;
                for (var i = 0; i < tree.body.length; i++) {
                    statement = tree.body[i];
                    if (statement.type === "HTMLExpressionStatement") {
                        var script = statement.expression.openingElement;
                        if (script.name.name === 'script') {
                            if (statement.expression.children && statement.expression.children.length) {
                                this.program = new IDE.Program();
                                this.program.attributes = {};
                                var program = this.buildProgram(statement.expression.children[0]);
                                statement.expression.children[0];
                                if (script.attributes && script.attributes.length) {
                                    for (var i = 0, m = script.attributes.length; i < m; i++) {
                                        var attribute = script.attributes[i];
                                        program.attributes[attribute.name.name] = attribute.value.value;
                                    }
                                    //console.log(program);
                                    this.project.programs.push(program);
                                }
                            }
                        }
                        else {
                            this.throwError("script tag expected");
                        }
                    }
                    else {
                        this.throwError("only templates allowed at the project level");
                    }
                }
                return this.project;
            };
            JavascriptCompiler.prototype.buildClass = function (classDeclaration) {
                this.initClass();
                this.classDefinition.name = classDeclaration.id.name;
                this.program.sections.push({
                    type: "class",
                    content: this.classDefinition,
                    loc: classDeclaration.loc
                });
                if (classDeclaration.baseId) {
                    this.classDefinition.baseName = classDeclaration.baseId.name;
                }
                var statements = classDeclaration.body.body;
                this.buildClassStatements(statements);
            };
            JavascriptCompiler.prototype.buildClassStatements = function (statements) {
                var statement;
                for (var i = 0; i < statements.length; i++) {
                    statement = statements[i];
                    switch (statement.type) {
                        case "FunctionDeclaration":
                            this.buildFunction(statement);
                            break;
                        case "VariableDeclaration":
                            this.buildGlobalVariableDeclaration(statement);
                            break;
                        default:
                            this.throwError("only functions and properties can be declared globally in the class");
                            break;
                    }
                }
            };
            JavascriptCompiler.prototype.buildFunction = function (functionDeclaration) {
                var i;
                var numStatements;
                var name = functionDeclaration.id.name;
                var method = new Retool.VM.MethodInfo(name);
                method.file = this.sourceFile;
                method.params = [];
                method.instructions = [];
                method.sourceLine = this.start_line;
                //iterators should be reset at the function level;
                this.iterator_stack = [];
                this.iterator_key = 0;
                numStatements = functionDeclaration.params.length;
                for (i = 0; i < numStatements; i++) {
                    var param = this.buildParameter(functionDeclaration.params[i]);
                    method.params.push(param);
                }
                numStatements = functionDeclaration.body.body.length;
                for (i = 0; i < numStatements; i++) {
                    var statement = functionDeclaration.body.body[i];
                    var instructions = this.buildStatement(statement);
                    method.instructions = method.instructions.concat(instructions);
                }
                if (name == "constructor") {
                    if (this.classDefinition.constructorMethod) {
                        this.throwError("duplicate constructor declaration");
                    }
                    this.classDefinition.constructorMethod = method;
                }
                else {
                    if (this.classDefinition.methods[method.name]) {
                        this.throwError("duplicate method declaration for " + method.name);
                    }
                    this.classDefinition.methods[method.name] = method;
                }
            };
            JavascriptCompiler.prototype.buildGlobalVariableDeclaration = function (variableDeclaration) {
                var initMethod = this.classDefinition.methods["__initClass"];
                if (!initMethod) {
                    initMethod = new Retool.VM.MethodInfo("__initClass");
                    initMethod.file = this.sourceFile;
                    initMethod.instructions = [];
                    this.classDefinition.methods["__initClass"] = initMethod;
                }
                initMethod.instructions = initMethod.instructions.concat(this.buildVariableDeclaration(variableDeclaration, { isProperty: true }));
            };
            JavascriptCompiler.prototype.buildVariableDeclaration = function (variableDeclaration, params) {
                if (params === void 0) { params = { isProperty: false }; }
                if (variableDeclaration.kind == "let") {
                    this.throwError("let keyword is not supported");
                }
                else if (variableDeclaration.kind == "const") {
                    this.throwError("const keyword is not supported");
                }
                var instructions = [];
                for (var i = 0; i < variableDeclaration.declarations.length; i++) {
                    var declaration = variableDeclaration.declarations[i];
                    this.track(declaration);
                    // inline assignment
                    var numArgs = 0;
                    if (declaration.init) {
                        var initInstructions = this.buildStatement(declaration.init);
                        instructions = instructions.concat(initInstructions);
                        numArgs = 1;
                    }
                    if (params && params.isProperty) {
                        var property = new Retool.VM.ClassProperty;
                        property.name = declaration.id.name;
                        this.classDefinition.properties[property.name] = property;
                        instructions.push(this.createCrProp(declaration.id.name, numArgs));
                    }
                    else {
                        instructions.push(this.createCrLoc(declaration.id.name, numArgs));
                    }
                }
                return instructions;
            };
            JavascriptCompiler.prototype.buildParameter = function (parameter) {
                return { name: parameter.name };
            };
            JavascriptCompiler.prototype.buildLiteral = function (literal) {
                if (literal.value instanceof RegExp) {
                }
                return [this.createLdValue(literal.value)];
            };
            JavascriptCompiler.prototype.buildIdentifier = function (identifier) {
                return [this.createLdLoc(identifier.name)];
            };
            JavascriptCompiler.prototype.getFullMemberName = function (expression) {
                if (expression.type == "Identifier") {
                    return expression.name;
                }
                else if (expression.type == "MemberExpression") {
                    return this.getFullMemberName(expression.object) + "." + expression.property.name;
                }
                else {
                    this.throwError(expression.callee.type + " member name callee type not supported");
                }
            };
            JavascriptCompiler.prototype.buildNewExpression = function (newExpression) {
                var typeName;
                if (newExpression.callee.type == "MemberExpression" || newExpression.callee.type == "Identifier") {
                    typeName = this.qualifyTypeName(this.getFullMemberName(newExpression.callee));
                }
                else {
                    this.throwError(newExpression.callee.type + " new expression callee type not supported");
                }
                var numArgs = newExpression.arguments.length;
                var instructions = this.parseArguments(newExpression.arguments);
                instructions.push(this.createNewObj(typeName, numArgs));
                return instructions;
            };
            JavascriptCompiler.prototype.qualifyTypeName = function (name) {
                var segments = name.split('.');
                /*
                if (segments.length == 2){
                    return "Models." + name;
                }
                */
                return name;
            };
            JavascriptCompiler.prototype.buildObjectExpression = function (objectExpression) {
                var instructions = [];
                var numProperties = objectExpression.properties.length;
                var property;
                var propertyName;
                instructions.push(this.createNewObj("Object", 0));
                for (var i = 0; i < numProperties; i++) {
                    property = objectExpression.properties[i];
                    if (property.kind !== "init") {
                        this.track(property);
                        this.throwError(property.kind + ' kind of property is not supported');
                    }
                    switch (property.key.type) {
                        case "Identifier":
                            propertyName = property.key.name;
                            break;
                        case "Literal":
                            propertyName = property.key.value;
                            break;
                        default:
                            this.throwError(objectExpression.key.type + " property key type not supported");
                    }
                    instructions = instructions.concat(this.buildStatement(property.value));
                    instructions.push(this.createStPropLv(propertyName));
                }
                return instructions;
            };
            JavascriptCompiler.prototype.buildThisExpression = function (thisExpressionStatement) {
                var instructions = [];
                instructions.push(this.createLdValueThis());
                return instructions;
            };
            JavascriptCompiler.prototype.buildArrayExpression = function (arrayExpression) {
                var instructions = [];
                var numElements = arrayExpression.elements.length;
                for (var i = 0; i < numElements; i++) {
                    instructions = instructions.concat(this.buildStatement(arrayExpression.elements[i]));
                }
                instructions.push(this.createNewObj("Array", numElements));
                return instructions;
            };
            JavascriptCompiler.prototype.buildExpressionStatement = function (expression) {
                var instructions = this.buildStatement(expression.expression);
                instructions.push(this.createPop()); // throw away the remaining value on the stack
                return instructions;
            };
            JavascriptCompiler.prototype.buildBlockStatement = function (blockStatement) {
                var instructions = [];
                var statement;
                for (var i = 0; i < blockStatement.body.length; i++) {
                    statement = blockStatement.body[i];
                    instructions = instructions.concat(this.buildStatement(statement));
                }
                return instructions;
            };
            JavascriptCompiler.prototype.parseArguments = function (args) {
                var instructions = [];
                var argument;
                for (var i = 0; i < args.length; i++) {
                    argument = args[i];
                    instructions = instructions.concat(this.buildStatement(argument));
                }
                return instructions;
            };
            JavascriptCompiler.prototype.buildMemberExpression = function (memberExpression) {
                var instructions = [];
                if (memberExpression.object.type === "ThisExpression") {
                    if (memberExpression.computed === true) {
                        instructions = instructions.concat(this.buildStatement(memberExpression.property));
                        instructions.push(this.createLdThisPropC());
                    }
                    else {
                        instructions.push(this.createLdThisProp(memberExpression.property.name));
                    }
                }
                else {
                    instructions = instructions.concat(this.buildStatement(memberExpression.object));
                    if (memberExpression.computed === true) {
                        instructions = instructions.concat(this.buildStatement(memberExpression.property));
                        instructions.push(this.createLdPropC());
                    }
                    else {
                        var name = memberExpression.property.name;
                        instructions.push(this.createLdProp(name));
                    }
                }
                return instructions;
            };
            JavascriptCompiler.prototype.buildCallExpression = function (callExpression) {
                var instructions = [];
                switch (callExpression.callee.type) {
                    case "Identifier":
                        instructions = this.parseArguments(callExpression.arguments);
                        instructions.push(this.createCallLoc(callExpression.callee.name, callExpression.arguments.length));
                        break;
                    case "MemberExpression":
                        instructions = this.buildCallExpressionForMember(callExpression);
                        break;
                    default:
                        this.throwError(callExpression.callee.type + " call expression callee type not supported");
                }
                return instructions;
            };
            JavascriptCompiler.prototype.buildCallExpressionForMember = function (callExpression) {
                var instructions = [];
                var createCallInstructionFunction;
                var numArgs = callExpression.arguments.length;
                // since we have a callthisprop instruction we don't need to ldvaluethis
                if (callExpression.callee.object.name == "super") {
                    createCallInstructionFunction = this.createCallSuperProp;
                }
                else if (callExpression.callee.object.type !== "ThisExpression") {
                    instructions = instructions.concat(this.buildStatement(callExpression.callee.object));
                    createCallInstructionFunction = this.createCallProp;
                }
                else {
                    createCallInstructionFunction = this.createCallThisProp;
                }
                instructions = instructions.concat(this.parseArguments(callExpression.arguments));
                if (callExpression.callee.computed) {
                    instructions = instructions.concat(this.buildStatement(callExpression.callee.property));
                    if (callExpression.callee.object.type === "ThisExpression") {
                        instructions.push(this.createCallThisPropC(numArgs));
                    }
                    else {
                        instructions.push(this.createLdPropC());
                        instructions.push(this.createCallPropC(numArgs));
                    }
                }
                else {
                    instructions.push(createCallInstructionFunction.apply(this, [callExpression.callee.property.name, numArgs]));
                }
                return instructions;
            };
            JavascriptCompiler.prototype.buildUpdateExpressionForMemberCalculatedProperty = function (updateExpression) {
                var instructions = [];
                var updateInstructionFunction;
                switch (updateExpression.operator) {
                    case "++":
                        updateInstructionFunction = this.createInc;
                        break;
                    case "--":
                        updateInstructionFunction = this.createDec;
                        break;
                    default:
                        this.throwError(updateExpression.operator + "  not supported on object properties");
                }
                if (updateExpression.argument.object.type !== "ThisExpression") {
                    instructions = instructions.concat(this.buildStatement(updateExpression.argument.object));
                    instructions = instructions.concat(this.buildStatement(updateExpression.argument.property));
                    instructions.push(this.createLdPropC());
                    instructions.push(updateInstructionFunction.apply(this));
                    instructions.push(this.createStPropC());
                }
                else {
                    instructions = instructions.concat(this.buildStatement(updateExpression.argument.property));
                    instructions.push(this.createLdThisPropC());
                    instructions.push(updateInstructionFunction.apply(this));
                    instructions.push(this.createStThisPropC());
                }
                return instructions;
            };
            JavascriptCompiler.prototype.buildUpdateExpressionForMember = function (updateExpression) {
                var instructions = [];
                var updateInstructionFunction;
                // we don't have an incpropc function so we must expand the instructions to do
                // a regular inc and stpropc on calculated properties ie: foo["bar"]++
                if (updateExpression.argument.computed) {
                    return this.buildUpdateExpressionForMemberCalculatedProperty(updateExpression);
                }
                if (updateExpression.argument.property.type !== "Identifier") {
                    this.throwError(updateExpression.argument.property.type + " was an unexpected property type.  expecting identifier.");
                }
                var prefix = updateExpression.prefix;
                switch (updateExpression.operator) {
                    case "++":
                        updateInstructionFunction = (prefix) ? this.createInc : this.createIncProp;
                        break;
                    case "--":
                        updateInstructionFunction = prefix ? this.createDec : this.createDecProp;
                        break;
                    default:
                        this.throwError(updateExpression.operator + "  not supported on object properties");
                }
                instructions = instructions.concat(this.buildStatement(updateExpression.argument.object));
                if (updateExpression.prefix) {
                    instructions.push(this.createLdProp(updateExpression.argument.property.name));
                    instructions.push(updateInstructionFunction.apply(this));
                    instructions.push(this.createStProp(updateExpression.argument.property.name));
                }
                else {
                    instructions.push(updateInstructionFunction.apply(this, [updateExpression.argument.property.name]));
                }
                return instructions;
            };
            JavascriptCompiler.prototype.buildUpdateExpressionForIdentifier = function (updateExpression) {
                var instructions = [];
                var loc = updateExpression.argument.name;
                var updateInstructionFunction;
                switch (updateExpression.operator) {
                    case "++":
                        updateInstructionFunction = updateExpression.prefix ? this.createInc : this.createIncLoc;
                        break;
                    case "--":
                        updateInstructionFunction = updateExpression.prefix ? this.createDec : this.createDecLoc;
                        break;
                    default:
                        this.throwError(updateExpression.operator + "  not supported");
                }
                if (updateExpression.argument.type == "Identifier") {
                    if (updateExpression.prefix) {
                        instructions.push(this.createLdLoc(loc));
                        instructions.push(updateInstructionFunction.apply(this));
                        instructions.push(this.createStLoc(loc));
                    }
                    else {
                        instructions.push(updateInstructionFunction.apply(this, [loc]));
                    }
                }
                return instructions;
            };
            JavascriptCompiler.prototype.buildUpdateExpression = function (updateExpression) {
                var instructions;
                switch (updateExpression.argument.type) {
                    case "Identifier":
                        instructions = this.buildUpdateExpressionForIdentifier(updateExpression);
                        break;
                    case "MemberExpression":
                        instructions = this.buildUpdateExpressionForMember(updateExpression);
                        break;
                    default:
                        this.throwError(updateExpression.argument.type + " not supported yet for update expression");
                }
                return instructions;
            };
            JavascriptCompiler.prototype.isSelfAssignmentOperator = function (operator) {
                return ["+=", "-=", "/=", "*="].indexOf(operator) !== -1;
            };
            JavascriptCompiler.prototype.buildAssignmentExpression = function (assignmentExpression) {
                switch (assignmentExpression.left.type) {
                    case "Identifier":
                        return this.buildAssignmentExpressionForIdentifier(assignmentExpression);
                    case "MemberExpression":
                        if (assignmentExpression.left.object.type === "ThisExpression") {
                            return this.buildAssignmentExpressionForThis(assignmentExpression);
                        }
                        else {
                            return this.buildAssignmentExpressionForMember(assignmentExpression);
                        }
                    default:
                        this.track(assignmentExpression.left);
                        this.throwError(assignmentExpression.left.type + " not supported on left side of assigment");
                }
            };
            JavascriptCompiler.prototype.buildAssignmentExpressionForIdentifier = function (assignmentExpression) {
                var instructions = [];
                var operatorInstructions = [];
                var rightInstructions = this.buildStatement(assignmentExpression.right);
                if (this.isSelfAssignmentOperator(assignmentExpression.operator)) {
                    instructions = this.buildStatement(assignmentExpression.left);
                }
                operatorInstructions = this.createAssignmentOperator(assignmentExpression.operator);
                operatorInstructions.push(this.createStLoc(assignmentExpression.left.name));
                instructions = instructions.concat(rightInstructions, operatorInstructions);
                return instructions;
            };
            JavascriptCompiler.prototype.buildAssignmentExpressionForMember = function (assignmentExpression) {
                var instructions = [];
                var operatorInstructions = [];
                var rightInstructions = this.buildStatement(assignmentExpression.right);
                var isSelfAssignmentExpression = this.isSelfAssignmentOperator(assignmentExpression.operator);
                instructions = this.buildStatement(assignmentExpression.left.object);
                if (assignmentExpression.left.computed) {
                    instructions = instructions.concat(this.buildStatement(assignmentExpression.left.property));
                    if (isSelfAssignmentExpression) {
                        instructions = instructions.concat(instructions);
                        instructions.push(this.createLdPropC());
                    }
                    operatorInstructions = this.createAssignmentOperator(assignmentExpression.operator);
                    operatorInstructions.push(this.createStPropC());
                }
                else {
                    if (assignmentExpression.left.property.type !== 'Identifier') {
                        this.throwError(assignmentExpression.left.property.type + " property type not supported on left hand side of assignment");
                    }
                    if (isSelfAssignmentExpression) {
                        instructions.push(this.createDup());
                        instructions.push(this.createLdProp(assignmentExpression.left.property.name));
                    }
                    operatorInstructions = this.createAssignmentOperator(assignmentExpression.operator);
                    operatorInstructions.push(this.createStProp(assignmentExpression.left.property.name));
                }
                instructions = instructions.concat(rightInstructions, operatorInstructions);
                return instructions;
            };
            JavascriptCompiler.prototype.buildAssignmentExpressionForThis = function (assignmentExpression) {
                var instructions = [];
                var operatorInstructions = [];
                var rightInstructions = this.buildStatement(assignmentExpression.right);
                var isSelfAssignmentExpression = this.isSelfAssignmentOperator(assignmentExpression.operator);
                if (assignmentExpression.left.computed) {
                    instructions = instructions.concat(this.buildStatement(assignmentExpression.left.property));
                    if (isSelfAssignmentExpression) {
                        instructions = instructions.concat(instructions);
                        instructions.push(this.createLdThisPropC());
                    }
                    operatorInstructions = this.createAssignmentOperator(assignmentExpression.operator);
                    operatorInstructions.push(this.createStThisPropC());
                }
                else {
                    if (assignmentExpression.left.property.type !== 'Identifier') {
                        this.throwError(assignmentExpression.left.property.type + " property type not supported on left hand side of assignment");
                    }
                    if (isSelfAssignmentExpression) {
                        instructions.push(this.createDup());
                        instructions.push(this.createLdThisProp(assignmentExpression.left.property.name));
                    }
                    operatorInstructions = this.createAssignmentOperator(assignmentExpression.operator);
                    operatorInstructions.push(this.createStThisProp(assignmentExpression.left.property.name));
                }
                instructions = instructions.concat(rightInstructions, operatorInstructions);
                return instructions;
            };
            JavascriptCompiler.prototype.buildBinaryExpression = function (binaryExpression) {
                var instructions = [];
                var leftInstructions = this.buildStatement(binaryExpression.left);
                var rightInstructions = this.buildStatement(binaryExpression.right);
                var operatorInstruction = this.createBinaryOperator(binaryExpression.operator);
                instructions = instructions.concat(leftInstructions, rightInstructions);
                instructions.push(operatorInstruction);
                return instructions;
            };
            JavascriptCompiler.prototype.buildUnaryExpression = function (unaryExpression) {
                var instructions = this.buildStatement(unaryExpression.argument);
                switch (unaryExpression.operator) {
                    case "!":
                        instructions.push(this.createNot());
                        break;
                    case "-":
                        instructions.push(this.createNeg());
                        break;
                    case "+":
                        break;
                    case "delete":
                        var last = instructions[instructions.length - 1];
                        if (last.opcode == "ldprop") {
                            last.opcode = "delprop";
                        }
                        else if (last.opcode == "ldpropc") {
                            last.opcode = "delpropc";
                        }
                        else {
                            this.throwError("invalid delete statement");
                        }
                        break;
                    default:
                        this.throwError("unary expression operator " + unaryExpression.operator + " not supported");
                }
                return instructions;
            };
            JavascriptCompiler.prototype.buildLogicalExpression = function (logicalExpression) {
                var instructions = [];
                var leftInstructions = this.buildStatement(logicalExpression.left);
                var rightInstructions = this.buildStatement(logicalExpression.right);
                instructions = instructions.concat(leftInstructions);
                instructions.push(this.createDup());
                switch (logicalExpression.operator) {
                    case "&&":
                        this.pushBrFalse(instructions, rightInstructions.length + 1);
                        break;
                    case "||":
                        this.pushBrTrue(instructions, rightInstructions.length + 1);
                        break;
                }
                instructions.push(this.createPop());
                instructions = instructions.concat(rightInstructions);
                return instructions;
            };
            JavascriptCompiler.prototype.buildConditionalExpression = function (conditionalExpression) {
                return this.buildIfStatement(conditionalExpression);
            };
            JavascriptCompiler.prototype.buildBranch = function (instructions, consequentInstructions, alternateInstructions) {
                this.pushBrFalse(instructions, consequentInstructions.length);
                instructions = instructions.concat(consequentInstructions, alternateInstructions);
                return instructions;
            };
            JavascriptCompiler.prototype.buildIfStatement = function (ifStatement) {
                var instructions = [];
                var consequentInstructions = [];
                var alternateInstructions = [];
                if (ifStatement.test.type === "AssignmentExpression") {
                    this.throwError('Assignment (=) is not allowed here, possibly you intended to use == for equality comparison');
                }
                instructions = this.buildStatement(ifStatement.test);
                var ifLine = this.start_line;
                if (ifStatement.consequent) {
                    consequentInstructions = this.buildStatement(ifStatement.consequent);
                }
                if (ifStatement.alternate) {
                    alternateInstructions = this.buildStatement(ifStatement.alternate);
                    this.pushBr(consequentInstructions, alternateInstructions.length);
                }
                instructions = this.buildBranch(instructions, consequentInstructions, alternateInstructions);
                return instructions;
            };
            JavascriptCompiler.prototype.buildTryStatement = function (tryStatement) {
                var tryBlock = new Retool.VM.TryCatchFinallyBlock();
                tryBlock.block = this.buildStatement(tryStatement.block);
                if (tryStatement.handlers && tryStatement.handlers.length > 0) {
                    tryBlock.handler = this.buildStatement(tryStatement.handlers[0].body);
                    tryBlock.handlerParameterName = tryStatement.handlers[0].param.name;
                }
                if (tryStatement.finalizer) {
                    tryBlock.finalizer = this.buildStatement(tryStatement.finalizer);
                }
                return [{ opcode: "tryblock", data: tryBlock }];
            };
            JavascriptCompiler.prototype.buildWhileStatement = function (whileStatement) {
                var instructions = [];
                var bodyInstructions = [];
                var testInstructionsLength = 0;
                if (whileStatement.test) {
                    instructions = this.buildStatement(whileStatement.test);
                    testInstructionsLength = instructions.length;
                }
                bodyInstructions = this.buildBreakableStatement(whileStatement.body, testInstructionsLength, 1);
                if (whileStatement.test) {
                    this.pushBrFalse(instructions, bodyInstructions.length + 1);
                }
                instructions = instructions.concat(bodyInstructions);
                this.pushBr(instructions, -(bodyInstructions.length + testInstructionsLength + 2));
                return instructions;
            };
            JavascriptCompiler.prototype.buildDoWhileStatement = function (doWhileStatement) {
                var instructions = [];
                instructions = this.buildBreakableStatement(doWhileStatement.body, instructions.length, 0);
                if (doWhileStatement.test) {
                    instructions = instructions.concat(this.buildStatement(doWhileStatement.test));
                    this.pushBrFalse(instructions, 1);
                }
                this.pushBr(instructions, -(instructions.length + 1));
                return instructions;
            };
            JavascriptCompiler.prototype.buildForStatement = function (forStatement) {
                var instructions = [];
                var testInstructions = [];
                var updateInstructions = [];
                var bodyInstructions = [];
                if (forStatement.init) {
                    instructions = this.buildStatement(forStatement.init);
                }
                if (forStatement.test) {
                    testInstructions = this.buildStatement(forStatement.test);
                    instructions = instructions.concat(testInstructions);
                }
                if (forStatement.update) {
                    updateInstructions = this.buildStatement(forStatement.update);
                }
                bodyInstructions = this.buildBreakableStatement(forStatement.body, testInstructions.length, 2, updateInstructions.length);
                this.pushBrFalse(instructions, bodyInstructions.length + updateInstructions.length + 1);
                instructions = instructions.concat(bodyInstructions, updateInstructions);
                this.pushBr(instructions, -(bodyInstructions.length + updateInstructions.length + testInstructions.length + 2));
                return instructions;
            };
            JavascriptCompiler.prototype.buildForInStatement = function (forInStatement) {
                var iteratorId = this.uniqueIteratorId();
                var instructions = this.buildStatement(forInStatement.right);
                var bodyInstructions = this.buildStatement(forInStatement.body);
                var identifier;
                if (forInStatement.left.type !== 'Identifier' && forInStatement.left.type !== "VariableDeclaration") {
                    this.throwError(forInStatement.left.type + ' is not supported on left hand side of forin statement');
                }
                if (forInStatement.left.type === "VariableDeclaration") {
                    identifier = forInStatement.left.declarations[0].id.name;
                    instructions = instructions.concat(this.buildStatement(forInStatement.left));
                }
                else {
                    identifier = forInStatement.left.name;
                }
                instructions.push(this.createGetEnum(iteratorId));
                instructions.push(this.createNextEnum(identifier, bodyInstructions.length + 1, iteratorId));
                instructions = instructions.concat(bodyInstructions);
                this.pushBr(instructions, -(bodyInstructions.length + 2));
                this.removeUniqueItertatorId(iteratorId);
                return instructions;
            };
            JavascriptCompiler.prototype.uniqueIteratorId = function () {
                var iteratorId = '_enum_' + (this.iterator_key);
                this.iterator_stack.push(iteratorId);
                this.iterator_key += 1;
                return iteratorId;
            };
            JavascriptCompiler.prototype.removeUniqueItertatorId = function (iteratorId) {
                this.iterator_stack.splice(this.iterator_stack.indexOf(iteratorId), 1);
            };
            JavascriptCompiler.prototype.buildBreakStatement = function (breakStatement) {
                this.loop_level_flags[this.loop_level_flags.length - 1].has_break = true;
                return [this.createBr("BRK")];
            };
            JavascriptCompiler.prototype.buildContinueStatement = function (continueStatement) {
                this.loop_level_flags[this.loop_level_flags.length - 1].has_continue = true;
                return [this.createBr("CNT")];
            };
            JavascriptCompiler.prototype.buildSwitchStatement = function (switchStatement) {
                var instructions = [];
                var numCases = switchStatement.cases.length;
                var numInstructions = 0;
                var caseStatement;
                var caseInstructions;
                var testInstructions;
                var valueInstructions = this.buildStatement(switchStatement.discriminant);
                instructions = instructions.concat(valueInstructions);
                var caseBodyInstructions;
                var hasBreak;
                for (var i = 0; i < numCases; i++) {
                    caseStatement = switchStatement.cases[i];
                    this.track(caseStatement);
                    if (caseStatement.type !== 'SwitchCase') {
                        this.throwError(caseStatement.type + ' not supported in switch statement');
                    }
                    if (caseStatement.test) {
                        testInstructions = [];
                        testInstructions.push(this.createDup());
                        testInstructions = testInstructions.concat(this.buildStatement(caseStatement.test));
                        testInstructions.push(this.createBinaryOperator("=="));
                    }
                    else {
                        testInstructions = [];
                    }
                    caseBodyInstructions = [];
                    var caseHasBreak = false;
                    for (var n = 0; n < caseStatement.consequent.length; n++) {
                        if (caseStatement.consequent[n].type === "BreakStatement") {
                            caseBodyInstructions.push(this.createBr("BRK"));
                            caseHasBreak = true;
                            hasBreak = true;
                        }
                        else {
                            caseBodyInstructions = caseBodyInstructions.concat(this.buildStatement(caseStatement.consequent[n]));
                        }
                    }
                    instructions = instructions.concat(testInstructions);
                    if (caseStatement.test) {
                        if (!caseHasBreak) {
                            this.track(caseStatement.consequent[n - 1]);
                            this.throwError("break statement required.");
                        }
                        this.pushBrFalse(instructions, caseBodyInstructions.length);
                    }
                    else {
                        caseBodyInstructions.push(this.createBr("BRK"));
                    }
                    instructions = instructions.concat(caseBodyInstructions);
                }
                instructions.push(this.createPop());
                if (hasBreak) {
                    numInstructions = instructions.length;
                    for (var i = 0; i < numInstructions; i++) {
                        if (instructions[i].opcode === "br" && instructions[i].offset === "BRK") {
                            instructions[i].offset = numInstructions - (i) - 1;
                        }
                    }
                }
                return instructions;
            };
            JavascriptCompiler.prototype.buildBreakableStatement = function (breakableStatement, startOffset, endOffset, updateOffset) {
                this.loop_level_flags.push({ has_break: false, has_continue: false });
                var instructions = this.buildStatement(breakableStatement);
                var loop_level_flags = this.loop_level_flags.pop();
                var inst_value;
                if (loop_level_flags.has_break || loop_level_flags.has_continue) {
                    for (var i = 0; i < instructions.length; i++) {
                        if (instructions[i].opcode === "br") {
                            inst_value = instructions[i].offset;
                            if (inst_value === "BRK") {
                                instructions[i].offset = instructions.length - i + endOffset - 1;
                            }
                            else if (inst_value === "CNT") {
                                if (updateOffset) {
                                    instructions[i].offset = instructions.length - updateOffset - i;
                                }
                                else {
                                    instructions[i].offset = -(i + startOffset + 2);
                                }
                            }
                        }
                    }
                }
                return instructions;
            };
            JavascriptCompiler.prototype.buildReturnStatement = function (returnStatement) {
                var instructions = [];
                if (returnStatement.argument) {
                    instructions = instructions.concat(this.buildStatement(returnStatement.argument));
                    instructions.push(this.createRetVal());
                }
                else {
                    instructions.push(this.createRet());
                }
                return instructions;
            };
            JavascriptCompiler.prototype.buildThrowStatement = function (throwStatement) {
                var instructions = this.buildStatement(throwStatement.argument);
                instructions.push(this.createThrowValue());
                return instructions;
            };
            JavascriptCompiler.prototype.buildDebuggerStatement = function (debuggerStatement) {
                return [this.createDebug()];
            };
            JavascriptCompiler.prototype.throwError = function (message) {
                var error = new Retool.VM.VMError();
                var lines = this.sourceCode.split('\n');
                var codeLine = "";
                if (this.start_line && this.start_line <= lines.length) {
                    codeLine = lines[this.start_line - 1];
                }
                error.messages = [message];
                error.source = {
                    type: "code",
                    line: this.start_line,
                    column: this.start_column,
                    codeText: codeLine,
                    codeLine: "Line " + this.start_line,
                    id: this.start_line
                };
                if (this.sourceFile) {
                    error.source.filename = this.sourceFile.getFullName();
                }
                throw error;
            };
            return JavascriptCompiler;
        })();
        IDE.JavascriptCompiler = JavascriptCompiler;
    })(IDE = Retool.IDE || (Retool.IDE = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var IDE;
    (function (IDE) {
        var JavascriptByteCodeFormatter = (function () {
            function JavascriptByteCodeFormatter() {
            }
            JavascriptByteCodeFormatter.toHtml = function (instructions) {
                var formatter = new JavascriptByteCodeFormatter();
                formatter.instructions = instructions;
                return formatter.renderHtml();
            };
            JavascriptByteCodeFormatter.prototype.startHtmlOutput = function () {
                this.html = '<table class="formtbl c-jsconsole-punc"><tbody>';
            };
            JavascriptByteCodeFormatter.prototype.endHtmlOutput = function () {
                this.html += '</tbody></table>';
            };
            JavascriptByteCodeFormatter.prototype.renderHtml = function () {
                var i;
                var numInstructions = this.instructions.length;
                this.startHtmlOutput();
                for (i = 0; i < numInstructions; i++) {
                    this.html += (this.renderInstructionAsHtml(i, this.instructions[i]));
                }
                this.endHtmlOutput();
                return this.html;
            };
            JavascriptByteCodeFormatter.prototype.renderInstructionAsHtml = function (offset, instruction) {
                return '<tr>' + '<td class="c-jsconsole-member-name">' + this.padLeadingZeros(offset) + ': </td>' + '<td>' + instruction.opcode + '</td>' + '<td class="c-jsconsole-member-value">' + this.renderInstructionArgsAsHtml(offset, instruction) + '</td></tr>';
            };
            JavascriptByteCodeFormatter.prototype.renderInstructionArgsAsHtml = function (offset, instruction) {
                var htmlArgs = [];
                if (instruction.offset !== undefined) {
                    htmlArgs.push(this.padLeadingZeros(offset + instruction.offset + 1));
                }
                if (instruction.name !== undefined) {
                    htmlArgs.push(instruction.name);
                }
                if (instruction.value !== undefined) {
                    htmlArgs.push(instruction.value);
                }
                if (instruction.args !== undefined) {
                    htmlArgs.push('args=' + instruction.args);
                }
                if (instruction.enumprop !== undefined) {
                    htmlArgs.push('enumprop=' + instruction.enumprop);
                }
                return htmlArgs.join(', ');
            };
            JavascriptByteCodeFormatter.prototype.padLeadingZeros = function (num) {
                var s = num + "";
                var maxLength = 4;
                while (s.length < maxLength)
                    s = "0" + s;
                return s;
            };
            return JavascriptByteCodeFormatter;
        })();
        IDE.JavascriptByteCodeFormatter = JavascriptByteCodeFormatter;
    })(IDE = Retool.IDE || (Retool.IDE = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var IDE;
    (function (IDE) {
        var TemplateCompiler = (function () {
            function TemplateCompiler() {
                this.currentFieldList = {};
                this.fieldListStack = [];
                this.prefix = "";
                this.errors = [];
            }
            TemplateCompiler.compile = function (app, sourceFile, helperLocator, logger) {
                var compiler = new TemplateCompiler();
                var fileContent = sourceFile.getContent();
                compiler.definition = fileContent;
                compiler.helperLocator = helperLocator;
                var template = { file: sourceFile, definition: compiler.definition };
                compiler.template = template;
                compiler.sourceFile = sourceFile;
                compiler.logger = logger;
                if (fileContent.source_code) {
                    try {
                        var options = { sourceFile: sourceFile, tracking: true, appName: "" };
                        var program = IDE.JavascriptCompiler.compileProgram(fileContent.source_code, options);
                        var proto = program.getPrototype();
                        if (proto) {
                            sourceFile.compiledPrototype = proto;
                        }
                        else {
                            sourceFile.compiledPrototype = new Retool.VM.Prototype(sourceFile.name);
                        }
                        sourceFile.requiresCompile = false;
                        sourceFile.compileError = null;
                    }
                    catch (e) {
                        var compiledCode = new Retool.VM.Prototype(sourceFile.name);
                        sourceFile.compiledPrototype = compiledCode;
                        sourceFile.requiresCompile = false;
                        var error = Retool.VM.VMError.cast(e);
                        //error.title = "Compile Error";
                        template.hasErrors = true;
                        logger.addError(error);
                    }
                }
                try {
                    compiler.doCompile();
                }
                catch (e) {
                    var error = Retool.VM.VMError.cast(e);
                    error.title = "Template Compile Error:" + name;
                    template.hasErrors = true;
                    logger.addError(error);
                }
                return template;
            };
            TemplateCompiler.prototype.addChildTemplate = function (element, path) {
                var fullId = (this.prefix) ? this.prefix + "." + element.id : element.id;
                var child = { id: fullId, element: element, templateName: path };
                var template = this.template;
                template.childTemplateElements = template.childTemplateElements || [];
                template.childTemplateElements.push(child);
            };
            TemplateCompiler.prototype.pushFieldList = function () {
                this.fieldListStack.push(this.currentFieldList);
                this.currentFieldList = {};
            };
            TemplateCompiler.prototype.popFieldList = function () {
                this.currentFieldList = this.fieldListStack.pop();
            };
            TemplateCompiler.prototype.addReferencedField = function (field) {
                this.currentFieldList[field.toLowerCase()] = 1;
            };
            TemplateCompiler.prototype.doCompile = function () {
                if (!this.definition.elements) {
                    this.definition.elements = [];
                }
                var template = this.template;
                template.wrapper = { kind: "viewcontainer", children: this.definition.elements };
                var children = this.definition.elements;
                for (var i = 0; i < children.length; i++) {
                    var child = children[i];
                    this.compileElement(child);
                }
            };
            TemplateCompiler.prototype.compileElement = function (element) {
                var handler = this.helperLocator.get(element.kind);
                if (!handler) {
                    handler = this.helperLocator.get("div");
                }
                if (element.kind == "r-body") {
                    this.template.hasBodyTag = true;
                }
                var result = IDE.ElementCompiler.compile(handler, element, this.sourceFile);
                element._compiled = result.methods;
                if (element._compiled) {
                    element._compiled._src = this.sourceFile.getFullName();
                }
                if (result.errors) {
                    for (var i = 0; i < result.errors.length; i++) {
                        var e = result.errors[i];
                        var error = e.error;
                        error.title = "Invalid " + e.prop + " expression";
                        error.source = { type: "element", id: element.id, codeText: e.expression, codeLink: element.kind + " " + e.prop, filename: this.template.file.getFullName() };
                        this.logger.addError(error);
                        this.template.hasErrors = true;
                    }
                }
                handler.map(element, this);
            };
            TemplateCompiler.prototype.compileChildren = function (element) {
                if (element.children) {
                    for (var i = 0; i < element.children.length; i++) {
                        var child = element.children[i];
                        this.compileElement(child);
                    }
                }
            };
            TemplateCompiler.prototype.pushPrefix = function (prefix) {
                if (this.prefix) {
                    this.prefix += "." + prefix;
                }
                else {
                    this.prefix = prefix;
                }
            };
            TemplateCompiler.prototype.popPrefix = function () {
                var i = this.prefix.lastIndexOf('.');
                if (i > -1) {
                    this.prefix = this.prefix.substr(0, i);
                }
                else {
                    this.prefix = "";
                }
            };
            return TemplateCompiler;
        })();
        IDE.TemplateCompiler = TemplateCompiler;
    })(IDE = Retool.IDE || (Retool.IDE = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var IDE;
    (function (IDE) {
        var TextAttributeCompiler = (function () {
            function TextAttributeCompiler() {
            }
            TextAttributeCompiler.compile = function (src, options) {
                if (!src) {
                    return null;
                }
                var implicitCurlyBrace;
                var autoUrlEncode;
                if (options) {
                    implicitCurlyBrace = options.implicitCurlyBrace;
                    autoUrlEncode = options.autoUrlEncode;
                }
                var output = [];
                if (implicitCurlyBrace && src.indexOf("{{") != 0) {
                    output.push(src);
                }
                else {
                    var i = src.indexOf("{{");
                    if (i == -1) {
                        return null;
                    }
                    var segments = src.split('{{');
                    for (var j = 0; j < segments.length; j++) {
                        var segment = segments[j];
                        if (segment) {
                            var i = segment.indexOf("}}");
                            if (i != -1) {
                                var varName = segment.substr(0, i);
                                if (autoUrlEncode) {
                                    output.push("encodeURIComponent(" + varName + ")");
                                }
                                else {
                                    output.push("(" + varName + ")");
                                }
                                var trailer = segment.substr(i + 2);
                                if (trailer) {
                                    output.push(TextAttributeCompiler.singleQuote(trailer));
                                }
                            }
                            else {
                                output.push(TextAttributeCompiler.singleQuote(segment));
                            }
                        }
                    }
                }
                var expression = output.join('+');
                var methodInfo;
                var exprClass = IDE.JavascriptCompiler.compileClass("", "function e(){return " + expression + ";}");
                methodInfo = exprClass.methods["e"];
                return methodInfo;
            };
            TextAttributeCompiler.singleQuote = function (v) {
                return "'" + v.replace(/\'/g, "\'\'") + "'";
            };
            return TextAttributeCompiler;
        })();
        IDE.TextAttributeCompiler = TextAttributeCompiler;
    })(IDE = Retool.IDE || (Retool.IDE = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var IDE;
    (function (IDE) {
        var ElementCompiler = (function () {
            function ElementCompiler() {
                this._count = 0;
            }
            ElementCompiler.compile = function (handler, element, sourceFile) {
                var compiler = new ElementCompiler();
                compiler.sourceFile = sourceFile;
                compiler.element = element;
                return compiler.doCompile(handler);
            };
            ElementCompiler.prototype.doCompile = function (handler) {
                var element = this.element;
                this._compiled = {};
                if (handler.properties) {
                    // custom component properties
                    var attribs = handler.properties.list;
                    for (var i = 0; i < attribs.length; i++) {
                        var a = attribs[i];
                        this.compileExpression(a.name, element[a.name]);
                    }
                }
                else {
                    this.compileExpression("text", element.text);
                    this.compileExpression("cssclass", element.cssclass);
                    this.compileExpression("expression", element.expression, { implicitCurlyBrace: true });
                    this.compileExpression("condition", element.condition, { implicitCurlyBrace: true });
                    this.compileExpression("params", element.params, { implicitCurlyBrace: true });
                    this.compileExpression("obj", element.obj, { implicitCurlyBrace: true });
                    this.compileExpression("href", element.href, { autoUrlEncode: true });
                    this.compileExpression("value", element.value, { implicitCurlyBrace: true });
                    if (element.value) {
                        this.compileExpression("value_setter", element.value + "=$$_value", { implicitCurlyBrace: true, ignoreError: true });
                    }
                    this.compileExpression("template", element.template);
                    if (handler.attributes) {
                        for (var key in handler.attributes) {
                            var settings = handler.attributes[key];
                            if (settings.expression || settings.implicitExpression) {
                                this.compileExpression(key, element[key], { implicitCurlyBrace: settings.implicitExpression });
                            }
                        }
                    }
                }
                if (this._count) {
                    return { methods: this._compiled, errors: this.errors };
                }
                else {
                    return { methods: undefined, errors: this.errors };
                }
            };
            ElementCompiler.prototype.compileExpression = function (name, expression, options) {
                if (!expression)
                    return;
                try {
                    var method = IDE.TextAttributeCompiler.compile(expression, options);
                    if (method) {
                        method.name = "@" + name;
                        method.sourceCode = expression;
                        method.file = this.sourceFile;
                        method.elementId = this.element.id;
                        this._compiled[name] = method;
                        this._count++;
                    }
                }
                catch (e) {
                    if (options && options.ignoreError) {
                        return;
                    }
                    this.errors = this.errors || [];
                    var error = Retool.VM.VMError.cast(e);
                    error.jsStack = null;
                    this.errors.push({ prop: name, error: error, expression: expression });
                }
            };
            return ElementCompiler;
        })();
        IDE.ElementCompiler = ElementCompiler;
    })(IDE = Retool.IDE || (Retool.IDE = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var IDE;
    (function (IDE) {
        var ComponentCompiler = (function () {
            function ComponentCompiler() {
            }
            ComponentCompiler.compile = function (name, file, helperLocator, logger) {
                var component = IDE.TemplateCompiler.compile(null, file, helperLocator, logger);
                component.name = name;
                component.isComponent = true;
                if (component.definition.elements && component.definition.elements.length) {
                    var elements = component.definition.elements;
                    var attributes = new IDE.ElementAttributeList();
                    var content;
                    for (var i = 0; i < elements.length; i++) {
                        var element = elements[i];
                        if (element.kind == "r-property") {
                            var attrib = new IDE.ElementAttribute(element.name);
                            attrib.text = element.text;
                            attrib.type = element.type || "text";
                            attributes.add(attrib);
                        }
                        else if (!content) {
                            content = element;
                        }
                    }
                    if (content) {
                        var contentHandler = helperLocator.get(content.kind);
                        if (contentHandler) {
                            component.dropKind = contentHandler.settings.dropKind;
                        }
                    }
                    if (!component.dropKind) {
                        component.dropKind = "inline";
                    }
                    // handler.element = content;
                    var cssAttrib = new IDE.ElementAttribute("cssclass");
                    cssAttrib.text = "Css Class";
                    cssAttrib.type = "text";
                    attributes.add(cssAttrib);
                    component.customAttributes = attributes;
                    if (!content) {
                        content = { kind: "div" };
                    }
                    component.contentElement = content;
                    /*
                    handler.settings.label = name;
                    handler.settings.toolbox = true;
                    handler.settings.isCustom = true;
                    */
                    if (elements && ComponentCompiler.findYield(elements)) {
                        component.isContainer = true;
                    }
                }
                return component;
            };
            ComponentCompiler.findYield = function (elements) {
                for (var i = 0; i < elements.length; i++) {
                    var elem = elements[i];
                    if (elem.kind == "yield") {
                        return true;
                    }
                    if (elem.children) {
                        var found = ComponentCompiler.findYield(elem.children);
                        if (found) {
                            return true;
                        }
                    }
                }
                return false;
            };
            return ComponentCompiler;
        })();
        IDE.ComponentCompiler = ComponentCompiler;
    })(IDE = Retool.IDE || (Retool.IDE = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var IDE;
    (function (IDE) {
        var Program = (function () {
            function Program() {
                this.sections = [];
            }
            Program.prototype.getPrototype = function () {
                for (var i = 0; i < this.sections.length; i++) {
                    var sec = this.sections[i];
                    if (sec.type == "class") {
                        return sec.content;
                    }
                }
                return null;
            };
            Program.prototype.getPrototypeLocation = function () {
                for (var i = 0; i < this.sections.length; i++) {
                    var sec = this.sections[i];
                    if (sec.type == "class") {
                        return sec.loc;
                    }
                }
                return null;
            };
            Program.prototype.getHTML = function () {
                for (var i = 0; i < this.sections.length; i++) {
                    var sec = this.sections[i];
                    if (sec.type == "html") {
                        return sec.content;
                    }
                }
                return null;
            };
            Program.prototype.getJSON = function () {
                for (var i = 0; i < this.sections.length; i++) {
                    var sec = this.sections[i];
                    if (sec.type == "json") {
                        return sec.content;
                    }
                }
            };
            Program.prototype.getAttributes = function () {
                return this.attributes;
            };
            return Program;
        })();
        IDE.Program = Program;
    })(IDE = Retool.IDE || (Retool.IDE = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var IDE;
    (function (IDE) {
        var Project = (function () {
            function Project() {
                this.programs = [];
            }
            return Project;
        })();
        IDE.Project = Project;
    })(IDE = Retool.IDE || (Retool.IDE = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Transformers;
    (function (Transformers) {
        var TemplateSerializer = (function () {
            function TemplateSerializer() {
                this._entityMap = {
                    "&": "&amp;",
                    "<": "&lt;",
                    ">": "&gt;",
                    '"': '&quot;',
                    "'": '&#39;',
                    "/": '&#x2F;'
                };
                this._attributeMap = {
                    '"': '&quot;'
                };
            }
            TemplateSerializer.prototype.serialize = function (definition) {
                var sourceCode = definition.source_code || "";
                var elements = definition.elements;
                var html = this.serializeElements("", elements);
                //var html = JSON.stringify(elements);
                var s = html;
                if (!html || html[html.length - 1] != "\n") {
                    s += "\n";
                }
                if (sourceCode) {
                    s += "==\n" + sourceCode;
                }
                s += "\n==\n";
                var settings = {};
                if (definition.cssclass) {
                    settings.cssclass = definition.cssclass;
                }
                if (definition.baseLayout) {
                    settings.baseLayout = definition.baseLayout;
                }
                s += JSON.stringify(settings);
                return s;
            };
            TemplateSerializer.prototype.serializeElements = function (tab, elements) {
                if (!elements) {
                    return;
                }
                var out = "";
                for (var i = 0; i < elements.length; i++) {
                    var elem = elements[i];
                    out += this.serializeElement(tab, elem);
                }
                return out;
            };
            TemplateSerializer.prototype.serializeElement = function (tab, elem) {
                var kind = elem.kind;
                if (kind == "text") {
                    return this.escapeHtml(elem.text);
                }
                var out = tab + "<" + kind;
                if (elem.cssclass) {
                    out += ' class="' + this.escapeAttribute(elem.cssclass) + '"';
                }
                if (elem.name) {
                    out += ' name="' + this.escapeAttribute(elem.name) + '"';
                }
                for (var attrib in elem) {
                    if (attrib[0] != "_" && attrib != "text" && attrib != "kind" && attrib != "id" && attrib != "name" && attrib != "cssclass" && attrib != "children") {
                        var value = elem[attrib];
                        if (value) {
                            out += " " + attrib + "=\"" + this.escapeAttribute(value) + "\"";
                        }
                    }
                }
                var children = elem.children;
                var hasContent = elem.text || (children && children.length);
                if (hasContent) {
                    out += ">";
                    if (elem.text) {
                        out += this.escapeHtml(elem.text);
                    }
                    if (children) {
                        out += "\n" + this.serializeElements(tab + "  ", children);
                    }
                    if (out[out.length - 1] == "\n") {
                        out += tab;
                    }
                    out += "</" + kind + ">\n";
                }
                else if (Retool.IDE.HTMLParser.isSelfClosing(kind)) {
                    out += "/>\n";
                }
                else {
                    out += "></" + kind + ">\n";
                }
                return out;
            };
            TemplateSerializer.prototype.escapeHtml = function (string) {
                var self = this;
                return String(string).replace(/[&<>"'\/]/g, function (s) {
                    return self._entityMap[s];
                });
            };
            TemplateSerializer.prototype.escapeAttribute = function (string) {
                var self = this;
                return String(string).replace(/["]/g, function (s) {
                    return self._attributeMap[s];
                });
            };
            return TemplateSerializer;
        })();
        Transformers.TemplateSerializer = TemplateSerializer;
    })(Transformers = Retool.Transformers || (Retool.Transformers = {}));
})(Retool || (Retool = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Retool;
(function (Retool) {
    var Transformers;
    (function (Transformers) {
        var ComponentSerializer = (function (_super) {
            __extends(ComponentSerializer, _super);
            function ComponentSerializer() {
                _super.apply(this, arguments);
            }
            return ComponentSerializer;
        })(Transformers.TemplateSerializer);
        Transformers.ComponentSerializer = ComponentSerializer;
    })(Transformers = Retool.Transformers || (Retool.Transformers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Transformers;
    (function (Transformers) {
        var ControllerParser = (function () {
            function ControllerParser() {
            }
            ControllerParser.prototype.parse = function (name, source) {
                name = Retool.Inflection.classify(name);
                return {
                    name: name,
                    source_code: source
                };
            };
            return ControllerParser;
        })();
        Transformers.ControllerParser = ControllerParser;
    })(Transformers = Retool.Transformers || (Retool.Transformers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Transformers;
    (function (Transformers) {
        var ControllerSerializer = (function () {
            function ControllerSerializer() {
            }
            ControllerSerializer.prototype.serialize = function (definition) {
                return definition.source_code;
            };
            return ControllerSerializer;
        })();
        Transformers.ControllerSerializer = ControllerSerializer;
    })(Transformers = Retool.Transformers || (Retool.Transformers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Transformers;
    (function (Transformers) {
        var ModelParser = (function () {
            function ModelParser() {
            }
            ModelParser.prototype.parse = function (name, source) {
                name = Retool.Inflection.classify(name);
                var sourceCode;
                var settings;
                var sections = source.split(/\n==\s*\n/); // split on == separator
                for (var i = 0; i < sections.length; i++) {
                    var section = sections[i];
                    var match = section.match(/\S/);
                    if (match.length && match[0] == "{") {
                        settings = JSON.parse(section);
                    }
                    else {
                        match = section.match(/\w+/);
                        if (match && match.length && match[0] == "class") {
                            sourceCode = section;
                        }
                    }
                }
                settings = settings || {};
                return {
                    name: name,
                    fields: settings.fields,
                    indexes: null,
                    relationships: settings.relationships,
                    source_code: sourceCode
                };
            };
            return ModelParser;
        })();
        Transformers.ModelParser = ModelParser;
    })(Transformers = Retool.Transformers || (Retool.Transformers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Transformers;
    (function (Transformers) {
        var ModelSerializer = (function () {
            function ModelSerializer() {
            }
            ModelSerializer.prototype.serialize = function (definition) {
                var d = {};
                for (var key in definition) {
                    if (key != "source_code") {
                        d[key] = definition[key];
                    }
                }
                var out = definition.source_code;
                out += "\n==\n";
                out += JSON.stringify(d, null, "\t");
                return out;
            };
            return ModelSerializer;
        })();
        Transformers.ModelSerializer = ModelSerializer;
    })(Transformers = Retool.Transformers || (Retool.Transformers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    /*!
     * inflection
     * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>
     * MIT Licensed
     *
     * @fileoverview
     * A port of inflection-js to node.js module.
     */
    var Inflection = (function () {
        function Inflection() {
        }
        Inflection._apply_rules = function (str, rules, skip, override) {
            if (override) {
                str = override;
            }
            else {
                var ignore = (Inflection.indexOf(skip, str.toLowerCase()) > -1);
                if (!ignore) {
                    var i = 0;
                    var j = rules.length;
                    for (; i < j; i++) {
                        if (str.match(rules[i][0])) {
                            if (rules[i][1] !== undefined) {
                                str = str.replace(rules[i][0], rules[i][1]);
                            }
                            break;
                        }
                    }
                }
            }
            return str;
        };
        Inflection.indexOf = function (arr, item, fromIndex, compareFunc) {
            if (!fromIndex) {
                fromIndex = -1;
            }
            var index = -1;
            var i = fromIndex;
            var j = arr.length;
            for (; i < j; i++) {
                if (arr[i] === item || compareFunc && compareFunc(arr[i], item)) {
                    index = i;
                    break;
                }
            }
            return index;
        };
        /**
     * This function adds pluralization support to every String object.
     * @public
     * @function
     * @param {String} str The subject string.
     * @param {String} plural Overrides normal output with said String.(optional)
     * @returns {String} Singular English language nouns are returned in plural form.
     * @example
     *
     *     var inflection = require( 'inflection' );
     *
     *     inflection.pluralize( 'person' ); // === 'people'
     *     inflection.pluralize( 'octopus' ); // === "octopi"
     *     inflection.pluralize( 'Hat' ); // === 'Hats'
     *     inflection.pluralize( 'person', 'guys' ); // === 'guys'
     */
        Inflection.pluralize = function (str, plural) {
            return Inflection._apply_rules(str, Inflection.plural_rules, Inflection.uncountable_words, plural);
        };
        /**
         * This function adds singularization support to every String object.
         * @public
         * @function
         * @param {String} str The subject string.
         * @param {String} singular Overrides normal output with said String.(optional)
         * @returns {String} Plural English language nouns are returned in singular form.
         * @example
         *
         *     var inflection = require( 'inflection' );
         *
         *     inflection.singularize( 'people' ); // === 'person'
         *     inflection.singularize( 'octopi' ); // === "octopus"
         *     inflection.singularize( 'Hats' ); // === 'Hat'
         *     inflection.singularize( 'guys', 'person' ); // === 'person'
         */
        Inflection.singularize = function (str, singular) {
            return Inflection._apply_rules(str, Inflection.singular_rules, Inflection.uncountable_words, singular);
        };
        /**
         * This function adds camelization support to every String object.
         * @public
         * @function
         * @param {String} str The subject string.
         * @param {Boolean} lowFirstLetter Default is to capitalize the first letter of the results.(optional)
         *                                 Passing true will lowercase it.
         * @returns {String} Lower case underscored words will be returned in camel case.
         *                  additionally '/' is translated to '::'
         * @example
         *
         *     var inflection = require( 'inflection' );
         *
         *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'
         *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'
         */
        Inflection.camelize = function (str, lowFirstLetter) {
            var str_path = str.toLowerCase().split('/');
            var i = 0;
            var j = str_path.length;
            for (; i < j; i++) {
                var str_arr = str_path[i].split('_');
                var initX = ((lowFirstLetter && i + 1 === j) ? (1) : (0));
                var k = initX;
                var l = str_arr.length;
                for (; k < l; k++) {
                    str_arr[k] = str_arr[k].charAt(0).toUpperCase() + str_arr[k].substring(1);
                }
                str_path[i] = str_arr.join('');
            }
            return str_path.join('::');
        };
        /**
         * This function adds underscore support to every String object.
         * @public
         * @function
         * @param {String} str The subject string.
         * @param {Boolean} allUpperCase Default is to lowercase and add underscore prefix.(optional)
         *                  Passing true will return as entered.
         * @returns {String} Camel cased words are returned as lower cased and underscored.
         *                  additionally '::' is translated to '/'.
         * @example
         *
         *     var inflection = require( 'inflection' );
         *
         *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'
         *     inflection.underscore( 'messageProperties' ); // === 'message_properties'
         *     inflection.underscore( 'MP', true ); // === 'MP'
         */
        Inflection.underscore = function (str, allUpperCase) {
            if (allUpperCase && str === str.toUpperCase())
                return str;
            var str_path = str.split('::');
            var i = 0;
            var j = str_path.length;
            for (; i < j; i++) {
                str_path[i] = str_path[i].replace(Inflection.uppercase, '_$1');
                str_path[i] = str_path[i].replace(Inflection.underbar_prefix, '');
            }
            return str_path.join('/').toLowerCase();
        };
        /**
         * This function adds humanize support to every String object.
         * @public
         * @function
         * @param {String} str The subject string.
         * @param {Boolean} lowFirstLetter Default is to capitalize the first letter of the results.(optional)
         *                                 Passing true will lowercase it.
         * @returns {String} Lower case underscored words will be returned in humanized form.
         * @example
         *
         *     var inflection = require( 'inflection' );
         *
         *     inflection.humanize( 'message_properties' ); // === 'Message properties'
         *     inflection.humanize( 'message_properties', true ); // === 'message properties'
         */
        Inflection.humanize = function (str, lowFirstLetter) {
            str = str.toLowerCase();
            str = str.replace(Inflection.id_suffix, '');
            str = str.replace(Inflection.underbar, ' ');
            if (!lowFirstLetter) {
                str = Inflection.capitalize(str);
            }
            return str;
        };
        /**
         * This function adds capitalization support to every String object.
         * @public
         * @function
         * @param {String} str The subject string.
         * @returns {String} All characters will be lower case and the first will be upper.
         * @example
         *
         *     var inflection = require( 'inflection' );
         *
         *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'
         *     inflection.capitalize( 'message properties', true ); // === 'Message properties'
         */
        Inflection.capitalize = function (str) {
            str = str.toLowerCase();
            return str.substring(0, 1).toUpperCase() + str.substring(1);
        };
        /**
         * This function adds dasherization support to every String object.
         * @public
         * @function
         * @param {String} str The subject string.
         * @returns {String} Replaces all spaces or underbars with dashes.
         * @example
         *
         *     var inflection = require( 'inflection' );
         *
         *     inflection.dasherize( 'message_properties' ); // === 'message-properties'
         *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'
         */
        Inflection.dasherize = function (str) {
            return str.replace(Inflection.space_or_underbar, '-');
        };
        /**
         * This function adds titleize support to every String object.
         * @public
         * @function
         * @param {String} str The subject string.
         * @returns {String} Capitalizes words as you would for a book title.
         * @example
         *
         *     var inflection = require( 'inflection' );
         *
         *     inflection.titleize( 'message_properties' ); // === 'Message Properties'
         *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'
         */
        Inflection.titleize = function (str) {
            str = str.toLowerCase().replace(Inflection.underbar, ' ');
            var str_arr = str.split(' ');
            var i = 0;
            var j = str_arr.length;
            for (; i < j; i++) {
                var d = str_arr[i].split('-');
                var k = 0;
                var l = d.length;
                for (; k < l; k++) {
                    if (Inflection.indexOf(Inflection.non_titlecased_words, d[k].toLowerCase()) < 0) {
                        d[k] = Inflection.capitalize(d[k]);
                    }
                }
                str_arr[i] = d.join('-');
            }
            str = str_arr.join(' ');
            str = str.substring(0, 1).toUpperCase() + str.substring(1);
            return str;
        };
        /**
         * This function adds demodulize support to every String object.
         * @public
         * @function
         * @param {String} str The subject string.
         * @returns {String} Removes module names leaving only class names.(Ruby style)
         * @example
         *
         *     var inflection = require( 'inflection' );
         *
         *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'
         */
        Inflection.demodulize = function (str) {
            var str_arr = str.split('::');
            return str_arr[str_arr.length - 1];
        };
        /**
         * This function adds tableize support to every String object.
         * @public
         * @function
         * @param {String} str The subject string.
         * @returns {String} Return camel cased words into their underscored plural form.
         * @example
         *
         *     var inflection = require( 'inflection' );
         *
         *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'
         */
        Inflection.tableize = function (str) {
            str = Inflection.underscore(str);
            str = Inflection.pluralize(str);
            return str;
        };
        /**
         * This function adds classification support to every String object.
         * @public
         * @function
         * @param {String} str The subject string.
         * @returns {String} Underscored plural nouns become the camel cased singular form.
         * @example
         *
         *     var inflection = require( 'inflection' );
         *
         *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'
         */
        Inflection.classify = function (str) {
            str = Inflection.camelize(str);
            str = Inflection.singularize(str);
            return str;
        };
        /**
         * This function adds foreign key support to every String object.
         * @public
         * @function
         * @param {String} str The subject string.
         * @param {Boolean} dropIdUbar Default is to seperate id with an underbar at the end of the class name,
                                       you can pass true to skip it.(optional)
         * @returns {String} Underscored plural nouns become the camel cased singular form.
         * @example
         *
         *     var inflection = require( 'inflection' );
         *
         *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'
         *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'
         */
        Inflection.foreign_key = function (str, dropIdUbar) {
            str = Inflection.demodulize(str);
            str = Inflection.underscore(str) + ((dropIdUbar) ? ('') : ('_')) + 'id';
            return str;
        };
        /**
         * This function adds ordinalize support to every String object.
         * @public
         * @function
         * @param {String} str The subject string.
         * @returns {String} Return all found numbers their sequence like "22nd".
         * @example
         *
         *     var inflection = require( 'inflection' );
         *
         *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'
         */
        Inflection.ordinalize = function (str) {
            var str_arr = str.split(' ');
            var i = 0;
            var j = str_arr.length;
            for (; i < j; i++) {
                var k = parseInt(str_arr[i], 10);
                if (!isNaN(k)) {
                    var ltd = str_arr[i].substring(str_arr[i].length - 2);
                    var ld = str_arr[i].substring(str_arr[i].length - 1);
                    var suf = 'th';
                    if (ltd != '11' && ltd != '12' && ltd != '13') {
                        if (ld === '1') {
                            suf = 'st';
                        }
                        else if (ld === '2') {
                            suf = 'nd';
                        }
                        else if (ld === '3') {
                            suf = 'rd';
                        }
                    }
                    str_arr[i] += suf;
                }
            }
            return str_arr.join(' ');
        };
        Inflection.uncountable_words = [
            'equipment',
            'information',
            'rice',
            'money',
            'species',
            'series',
            'fish',
            'sheep',
            'moose',
            'deer',
            'news'
        ];
        /**
         * @description These rules translate from the singular form of a noun to its plural form.
         * @private
         */
        Inflection.plural_rules = [
            [new RegExp('(m)en$', 'gi')],
            [new RegExp('(pe)ople$', 'gi')],
            [new RegExp('(child)ren$', 'gi')],
            [new RegExp('([ti])a$', 'gi')],
            [new RegExp('((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$', 'gi')],
            [new RegExp('(hive)s$', 'gi')],
            [new RegExp('(tive)s$', 'gi')],
            [new RegExp('(curve)s$', 'gi')],
            [new RegExp('([lr])ves$', 'gi')],
            [new RegExp('([^fo])ves$', 'gi')],
            [new RegExp('([^aeiouy]|qu)ies$', 'gi')],
            [new RegExp('(s)eries$', 'gi')],
            [new RegExp('(m)ovies$', 'gi')],
            [new RegExp('(x|ch|ss|sh)es$', 'gi')],
            [new RegExp('([m|l])ice$', 'gi')],
            [new RegExp('(bus)es$', 'gi')],
            [new RegExp('(o)es$', 'gi')],
            [new RegExp('(shoe)s$', 'gi')],
            [new RegExp('(cris|ax|test)es$', 'gi')],
            [new RegExp('(octop|vir)i$', 'gi')],
            [new RegExp('(alias|status)es$', 'gi')],
            [new RegExp('^(ox)en', 'gi')],
            [new RegExp('(vert|ind)ices$', 'gi')],
            [new RegExp('(matr)ices$', 'gi')],
            [new RegExp('(quiz)zes$', 'gi')],
            [new RegExp('(m)an$', 'gi'), '$1en'],
            [new RegExp('(pe)rson$', 'gi'), '$1ople'],
            [new RegExp('(child)$', 'gi'), '$1ren'],
            [new RegExp('^(ox)$', 'gi'), '$1en'],
            [new RegExp('(ax|test)is$', 'gi'), '$1es'],
            [new RegExp('(octop|vir)us$', 'gi'), '$1i'],
            [new RegExp('(alias|status)$', 'gi'), '$1es'],
            [new RegExp('(bu)s$', 'gi'), '$1ses'],
            [new RegExp('(buffal|tomat|potat)o$', 'gi'), '$1oes'],
            [new RegExp('([ti])um$', 'gi'), '$1a'],
            [new RegExp('sis$', 'gi'), 'ses'],
            [new RegExp('(?:([^f])fe|([lr])f)$', 'gi'), '$1$2ves'],
            [new RegExp('(hive)$', 'gi'), '$1s'],
            [new RegExp('([^aeiouy]|qu)y$', 'gi'), '$1ies'],
            [new RegExp('(x|ch|ss|sh)$', 'gi'), '$1es'],
            [new RegExp('(matr|vert|ind)ix|ex$', 'gi'), '$1ices'],
            [new RegExp('([m|l])ouse$', 'gi'), '$1ice'],
            [new RegExp('(quiz)$', 'gi'), '$1zes'],
            [new RegExp('s$', 'gi'), 's'],
            [new RegExp('$', 'gi'), 's']
        ];
        /**
         * @description These rules translate from the plural form of a noun to its singular form.
         * @private
         */
        Inflection.singular_rules = [
            [new RegExp('(m)an$', 'gi')],
            [new RegExp('(pe)rson$', 'gi')],
            [new RegExp('(child)$', 'gi')],
            [new RegExp('^(ox)$', 'gi')],
            [new RegExp('(ax|test)is$', 'gi')],
            [new RegExp('(octop|vir)us$', 'gi')],
            [new RegExp('(alias|status)$', 'gi')],
            [new RegExp('(bu)s$', 'gi')],
            [new RegExp('(buffal|tomat|potat)o$', 'gi')],
            [new RegExp('([ti])um$', 'gi')],
            [new RegExp('sis$', 'gi')],
            [new RegExp('(?:([^f])fe|([lr])f)$', 'gi')],
            [new RegExp('(hive)$', 'gi')],
            [new RegExp('([^aeiouy]|qu)y$', 'gi')],
            [new RegExp('(x|ch|ss|sh)$', 'gi')],
            [new RegExp('(matr|vert|ind)ix|ex$', 'gi')],
            [new RegExp('([m|l])ouse$', 'gi')],
            [new RegExp('(quiz)$', 'gi')],
            [new RegExp('(m)en$', 'gi'), '$1an'],
            [new RegExp('(pe)ople$', 'gi'), '$1rson'],
            [new RegExp('(child)ren$', 'gi'), '$1'],
            [new RegExp('([ti])a$', 'gi'), '$1um'],
            [new RegExp('((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$', 'gi'), '$1$2sis'],
            [new RegExp('(hive)s$', 'gi'), '$1'],
            [new RegExp('(tive)s$', 'gi'), '$1'],
            [new RegExp('(curve)s$', 'gi'), '$1'],
            [new RegExp('([lr])ves$', 'gi'), '$1f'],
            [new RegExp('([^fo])ves$', 'gi'), '$1fe'],
            [new RegExp('([^aeiouy]|qu)ies$', 'gi'), '$1y'],
            [new RegExp('(s)eries$', 'gi'), '$1eries'],
            [new RegExp('(m)ovies$', 'gi'), '$1ovie'],
            [new RegExp('(x|ch|ss|sh)es$', 'gi'), '$1'],
            [new RegExp('([m|l])ice$', 'gi'), '$1ouse'],
            [new RegExp('(bus)es$', 'gi'), '$1'],
            [new RegExp('(o)es$', 'gi'), '$1'],
            [new RegExp('(shoe)s$', 'gi'), '$1'],
            [new RegExp('(cris|ax|test)es$', 'gi'), '$1is'],
            [new RegExp('(octop|vir)i$', 'gi'), '$1us'],
            [new RegExp('(alias|status)es$', 'gi'), '$1'],
            [new RegExp('^(ox)en', 'gi'), '$1'],
            [new RegExp('(vert|ind)ices$', 'gi'), '$1ex'],
            [new RegExp('(matr)ices$', 'gi'), '$1ix'],
            [new RegExp('(quiz)zes$', 'gi'), '$1'],
            [new RegExp('ss$', 'gi'), 'ss'],
            [new RegExp('s$', 'gi'), '']
        ];
        /**
         * @description This is a list of words that should not be capitalized for title case.
         * @private
         */
        Inflection.non_titlecased_words = [
            'and',
            'or',
            'nor',
            'a',
            'an',
            'the',
            'so',
            'but',
            'to',
            'of',
            'at',
            'by',
            'from',
            'into',
            'on',
            'onto',
            'off',
            'out',
            'in',
            'over',
            'with',
            'for'
        ];
        /**
         * @description These are regular expressions used for converting between String formats.
         * @private
         */
        Inflection.id_suffix = new RegExp('(_ids|_id)$', 'g');
        Inflection.underbar = new RegExp('_', 'g');
        Inflection.space_or_underbar = new RegExp('[\ _]', 'g');
        Inflection.uppercase = new RegExp('([A-Z])', 'g');
        Inflection.underbar_prefix = new RegExp('^_');
        return Inflection;
    })();
    Retool.Inflection = Inflection;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        function createProcess() {
            return new VM.Process();
        }
        VM.createProcess = createProcess;
        VM.maxInstructionExecution = 50000;
        VM.types = {};
        VM.globalObj;
        function executeMethodSync(params) {
            var methodInfo = params.target.getPrototypeMethod(params.methodName);
            if (!methodInfo) {
                return null;
            }
            var proc = new VM.Process();
            proc.context = params.context;
            proc.sync = true;
            return proc.start({ target: params.target, methodInfo: methodInfo, args: params.args });
        }
        VM.executeMethodSync = executeMethodSync;
        function addType(name, constructorFunc, staticInstance) {
            VM.types[name] = { constructorFunc: constructorFunc, staticInstance: staticInstance };
        }
        VM.addType = addType;
        function getType(name) {
            return VM.types[name];
        }
        VM.getType = getType;
        function getStaticPrototype(name) {
            var t = VM.types[name];
            if (!t || !t.constructorFunc) {
                return null;
            }
            return t.constructorFunc.prototype.staticPrototype;
        }
        VM.getStaticPrototype = getStaticPrototype;
        function getConstructorFunc(typeName) {
            var t = VM.types[typeName];
            if (!t) {
                return null;
            }
            return t.constructorFunc;
        }
        VM.getConstructorFunc = getConstructorFunc;
        function handleError(err) {
            throw VM.VMError.cast(err);
        }
        VM.handleError = handleError;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var CallParameters = (function () {
            function CallParameters(name, args, proc) {
                this.name = name;
                this.args = args;
                this.proc = proc;
            }
            CallParameters.prototype.getArgs = function (a) {
                var array = this.args || [];
                var out = {};
                for (var i = 0; i < arguments.length; i++) {
                    if (i < array.length) {
                        out[arguments[i]] = array[i];
                    }
                }
                return out;
            };
            CallParameters.prototype.get = function (argName) {
                if (this.args && this.args.length) {
                    var arg = this.args[0];
                    if (arg) {
                        return arg[argName];
                    }
                }
                return null;
            };
            CallParameters.prototype.getIndex = function (index) {
                if (this.args && index < this.args.length) {
                    return this.args[index];
                }
                return null;
            };
            CallParameters.prototype.pause = function () {
                return this.proc.pause();
            };
            return CallParameters;
        })();
        VM.CallParameters = CallParameters;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var Enumerator = (function () {
            function Enumerator(array) {
                this.array = array;
                this.length = array.length;
                this.current = undefined;
                this.index = -1;
            }
            Enumerator.prototype.next = function () {
                this.index++;
                if (this.index < this.length) {
                    this.current = this.array[this.index];
                    return true;
                }
                else {
                    return false;
                }
            };
            return Enumerator;
        })();
        VM.Enumerator = Enumerator;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var MethodPointer = (function () {
            function MethodPointer(target, methodName) {
                this.target = target;
                this.methodName = methodName;
            }
            return MethodPointer;
        })();
        VM.MethodPointer = MethodPointer;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var CallStackEntry = (function () {
            function CallStackEntry(parent, target, methodInfo, argValues) {
                this.target = target;
                this.parent = parent;
                this.blockMode = "function";
                if (this.parent) {
                    this.level = this.parent.level + 1;
                    if (this.level >= 20) {
                        throw "too many nested calls - check for accidental recursive call";
                    }
                }
                else {
                    this.level = 0;
                }
                var localProperties = { "arguments": argValues || [] };
                this.localProperties = localProperties;
                this.instructionIndex = 0;
                if (methodInfo) {
                    this.methodInfo = methodInfo;
                    this.instructions = methodInfo.instructions;
                    this.instructionCount = this.instructions.length;
                    var argIndex = 0;
                    var argCount = argValues ? argValues.length : 0;
                    if (methodInfo.params && methodInfo.params.length) {
                        for (var i = 0; i < methodInfo.params.length; i++) {
                            var param = methodInfo.params[i];
                            if (argIndex < argCount) {
                                localProperties[param.name] = argValues[argIndex];
                            }
                            else {
                                localProperties[param.name] = null;
                            }
                            argIndex++;
                        }
                    }
                }
            }
            CallStackEntry.prototype.setBlockMode = function (mode) {
                this.blockMode = mode;
                if (mode == "try") {
                    this.instructions = this.tryCatchBlock.block;
                }
                else if (mode == "catch") {
                    this.instructions = this.tryCatchBlock.handler;
                }
                else if (mode == "finally") {
                    this.instructions = this.tryCatchBlock.finalizer;
                }
                this.localProperties = {};
                this.instructionCount = this.instructions.length;
                this.instructionIndex = 0;
            };
            CallStackEntry.prototype.nextInstruction = function () {
                if (this.instructionIndex < this.instructionCount) {
                    return this.instructions[this.instructionIndex++];
                }
                return null;
            };
            CallStackEntry.prototype.isBreakPoint = function (line) {
                if (this.methodInfo && this.methodInfo.file) {
                    if (this.singleStep) {
                        return true;
                    }
                    var file = this.methodInfo.file;
                    if (file.breakPoints && file.breakPoints[line.toString()]) {
                        return true;
                    }
                }
                return false;
            };
            CallStackEntry.prototype.getPropertyValue = function (proc, name, errorIfMissing) {
                if (name in this.localProperties) {
                    return this.localProperties[name];
                }
                if (this.blockMode != "function") {
                    return this.parent.getPropertyValue(proc, name, errorIfMissing);
                }
                return proc.getObjectPropertyValue(proc.globalTarget, name, errorIfMissing); // could be a global variable
            };
            CallStackEntry.prototype.setPropertyValue = function (proc, name, value) {
                if (name in this.localProperties) {
                    this.localProperties[name] = value;
                    return;
                }
                if (this.blockMode != "function") {
                    this.parent.setPropertyValue(proc, name, value);
                    return;
                }
                proc.setObjectPropertyValue(proc.globalTarget, name, value);
            };
            CallStackEntry.prototype.createProperty = function (proc, name, value) {
                if (this.blockMode != "function") {
                    this.parent.createProperty(proc, name, value);
                    return;
                }
                this.localProperties[name] = value;
            };
            CallStackEntry.prototype.createBlockLevelProperty = function (proc, name, value) {
                this.localProperties[name] = value;
            };
            CallStackEntry.prototype.handleReturn = function (proc) {
                this.instructionIndex = this.instructions.length + 1; // set instruction pointer at end of function
                this.returnStatementExecuted = true;
            };
            CallStackEntry.prototype.jump = function (offset) {
                this.instructionIndex = this.instructionIndex + offset;
            };
            return CallStackEntry;
        })();
        VM.CallStackEntry = CallStackEntry;
        var VMPromise = (function () {
            function VMPromise(proc, instructions) {
                this.proc = proc;
                this.instructions = instructions;
            }
            VMPromise.prototype.then = function (func) {
                var inst = this.instructions;
                var proc = this.proc;
                proc.currentCall.returnStatementExecuted = true; // prevent pushing null onto stack
                if (inst.length > 1 && inst[1].opcode == "pop") {
                    var op = function () {
                        var value = proc.popValue();
                        var returnValue = func(value);
                        if (!proc.runner.paused) {
                            proc.pushValue(returnValue);
                        }
                    };
                    inst[1] = { "opcode": "callFunc", data: op };
                }
                return this;
            };
            return VMPromise;
        })();
        VM.VMPromise = VMPromise;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var TryCatchFinallyBlock = (function () {
            function TryCatchFinallyBlock() {
            }
            return TryCatchFinallyBlock;
        })();
        VM.TryCatchFinallyBlock = TryCatchFinallyBlock;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        // defines a property as the class level
        var ClassProperty = (function () {
            function ClassProperty() {
            }
            return ClassProperty;
        })();
        VM.ClassProperty = ClassProperty;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        // defines a method that can be executed
        var MethodInfo = (function () {
            function MethodInfo(name) {
                this.name = name;
            }
            MethodInfo.prototype.toJSON = function () {
                return { name: this.name, params: this.params, instructions: this.instructions, sourceLine: this.sourceLine };
            };
            return MethodInfo;
        })();
        VM.MethodInfo = MethodInfo;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var InstructionSet = (function () {
            function InstructionSet() {
            }
            // load a value onto the stack
            InstructionSet.ldvalue = function (proc, instruction) {
                proc.pushValue(instruction.value);
            };
            // load the value of a local property onto the stack
            InstructionSet.ldloc = function (proc, instruction) {
                proc.pushLocalValue(instruction);
            };
            InstructionSet.ldprop = function (proc, instruction) {
                var target = proc.popTarget();
                proc.pushValue(proc.getObjectPropertyValue(target, instruction.name));
            };
            InstructionSet.ldthisprop = function (proc, instruction) {
                proc.pushValue(proc.getObjectPropertyValue(proc.currentCall.target, instruction.name));
            };
            // call a property on a target object
            InstructionSet.callprop = function (proc, instruction) {
                var args = proc.buildArgsFromStack(instruction.argCount);
                var target = proc.popTarget();
                if (target == undefined) {
                    throw "Cannot call method: " + instruction.name + " on undefined";
                }
                if (target == null) {
                    throw "Cannot call method: " + instruction.name + " on null";
                }
                proc.callObjectMethod(target, instruction.name, args);
            };
            InstructionSet.delprop = function (proc, instruction) {
                var target = proc.popTarget();
                proc.deleteObjectProperty(target, instruction.name);
                proc.pushValue(true);
            };
            InstructionSet.callsuper = function (proc, instruction) {
                var args = proc.buildArgsFromStack(instruction.argCount);
                proc.callSuperMethod(proc.currentCall.target, instruction.name, args);
            };
            InstructionSet.retval = function (proc, instruction) {
                proc.currentCall.handleReturn(proc);
            };
            InstructionSet.ret = function (proc, instruction) {
                proc.currentCall.handleReturn(proc);
                proc.pushNullValue();
            };
            InstructionSet.crloc = function (proc, instruction) {
                var value = null;
                if (instruction.argCount) {
                    value = proc.popValue();
                }
                if (proc.allGlobalVars) {
                    proc.setObjectPropertyValue(proc.currentCall.target, instruction.name, value);
                }
                else {
                    proc.currentCall.createProperty(proc, instruction.name, value);
                }
            };
            InstructionSet.callFunc = function (proc, instruction) {
                var func = instruction.data;
                func(proc);
            };
            InstructionSet.noop = function () {
            };
            InstructionSet.ldpropc = function (proc, instruction) {
                // stack[-1] = target
                // stack[0] = property name
                var propertyName = proc.popValue();
                var target = proc.popTarget();
                proc.pushValue(proc.getObjectPropertyValue(target, propertyName));
            };
            InstructionSet.delpropc = function (proc, instruction) {
                // stack[-1] = target
                // stack[0] = property name
                var propertyName = proc.popValue();
                var target = proc.popTarget();
                proc.deleteObjectProperty(target, propertyName);
                proc.pushValue(true);
            };
            InstructionSet.ldthispropc = function (proc, instruction) {
                // stack[-1] = target
                // stack[0] = property name
                var propertyName = proc.popValue();
                proc.pushValue(proc.getObjectPropertyValue(proc.currentCall.target, propertyName));
            };
            InstructionSet.ldvaluethis = function (proc, instruction) {
                proc.pushValue(proc.currentCall.target);
            };
            InstructionSet.stloc = function (proc, instruction) {
                var value = proc.peekValue();
                proc.setLocalPropertyValue(instruction.name, value);
            };
            InstructionSet.stprop = function (proc, instruction) {
                // stack[-1] = target
                // stack[0] = value
                var value = proc.popValue();
                var target = proc.popTarget();
                proc.setObjectPropertyValue(target, instruction.name, value);
                proc.pushValue(value);
            };
            InstructionSet.stthisprop = function (proc, instruction) {
                // stack[-1] = target
                // stack[0] = value
                var value = proc.peekValue();
                proc.setObjectPropertyValue(proc.currentCall.target, instruction.name, value);
            };
            InstructionSet.stpropc = function (proc, instruction) {
                // stack[-2] == target
                // stack[-1] == propertyName
                // stack[0] == value
                var value = proc.popValue();
                var propertyName = proc.popValue();
                var target = proc.popTarget();
                proc.setObjectPropertyValue(target, propertyName, value);
                proc.pushValue(value);
            };
            InstructionSet.stthispropc = function (proc, instruction) {
                // stack[-1] == propertyName
                // stack[0] == value
                var value = proc.popValue();
                var propertyName = proc.popValue();
                proc.setObjectPropertyValue(proc.currentCall.target, propertyName, value);
                proc.pushValue(value);
            };
            InstructionSet.stproplv = function (proc, instruction) {
                // stack[-1] == target
                // stack[0] == value
                // leave the target on the stack
                var value = proc.popValue();
                var target = proc.peekTarget();
                proc.setObjectPropertyValue(target, instruction.name, value);
            };
            InstructionSet.crprop = function (proc, instruction) {
                // create class level property
                var value;
                if (instruction.argCount) {
                    value = proc.popValue();
                }
                else {
                    value = null;
                }
                proc.setObjectPropertyValue(proc.currentCall.target, instruction.name, value);
            };
            InstructionSet.inc = function (proc, instruction) {
                var value = proc.popValue();
                proc.pushValue(value + 1);
            };
            InstructionSet.incloc = function (proc, instruction) {
                var value = proc.getLocalPropertyValue(instruction.name);
                proc.setLocalPropertyValue(instruction.name, value + 1);
                proc.pushValue(value);
            };
            InstructionSet.dec = function (proc, instruction) {
                var value = proc.popValue();
                proc.pushValue(value - 1);
            };
            InstructionSet.decloc = function (proc, instruction) {
                var value = proc.getLocalPropertyValue(instruction.name);
                proc.setLocalPropertyValue(instruction.name, value - 1);
                proc.pushValue(value);
            };
            InstructionSet.incprop = function (proc, instruction) {
                var target = proc.popTarget();
                var value = proc.getObjectPropertyValue(target, instruction.name);
                proc.setObjectPropertyValue(target, instruction.name, value + 1);
                proc.pushValue(value);
            };
            InstructionSet.decprop = function (proc, instruction) {
                var target = proc.popTarget();
                var value = proc.getObjectPropertyValue(target, instruction.name);
                proc.setObjectPropertyValue(target, instruction.name, value - 1);
                proc.pushValue(value);
            };
            InstructionSet.callloc = function (proc, instruction) {
                var args = proc.buildArgsFromStack(instruction.argCount);
                proc.callObjectMethod(proc.globalTarget, instruction.name, args);
            };
            InstructionSet.callwrap = function (proc, instruction) {
                // wrapper for a call	
                proc.callObjectMethod(proc.currentCall.target, instruction.name, instruction.data);
            };
            InstructionSet.callpropc = function (proc, instruction) {
                var args = proc.buildArgsFromStack(instruction.argCount);
                var methodPointer = proc.popValue();
                //todo:  check is method Pointer
                proc.callObjectMethod(methodPointer.target, methodPointer.methodName, args);
            };
            InstructionSet.callthispropc = function (proc, instruction) {
                var args = proc.buildArgsFromStack(instruction.argCount);
                var methodName = proc.popValue();
                proc.callObjectMethod(proc.currentCall.target, methodName, args);
            };
            InstructionSet.callthisprop = function (proc, instruction) {
                var args = proc.buildArgsFromStack(instruction.argCount);
                proc.callObjectMethod(proc.currentCall.target, instruction.name, args);
            };
            InstructionSet.newobj = function (proc, instruction) {
                var args = proc.buildArgsFromStack(instruction.argCount);
                proc.newObj(instruction.name, args);
            };
            InstructionSet.pop = function (proc, instruction) {
                proc.popValue();
            };
            InstructionSet.dup = function (proc, instruction) {
                proc.pushValue(proc.peekValue());
            };
            InstructionSet.not = function (proc, instruction) {
                proc.pushValue(!proc.popValue());
            };
            InstructionSet.neg = function (proc, instruction) {
                proc.pushValue(-proc.popValue());
            };
            InstructionSet.throwvalue = function (proc, instruction) {
                var value = proc.popValue();
                var error;
                if (value instanceof VM.VMError) {
                    error = value;
                }
                else {
                    error = new VM.VMError(value);
                }
                error.name = "throw_statement";
                proc.raiseException(error);
            };
            InstructionSet.debug = function (proc, instruction) {
                throw "not implemented";
            };
            InstructionSet.brfalse = function (proc, instruction) {
                if (!proc.popValue()) {
                    proc.currentCall.jump(instruction.offset);
                }
            };
            InstructionSet.brtrue = function (proc, instruction) {
                if (proc.popValue()) {
                    proc.currentCall.jump(instruction.offset);
                }
            };
            InstructionSet.br = function (proc, instruction) {
                proc.currentCall.jump(instruction.offset);
            };
            InstructionSet.getenum = function (proc, instruction) {
                var value = proc.popValue();
                proc.currentCall.createBlockLevelProperty(proc, instruction.name, proc.getEnumerator(value));
            };
            InstructionSet.nextenum = function (proc, instruction) {
                var enumerator = proc.getLocalPropertyValue(instruction.enumprop);
                if (!enumerator.next()) {
                    proc.currentCall.jump(instruction.offset);
                }
                proc.currentCall.createBlockLevelProperty(proc, instruction.name, enumerator.current);
            };
            InstructionSet.add = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 + v2);
            };
            InstructionSet.sub = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 - v2);
            };
            InstructionSet.mult = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 * v2);
            };
            InstructionSet.div = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                if (v2) {
                    proc.pushValue(v1 / v2);
                }
                else {
                    proc.pushValue(0);
                }
            };
            InstructionSet.rem = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                if (v2) {
                    proc.pushValue(v1 % v2);
                }
                else {
                    proc.pushValue(0);
                }
            };
            InstructionSet.cmpeq = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 == v2);
            };
            InstructionSet.cmpsteq = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 === v2);
            };
            InstructionSet.cmpnoteq = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 != v2);
            };
            InstructionSet.cmpstnoteq = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 !== v2);
            };
            InstructionSet.cmpgreater = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 > v2);
            };
            InstructionSet.cmpgreatereq = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 > v2);
            };
            InstructionSet.cmpless = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 < v2);
            };
            InstructionSet.cmplesseq = function (proc, instruction) {
                var v2 = proc.popValue();
                var v1 = proc.popValue();
                proc.pushValue(v1 <= v2);
            };
            InstructionSet.tryblock = function (proc, instruction) {
                var block = instruction.data;
                proc.startTryCatch(block);
            };
            return InstructionSet;
        })();
        VM.InstructionSet = InstructionSet;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var ProcessBase = (function () {
            function ProcessBase() {
                this.pauseCount = 0;
                this.execInstructionCount = 0;
                this.childProcessCount = 0;
            }
            // start an instance of virtual machince
            ProcessBase.prototype.start = function (options) {
                this.valueStack = [];
                this.callStack = [];
                var c = new VM.CallStackEntry(null, options.target, options.methodInfo, options.args);
                if (options.localProperties) {
                    var loc = options.localProperties;
                    for (var key in loc) {
                        c.localProperties[key] = loc[key];
                    }
                }
                this.globalTarget = options.globalTarget || VM.globalObj;
                this.currentCall = c;
                var result;
                result = this.run();
                if (this.sync && this.syncException) {
                    throw this.syncException;
                }
                return result;
            };
            ProcessBase.prototype.showBreakPoint = function (callEntry, inst) {
            };
            // execute the instruction in the current method/function
            ProcessBase.prototype.run = function () {
                var runner = this.runner = new VM.InstructionRunner(this);
                return runner.start();
            };
            ProcessBase.prototype.endOfBlock = function () {
                var endingBlock = this.currentCall;
                if (endingBlock.blockMode == "try" || endingBlock.blockMode == "catch") {
                    if (endingBlock.tryCatchBlock.finalizer) {
                        endingBlock.setBlockMode("finally");
                        return;
                    }
                }
                if (this.callStack.length > 0) {
                    if (!endingBlock.returnStatementExecuted && endingBlock.blockMode == "function") {
                        this.pushNullValue();
                    }
                    this.currentCall = this.callStack.pop();
                    if (endingBlock.returnStatementExecuted && endingBlock.blockMode != "function") {
                        this.currentCall.handleReturn(this);
                    }
                    if (endingBlock.rethrowOnComplete) {
                        this.handleException(endingBlock.rethrowOnComplete);
                    }
                }
                else {
                    this.currentCall = null;
                }
            };
            ProcessBase.prototype.raiseException = function (e) {
                if (!e.script_stack) {
                    e.script_stack = this.createErrorStack();
                }
                this.handleException(e);
            };
            ProcessBase.prototype.handleException = function (e) {
                while (this.currentCall) {
                    if (this.currentCall.blockMode == "try") {
                        var tryCatchBlock = this.currentCall.tryCatchBlock;
                        if (tryCatchBlock.handler) {
                            this.currentCall.setBlockMode("catch");
                            this.currentCall.createBlockLevelProperty(this, tryCatchBlock.handlerParameterName, e);
                            return true;
                        }
                        if (tryCatchBlock.finalizer) {
                            this.currentCall.setBlockMode("finally");
                            this.currentCall.rethrowOnComplete = e;
                            return true;
                        }
                    }
                    if (this.callStack.length > 0) {
                        this.currentCall = this.callStack.pop();
                    }
                    else {
                        this.currentCall = null;
                    }
                }
                // uncaught exception
                this.throwUnhandledException(e);
                return false;
            };
            // suspend execution of the virtual machine
            ProcessBase.prototype.pause = function () {
                this.pauseCount++;
                this.runner.paused = true;
                return new VM.AsyncMethod(this);
            };
            ProcessBase.prototype.redirected = function () {
                this.wasRedirected = true;
                this.runner.paused = true;
            };
            // resume execution of instructions after pausing the virtual machine
            ProcessBase.prototype.createErrorForResume = function (data) {
                return new VM.VMError(data);
            };
            ProcessBase.prototype.createNewObjForType = function (name, args) {
                throw new Error("Unknown object type: " + name);
            };
            ProcessBase.prototype.newObj = function (name, args) {
                var obj;
                switch (name) {
                    case "Array":
                        obj = args;
                        break;
                    case "Object":
                        obj = {};
                        break;
                    default:
                        var vmType = this.getType(name);
                        if (vmType && vmType.constructorFunc) {
                            var c = vmType.constructorFunc;
                            if (c.__native) {
                                c = c.__native;
                            }
                            if (args.length == 0) {
                                obj = new c();
                            }
                            else if (args.length = 1) {
                                obj = new c(args[0]);
                            }
                            else if (args.length = 2) {
                                obj = new c(args[0], args[1]);
                            }
                            else if (args.length = 3) {
                                obj = new c(args[0], args[1], args[2]);
                            }
                            else if (args.length = 4) {
                                obj = new c(args[0], args[1], args[2], args[3]);
                            }
                            else if (args.length = 5) {
                                obj = new c(args[0], args[1], args[2], args[3], args[4]);
                            }
                        }
                }
                if (obj) {
                    this.pushValue(obj);
                    return;
                }
                this.createNewObjForType(name, args);
            };
            ProcessBase.prototype.createErrorFromResponse = function (data) {
                var error;
                if (data.error) {
                    error = VM.VMError.fromResponse(data);
                    var stackItems = [];
                    if (data.error.script_stack) {
                        var serverStack = data.error.script_stack;
                        if (serverStack.items) {
                            for (var i = 0; i < serverStack.items.length; i++) {
                                var serverItem = serverStack.items[i];
                                stackItems.push({ method_name: serverItem.method_name, class_name: serverItem.class_name, line_number: serverItem.line_number, source: "server" });
                            }
                        }
                    }
                    error.script_stack = this.createErrorStack(stackItems);
                }
                return error;
            };
            ProcessBase.prototype.debugResume = function () {
                this.singleStep = false;
                this.run();
            };
            ProcessBase.prototype.debugStepInto = function () {
                this.singleStep = true;
                this.run();
            };
            // pop a value off of the stack suitable for use as a target object
            ProcessBase.prototype.popTarget = function () {
                return this.valueStack.pop();
            };
            ProcessBase.prototype.peekTarget = function () {
                return this.valueStack[this.valueStack.length - 1];
            };
            ProcessBase.prototype.popValue = function () {
                return this.valueStack.pop();
            };
            ProcessBase.prototype.peekValue = function () {
                return this.valueStack[this.valueStack.length - 1];
            };
            ProcessBase.prototype.pushValue = function (value) {
                this.valueStack.push(value);
            };
            ProcessBase.prototype.pushNullValue = function () {
                this.valueStack.push(null);
            };
            ProcessBase.prototype.getStaticTypeValue = function (name) {
                throw "ReferenceError: " + name + " is not defined";
            };
            ProcessBase.prototype.getLocalPropertyValue = function (name) {
                if (name !== "NaN" && name[0] >= "A" && name[0] <= "Z") {
                    var type = this.getType(name);
                    if (type) {
                        if (type.staticInstance) {
                            return type.staticInstance;
                        }
                        else {
                            throw "ReferenceError: " + name + " does not have a static instance";
                        }
                    }
                    return this.getStaticTypeValue(name);
                }
                else {
                    return this.currentCall.getPropertyValue(this, name, true);
                }
            };
            ProcessBase.prototype.getType = function (name) {
                return null;
            };
            ProcessBase.prototype.setLocalPropertyValue = function (name, value) {
                this.currentCall.setPropertyValue(this, name, value);
            };
            ProcessBase.prototype.getLocalMethodPointer = function (name) {
                return this.getObjectMethodPointer(this.currentCall.target, name);
            };
            ProcessBase.prototype.setObjectPropertyValue = function (target, name, value) {
                if (target === null || target === undefined) {
                    throw "TypeError: Cannot set property '" + name + "' of null";
                }
                if (target.__isVMObject) {
                    target.setProperty({ name: name, value: value, proc: this });
                }
                else {
                    target[name] = value;
                }
            };
            ProcessBase.prototype.getObjectPropertyValue = function (target, name, errorIfMissing) {
                if (target === null || target === undefined) {
                    throw "TypeError: Cannot read property '" + name + "' of undefined";
                }
                if (target.__isVMObject) {
                    return target.getProperty({ proc: this, name: name, errorIfMissing: errorIfMissing });
                }
                else if (errorIfMissing) {
                    if (name in target) {
                        return target[name];
                    }
                    throw "ReferenceError: " + name + " is not defined";
                }
                else {
                    return target[name];
                }
            };
            ProcessBase.prototype.getObjectMethodPointer = function (obj, name) {
                return new VM.MethodPointer(obj, name);
            };
            ProcessBase.prototype.deleteObjectProperty = function (target, name) {
                if (target === null || target === undefined) {
                    throw "ReferenceError: cannot delete property '" + name + "' of undefined";
                }
                if (target.__isVMObject) {
                    return target.deleteProperty({ proc: this, name: name });
                }
                else {
                    delete target[name];
                }
            };
            ProcessBase.prototype.buildArgsFromStack = function (argCount) {
                var args = [];
                if (argCount) {
                    for (var i = 0; i < argCount; i++) {
                        args.unshift(this.popValue());
                    }
                }
                return args;
            };
            ProcessBase.prototype.callObjectMethod = function (target, name, args) {
                if (target.__isVMObject) {
                    target.callMethod(new VM.CallParameters(name, args, this));
                }
                else {
                    var method = target[name];
                    if (method) {
                        this.pushValue(method.apply(target, args));
                    }
                    else {
                        throw "Unknown method: " + name;
                    }
                }
            };
            ProcessBase.prototype.callSuperMethod = function (target, name, args) {
                if (target.__isVMObject) {
                    target.callSuperMethod(new VM.CallParameters(name, args, this));
                }
                else {
                    throw "super not valid on this object, cannot call: " + name;
                }
            };
            ProcessBase.prototype.getEnumerator = function (value) {
                if (!value) {
                    return null;
                }
                if (value.__getEnumerator) {
                    return value.__getEnumerator();
                }
                if (Array.isArray(value)) {
                    return new VM.Enumerator(value);
                }
                var keys = Object.keys(value);
                return new VM.Enumerator(keys);
            };
            ProcessBase.prototype.startMethod = function (target, methodInfo, args) {
                this.callStack.push(this.currentCall);
                var c = new VM.CallStackEntry(this.currentCall, target, methodInfo, args);
                this.currentCall = c;
            };
            ProcessBase.prototype.startTryCatch = function (block) {
                var current = this.currentCall;
                this.callStack.push(this.currentCall);
                var c = new VM.CallStackEntry(current, current.target, current.methodInfo, null);
                c.tryCatchBlock = block;
                c.setBlockMode("try");
                this.currentCall = c;
            };
            ProcessBase.prototype.throwUnhandledException = function (error) {
                if (this.sync) {
                    this.syncException = error;
                }
                if (this.onException) {
                    this.onException(error);
                }
                this.runner.paused = true; // stop running
            };
            ProcessBase.prototype.createErrorStack = function (items) {
                // change to get stack trace
                if (!items) {
                    items = [];
                }
                var lineInfo;
                if (this.currentCall) {
                    lineInfo = this.getCallStackLineInfo(this.currentCall);
                    if (this.currentCall.blockMode == "function") {
                        items.push(this.getCallStackErrorInfo(this.currentCall, lineInfo));
                        lineInfo = null;
                    }
                }
                if (this.callStack) {
                    var n = this.callStack.length - 1;
                    for (var i = n; i >= 0; i--) {
                        var entry = this.callStack[i];
                        if (!lineInfo) {
                            lineInfo = this.getCallStackLineInfo(entry);
                        }
                        if (entry.blockMode == "function") {
                            items.push(this.getCallStackErrorInfo(entry, lineInfo));
                            lineInfo = null;
                        }
                    }
                }
                var stack = { items: items };
                return stack;
            };
            ProcessBase.prototype.getCallStackLineInfo = function (entry) {
                var lastInstruction = (entry.instructionIndex > 0) ? entry.instructions[entry.instructionIndex - 1] : null;
                var info = { line_number: 0, column_number: 0 };
                if (lastInstruction) {
                    info.line_number = (lastInstruction.line || "0");
                    info.column_number = (lastInstruction.column || "0");
                }
                return info;
            };
            ProcessBase.prototype.getCallStackErrorInfo = function (entry, lineInfo) {
                var item = {};
                if (entry.methodInfo) {
                    item.method_name = entry.methodInfo.name;
                    if (entry.methodInfo.file) {
                        var file = entry.methodInfo.file;
                        item.filename = file.getFullName();
                    }
                    item.expression = entry.methodInfo.sourceCode;
                    item.elementId = entry.methodInfo.elementId;
                }
                item.line_number = lineInfo.line_number;
                item.column_number = lineInfo.column_number;
                return item;
            };
            ProcessBase.prototype.getNewProcess = function () {
                return null;
            };
            ProcessBase.prototype.createChildProcess = function () {
                var child = this.getNewProcess();
                child.isChild = true;
                if (this.isChild) {
                    child.root = this.root;
                }
                else {
                    child.root = this;
                }
                child.globalTarget = this.globalTarget;
                child.onException = this.onException;
                this.initChild(child);
                child.root.childProcessCount++;
                return child;
            };
            ProcessBase.prototype.initChild = function (child) {
            };
            ProcessBase.prototype.completed = function (value) {
                if (this.isChild) {
                    var root = this.root;
                    root.childProcessCount--;
                    if (root.childProcessCount == 0 && root.waitingForChildComplete) {
                        root.onComplete(root.completedValue);
                    }
                }
                else if (this.onComplete) {
                    if (this.childProcessCount == 0) {
                        this.onComplete(value);
                    }
                    else {
                        this.completedValue = value;
                        this.waitingForChildComplete = true;
                    }
                }
            };
            ProcessBase.prototype.childProcessComplete = function (child) {
                this.childProcessCount--;
            };
            return ProcessBase;
        })();
        VM.ProcessBase = ProcessBase;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var InstructionRunner = (function () {
            function InstructionRunner(proc) {
                this.proc = proc;
            }
            InstructionRunner.prototype.start = function () {
                var maxCount = VM.maxInstructionExecution;
                var proc = this.proc;
                while (!this.paused) {
                    var inst = proc.currentCall.nextInstruction();
                    if (proc.execInstructionCount++ > maxCount) {
                        proc.throwUnhandledException(new VM.VMError("The process was terminated because the maximum instruction count of " + maxCount.toString() + " was reached.  Check for a possible endless loop in your code"));
                        this.paused = true;
                        return;
                    }
                    if (inst) {
                        try {
                            if (proc.debugEnabled) {
                                var c = proc.currentCall;
                                if (inst.line != c.currentBreakLine) {
                                    if (c.isBreakPoint(inst.line) || (proc.singleStep && c.methodInfo && c.methodInfo.file)) {
                                        c.instructionIndex--; // rollback
                                        c.currentBreakLine = inst.line;
                                        this.paused = true;
                                        proc.showBreakPoint(c, inst);
                                        return;
                                    }
                                }
                            }
                            VM.InstructionSet[inst.opcode](proc, inst);
                        }
                        catch (e) {
                            //??? is this.paused , do not handle error, the async exception will be called
                            var error;
                            if (e instanceof VM.VMError) {
                                error = e;
                            }
                            else {
                                error = new VM.VMError(e);
                            }
                            error.script_stack = proc.createErrorStack();
                            if (error.catchable) {
                                proc.handleException(error);
                            }
                            else {
                                proc.throwUnhandledException(error);
                                this.paused = true; // stop running
                            }
                        }
                    }
                    else {
                        proc.endOfBlock();
                        if (!proc.currentCall && !this.paused) {
                            var value = undefined;
                            if (proc.valueStack.length) {
                                value = proc.popValue();
                            }
                            proc.completed(value);
                            return value; // end of execution
                        }
                    }
                }
            };
            return InstructionRunner;
        })();
        VM.InstructionRunner = InstructionRunner;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var AsyncMethod = (function () {
            function AsyncMethod(proc) {
                this.proc = proc;
            }
            AsyncMethod.prototype.cont = function (error, result) {
                if (error) {
                    this.exception(error);
                }
                else {
                    this.resume(result);
                }
            };
            AsyncMethod.prototype.resume = function (returnValue) {
                if (this._then) {
                    var then = this._then;
                    this._then = null;
                    then(returnValue);
                    return;
                }
                this.proc.pushValue(returnValue);
                this.proc.run();
            };
            AsyncMethod.prototype.exception = function (error) {
                if (this._onerror) {
                    var onerror = this._onerror;
                    this._onerror = null;
                    onerror(error);
                    return;
                }
                var proc = this.proc;
                if (!(error instanceof VM.VMError)) {
                    error = proc.createErrorForResume(error);
                }
                if (error.script_stack) {
                    error.script_stack = proc.createErrorStack(error.script_stack.items);
                }
                else if (error.name == "compile") {
                    var items = [
                        { filename: error.source.filename, line_number: error.source.line }
                    ];
                    error.script_stack = proc.createErrorStack(items);
                }
                else {
                    error.script_stack = proc.createErrorStack();
                }
                if (error && error.catchable) {
                    if (proc.handleException(error)) {
                        proc.run();
                    }
                }
                else if (proc.onException) {
                    proc.onException(error);
                }
                else {
                    VM.handleError(error);
                }
            };
            AsyncMethod.prototype.error = function (error) {
                this.exception(error);
            };
            AsyncMethod.prototype.onerror = function (func) {
                this._onerror = func;
            };
            AsyncMethod.prototype.then = function (func) {
                this._then = func;
            };
            return AsyncMethod;
        })();
        VM.AsyncMethod = AsyncMethod;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var Prototype = (function () {
            function Prototype(name) {
                this.name = name;
                this.properties = {};
                this.methods = {};
            }
            Prototype.prototype.load = function (data) {
                this.name = data.name;
                this.properties = data.properties;
                this.methods = data.methods;
                this.constructorMethod = data.constructorMethod;
            };
            Prototype.prototype.extendsBase = function (base) {
                for (var methodName in base.methods) {
                    if (!this.methods[methodName]) {
                        this.methods[methodName] = base.methods[methodName];
                    }
                }
            };
            Prototype.prototype.toJSON = function () {
                return { name: this.name, constructorMethod: this.constructorMethod, properties: this.properties, methods: this.methods };
            };
            return Prototype;
        })();
        VM.Prototype = Prototype;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var ObjectBase = (function () {
            function ObjectBase(myPrototype) {
                this.__isVMObject = true;
                this.myPrototype = myPrototype;
            }
            ObjectBase.prototype.get = function (name) {
                return this.getProperty({ name: name });
            };
            ObjectBase.prototype.getProperty = function (params) {
                var getter = this["vm_get_" + params.name];
                if (getter) {
                    return getter.apply(this, [params]);
                }
                else {
                    return this.getMissingProperty(params);
                }
            };
            ObjectBase.prototype.set = function (name, value) {
                this.setProperty({ name: name, value: value });
            };
            ObjectBase.prototype.setProperty = function (params) {
                var setter = this["vm_set_" + params.name];
                if (setter) {
                    setter.apply(this, [params]);
                }
                else {
                    this.setMissingProperty(params);
                }
            };
            ObjectBase.prototype.deleteProperty = function (params) {
                throw "Error: cannot delete property '" + params.name + "' from this object type";
            };
            ObjectBase.prototype.getPrototypeMethod = function (name) {
                var prototype = this.myPrototype;
                if (prototype) {
                    var methodInfo = prototype.methods[name];
                    if (methodInfo) {
                        return methodInfo;
                    }
                    if (prototype.base) {
                        return prototype.base.methods[name];
                    }
                }
                return null;
            };
            ObjectBase.prototype.vm___methodHasCode = function (params) {
                var method = this.getPrototypeMethod(params.args[0]);
                if (!method) {
                    return false;
                }
                return (method.instructions.length > 0);
            };
            ObjectBase.prototype.vm___callMethod = function (params) {
                var args = params.args;
                var methodName = args[0];
                var methodArgs = args[1];
                return params.proc.callObjectMethod(this, methodName, methodArgs);
            };
            ObjectBase.prototype.vmCall = function (targetMethod, proc, args) {
                var methodInfo = new VM.MethodInfo("vmCall");
                var self = this;
                var func = function (process) {
                    var callParams = new VM.CallParameters("", args, proc);
                    var returnValue = targetMethod.apply(self, [callParams]);
                    if (!proc.runner.paused) {
                        proc.pushValue(returnValue);
                    }
                };
                methodInfo.instructions = [{ opcode: "callFunc", data: func }, { opcode: "pop" }];
                proc.startMethod(this, methodInfo, args);
                return new VM.VMPromise(proc, methodInfo.instructions);
            };
            ObjectBase.prototype.callMethod = function (params) {
                var methodInfo = this.getPrototypeMethod(params.name);
                var proc = params.proc;
                if (methodInfo) {
                    proc.startMethod(this, methodInfo, params.args);
                    return;
                }
                var method = this["vm_" + params.name];
                var callingRunner = proc.runner;
                var returnValue;
                if (method) {
                    var args = [params].concat(params.args);
                    returnValue = method.apply(this, args);
                    if (!callingRunner.paused) {
                        proc.pushValue(returnValue);
                    }
                }
                else {
                    returnValue = this.callMissingMethod(params);
                    if (!callingRunner.paused) {
                        proc.pushValue(returnValue);
                    }
                }
            };
            ObjectBase.prototype.callSuperMethod = function (params) {
                if (this.myPrototype.base) {
                    var methodInfo = this.myPrototype.base.methods[params.name];
                    if (methodInfo) {
                        params.proc.startMethod(this, methodInfo, params.args);
                        return;
                    }
                }
                throw new VM.VMError({ name: "ReferenceError", message: "Super ReferenceError: " + params.name + " is not defined" });
            };
            ObjectBase.prototype.getMissingProperty = function (params) {
                throw new VM.VMError({ name: "ReferenceError", message: "ReferenceError: " + params.name + " is not defined" });
            };
            ObjectBase.prototype.setMissingProperty = function (params) {
                throw new VM.VMError({ name: "ReferenceError", message: "ReferenceError: " + params.name + " is not defined" });
            };
            ObjectBase.prototype.callMissingMethod = function (params) {
                throw new VM.VMError({ name: "ReferenceError", message: "Method ReferenceError: " + params.name + " is not defined" });
            };
            ObjectBase.prototype.callConstructor = function (proc, done) {
                var self = this;
                if (this.myPrototype && this.myPrototype.constructorMethod) {
                    if (done) {
                        proc.onException = function (e) {
                            done(e, self);
                        };
                        proc.onComplete = function () {
                            done(null, self);
                        };
                    }
                    else {
                        proc.sync = true;
                    }
                    proc.start({ methodInfo: this.myPrototype.constructorMethod, target: this });
                    return;
                }
                else {
                    if (done) {
                        done(null, self);
                    }
                }
            };
            return ObjectBase;
        })();
        VM.ObjectBase = ObjectBase;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var ObjectWithProperties = (function (_super) {
            __extends(ObjectWithProperties, _super);
            function ObjectWithProperties() {
                _super.apply(this, arguments);
                this.propertyValues = {};
            }
            ObjectWithProperties.prototype.getMissingProperty = function (params) {
                if (params.errorIfMissing) {
                    if (params.name in this.propertyValues) {
                        return this.propertyValues[params.name];
                    }
                    throw "ReferenceError: " + params.name + " is not defined";
                }
                return this.propertyValues[params.name];
            };
            ObjectWithProperties.prototype.setMissingProperty = function (params) {
                this.propertyValues[params.name] = params.value;
            };
            return ObjectWithProperties;
        })(VM.ObjectBase);
        VM.ObjectWithProperties = ObjectWithProperties;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var VMError = (function (_super) {
            __extends(VMError, _super);
            function VMError(arg) {
                _super.call(this, null);
                this.messages = [];
                this.name = "unspecified_user_error";
                this.initialize(arg);
            }
            VMError.prototype.toJSON = function () {
                return { messages: this.messages, script_stack: this.script_stack, jsStack: this.jsStack, fields: this.fields, name: this.name, catchable: this.catchable, title: this.title, source: this.source };
            };
            VMError.cast = function (arg) {
                if (arg instanceof VMError) {
                    return arg;
                }
                else {
                    return new VMError(arg);
                }
            };
            VMError.prototype.initialize = function (arg) {
                if (!arg) {
                    return;
                }
                if (typeof arg == "string" || typeof arg == "number") {
                    this.messages = [arg];
                }
                else if (arg instanceof Error) {
                    this.messages = [arg.toString()];
                    this.jsStack = arg.stack;
                }
                else if (arg.readyState && arg.status) {
                    // is an ajax response
                    this.status = arg.status;
                    if (arg.responseJSON) {
                        this.parseObj(arg.responseJSON);
                    }
                    else {
                        this.messages = arg.responseText;
                    }
                }
                else if (arg) {
                    this.parseObj(arg);
                }
            };
            VMError.prototype.parseObj = function (arg) {
                if (Array.isArray(arg)) {
                    this.parseArray(arg);
                }
                else {
                    if (arg.errors) {
                        var errors = arg.errors;
                        if (Array.isArray(errors)) {
                            this.parseArray(errors);
                        }
                        else {
                            this.messages.push(errors);
                        }
                    }
                    if (arg.messages) {
                        this.messages = arg.messages;
                    }
                    else if (arg.message) {
                        this.messages = [arg.message];
                    }
                    if (arg.title) {
                        this.title = arg.title;
                    }
                    if (arg.fields) {
                        this.fields = arg.fields;
                        this.formatFields();
                    }
                    if (arg.name) {
                        this.name = arg.name;
                    }
                    else if (arg.code) {
                        this.name = arg.code;
                    }
                    if (arg.catchable) {
                        this.catchable = arg.catchable;
                    }
                    if (arg.jsStack) {
                        this.jsStack = arg.jsStack;
                    }
                }
            };
            VMError.prototype.parseArray = function (arg) {
                if (arg.length) {
                    for (var i = 0; i < arg.length; i++) {
                        var item = arg[i];
                        if (typeof item == "string") {
                            this.messages.push(item);
                        }
                        else if (item && item.message) {
                            this.messages.push(item.message);
                        }
                    }
                }
            };
            VMError.fromResponse = function (data) {
                var error = new VMError();
                error.messages = data.error.messages;
                error.fields = data.error.fields;
                error.name = data.error.name;
                error.source = data.error.source;
                error.script_stack = data.error.script_stack;
                if (error.script_stack && error.script_stack.items) {
                    var items = error.script_stack.items;
                    var k = items.length;
                    while (k--) {
                        items[k].source = "server";
                    }
                }
                return error;
            };
            VMError.prototype.formatFields = function () {
                if (this.fields) {
                    for (var key in this.fields) {
                        var value = this.fields[key];
                        if (!Array.isArray(value)) {
                            if (typeof value == "string" || typeof value == "number") {
                                this.fields[key] = [value];
                            }
                            else {
                                this.fields[key] = [value.toString()];
                            }
                        }
                    }
                }
            };
            VMError.prototype.vm_constructor = function (params) {
                var arg = params.args[0];
                this.initialize(arg);
            };
            VMError.prototype.vm_set_message = function (params) {
                if (params.value) {
                    this.messages = params.value.split('\n');
                }
                else {
                    this.messages = [];
                }
            };
            VMError.prototype.vm_get_message = function (params) {
                return this.messages.join('\n');
            };
            VMError.prototype.vm_get_messages = function (params) {
                return this.messages;
            };
            VMError.prototype.vm_set_messages = function (params) {
                this.messages = params.value;
            };
            VMError.prototype.vm_get_stack = function (params) {
                return this.script_stack;
            };
            VMError.prototype.vm_get_fields = function (params) {
                return this.fields;
            };
            VMError.prototype.vm_get_name = function (params) {
                return this.name;
            };
            VMError.prototype.vm_set_name = function (params) {
                this.name = params.value;
            };
            VMError.prototype.addElementSource = function (attr) {
                if (!this.source) {
                    this.source = {};
                }
                var src = this.source;
                src.type = "element";
                src.id = attr.id;
                src.codeText = "";
                src.codeLink = "<" + attr.kind + "> ELEMENT";
                if (attr._compiled) {
                    src.filename = attr._compiled._src;
                    if (this.script_stack && this.script_stack.items && this.script_stack.items.length) {
                        // set the info on the outer most stack item
                        var stackItem = this.script_stack.items[this.script_stack.items.length - 1];
                        stackItem.filename = src.filename;
                        stackItem.elementId = attr.id;
                    }
                }
            };
            return VMError;
        })(VM.ObjectBase);
        VM.VMError = VMError;
        VM.addType("Error", VMError, null);
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ORM;
    (function (ORM) {
        var QueryBase = (function (_super) {
            __extends(QueryBase, _super);
            function QueryBase() {
                _super.apply(this, arguments);
            }
            QueryBase.prototype.vm_limit = function (params) {
                if (params.args.length) {
                    this.setLimit(params.args[0]);
                }
                return this;
            };
            QueryBase.prototype.setLimit = function (value) {
                this.limit = value;
            };
            QueryBase.prototype.vm_take = function (params) {
                return this.vm_limit(params);
            };
            QueryBase.prototype.vm_skip = function (params) {
                if (params.args.length) {
                    this.setSkip(params.args[0]);
                }
                return this;
            };
            QueryBase.prototype.setSkip = function (value) {
                this.skip = value;
            };
            QueryBase.prototype.vm_select = function (params) {
                var arg = params.getIndex(0);
                if (Array.isArray(arg)) {
                    this.addColumns(arg);
                }
                else {
                    this.addColumns(params.args);
                }
            };
            QueryBase.prototype.addColumns = function (columns) {
                if (!columns) {
                    return;
                }
                if (!Array.isArray(columns)) {
                    throw "Expected an array of columns as argument";
                }
                ;
                this.columns = this.columns || [];
                this.columns = this.columns.concat(this.columns, columns);
            };
            QueryBase.prototype.addGroups = function (groups) {
                if (!groups) {
                    return;
                }
                if (!Array.isArray(groups)) {
                    throw "Expected an array of groups as argument";
                }
                ;
                this.groups = this.groups || [];
                this.groups = this.groups.concat(this.groups, groups);
            };
            QueryBase.prototype.vm_groupBy = function (params) {
                this.addGroups([params.getIndex(0)]);
                return this;
            };
            QueryBase.prototype.vm_distinct = function (params) {
                this.distinct = true;
            };
            QueryBase.prototype.vm_orderBy = function (params) {
                this.addOrderByArgs(params.args);
                return this;
            };
            QueryBase.prototype.vm_where = function (params) {
                this.addCondition("AND", params.args);
                return this;
            };
            QueryBase.prototype.vm_and = function (params) {
                var args = params.args;
                this.addCondition("AND", args);
                return this;
            };
            QueryBase.prototype.vm_or = function (params) {
                this.addCondition("OR", params.args);
                return this;
            };
            QueryBase.prototype.vm_timeframe = function (params) {
                this.timeframe = params.getIndex(0);
                return this;
            };
            QueryBase.prototype.vm_interval = function (params) {
                this.interval = params.getIndex(0);
                return this;
            };
            QueryBase.prototype.vm_whereBetween = function (params) {
                this.conditions.push({ booleanOperator: "AND", column: params.args[0], operator: "between", value: params.args[1], value2: params.args[2] });
                return this;
            };
            QueryBase.prototype.vm_not = function (params) {
                var arg = params.getIndex(0);
                if (arg instanceof ORM.Query) {
                    var q = arg;
                    var cond = { booleanOperator: "NOT", operator: "", children: q.conditions };
                    this.conditions.push(cond);
                    return this;
                }
                throw "NOT method expects a Query as argument";
            };
            QueryBase.prototype.addCondition = function (booleanOp, args) {
                var cond;
                if (args.length == 3) {
                    cond = { booleanOperator: booleanOp, column: args[0], operator: args[1], value: args[2] };
                }
                else if (args.length == 2) {
                    cond = { booleanOperator: booleanOp, column: args[0], operator: "=", value: args[1] };
                }
                else if (args.length == 1) {
                    var arg = args[0];
                    if (arg instanceof ORM.Query) {
                        var q = arg;
                        cond = { booleanOperator: booleanOp, operator: "", children: q.conditions };
                    }
                }
                if (cond) {
                    this.conditions.push(cond);
                }
            };
            QueryBase.prototype.addOrderByArgs = function (args) {
                var field = args[0];
                var direction;
                if (args.length > 1) {
                    direction = args[1];
                }
                this.addOrderBy(field, direction);
            };
            QueryBase.prototype.addOrderBy = function (field, direction) {
                if (!this.orders) {
                    this.orders = [];
                }
                this.orders.push({ field: field, direction: direction });
            };
            QueryBase.prototype.serialize = function () {
                return {
                    conditions: this.conditions,
                    orders: this.orders,
                    columns: this.columns,
                    limit: this.limit,
                    skip: this.skip,
                    distinct: this.distinct,
                    timeframe: this.timeframe,
                    interval: this.interval,
                    groups: this.groups
                };
            };
            QueryBase.prototype.deserialize = function (arg) {
                this.conditions = arg.conditions;
                this.orders = arg.orders;
                this.columns = arg.columns;
                this.limit = arg.limit;
                this.skip = arg.skip;
                this.distinct = arg.distinct;
                this.timeframe = arg.timeframe;
                this.groups = arg.groups;
                this.interval = arg.interval;
            };
            return QueryBase;
        })(Retool.VM.ObjectBase);
        ORM.QueryBase = QueryBase;
    })(ORM = Retool.ORM || (Retool.ORM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ValidationError = (function (_super) {
        __extends(ValidationError, _super);
        function ValidationError(message) {
            _super.call(this, null);
            this.name = "validation_error";
            if (message) {
                this.messages.push(message);
            }
            this.fields = {};
        }
        ValidationError.prototype.addFieldError = function (field, error) {
            var fieldError = this.fields[field];
            if (!fieldError) {
                fieldError = [];
                this.fields[field] = fieldError;
            }
            fieldError.push(error);
            this.hasErrors = true;
        };
        ValidationError.prototype.vm_field = function (params) {
            this.field(params.args[0], params.args[1]);
            return this;
        };
        ValidationError.prototype.field = function (name, error) {
            this.addFieldError(name, error);
            return this;
        };
        ValidationError.prototype.addGeneralError = function (error) {
            this.messages.push(error);
            this.hasErrors = true;
        };
        ValidationError.prototype.add = function (error) {
            this.addGeneralError(error);
        };
        ValidationError.prototype.required = function (field, value, error) {
            if (!value) {
                this.addFieldError(field, error);
                return false;
            }
            return true;
        };
        ValidationError.prototype.vm_required = function (params) {
            var args = params.args;
            if (args.length > 2) {
                this.required(args[0], args[1], args[2]);
            }
            else if (args.length > 1) {
                this.required(args[0], args[1], args[0] + " is a required field");
            }
            else {
                throw "Missing parameters on required method";
            }
        };
        ValidationError.prototype.vm_add = function (params) {
            var args = params.args;
            if (args.length == 2) {
                this.addFieldError(args[0], args[1]);
            }
            else if (args.length) {
                this.addGeneralError(args[0]);
            }
        };
        ValidationError.prototype.vm_get_hasErrors = function (params) {
            return this.hasErrors;
        };
        ValidationError.prototype.throwIfAny = function () {
            if (this.hasErrors) {
                throw this;
            }
        };
        ValidationError.prototype.vm_throwIfAny = function (params) {
            this.throwIfAny();
        };
        return ValidationError;
    })(Retool.VM.VMError);
    Retool.ValidationError = ValidationError;
    Retool.VM.addType("ValidationError", ValidationError, null);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Sorter = (function () {
        function Sorter() {
        }
        Sorter.sortedKeys = function (keySet) {
            var list = [];
            for (var key in keySet) {
                list.push(key);
            }
            list.sort();
            var sortedSet = {};
            for (var i = 0; i < list.length; i++) {
                sortedSet[list[i]] = 1;
            }
            return sortedSet;
        };
        return Sorter;
    })();
    Retool.Sorter = Sorter;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var FileSystem;
    (function (FileSystem) {
        var PathInfo = (function () {
            function PathInfo() {
            }
            PathInfo.parseFilename = function (pathedFile) {
                var info = new PathInfo();
                if (pathedFile && pathedFile[0] == "/") {
                    pathedFile = pathedFile.substr(1);
                }
                var i = pathedFile.lastIndexOf('/');
                if (i == -1) {
                    info.filename = pathedFile;
                }
                else {
                    info.filename = pathedFile.substr(i + 1);
                    info.path = pathedFile.substr(0, i);
                }
                return info;
            };
            PathInfo.getExtension = function (filename) {
                var i = filename.lastIndexOf('.');
                if (i == -1) {
                    return "";
                }
                else {
                    return filename.substr(i + 1);
                }
            };
            PathInfo.getFilenameWithoutExtension = function (filename) {
                var i = filename.indexOf('.');
                if (i == -1) {
                    return filename;
                }
                else {
                    return filename.substr(0, i);
                }
            };
            PathInfo.getModelPath = function (serviceId) {
                return "/models";
            };
            PathInfo.getParentPath = function (path) {
                if (path && path[path.length - 1] == "/") {
                    path = path.substr(0, path.length - 1);
                }
                var i = path.lastIndexOf('/');
                if (i != -1) {
                    return path.substr(0, i);
                }
                else {
                    return "";
                }
            };
            return PathInfo;
        })();
        FileSystem.PathInfo = PathInfo;
    })(FileSystem = Retool.FileSystem || (Retool.FileSystem = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var FileSystem;
    (function (FileSystem) {
        var File = (function () {
            function File(name, content) {
                this._content = content;
                this.version = 1;
                var segments = name.split("/");
                var name = segments.pop();
                var folderPath;
                if (segments.length) {
                    folderPath = segments.join('/');
                }
                else {
                    folderPath = "";
                }
                if (folderPath && folderPath[0] == "/") {
                    this.path = folderPath.substr(1).toLowerCase();
                }
                else {
                    this.path = folderPath.toLowerCase();
                }
                this.name = name.toLowerCase();
            }
            File.prototype.isFolder = function () {
                return false;
            };
            File.prototype.isFile = function () {
                return true;
            };
            File.prototype.getFullName = function () {
                if (this.path) {
                    return this.path + "/" + this.name;
                }
                else {
                    return this.name;
                }
            };
            File.prototype.getInfo = function () {
                var i = this.name.indexOf('.');
                var info = {};
                if (i == -1) {
                    info.name = this.name;
                    info.extension = "";
                }
                else {
                    info.name = this.name.substr(0, i);
                    info.extension = this.name.substr(i + 1);
                }
                var segments = this.path.split('/');
                info.rootFolder = segments[0];
                info.application = segments[1];
                return info;
            };
            File.prototype.getIsNative = function () {
                return FileSystem.FilePath.getIsNative(this.name);
            };
            File.prototype.getContent = function () {
                return this._content;
            };
            File.prototype.setContent = function (value) {
                this._content = value;
                var name = this.getFullName();
                this.volume.fileData[name] = value;
            };
            return File;
        })();
        FileSystem.File = File;
    })(FileSystem = Retool.FileSystem || (Retool.FileSystem = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var FileSystem;
    (function (FileSystem) {
        var Folder = (function () {
            function Folder(parentPath, name) {
                this.parentPath = parentPath;
                this.name = name;
                this.entries = {};
            }
            Folder.prototype.isFolder = function () {
                return true;
            };
            Folder.prototype.isFile = function () {
                return false;
            };
            Folder.prototype.getEntries = function (options) {
                return this.entries;
            };
            Folder.prototype.forEachEntry = function (handler) {
                for (var key in this.entries) {
                    var entry = this.entries[key];
                    handler(entry);
                }
            };
            Folder.prototype.isEmpty = function () {
                for (var key in this.entries) {
                    return false;
                }
                return true;
            };
            Folder.prototype.forEachFolder = function (handler, options) {
                var entryList = (options && options.sorted) ? Retool.Sorter.sortedKeys(this.entries) : this.entries;
                for (var key in entryList) {
                    var entry = this.entries[key];
                    if (entry.isFolder()) {
                        handler(entry);
                    }
                }
            };
            Folder.prototype.forEachFile = function (handler, options) {
                var entryList = (options && options.sorted) ? Retool.Sorter.sortedKeys(this.entries) : this.entries;
                for (var key in entryList) {
                    var entry = this.entries[key];
                    if (entry.isFile()) {
                        handler(entry);
                    }
                }
            };
            Folder.prototype.getEntry = function (name) {
                var segments = name.split('/');
                var n = segments.length;
                var entry = this;
                for (var i = 0; i < n; i++) {
                    if (!entry || !entry.isFolder()) {
                        return null;
                    }
                    entry = entry.entries[segments[i]];
                }
                return entry;
            };
            Folder.prototype.getFile = function (name) {
                var entry = this.getEntry(name);
                if (entry && entry.isFile()) {
                    return entry;
                }
                else {
                    return null;
                }
            };
            Folder.prototype.getFolder = function (name) {
                var entry = this.getEntry(name);
                if (entry && entry.isFolder()) {
                    return entry;
                }
                else {
                    return null;
                }
            };
            Folder.prototype.addFileEntry = function (path, file, overwrite) {
                var folder = (path) ? this.createFolder(path, { ignoreExists: true }) : this;
                var existing = folder.entries[file.name];
                if (existing) {
                    if (existing.isFolder()) {
                        throw "Cannot create " + path + "/" + file.name + " , already exists as a folder";
                    }
                    if (!overwrite) {
                        throw "Cannot create " + path + "/" + file.name + " , file already exists";
                    }
                }
                folder.entries[file.name] = file;
            };
            Folder.prototype.removeFile = function (file) {
                delete this.entries[file.name];
            };
            Folder.prototype.createFolder = function (name, options) {
                var segments = name.split('/');
                var n = segments.length;
                var currentFolder = this;
                var entry;
                for (var i = 0; i < n - 1; i++) {
                    entry = currentFolder.entries[segments[i]];
                    if (!entry) {
                        entry = currentFolder.addFolder(segments[i]);
                    }
                    else if (!entry.isFolder()) {
                        throw "Cannot create folder: " + name + " , name already exists as file";
                    }
                    currentFolder = entry;
                }
                var entryName = segments[n - 1];
                var existing = currentFolder.entries[entryName];
                if (existing) {
                    if (!existing.isFolder()) {
                        throw "Cannot create folder: " + name + " , name already exists as file";
                    }
                    if (!options.ignoreExists) {
                        throw "Cannot create folder: " + name + " , folder already exists";
                    }
                    return existing;
                }
                return currentFolder.addFolder(entryName, options.hidden);
            };
            Folder.prototype.deleteFolder = function (name, options) {
                var segments = name.split('/');
                var n = segments.length;
                var currentFolder = this;
                var entry;
                for (var i = 0; i < n - 1; i++) {
                    entry = currentFolder.entries[segments[i]];
                    if (!entry) {
                        entry = currentFolder.addFolder(segments[i]);
                    }
                    else if (!entry.isFolder()) {
                        throw "Unable to delete folder: " + name + " , folder does not exist";
                    }
                    currentFolder = entry;
                }
                var entryName = segments[n - 1];
                var existing = currentFolder.entries[entryName];
                if (existing) {
                    delete currentFolder.entries[entryName];
                }
            };
            Folder.prototype.addFolder = function (name, hidden) {
                var path = (this.parentPath) ? this.parentPath + "/" + this.name : this.name;
                var folder = new Folder(path, name);
                folder.hidden = hidden;
                this.entries[name] = folder;
                return folder;
            };
            Folder.prototype.findAllFiles = function (files) {
                if (!files) {
                    files = [];
                }
                this.forEachFile(function (file) {
                    files.push(file);
                });
                this.forEachFolder(function (folder) {
                    folder.findAllFiles(files);
                });
                return files;
            };
            return Folder;
        })();
        FileSystem.Folder = Folder;
    })(FileSystem = Retool.FileSystem || (Retool.FileSystem = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var FileSystem;
    (function (FileSystem) {
        var Volume = (function () {
            function Volume(name, options) {
                this.name = name;
                this.cache = {};
                this.files = {};
                this.fileData = {};
                this.useFolders = options.useFolders;
                if (this.useFolders) {
                    this.root = new FileSystem.Folder("", "");
                }
            }
            Volume.prototype.addFile = function (file, overwrite) {
                if (this.useFolders) {
                    this.root.addFileEntry(file.path, file, overwrite);
                }
                var name = file.getFullName();
                this.files[name] = file;
                this.fileData[name] = file.getContent();
                file.volume = this;
            };
            Volume.prototype.createFolder = function (name, options) {
                if (!this.useFolders) {
                    return;
                }
                if (name && name[0] == "/") {
                    name = name.substr(1);
                }
                return this.root.createFolder(name, options || {});
            };
            Volume.prototype.getEntries = function (options) {
                return this.root.getEntries(options);
            };
            Volume.prototype.getFile = function (name) {
                if (name && name[0] == "/") {
                    name = name.substr(1);
                }
                var file = this.files[name];
                if (file) {
                    return file;
                }
                var data = this.fileData[name];
                if (data || (name in this.fileData)) {
                    file = new FileSystem.File(name, data);
                    file.volume = this;
                    this.files[name] = file;
                    return file;
                }
                return null;
            };
            Volume.prototype.getFolder = function (name) {
                if (!this.useFolders) {
                    throw "This volume does not use folders";
                }
                if (!name)
                    return this.root;
                if (name && name[0] == "/") {
                    name = name.substr(1);
                }
                return this.root.getFolder(name);
            };
            Volume.prototype.removeFile = function (file) {
                var name = file.getFullName();
                this.files[name] = null;
                delete this.files[name];
                this.fileData[name] = null;
                delete this.fileData[name];
                if (this.useFolders) {
                    var folder = this.getFolder(file.path);
                    if (folder) {
                        folder.removeFile(file);
                    }
                }
            };
            Volume.prototype.removeFolder = function (folder) {
                if (!this.useFolders) {
                    return;
                }
                var parentFolder = (folder.parentPath) ? this.getFolder(folder.parentPath) : this.root;
                if (parentFolder) {
                    delete parentFolder.entries[folder.name];
                }
            };
            Volume.parseFilename = function (fullPath) {
                return FileSystem.PathInfo.parseFilename(fullPath);
            };
            Volume.prototype.findAllFiles = function (files) {
                // do: iterate fileData ? find all usages move foreach when possible
                // so we do not have to create File object for missing
                return this.root.findAllFiles();
            };
            Volume.prototype.forEachFile = function (match, callback) {
                if (match) {
                    var n = match.length;
                    for (var name in this.fileData) {
                        if (name.substr(0, n) == match) {
                            callback(name, this.fileData[name]);
                        }
                    }
                }
                else {
                    for (var name in this.fileData) {
                        callback(name, this.fileData[name]);
                    }
                }
            };
            Volume.prototype.removeAll = function () {
                if (this.useFolders) {
                    this.root = new FileSystem.Folder("", "");
                }
                this.files = {};
                this.fileData = {};
            };
            Volume.prototype.getCache = function (cacheKey) {
                return this.cache[cacheKey];
            };
            Volume.prototype.setCache = function (cacheKey, value) {
                this.cache[cacheKey] = value;
            };
            Volume.prototype.dumpCache = function () {
                this.cache = {};
            };
            Volume.prototype.isEmpty = function () {
                for (var key in this.fileData) {
                    return false;
                }
                return true;
            };
            return Volume;
        })();
        FileSystem.Volume = Volume;
    })(FileSystem = Retool.FileSystem || (Retool.FileSystem = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var FileSystem;
    (function (FileSystem) {
        var FilePath = (function () {
            function FilePath() {
            }
            FilePath.getType = function (filename) {
                var isNative = FilePath.getIsNative(filename);
                if (!isNative) {
                    return 9 /* Generic */;
                }
                var segments = filename.split('/');
                switch (segments[0]) {
                    case "models": return 1 /* Model */;
                    case "api": return 2 /* Controller */;
                    case "admin":
                    case "frontend":
                        return 0 /* Template */;
                    case "assets": return 3 /* Css */;
                    case "components": return 8 /* Component */;
                }
                return null;
            };
            FilePath.forType = function (fileType) {
                switch (fileType) {
                    case 0 /* Template */: return "";
                    case 1 /* Model */: return "models";
                    case 2 /* Controller */: return "api";
                    case 8 /* Component */: return "components";
                    case 4 /* Bootstrap */: return "bootstrap";
                    case 3 /* Css */: return "css";
                    case 6 /* Image */: return "images";
                }
                return "";
            };
            FilePath.getName = function (filename) {
                var segments = filename.split('/');
                var name = segments[segments.length - 1];
                var i = name.indexOf('.');
                if (i != -1) {
                    return name.substr(0, i);
                }
                return name;
            };
            FilePath.getIsNative = function (filename) {
                var ext = FilePath.DEFAULT_FILE_EXTENSION;
                return (filename.length > ext.length && filename.substr(filename.length - ext.length) == ext);
            };
            FilePath.DEFAULT_FILE_EXTENSION = ".retool.js";
            return FilePath;
        })();
        FileSystem.FilePath = FilePath;
    })(FileSystem = Retool.FileSystem || (Retool.FileSystem = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var FileSystem;
    (function (FileSystem) {
        (function (FileType) {
            FileType[FileType["Template"] = 0] = "Template";
            FileType[FileType["Model"] = 1] = "Model";
            FileType[FileType["Controller"] = 2] = "Controller";
            FileType[FileType["Css"] = 3] = "Css";
            FileType[FileType["Bootstrap"] = 4] = "Bootstrap";
            FileType[FileType["App"] = 5] = "App";
            FileType[FileType["Image"] = 6] = "Image";
            FileType[FileType["Other"] = 7] = "Other";
            FileType[FileType["Component"] = 8] = "Component";
            FileType[FileType["Generic"] = 9] = "Generic";
        })(FileSystem.FileType || (FileSystem.FileType = {}));
        var FileType = FileSystem.FileType;
        ;
    })(FileSystem = Retool.FileSystem || (Retool.FileSystem = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var Process = (function (_super) {
            __extends(Process, _super);
            function Process() {
                _super.apply(this, arguments);
            }
            Process.prototype.pushLocalValue = function (instruction) {
                if (instruction.namespace) {
                    if (Retool.Server.isSystemNamespace(instruction.namespace)) {
                        this.pushSystemModelStatic(instruction);
                        return;
                    }
                    if (instruction.namespace == "Models") {
                        this.pushModelStatic(instruction);
                    }
                    else if (instruction.namespace == "Api") {
                        this.pushControllerStatic(instruction);
                    }
                    else {
                        throw new Error("ReferenceError: " + instruction.namespace + "." + instruction.name + " is not defined");
                    }
                }
                else {
                    var value = this.getLocalPropertyValue(instruction.name);
                    if (instruction.ldprops) {
                        for (var i = 0; i < instruction.ldprops.length; i++) {
                            var p = instruction.ldprops[i];
                            value = this.getObjectPropertyValue(value, p);
                        }
                    }
                    this.pushValue(value);
                }
            };
            Process.prototype.pushModelStatic = function (instruction) {
                var async;
                var self = this;
                var name = instruction.name;
                self.context.app.schemas.require(this.context, name, function done(err, schema) {
                    if (err) {
                        if (async) {
                            async.error(err);
                        }
                        else {
                            throw new Error(err);
                        }
                        return;
                    }
                    var staticModel = self.context.app.schemas.getStatic(self.context, name);
                    if (async) {
                        async.resume(staticModel);
                    }
                    else {
                        self.pushValue(staticModel);
                    }
                }, function pause() {
                    async = self.pause();
                });
            };
            Process.prototype.pushControllerStatic = function (instruction) {
                var async;
                var self = this;
                var name = instruction.name;
                self.context.app.controllers.require(this.context, name, function done(err, ref) {
                    if (err) {
                        if (async) {
                            async.error(err);
                        }
                        else {
                            throw new Error(err);
                        }
                        return;
                    }
                    var controller = self.context.app.controllers.getInstance(self.context, name);
                    if (async) {
                        async.resume(controller);
                    }
                    else {
                        self.pushValue(controller);
                    }
                }, function pause() {
                    async = self.pause();
                });
            };
            Process.prototype.getType = function (name) {
                return VM.getType(name);
            };
            Process.prototype.pushSystemModelStatic = function (instruction) {
                var name = instruction.name;
                var target = this.currentCall.target;
                if (target.__source != Retool.Server.systemApp) {
                    throw "ReferenceError: " + name + " not accesible from this object";
                }
                var staticModel = Retool.Server.systemApp.schemas.getStatic(this.context, name);
                this.pushValue(staticModel);
            };
            Process.prototype.createSystemModelInstance = function (modelId, data) {
                var target = this.currentCall.target;
                if (target.__source != Retool.Server.systemApp) {
                    throw "ReferenceError: " + name + " not accesible from this object";
                }
                var schema = Retool.Server.systemApp.schemas.get(modelId);
                if (!schema) {
                    throw "ReferenceError:" + modelId + " is not a valid type name";
                }
                var m = Retool.ObjectModel.createInstance(this.context, schema, data, true);
                this.pushValue(m);
            };
            Process.prototype.isModel = function (varName) {
                if (varName >= "A" && varName <= "Z") {
                    var segments = varName.split('.');
                    if (segments.length != 2) {
                        return null;
                    }
                    if (segments[0] == "System") {
                        return { isSystem: true };
                    }
                    return { isSystem: false };
                }
                return null;
            };
            Process.prototype.getStaticTypeValue = function (name) {
                _super.prototype.getStaticTypeValue.call(this, name);
            };
            Process.prototype.getNewProcess = function () {
                return VM.createProcess();
            };
            Process.prototype.createNewObjForType = function (name, args) {
                var segments = name.split('.');
                if (segments.length == 2) {
                    var data;
                    var options;
                    if (args) {
                        if (args.length) {
                            data = args[0];
                        }
                        if (args.length > 1) {
                            options = args[1];
                        }
                    }
                    if (Retool.Server.isSystemNamespace(segments[0])) {
                        this.createSystemModelInstance(name, data);
                        return;
                    }
                    var async;
                    var self = this;
                    self.context.app.schemas.require(this.context, name, function done(err, schema) {
                        if (err) {
                            if (async) {
                                async.error(err);
                            }
                            else {
                                throw new Error(err);
                            }
                            return;
                        }
                        var model = Retool.ObjectModel.createInstance(self.context, schema, data, true);
                        if (async) {
                            async.resume(model);
                        }
                        else {
                            self.pushValue(model);
                        }
                    }, function pause() {
                        async = self.pause();
                    });
                    return;
                }
                throw new Error("Unknown object type: " + name);
            };
            return Process;
        })(VM.ProcessBase);
        VM.Process = Process;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ScriptRunner = (function () {
        function ScriptRunner() {
        }
        ScriptRunner.getCompiledPrototype = function (file, isClass) {
            if (file.requiresCompile || !file.compiledPrototype) {
                var prototype;
                try {
                    var source = file.getContent().source_code;
                    if (isClass) {
                        prototype = Retool.IDE.JavascriptCompiler.compileClass("", source || "", { sourceFile: file, tracking: true });
                    }
                    else {
                        var program = Retool.IDE.JavascriptCompiler.compileProgram(source || "", { sourceFile: file, tracking: true });
                        prototype = program.getPrototype();
                    }
                    if (!prototype) {
                        prototype = new Retool.VM.Prototype("");
                    }
                    if (prototype.baseName && !file.baseFile) {
                        var baseConstructor = Retool.VM.getConstructorFunc(prototype.baseName);
                        prototype.baseConstructorFunc = baseConstructor;
                        if (baseConstructor && baseConstructor.prototype.staticPrototype) {
                            prototype.extendsBase(baseConstructor.prototype.staticPrototype);
                        }
                    }
                    file.compiledPrototype = prototype;
                    file.requiresCompile = false;
                    file.compileError = null;
                }
                catch (e) {
                    e.name = "compile";
                    e.title = "Compile Error";
                    file.compileError = e;
                    prototype = new Retool.VM.Prototype(file.name);
                    file.compiledPrototype = prototype;
                    file.requiresCompile = false;
                }
            }
            if (file.baseFile) {
                var baseFile = file.baseFile;
                file.compiledPrototype.base = ScriptRunner.getCompiledPrototype(baseFile);
                if (baseFile.compileError) {
                    file.compileError = "Error compiling base: " + baseFile.compileError;
                }
            }
            return file.compiledPrototype;
        };
        ScriptRunner.run = function (params, done) {
            var methodInfo;
            try {
                methodInfo = params.target.getPrototypeMethod(params.method);
            }
            catch (e) {
                done(new Retool.VM.VMError(e.toString()));
                return;
            }
            if (!methodInfo) {
                methodInfo = new Retool.VM.MethodInfo(params.method);
                var args = params.args || [];
                methodInfo.instructions = [{ opcode: "callwrap", name: params.method, data: args }];
            }
            var proc = Retool.VM.createProcess();
            var context = params.context;
            proc.context = context;
            if (done) {
                proc.onComplete = function (result) {
                    if (proc.connection && proc.connection.transactionLevel) {
                        proc.connection.forceCommit(context, function (err) {
                            if (err) {
                                done(err);
                            }
                            else {
                                done(result);
                            }
                        });
                    }
                    else {
                        done(null, result);
                    }
                };
                proc.onException = function (err) {
                    if (proc.connection && proc.connection.transactionLevel) {
                        proc.connection.rollback(context, function () {
                            done(err);
                        });
                    }
                    else {
                        done(err);
                    }
                };
            }
            else {
                proc.sync = true;
            }
            var args;
            if (Array.isArray(params.args)) {
                args = params.args;
            }
            else if (params.args) {
                var namedArgs = params.args;
                var methodParameters = methodInfo.params;
                if (methodParameters) {
                    args = [];
                    for (var p = 0; p < methodParameters.length; p++) {
                        var mp = methodParameters[p];
                        if (mp.name == "params") {
                            args.push(namedArgs);
                        }
                        else {
                            args.push(namedArgs[mp.name]);
                        }
                    }
                }
            }
            return proc.start({ target: params.target, methodInfo: methodInfo, args: args });
        };
        return ScriptRunner;
    })();
    Retool.ScriptRunner = ScriptRunner;
})(Retool || (Retool = {}));
var RetoolVMCode;
(function (RetoolVMCode) {
    RetoolVMCode.Auth;
    RetoolVMCode.Actions;
    RetoolVMCode.DB;
    RetoolVMCode.Src;
})(RetoolVMCode || (RetoolVMCode = {}));
var Retool;
(function (Retool) {
    var DirectoryReader = (function () {
        function DirectoryReader() {
        }
        DirectoryReader.readdir = function (path, callback) {
            DirectoryReader.recursiveReadDir(path, callback);
        };
        DirectoryReader.recursiveReadDir = function (path, callback) {
            var fs = require('fs');
            var p = require('path');
            var self = this;
            function readdir(path, callback) {
                var list = [];
                fs.readdir(path, function (err, files) {
                    if (err) {
                        return callback(err);
                    }
                    var pending = files.length;
                    if (!pending) {
                        // we are done
                        return callback(null, list);
                    }
                    files.forEach(function (file) {
                        fs.stat(p.join(path, file), function (err, stats) {
                            if (err) {
                                return callback(err);
                            }
                            if (stats.isDirectory()) {
                                files = readdir(p.join(path, file), function (err, res) {
                                    list = list.concat(res);
                                    pending -= 1;
                                    if (!pending) {
                                        callback(null, list);
                                    }
                                });
                            }
                            else {
                                list.push(p.join(path, file));
                                pending -= 1;
                                if (!pending) {
                                    callback(null, list);
                                }
                            }
                        });
                    });
                });
            }
            readdir(path, callback);
        };
        return DirectoryReader;
    })();
    Retool.DirectoryReader = DirectoryReader;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var NodeFs = (function () {
        function NodeFs() {
        }
        NodeFs.mkdir = function (dir, callback) {
            var path = require('path');
            var fs = require('fs');
            do_mkdirP(dir, callback);
            function do_mkdirP(p, mode, f, made) {
                if (typeof mode === 'function' || mode === undefined) {
                    f = mode;
                    mode = 0777 & (~process.umask());
                }
                if (!made)
                    made = null;
                var cb = f || function () {
                };
                if (typeof mode === 'string')
                    mode = parseInt(mode, 8);
                p = path.resolve(p);
                fs.mkdir(p, mode, function (er) {
                    if (!er) {
                        made = made || p;
                        return cb(null, made);
                    }
                    switch (er.code) {
                        case 'ENOENT':
                            do_mkdirP(path.dirname(p), mode, function (er, made) {
                                if (er)
                                    cb(er, made);
                                else
                                    do_mkdirP(p, mode, cb, made);
                            });
                            break;
                        default:
                            fs.stat(p, function (er2, stat) {
                                // if the stat fails, then that's super weird.
                                // let the original error be the failure reason.
                                if (er2 || !stat.isDirectory())
                                    cb(er, made);
                                else
                                    cb(null, made);
                            });
                            break;
                    }
                });
            }
        };
        NodeFs.mkdir_sync = function (dir) {
            var path = require('path');
            var fs = require('fs');
            sync(dir);
            function sync(p, mode, made) {
                if (mode === undefined) {
                    mode = 0777 & (~process.umask());
                }
                if (!made)
                    made = null;
                if (typeof mode === 'string')
                    mode = parseInt(mode, 8);
                p = path.resolve(p);
                try {
                    fs.mkdirSync(p, mode);
                    made = made || p;
                }
                catch (err0) {
                    switch (err0.code) {
                        case 'ENOENT':
                            made = sync(path.dirname(p), mode, made);
                            sync(p, mode, made);
                            break;
                        default:
                            var stat;
                            try {
                                stat = fs.statSync(p);
                            }
                            catch (err1) {
                                throw err0;
                            }
                            if (!stat.isDirectory())
                                throw err0;
                            break;
                    }
                }
                return made;
            }
            ;
        };
        return NodeFs;
    })();
    Retool.NodeFs = NodeFs;
})(Retool || (Retool = {}));
/*
Copyright 2010 James Halliday (mail@substack.net)

This project is free software released under the MIT/X11 license:

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
var Retool;
(function (Retool) {
    var ErrorLogger = (function () {
        function ErrorLogger() {
            this.errors = [];
            ;
        }
        ErrorLogger.prototype.addError = function (error) {
            this.errors.push(error);
        };
        return ErrorLogger;
    })();
    Retool.ErrorLogger = ErrorLogger;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var BatchRunner = (function () {
        function BatchRunner(batch, req, res) {
            this.batch = batch;
            this.req = req;
            this.res = res;
            this.current = 0;
            this.responses = [];
            var authorization = req.headers["authorization"];
            if (authorization && authorization.length > 6 && authorization.substr(0, 6) == "Token ") {
                this.sessionToken = authorization.substr(6);
            }
        }
        BatchRunner.prototype.run = function () {
            this.getSession();
        };
        BatchRunner.prototype.getSession = function () {
            /*
            if (this.sessionToken){
                var self = this;
                Server.sessionManager.get(this.sessionToken,function(err,session){
                    self.session = session;
                    self.runBatch();
                });
                return;
            }
            */
            var req = this.req;
            if (req.user && req.user.id) {
                this.session = new Retool.Session({ userId: req.user.id, accountId: req.user.id });
            }
            this.runBatch();
        };
        BatchRunner.prototype.runBatch = function () {
            if (!this.batch.length) {
                this.res.send([]);
                return;
            }
            var appRequired = true;
            this.createContext();
            var context = this.context;
            var appName = this.req.headers["x-retool-app"];
            if (appName) {
                context.app = new Retool.SystemProject(appName);
            }
            else {
                context.app = new Retool.SystemProject("crm"); // new UserProject("user");
            }
            this.start();
        };
        BatchRunner.prototype.createContext = function () {
            var context = Retool.Context.fromSession(this.session);
            this.context = context;
        };
        BatchRunner.prototype.start = function () {
            var batchItem = this.batch[this.current++];
            this.runBatchItem(batchItem);
        };
        BatchRunner.prototype.next = function (response) {
            this.responses.push(response);
            if (this.current < this.batch.length) {
                var batchItem = this.batch[this.current++];
                this.runBatchItem(batchItem);
            }
            else {
                if (this.singleResponse) {
                    this.sendResponse(this.responses[0]);
                }
                else {
                    this.sendResponse(this.responses);
                }
            }
        };
        BatchRunner.prototype.sendResponse = function (data) {
            if (this.context) {
                var headers = this.context.responseHeaders;
                for (var key in headers) {
                    this.res.set(key, headers[key]);
                }
            }
            this.res.send(data);
        };
        BatchRunner.prototype.runBatchItem = function (item) {
            try {
                this.context.log = new Retool.RequestLog();
                this.runMethod(item);
            }
            catch (error) {
                this.next({ error: error });
            }
        };
        BatchRunner.prototype.runMethod = function (item) {
            var segments = item.method.split('.');
            var self = this;
            if (segments[0] == "tests") {
                Retool.TestRunner.run(this.context, item.body, function (results) {
                    self.next(results);
                });
                return;
            }
            var context = this.context;
            var namespace = segments[0];
            var className;
            var methodName;
            if (namespace != "public" && !context.accountId) {
            }
            if (namespace == "api") {
                className = segments[1];
                methodName = segments[2];
                context.app.controllers.require(context, className, function done(err, controller) {
                    if (err) {
                        self.next({ error: err });
                    }
                    else {
                        self.callControllerMethod(controller, methodName, item);
                    }
                });
            }
            else if (namespace == "models") {
                className = segments[1];
                methodName = segments[2];
                context.app.schemas.require(context, className, function done(err, schema) {
                    if (err) {
                        self.next({ error: err });
                    }
                    else {
                        self.callModelMethod(schema, methodName, item);
                    }
                });
            }
            else {
                className = namespace;
                methodName = segments[1];
                var schema = Retool.Server.systemApp.schemas.get(className);
                if (!schema) {
                    throw new Retool.VM.VMError({ name: "unknown_resource", messages: ["Unknown resource: " + item.method] });
                }
                self.callModelMethod(schema, methodName, item);
            }
        };
        BatchRunner.prototype.getNamedArgs = function (body) {
            var namedArgs = {};
            for (var key in body) {
                var value = body[key];
                if (value && value.substring && value.substr && value.length >= 2) {
                    if (value[0] == "{" && value[value.length - 1] == "}") {
                        try {
                            value = JSON.parse(value);
                        }
                        catch (e) {
                        }
                    }
                }
                namedArgs[key] = value;
            }
            return namedArgs;
        };
        BatchRunner.prototype.callModelMethod = function (schema, methodName, item) {
            var context = this.context;
            var namedArgs;
            var args = item.arguments;
            if (methodName[0] == "_") {
                var error = new Retool.VM.VMError({ name: "private_method", messages: ["Cannot call private methods on models"] });
                this.next({ error: error });
                return;
            }
            if (!schema.isExposed(this.context)) {
                var error = new Retool.VM.VMError({ name: "not_an_endpoint", messages: ["Methods on this model are not accesible to the api"] });
                this.next({ error: error });
                return;
            }
            var modelInstance;
            if (item.modelInstance) {
                modelInstance = item.modelInstance;
            }
            var model;
            if (modelInstance) {
                if (modelInstance.isNew) {
                    model = Retool.ObjectModel.createInstance(context, schema, modelInstance.attributes, modelInstance.isNew);
                }
                else {
                    // when calling instance methods on existing objects we load instance from db using find, fill then execute method
                    model = schema.app.schemas.getStatic(this.context, schema.id);
                    args = [modelInstance.attributes, methodName, args];
                    methodName = "__loadInstance";
                }
            }
            else {
                model = schema.app.schemas.getStatic(this.context, schema.id);
            }
            this.callTargetMethod(model, methodName, args);
        };
        BatchRunner.prototype.createNotSignedInError = function () {
            return new Retool.VM.VMError({ name: "requires_signin", messages: ["You are not currently signed in"] });
        };
        BatchRunner.prototype.callControllerMethod = function (controller, methodName, item) {
            var context = this.context;
            var namedArgs;
            var args = item.arguments;
            var app = this.context.app;
            if (methodName[0] == "_") {
                var error = new Retool.VM.VMError({ name: "private_method", messages: ["Cannot call private methods on controllers"] });
                this.next({ error: error });
                return;
            }
            var instance = app.controllers.getInstance(this.context, controller.id);
            this.callTargetMethod(instance, methodName, args);
        };
        BatchRunner.prototype.getAction = function (methodName, modelInstance) {
            if (methodName == "save") {
                return (modelInstance && modelInstance.isNew) ? "create" : "update";
            }
            else if (methodName == "findAndUpdate") {
                return "update";
            }
            else if (methodName == "del") {
                return "destroy";
            }
            return methodName;
        };
        BatchRunner.prototype.callTargetMethod = function (target, methodName, args) {
            var self = this;
            var context = this.context;
            Retool.ScriptRunner.run({ target: target, method: methodName, args: args, context: context }, function (err, data) {
                if (err) {
                    self.next({ error: err, log: context.log.entries });
                    return;
                }
                var meta;
                if (data && data.__isVMObject) {
                    if (data.getSerializeInfo) {
                        meta = data.getSerializeInfo();
                    }
                    if (target == data) {
                        meta = meta || {};
                        meta.is_target = true; // the return value is the same as the target value of the call, front-end will update same instance
                    }
                    if (data.serialize) {
                        self.handleAsyncSerializableResult(data, meta);
                        return;
                    }
                    else if (data.serializeSync) {
                        self.handleSerializableResult(data, meta);
                        return;
                    }
                }
                self.next({ result: data, meta: meta, log: context.log.entries });
            });
        };
        BatchRunner.prototype.handleSerializableResult = function (data, meta) {
            var context = this.context;
            var self = this;
            try {
                data = data.serializeSync(context);
            }
            catch (err) {
                if (!(err instanceof Retool.VM.VMError)) {
                    err = new Retool.VM.VMError(err);
                }
                self.next({ error: err });
                return;
            }
            this.next({ result: data, meta: meta, log: context.log.entries });
        };
        BatchRunner.prototype.handleAsyncSerializableResult = function (data, meta) {
            var self = this;
            var async = Retool.makeAsync(function (err, result) {
                if (err) {
                    if (!(err instanceof Retool.VM.VMError)) {
                        err = new Retool.VM.VMError(err);
                    }
                    self.next({ error: err });
                    return;
                }
                if (result && result.__isVMObject) {
                    if (result.serializeSync) {
                        result = result.serializeSync();
                    }
                }
                self.next({ result: result, meta: meta, log: this.context.log.entries });
            });
            data.serialize(async);
            return;
        };
        BatchRunner.prototype.getSchemaActions = function (schema, context) {
            var model = Retool.ObjectModel.createStatic(context, schema);
            var result = Retool.ScriptRunner.run({ target: model, method: "actions", args: null, context: context });
            if (result instanceof Retool.SchemaActions) {
                schema.actions = result;
            }
            else {
                schema.actions = new Retool.SchemaActions(result);
            }
        };
        BatchRunner.getAWS = function () {
            var AWS = require('aws-sdk');
            AWS.config.region = 'us-east-1';
            var conf = Retool.Server.config.fileServer;
            if (conf) {
                AWS.config.update({ accessKeyId: conf.accessKeyId, secretAccessKey: conf.secretAccessKey });
            }
            else {
                AWS.config.update({ accessKeyId: process.env.AWS_ACCESS_KEY_ID, secretAccessKey: process.env.AWS_SECRET_KEY });
            }
            return AWS;
        };
        BatchRunner.copyS3File = function (source, dest, done) {
            var AWS = require('aws-sdk');
            AWS.config.region = 'us-east-1';
            var conf = Retool.Server.config.fileServer;
            if (conf) {
                AWS.config.update({ accessKeyId: conf.accessKeyId, secretAccessKey: conf.secretAccessKey });
            }
            else {
                AWS.config.update({ accessKeyId: process.env.AWS_ACCESS_KEY_ID, secretAccessKey: process.env.AWS_SECRET_KEY });
            }
            // Create a bucket using bound parameters and put something in it.
            // Make sure to change the bucket name from "myBucket" to something unique.
            var self = this;
            var s3 = new AWS.S3();
            var params = {
                CopySource: "retool-hosted-assets/" + source,
                Bucket: "retool-hosted-assets",
                Key: dest
            };
            s3.copyObject(params, function (err, data) {
                done(err, data);
            });
        };
        BatchRunner.prototype.projectDownload = function (path) {
            var self = this;
            var src = new Retool.VM.Src();
            var adapter = this.context.app.getProjectAdapter(this.context);
            var name = "myproject";
            adapter.getAll(this.context, function (err, files) {
                if (err) {
                    self.res.status(404).send("");
                    return;
                }
                self.res.set("content-type", "application/octet-stream");
                self.res.set("content-disposition", "attachment;filename=\"" + name + ".json\"");
                self.res.send(JSON.stringify(files, null, 2));
            });
        };
        return BatchRunner;
    })();
    Retool.BatchRunner = BatchRunner;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Context = (function () {
        function Context() {
            this.responseHeaders = {};
        }
        Context.fromSession = function (session) {
            var context = new Context();
            if (session && session.accountId) {
                context.session = session;
                context.accountId = session.accountId;
            }
            context.projectBranch = "master";
            return context;
        };
        Context.prototype.allowIDE = function () {
            if (this.session && this.session.accountId) {
                return true;
            }
            return false;
        };
        Context.prototype.getTenantId = function () {
            return this.accountId;
        };
        return Context;
    })();
    Retool.Context = Context;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var RequestLog = (function () {
        function RequestLog() {
        }
        RequestLog.prototype.add = function (method, action) {
            var logEntry = {
                request: {
                    method: method,
                    url: action
                }
            };
            this.entries = this.entries || [];
            this.entries.push(logEntry);
            return logEntry;
        };
        RequestLog.prototype.toJSON = function () {
            return this.entries;
        };
        return RequestLog;
    })();
    Retool.RequestLog = RequestLog;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Application = (function () {
        function Application(name) {
            this.schemas = new Retool.ApplicationSchemas(this);
            this.controllers = new Retool.ApplicationControllers(this);
            this.name = name;
        }
        Application.prototype.clear = function () {
            this.schemas = new Retool.ApplicationSchemas(this);
            this.controllers = new Retool.ApplicationControllers(this);
        };
        Application.prototype.load = function (volume) {
            this.volume = volume;
            this.schemas = new Retool.ApplicationSchemas(this);
            if (this.name != "$system") {
            }
            var files = volume.files;
            for (var key in files) {
                var file = files[key];
                var info = file.getInfo();
                if (info.extension == "mod") {
                    // is a model;
                    var schema = Retool.Schema.fromFile(this, file);
                    this.schemas.add(schema);
                }
            }
        };
        Application.prototype.startup = function (context, done) {
            done(null, null);
            /*
            this.migrateDatabase(context,function(err,result){
                done(err,result);
            })
            */
        };
        Application.prototype.getProjectAdapter = function (context) {
            return null;
        };
        Application.prototype.migrateDatabase = function (context, done) {
            /*
            var migration = new MySql.MySqlDatabaseMigration(context);
            migration.syncApp(this,function(err,result){
                done(err,result);
            });
            */
        };
        Application.prototype.canWrite = function (context) {
            return false;
        };
        Application.prototype.isPublic = function (context) {
            return false;
        };
        Application.prototype.getBucketPath = function (context) {
            return null;
        };
        return Application;
    })();
    Retool.Application = Application;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ApplicationSchemas = (function () {
        function ApplicationSchemas(app) {
            this._schemas = {};
            this._staticInstances = {};
            this._app = app;
            this._filePath = Retool.FileSystem.FilePath.forType(1 /* Model */);
            this._ext = Retool.FileSystem.FilePath.DEFAULT_FILE_EXTENSION;
            this._modelParser = new Retool.Transformers.ModelParser();
        }
        ApplicationSchemas.prototype.get = function (id) {
            return this._schemas[id.toLowerCase()];
        };
        ApplicationSchemas.prototype.getStatic = function (context, id) {
            var staticInstance = this._staticInstances[id];
            if (staticInstance) {
                return staticInstance;
            }
            var schema = this.get(id);
            if (!schema) {
                return null;
            }
            staticInstance = Retool.ObjectModel.createStatic(context, schema);
            if (staticInstance) {
                staticInstance.__source = this._app;
            }
            id = id.toLowerCase();
            this._staticInstances[id] = staticInstance;
            return staticInstance;
        };
        ApplicationSchemas.prototype.add = function (schema) {
            this._schemas[schema.id.toLowerCase()] = schema;
        };
        ApplicationSchemas.prototype.all = function () {
            return this._schemas;
        };
        ApplicationSchemas.prototype.clear = function () {
            this._schemas = {};
            this._staticInstances = {};
        };
        ApplicationSchemas.prototype.require = function (context, id, done, pause) {
            var schema = this.get(id);
            if (schema) {
                done(null, schema);
                return;
            }
            if (pause) {
                pause();
            }
            var self = this;
            var filename = this._filePath + "/" + id + this._ext;
            var adapter = this._app.getProjectAdapter(context);
            adapter.find(context, filename, function (err, fileData) {
                if (err) {
                    // do nothing for now
                    done(err);
                    return;
                }
                var name = Retool.FileSystem.FilePath.getName(filename);
                var def = self._modelParser.parse(name, fileData.content);
                var file = new Retool.FileSystem.File(filename, def);
                schema = Retool.Schema.fromFile(self._app, file);
                self.add(schema);
                done(null, schema);
            });
        };
        ApplicationSchemas.prototype.requireMany = function (context, idList, done, pause) {
            done();
        };
        ApplicationSchemas.prototype.requireRelated = function (context, id, relationships, done, pause) {
            done();
        };
        return ApplicationSchemas;
    })();
    Retool.ApplicationSchemas = ApplicationSchemas;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ApplicationControllers = (function () {
        function ApplicationControllers(app) {
            this._instances = {};
            this._app = app;
            this._refs = {};
            this._filePath = Retool.FileSystem.FilePath.forType(2 /* Controller */);
            this._ext = Retool.FileSystem.FilePath.DEFAULT_FILE_EXTENSION;
            this._controllerParser = new Retool.Transformers.ControllerParser();
        }
        ApplicationControllers.prototype.getRef = function (name) {
            return this._refs[name.toLowerCase()];
        };
        ApplicationControllers.prototype.getInstance = function (context, id) {
            var controllerInstance = this._instances[id];
            if (controllerInstance) {
                return controllerInstance;
            }
            var ref = this.getRef(id);
            if (!ref) {
                return null;
            }
            controllerInstance = Retool.Controller.createStatic(context, ref);
            if (controllerInstance) {
                controllerInstance.__source = this._app;
            }
            id = id.toLowerCase();
            this._instances[id] = controllerInstance;
            return controllerInstance;
        };
        ApplicationControllers.prototype.addRef = function (ref) {
            this._refs[ref.id.toLowerCase()] = ref;
        };
        ApplicationControllers.prototype.clear = function () {
            this._refs = {};
            this._instances = {};
        };
        ApplicationControllers.prototype.require = function (context, name, done, pause) {
            var ref = this.getRef(name);
            if (ref) {
                done(null, ref);
                return;
            }
            if (pause) {
                pause();
            }
            var self = this;
            var adapter = this._app.getProjectAdapter(context);
            var filename = this._filePath + "/" + name + this._ext;
            adapter.find(context, filename, function (err, fileData) {
                if (err) {
                    // do nothing for now
                    done(err);
                    return;
                }
                if (!fileData) {
                    done(new Retool.VM.VMError("Unknown resource: Controllers." + name));
                    return;
                }
                var name = Retool.FileSystem.FilePath.getName(filename);
                var def = self._controllerParser.parse(name, fileData.content);
                var file = new Retool.FileSystem.File(filename, def);
                ref = Retool.ControllerRef.fromFile(self._app, file);
                self.addRef(ref);
                done(null, ref);
            });
        };
        ApplicationControllers.prototype.requireMany = function (context, idList, done, pause) {
            done();
        };
        ApplicationControllers.prototype.requireRelated = function (context, id, relationships, done, pause) {
            done();
        };
        return ApplicationControllers;
    })();
    Retool.ApplicationControllers = ApplicationControllers;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var UserApplicationCache = (function () {
        function UserApplicationCache() {
            this._applications = {};
        }
        UserApplicationCache.prototype.get = function (name) {
            return this._applications[name];
        };
        UserApplicationCache.prototype.add = function (app) {
            this._applications[app.name] = app;
        };
        return UserApplicationCache;
    })();
    Retool.UserApplicationCache = UserApplicationCache;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ApplicationBaseMerger = (function () {
        function ApplicationBaseMerger(baseVolume) {
            this.baseVolume = baseVolume;
        }
        ApplicationBaseMerger.prototype.merge = function (volume) {
            var baseFiles = this.baseVolume.files;
            for (var key in baseFiles) {
                var baseFile = baseFiles[key];
                var appFile = volume.getFile(baseFile.getFullName());
                if (!appFile) {
                    appFile = new Retool.FileSystem.File(baseFile.path + "/" + baseFile.name, null);
                    volume.addFile(appFile);
                }
                this.mergeFile(appFile, baseFile);
            }
        };
        ApplicationBaseMerger.prototype.updateFile = function (appFile) {
            var baseFile = this.baseVolume.getFile(appFile.getFullName());
            if (baseFile) {
                this.mergeFile(appFile, baseFile);
            }
        };
        ApplicationBaseMerger.prototype.mergeFile = function (appFile, baseFile) {
            var info = baseFile.getInfo();
            if (info.extension == "mod") {
                this.mergeModel(appFile, baseFile);
            }
        };
        ApplicationBaseMerger.prototype.mergeModel = function (appFile, baseFile) {
            var baseDef = baseFile.getContent();
            var appDef = appFile.getContent();
            if (!appDef) {
                appDef = { name: baseDef.name, db_table: baseDef.db_table, label: baseDef.label, fields: {}, relationships: {}, indexes: {}, type: "model" };
                appFile.setContent(appDef);
            }
            else {
                appDef.name = baseDef.name;
                appDef.db_table = baseDef.db_table;
                appDef.label = baseDef.label;
            }
            this.mergeFields(appDef, baseDef);
            this.mergeIndexes(appDef, baseDef);
            this.mergeRelationships(appDef, baseDef);
            appFile.baseFile = baseFile;
        };
        ApplicationBaseMerger.prototype.mergeFields = function (appDef, baseDef) {
            for (var key in baseDef.fields) {
                var baseField = baseDef.fields[key];
                var appField = appDef.fields[key];
                if (!appField) {
                    appField = this.cloneField(baseField);
                    appDef.fields[key] = appField;
                }
                else {
                    appField.name = baseField.name;
                    appField.type = baseField.type;
                    appField.db_column = baseField.db_column;
                    if (baseField.required) {
                        appField.required = true;
                    }
                    if (baseField.locked) {
                        appField.locked = true;
                    }
                    if (baseField.hidden) {
                        appField.hidden = true;
                    }
                }
            }
        };
        ApplicationBaseMerger.prototype.cloneField = function (field) {
            var clone = {
                name: field.name,
                type: field.type,
                default_value: field.default_value,
                db_column: field.db_column,
                label: field.label,
                size: field.size,
                num_decimals: field.num_decimals,
                required: field.required,
                locked: field.locked,
                clear_clone: field.clear_clone,
                preserve_new: field.preserve_new,
                uppercase: field.uppercase,
                log_revisions: field.log_revisions,
                hidden: field.hidden,
                access: field.access
            };
            return clone;
        };
        ApplicationBaseMerger.prototype.mergeRelationships = function (appDef, baseDef) {
            for (var key in baseDef.relationships) {
                var baseRelationship = baseDef.relationships[key];
                appDef.relationships[key] = this.cloneRelationship(baseRelationship);
            }
        };
        ApplicationBaseMerger.prototype.cloneRelationship = function (r) {
            var clone = {
                name: r.name,
                type: r.type,
                foreignKey: r.foreignKey,
                model: r.model
            };
            return clone;
        };
        ApplicationBaseMerger.prototype.mergeIndexes = function (appDef, baseDef) {
            for (var key in baseDef.indexes) {
                var baseIndex = baseDef.indexes[key];
                appDef.indexes[key] = this.cloneIndex(baseIndex);
            }
        };
        ApplicationBaseMerger.prototype.cloneIndex = function (i) {
            var clone = {
                name: i.name,
                primary: i.primary,
                unique: i.unique,
                keys: i.keys
            };
            return clone;
        };
        return ApplicationBaseMerger;
    })();
    Retool.ApplicationBaseMerger = ApplicationBaseMerger;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var UserProject = (function (_super) {
        __extends(UserProject, _super);
        function UserProject() {
            _super.apply(this, arguments);
        }
        UserProject.prototype.canWrite = function (context) {
            return true;
        };
        UserProject.prototype.getProjectAdapter = function (context) {
            return new Retool.SqlServer.ProjectAdapter(context);
        };
        UserProject.prototype.getBucketPath = function (context) {
            return "account_data/" + context.getTenantId();
        };
        UserProject.prototype.isPublic = function (context) {
            return false;
        };
        return UserProject;
    })(Retool.Application);
    Retool.UserProject = UserProject;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SystemProject = (function (_super) {
        __extends(SystemProject, _super);
        function SystemProject() {
            _super.apply(this, arguments);
        }
        SystemProject.prototype.canWrite = function (context) {
            return true;
        };
        SystemProject.prototype.getProjectAdapter = function (context) {
            return new Retool.LocalFileSystem.ProjectAdapter(context, Retool.Server.getProjectFolder(this.name));
        };
        SystemProject.prototype.getBucketPath = function (context) {
            return this.name;
        };
        return SystemProject;
    })(Retool.Application);
    Retool.SystemProject = SystemProject;
    var PublicProject = (function (_super) {
        __extends(PublicProject, _super);
        function PublicProject() {
            _super.apply(this, arguments);
        }
        PublicProject.prototype.isPublic = function (context) {
            return true;
        };
        return PublicProject;
    })(SystemProject);
    Retool.PublicProject = PublicProject;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Srv;
    (function (Srv) {
        var Compilers;
        (function (Compilers) {
            var ProjectCompiler = (function () {
                function ProjectCompiler() {
                }
                ProjectCompiler.prototype.compile = function (entries, done) {
                    var Runtime = require("./retool-runtime.js");
                    var app = Runtime.start({ runningOnServer: true, project: [] });
                    var helpers = app.currentApp.helpers;
                    var out = [];
                    var logger = new Retool.ErrorLogger();
                    // compile all components first
                    var currentApp = app.currentApp;
                    for (var i = 0; i < entries.length; i++) {
                        var entry = entries[i];
                        var fileType = Retool.FileSystem.FilePath.getType(entry.name);
                        if (fileType == 8 /* Component */) {
                            var outFile = new Retool.FileSystem.File(entry.name, entry.content);
                            var component = Retool.IDE.ComponentCompiler.compile(entry.name, outFile, helpers, logger);
                            component.file = undefined;
                            component.definition.source_code = undefined;
                            out.push({ name: entry.name, content: null, compiledContent: component, compiledPrototype: outFile.compiledPrototype });
                            var helper = Runtime.Helpers.Custom.create(component);
                            var name = Retool.FileSystem.PathInfo.getFilenameWithoutExtension(outFile.name);
                            currentApp.helpers.add(name, helper);
                        }
                    }
                    for (var i = 0; i < entries.length; i++) {
                        var entry = entries[i];
                        var fileType = Retool.FileSystem.FilePath.getType(entry.name);
                        if (fileType == 0 /* Template */) {
                            var outFile = new Retool.FileSystem.File(entry.name, entry.content);
                            var template = Retool.IDE.TemplateCompiler.compile(null, outFile, helpers, logger);
                            template.file = undefined;
                            template.definition.source_code = undefined;
                            out.push({ name: entry.name, content: null, compiledContent: template, compiledPrototype: outFile.compiledPrototype });
                        }
                        else if (fileType == 8 /* Component */) {
                        }
                        else if (fileType == 1 /* Model */ || fileType == 2 /* Controller */) {
                            var content = entry.content;
                            if (content) {
                                content.source_code = undefined;
                            }
                            out.push(entry);
                        }
                        else {
                            out.push(entry);
                        }
                    }
                    done(null, out);
                };
                return ProjectCompiler;
            })();
            Compilers.ProjectCompiler = ProjectCompiler;
        })(Compilers = Srv.Compilers || (Srv.Compilers = {}));
    })(Srv = Retool.Srv || (Retool.Srv = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Compilers;
    (function (Compilers) {
        var XMLTemplateParser = (function () {
            function XMLTemplateParser() {
            }
            XMLTemplateParser.parse = function (template) {
                var parser = new XMLTemplateParser();
                return parser.parse(template);
            };
            XMLTemplateParser.prototype.parse = function (template) {
                var self = this;
                var xmlparser = XMLTemplateParser.sax.parser(false);
                this.current = [{ kind: "$root" }];
                xmlparser.onopentag = function (node) {
                    self.opentag(node);
                };
                xmlparser.onclosetag = function (name) {
                    self.closetag(name);
                };
                xmlparser.ontext = function (s) {
                    self.buildLiteral(s);
                };
                xmlparser.write(template).close();
                return self.current[0].children;
            };
            XMLTemplateParser.prototype.opentag = function (node) {
                var parent = this.current[this.current.length - 1];
                if (XMLTemplateParser.isSelfClosing(parent.kind)) {
                    this.current.pop();
                    parent = this.current[this.current.length - 1];
                }
                var element = {
                    kind: node.name.toLowerCase()
                };
                var attributes = node.attributes;
                if (attributes) {
                    for (var name in attributes) {
                        var value = attributes[name];
                        name = name.toLowerCase();
                        if (name === 'class') {
                            name = 'cssclass';
                        }
                        if (name !== 'kind' && name !== 'children') {
                            element[name] = value;
                        }
                    }
                }
                parent.children = parent.children || [];
                parent.children.push(element);
                this.current.push(element);
            };
            XMLTemplateParser.prototype.closetag = function (name) {
                if (XMLTemplateParser.isSelfClosing(name)) {
                    var last = this.current[this.current.length - 1];
                    if (last.kind !== name.toLowerCase()) {
                        return;
                    }
                }
                this.current.pop();
            };
            XMLTemplateParser.prototype.buildLiteral = function (value) {
                var parent = this.current[this.current.length - 1];
                if (typeof value === "string") {
                    value = value.replace(/\n/g, "").replace(/\t/g, "").replace(/\s+/g, " ");
                }
                var last;
                if (parent.children && parent.children.length) {
                    last = parent.children[parent.children.length - 1];
                }
                if (value && value !== " ") {
                    if (!parent.text && !parent.children) {
                        parent.text = value;
                    }
                    else if (!last) {
                        parent.text += value;
                    }
                    else if (last.kind === "text") {
                        last.text += value;
                    }
                    else {
                        parent.children = parent.children || [];
                        parent.children.push({
                            kind: 'text',
                            text: value
                        });
                    }
                }
            };
            XMLTemplateParser.isSelfClosing = function (tag) {
                tag = tag.toUpperCase();
                return (tag === "AREA" || tag === "BASE" || tag === "BASEFONT" || tag === "BGSOUND" || tag === "BR" || tag === "COL" || tag === "EMBED" || tag === "FRAME" || tag === "HR" || tag === "IMG" || tag === "INPUT" || tag === "KEYGEN" || tag === "LINK" || tag === "MENUITEM" || tag === "META" || tag === "PARAM" || tag === "SOURCE" || tag === "TRACK" || tag === "WBR");
            };
            XMLTemplateParser.sax = require('sax');
            return XMLTemplateParser;
        })();
        Compilers.XMLTemplateParser = XMLTemplateParser;
    })(Compilers = Retool.Compilers || (Retool.Compilers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Transformers;
    (function (Transformers) {
        var TemplateParserBase = (function () {
            function TemplateParserBase() {
            }
            TemplateParserBase.prototype.assignElementId = function (elements, nextId) {
                if (elements) {
                    for (var i = 0; i < elements.length; i++) {
                        var elem = elements[i];
                        elem.id = (nextId++).toString();
                        if (elem.children) {
                            nextId = this.assignElementId(elem.children, nextId);
                        }
                    }
                }
                return nextId;
            };
            return TemplateParserBase;
        })();
        Transformers.TemplateParserBase = TemplateParserBase;
    })(Transformers = Retool.Transformers || (Retool.Transformers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Transformers;
    (function (Transformers) {
        var TemplateParser = (function (_super) {
            __extends(TemplateParser, _super);
            function TemplateParser() {
                _super.apply(this, arguments);
            }
            TemplateParser.prototype.parse = function (name, source) {
                source = source || "";
                var def = {
                    name: name,
                    source_code: "",
                    elements: []
                };
                var sections = source.split(/\n==\s*\n/); // split on == separator
                for (var i = 0; i < sections.length; i++) {
                    var section = sections[i];
                    var match = section.match(/\S/);
                    if (match) {
                        var firstChar = match[0];
                        if (firstChar == "<") {
                            def.elements = Retool.Compilers.XMLTemplateParser.parse(section);
                            this.assignElementId(def.elements, 1);
                        }
                        else if (firstChar == "{") {
                            try {
                                var settings = JSON.parse(section);
                                if (settings) {
                                    def.baseLayout = settings.baseLayout;
                                    def.cssclass = settings.cssclass;
                                }
                            }
                            catch (e) {
                            }
                        }
                        else {
                            def.source_code = section || "";
                        }
                    }
                }
                /*
                        else if (firstChar == "["){
                            elements = JSON.parse(section);
                        }
                        */
                return def;
            };
            return TemplateParser;
        })(Transformers.TemplateParserBase);
        Transformers.TemplateParser = TemplateParser;
    })(Transformers = Retool.Transformers || (Retool.Transformers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Transformers;
    (function (Transformers) {
        var ComponentParser = (function (_super) {
            __extends(ComponentParser, _super);
            function ComponentParser() {
                _super.apply(this, arguments);
            }
            ComponentParser.prototype.parse = function (name, source) {
                source = source || "";
                var def = {
                    name: name,
                    source_code: "",
                    elements: []
                };
                var sections = source.split(/\n==\s*\n/); // split on == separator
                for (var i = 0; i < sections.length; i++) {
                    var section = sections[i];
                    var match = section.match(/\S/);
                    if (match) {
                        var firstChar = match[0];
                        if (firstChar == "<") {
                            def.elements = Retool.Compilers.XMLTemplateParser.parse(section);
                            this.assignElementId(def.elements, 1);
                        }
                        else if (firstChar == "{") {
                            try {
                                var settings = JSON.parse(section);
                                if (settings) {
                                    def.baseLayout = settings.baseLayout;
                                    def.cssclass = settings.cssclass;
                                }
                            }
                            catch (e) {
                            }
                        }
                        else {
                            def.source_code = section || "";
                        }
                    }
                }
                return def;
            };
            return ComponentParser;
        })(Transformers.TemplateParserBase);
        Transformers.ComponentParser = ComponentParser;
    })(Transformers = Retool.Transformers || (Retool.Transformers = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ORM;
    (function (ORM) {
        var Query = (function (_super) {
            __extends(Query, _super);
            function Query(collection) {
                _super.call(this, null);
                this.collection = collection;
                this.conditions = [];
                this.commands = [];
            }
            Query.prototype.vm_get = function (params) {
                params.args = [this];
                this.collection.vm_list(params);
            };
            Query.prototype.execMethod = function (params, methodName) {
                var method = this["vm_" + methodName];
                if (method) {
                    method.apply(this, [params]);
                }
                else {
                    throw "ReferenceError: method " + methodName + " does not exist";
                }
            };
            Query.prototype.vm_find = function (params) {
                this.recordKey = params.getIndex(0);
                params.args = [this];
                return this.collection.vm_find(params);
            };
            Query.prototype.vm_findOrFail = function (params) {
                this.recordKey = params.getIndex(0);
                params.args = [this];
                var collection = this.collection;
                collection.vmCall(collection.vm_find, params.proc, params.args).then(function (result) {
                    if (!result) {
                        throw new Retool.VM.VMError({ name: "RecordNotFound", message: "record not found", catchable: true });
                    }
                    return result;
                });
            };
            Query.prototype.vm_count = function (params) {
                return this.execAggregate("count", params);
            };
            Query.prototype.vm_sum = function (params) {
                return this.execAggregate("sum", params);
            };
            Query.prototype.vm_max = function (params) {
                return this.execAggregate("max", params);
            };
            Query.prototype.vm_min = function (params) {
                return this.execAggregate("min", params);
            };
            Query.prototype.vm_avg = function (params) {
                return this.execAggregate("avg", params);
            };
            Query.prototype.vm_del = function (params) {
                params.args = [this];
                this.collection.vm_remove(params);
            };
            Query.prototype.vm_startKey = function (params) {
                this.startKey = params.getIndex(0);
                return this;
            };
            Query.prototype.vm_endKey = function (params) {
                this.endKey = params.getIndex(0);
                return this;
            };
            Query.prototype.execAggregate = function (methodName, params) {
                this.aggregate = methodName;
                var column = params.getIndex(0);
                if (column) {
                    this.addColumns([column]);
                }
                params.args = [this];
                return this.collection.vm_list(params);
            };
            Query.prototype.vm_exists = function (params) {
                // execute the query with a limit of 1, return true if not empty set
            };
            Query.prototype.toJSON = function () {
                return { type: "Query" };
            };
            return Query;
        })(ORM.QueryBase);
        ORM.Query = Query;
    })(ORM = Retool.ORM || (Retool.ORM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var DatabaseSchema = (function () {
        function DatabaseSchema() {
            this.tables = {};
        }
        return DatabaseSchema;
    })();
    Retool.DatabaseSchema = DatabaseSchema;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VMDatabaseSchema = (function (_super) {
        __extends(VMDatabaseSchema, _super);
        function VMDatabaseSchema() {
            _super.apply(this, arguments);
        }
        VMDatabaseSchema.prototype.vm_load = function (params) {
            var context = params.proc.context;
            var db = null; // todo
            var migrator = db.getMigrator(context);
            var dbSchema = new Retool.DatabaseSchema();
            var loader = migrator.getSchemaLoader(dbSchema);
            var async = params.proc.pause();
            loader.load(function (err) {
                if (err) {
                    async.error(err);
                }
                else {
                    migrator.compareDb(dbSchema, context.app);
                    migrator.execute(function (err) {
                        if (err) {
                            async.error(err);
                        }
                        else {
                            async.resume(migrator.tableMigrations);
                        }
                    });
                }
            });
        };
        return VMDatabaseSchema;
    })(Retool.VM.ObjectBase);
    Retool.VMDatabaseSchema = VMDatabaseSchema;
    Retool.VM.addType("Migration", null, new VMDatabaseSchema(null));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var TableSchema = (function () {
        function TableSchema(name) {
            this.name = name;
            this.columns = {};
            this.indexes = {};
        }
        return TableSchema;
    })();
    Retool.TableSchema = TableSchema;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var TableSchemaColumn = (function () {
        function TableSchemaColumn(name) {
            this.name = name;
        }
        return TableSchemaColumn;
    })();
    Retool.TableSchemaColumn = TableSchemaColumn;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var DatabaseSchemaLoader = (function () {
        function DatabaseSchemaLoader(context, db, dbSchema) {
            this.context = context;
            this.db = db;
            this.dbSchema = dbSchema;
        }
        DatabaseSchemaLoader.prototype.load = function (done) {
            this.done = done;
            this.nextAction = "start";
            this.next();
        };
        DatabaseSchemaLoader.prototype.loadTable = function (table, done) {
            this.singleTable = table;
            this.load(done);
        };
        DatabaseSchemaLoader.prototype.next = function (err) {
            if (err) {
                this.done(err);
                return;
            }
            switch (this.nextAction) {
                case "start":
                    this.nextAction = "loadTableInfo";
                    this.loadTableList();
                    break;
                case "loadTableInfo":
                    this.nextAction = "loadTableColumns";
                    this.tableStack = [];
                    for (var key in this.dbSchema.tables) {
                        this.tableStack.push(this.dbSchema.tables[key]);
                    }
                    this.tableIndex = 0;
                    this.next();
                    break;
                case "loadTableColumns":
                    if (this.tableIndex < this.tableStack.length) {
                        var table = this.tableStack[this.tableIndex++];
                        this.loadColumns(table);
                    }
                    else {
                        this.nextAction = "loadTableIndexes";
                        this.tableIndex = 0;
                        this.next();
                    }
                    break;
                case "loadTableIndexes":
                    if (this.tableIndex < this.tableStack.length) {
                        var table = this.tableStack[this.tableIndex++];
                        this.loadIndexes(table);
                    }
                    else {
                        this.nextAction = "end";
                        this.next();
                    }
                    break;
                case "end":
                    this.done(null);
                    break;
                default:
                    this.done("Unknown next activity");
            }
        };
        DatabaseSchemaLoader.prototype.loadTableList = function () {
            this.next();
        };
        DatabaseSchemaLoader.prototype.loadColumns = function (table) {
            this.next();
        };
        DatabaseSchemaLoader.prototype.loadIndexes = function (table) {
            this.next();
        };
        return DatabaseSchemaLoader;
    })();
    Retool.DatabaseSchemaLoader = DatabaseSchemaLoader;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var TableSchemaIndex = (function () {
        function TableSchemaIndex(name) {
            this.name = name;
            this.keys = [];
        }
        TableSchemaIndex.prototype.keysAreEqual = function (schema, keyList) {
            keyList = keyList || "";
            keyList = keyList.replace('/ /g', '');
            var k = keyList.split(",");
            if (k.length != this.keys.length) {
                return false;
            }
            for (var i = 0; i < k.length; i++) {
                var field = schema.getField(k[i]);
                if (!field) {
                    return false;
                }
                if (field.dbColumn != this.keys[i]) {
                    return false;
                }
            }
            return true;
        };
        return TableSchemaIndex;
    })();
    Retool.TableSchemaIndex = TableSchemaIndex;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var DatabaseMigration = (function () {
        function DatabaseMigration(context, db) {
            this.db = db;
            this.provider = db.provider;
            this.context = context;
            this.tableMigrations = [];
        }
        DatabaseMigration.prototype.getSchemaLoader = function (dbSchema) {
            return null;
        };
        DatabaseMigration.prototype.compareDb = function (database, app) {
            var table;
            var schema;
            for (var key in app.schemas.all()) {
                schema = app.schemas.get(key);
                if (schema.def.db_table) {
                    table = database.tables[schema.def.db_table];
                    this.compareTable(table, schema);
                }
            }
        };
        DatabaseMigration.prototype.compareTable = function (table, schema) {
            var migration = this.getTableMigration(table, schema);
            migration.generate();
            if (migration.statements) {
                this.tableMigrations.push(migration);
            }
        };
        DatabaseMigration.prototype.getTableMigration = function (table, schema) {
            return new Retool.TableMigration(this.db, table, schema);
        };
        DatabaseMigration.prototype.execute = function (done) {
            this.done = done;
            this.currentTableIndex = 0;
            this.currentStatementIndex = 0;
            this.nextStatement();
        };
        DatabaseMigration.prototype.nextStatement = function () {
            var self = this;
            if (this.currentTableIndex < this.tableMigrations.length) {
                var table = this.tableMigrations[this.currentTableIndex];
                if (this.currentStatementIndex < table.statements.length) {
                    var statement = table.statements[this.currentStatementIndex++];
                    this.executeStatement(statement, function (err) {
                        if (err) {
                            var error = Retool.VM.VMError.cast(err);
                            error.messages.push("Executing: " + statement);
                            self.done(error);
                        }
                        else {
                            self.nextStatement();
                        }
                    });
                }
                else {
                    this.currentTableIndex++;
                    this.currentStatementIndex = 0;
                    this.nextStatement();
                }
                return;
            }
            this.done();
        };
        DatabaseMigration.prototype.executeStatement = function (statement, done) {
        };
        DatabaseMigration.prototype.clear = function () {
            this.tableMigrations = [];
        };
        DatabaseMigration.prototype.syncSchema = function (schema, done) {
            var dbSchema = new Retool.DatabaseSchema();
            var schemaLoaderType = this.getSchemaLoaderType();
            var loader = new schemaLoaderType(this.context, dbSchema);
            var self = this;
            loader.loadTable(schema.def.db_table, function (err) {
                if (err) {
                    done(err);
                }
                else {
                    var table = dbSchema.tables[schema.def.db_table];
                    self.compareTable(table, schema);
                    if (self.tableMigrations && self.tableMigrations.length) {
                        self.execute(done);
                    }
                    else {
                        done();
                    }
                }
            });
        };
        DatabaseMigration.prototype.syncApp = function (app, db, done) {
            var context = this.context;
            var dbSchema = new Retool.DatabaseSchema();
            var migrator = this.provider.getMigrator(context, db);
            var loader = migrator.getSchemaLoader(dbSchema);
            var self = this;
            loader.load(function (err) {
                if (err) {
                    done(err, null);
                }
                else {
                    self.compareDb(dbSchema, app);
                    self.execute(function (err) {
                        if (err) {
                            done(err, null);
                        }
                        else {
                            done(null, self.tableMigrations);
                        }
                    });
                }
            });
        };
        DatabaseMigration.prototype.getSchemaLoaderType = function () {
            return null;
        };
        return DatabaseMigration;
    })();
    Retool.DatabaseMigration = DatabaseMigration;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var TableMigration = (function () {
        function TableMigration(db, table, schema) {
            this.db = db;
            this.table = table;
            this.schema = schema;
        }
        TableMigration.prototype.generate = function () {
            if (!this.table) {
                this.createTableAndIndexes(this.schema);
            }
            else {
                this.compare();
            }
            return this.statements;
        };
        TableMigration.prototype.compare = function () {
            this.checkForMissingColumns();
            this.checkForModifiedColumns();
            this.checkForDroppedColumns();
            this.checkForMissingIndexes();
            this.checkForModifiedIndexes();
            this.checkForDroppedIndexes();
        };
        TableMigration.prototype.checkForMissingColumns = function () {
            var fields = this.schema.allFields();
            for (var name in fields) {
                var field = fields[name];
                if (field.dbColumn && !this.table.columns[field.dbColumn]) {
                    this.addColumn(this.table, field);
                }
            }
        };
        TableMigration.prototype.checkForModifiedColumns = function () {
            var fields = this.schema.allFields();
            for (var name in fields) {
                var field = fields[name];
                if (field.dbColumn) {
                    var column = this.table.columns[field.dbColumn];
                    if (column && this.columnTypeChanged(column, field)) {
                        this.modifyColumn(this.table, column, field);
                    }
                }
            }
        };
        TableMigration.prototype.checkForDroppedColumns = function () {
            var fields = this.schema.allFields();
            var columns = {};
            for (var name in fields) {
                var field = fields[name];
                if (field.dbColumn) {
                    columns[field.dbColumn] = 1;
                }
            }
            for (var name in this.table.columns) {
                if (!this.isSystemColumn(name)) {
                    if (!columns[name]) {
                        // if column name not in hash then drop
                        var tableColumn = this.table.columns[name];
                        this.dropColumn(this.table, tableColumn);
                    }
                }
            }
        };
        TableMigration.prototype.checkForMissingIndexes = function () {
            var indexes = this.schema.allIndexes();
            for (var name in indexes) {
                var index = indexes[name];
                if (!this.table.indexes[name]) {
                    this.addIndex(this.table, this.schema, index);
                }
            }
            if (!this.table.indexes["PRIMARY"]) {
                this.addPrimaryKey(this.table, this.schema);
            }
        };
        TableMigration.prototype.checkForModifiedIndexes = function () {
            var indexes = this.schema.allIndexes();
            for (var name in indexes) {
                var index = indexes[name];
                var tableIndex = this.table.indexes[name];
                if (tableIndex) {
                    var modified = false;
                    if (tableIndex.unique != index.unique) {
                        modified = true;
                    }
                    if (!tableIndex.keysAreEqual(this.schema, index.keys)) {
                        modified = true;
                    }
                    if (modified) {
                        this.dropIndex(this.table, tableIndex);
                        this.addIndex(this.table, this.schema, index);
                    }
                }
            }
        };
        TableMigration.prototype.checkForDroppedIndexes = function () {
            var indexes = this.schema.allIndexes();
            for (var name in this.table.indexes) {
                var lower = name.toLowerCase();
                if (lower != "id" && lower != "primary") {
                    if (!indexes[name]) {
                        this.dropIndex(this.table, this.table.indexes[name]);
                    }
                }
            }
        };
        TableMigration.prototype.createTableAndIndexes = function (schema) {
            this.createTable(schema);
            var indexes = schema.allIndexes();
            var table = new Retool.TableSchema(schema.def.db_table);
            for (var name in indexes) {
                var index = indexes[name];
                this.addIndex(table, schema, index);
            }
        };
        TableMigration.prototype.isSystemColumn = function (name) {
            return name == "tenant_id" || name == "created_at" || name == "updated_at";
        };
        TableMigration.prototype.createTable = function (schema) {
        };
        TableMigration.prototype.addColumn = function (table, field) {
        };
        TableMigration.prototype.modifyColumn = function (table, column, field) {
        };
        TableMigration.prototype.dropColumn = function (table, column) {
        };
        TableMigration.prototype.columnTypeChanged = function (column, field) {
            return false;
        };
        TableMigration.prototype.addStatement = function (sql) {
            this.statements = this.statements || [];
            this.statements.push(sql);
        };
        TableMigration.prototype.dropIndex = function (table, index) {
        };
        TableMigration.prototype.addIndex = function (table, schema, index) {
        };
        TableMigration.prototype.addPrimaryKey = function (table, schema) {
        };
        TableMigration.prototype.toJSON = function () {
            return { model: this.schema.id, statements: this.statements };
        };
        return TableMigration;
    })();
    Retool.TableMigration = TableMigration;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ObjectModel = (function (_super) {
        __extends(ObjectModel, _super);
        function ObjectModel(myPrototype) {
            _super.call(this, myPrototype);
        }
        ObjectModel.prototype.init = function (context, options) {
            this.data = {}; // get default values
            this.isNew = true;
            this.provider = this.getDbProvider(context, this.schema);
            if (options.setDefaults) {
                this.loadDefaultValues(this.data, this.schema);
            }
            if (options.data) {
                this.mergeAndCast(context, this.data, options.data, this.schema);
            }
        };
        ObjectModel.createInstance = function (context, schema, data, asNew) {
            var model = this.createObj(context, schema);
            model.init(context, { data: data, setDefaults: asNew });
            if (!asNew) {
                model.isNew = false;
            }
            return model;
        };
        ObjectModel.createObj = function (context, schema) {
            var modelPrototype = Retool.ScriptRunner.getCompiledPrototype(schema.file);
            if (schema.file.compileError) {
                throw schema.file.compileError;
            }
            var modelType = schema.modelType || modelPrototype.baseConstructorFunc || ObjectModel;
            var model = new modelType(modelPrototype);
            model.schema = schema;
            return model;
        };
        ObjectModel.createStatic = function (context, schema) {
            var model = this.createObj(context, schema);
            model.init(context, {});
            return model;
        };
        ObjectModel.prototype.getProperty = function (params) {
            if (params.name == "isNew") {
                return this.isNew;
            }
            var field = this.schema.getField(params.name);
            if (!field && false) {
                var relationship = this.schema.getRelationship(params.name);
                if (!relationship) {
                    throw "Reference Error: " + params.name + " is not a defined field or relationship";
                }
            }
            return this.data[params.name];
        };
        ObjectModel.prototype.setProperty = function (params) {
            var field = this.schema.getField(params.name);
            if (field) {
                this.data[params.name] = field.cast(params.value, this.provider);
                return;
            }
            var relationship = this.schema.getRelationship(params.name);
            if (relationship) {
                if (relationship.type == "detail") {
                    var context = params.proc.context;
                    var relatedSchema = this.schema.getSchema(relationship.model);
                    this.data[params.name] = params.value;
                    //this.data[params.name] = this.mergeAndCastCollection(context,params.name,params.value,relatedSchema,this.provider);
                    return;
                }
                else if (relationship.type == "belongs_to") {
                    this.data[params.name] = params.value;
                    return;
                }
            }
            this.data[params.name] = params.value;
            // throw "Reference Error: " + params.name + " is not a defined field or relationship";
        };
        ObjectModel.prototype.deleteProperty = function (params) {
            delete this.data[params.name];
        };
        ObjectModel.prototype.loadDefaultValues = function (data, schema) {
            var fields = schema.allFields();
            for (var fieldName in fields) {
                var field = schema.getField(fieldName);
                if (field.def.default_value) {
                    data[fieldName] = field.cast(field.def.default_value);
                }
            }
            // todo: handle detail relationships as well ??
        };
        ObjectModel.prototype.vm___setIsNew = function (params) {
            this.isNew = params.args[0];
        };
        ObjectModel.prototype.vm_toObject = function (params) {
            return this.data;
        };
        ObjectModel.prototype.vm_creating = function (params) {
        };
        ObjectModel.prototype.vm_updating = function (params) {
        };
        ObjectModel.prototype.vm_saving = function (params) {
        };
        ObjectModel.prototype.vm_created = function (params) {
        };
        ObjectModel.prototype.vm_updated = function (params) {
        };
        ObjectModel.prototype.vm_saved = function (params) {
        };
        ObjectModel.prototype.vm_deleting = function (params) {
        };
        ObjectModel.prototype.vm_deleted = function (params) {
        };
        ObjectModel.prototype.vm_initialize = function (params) {
        };
        ObjectModel.prototype.vm_actions = function (params) {
        };
        ObjectModel.prototype.vm___validateToSchema = function (params) {
            // todo: perform schema level validations;
            var errors = new Retool.ValidationError();
            var schema = this.schema;
            var fields = schema.allFields();
            for (var fieldName in fields) {
                var field = schema.getField(fieldName);
                if (field.def.required) {
                    var value = this.data[fieldName];
                    if (!value) {
                        var label = field.def.label || fieldName;
                        errors.addFieldError(fieldName, label + " is a required field");
                    }
                }
            }
            return errors;
        };
        ObjectModel.prototype.vm_model = function (params) {
            return this.vm_new(params);
        };
        ObjectModel.prototype.vm_new = function (params) {
            return null;
        };
        ObjectModel.prototype.vm_fill = function (params) {
            var data = params.args[0];
            this.mergeAndCast(params.proc.context, this.data, data, this.schema);
        };
        ObjectModel.prototype.getDbProvider = function (context, schema) {
            return null;
        };
        ObjectModel.prototype.getSchemaCaster = function () {
            return this.provider;
        };
        ObjectModel.prototype.serializeSync = function (context) {
            return this.schema.serialize(context, this.data);
        };
        ObjectModel.prototype.getSerializeInfo = function () {
            var typeName;
            if (this.schema) {
                typeName = this.schema.id;
            }
            return { type: "ObjectModel", args: { isNew: this.isNew, typeName: typeName } };
        };
        ObjectModel.prototype.mergeAndCast = function (context, doc, data, schema) {
            var caster = this.getSchemaCaster();
            this.mergeAndCastDocument(context, doc, data, schema, caster);
        };
        ObjectModel.prototype.mergeAndCastDocument = function (context, doc, data, schema, caster) {
            var keys = Object.keys(data);
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                var field = schema.getField(key);
                if (field) {
                    doc[key] = field.cast(data[key], caster);
                }
                else {
                    var relationship = schema.getRelationship(key);
                    if (relationship) {
                        if (relationship.type == "detail") {
                            var source = data[key];
                            if (source) {
                                var relatedSchema = schema.getSchema(relationship.model);
                                if (!Array.isArray(source)) {
                                    throw "CollectionError: '" + key + "' expects an Array in model data";
                                }
                                doc[key] = this.mergeAndCastCollection(context, key, source, relatedSchema, caster);
                            }
                        }
                        else {
                            doc[key] = data[key];
                        }
                    }
                }
            }
        };
        ObjectModel.prototype.mergeAndCastCollection = function (context, name, sourceRows, schema, caster) {
            if (!Array.isArray(sourceRows)) {
                throw "CollectionError: '" + name + "' expects an Array in model data";
            }
            var outputRows = [];
            for (var r = 0; r < sourceRows.length; r++) {
                var row = {};
                this.mergeAndCastDocument(context, row, sourceRows[r], schema, caster);
                outputRows.push(row);
            }
            return outputRows;
        };
        ObjectModel.addFunc = function (func) {
            var src = func.toString();
            src = src;
        };
        ObjectModel.prototype.__getSerializeData = function () {
            return this.data;
        };
        return ObjectModel;
    })(Retool.VM.ObjectWithProperties);
    Retool.ObjectModel = ObjectModel;
    Retool.VM.addType("Model", ObjectModel, null);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Schema = (function () {
        function Schema() {
        }
        Schema.fromFile = function (app, file) {
            var schema = new Schema();
            schema.app = app;
            schema.file = file;
            var def = file.getContent();
            schema._detailRelationships = [];
            schema._belongsToRelationships = [];
            if (def) {
                schema.id = def.name;
                schema.def = def;
                schema.idFieldName = "id";
                schema.modelType = def.modelType;
                var schemaFields = {};
                if (def.fields) {
                    var fields = def.fields;
                    var schemaField;
                    for (var fieldName in fields) {
                        schemaField = Retool.SchemaField.fromDefinition(fields[fieldName]);
                        schemaFields[fieldName] = schemaField;
                        if (schemaField.def.hidden) {
                            schema.hasHiddenFields = true;
                            schema.hiddenFields = schema.hiddenFields || [];
                            schema.hiddenFields.push(schemaField);
                        }
                    }
                }
                if (def.relationships) {
                    for (var relationshipName in def.relationships) {
                        var relationship = def.relationships[relationshipName];
                        if (relationship.type == "detail") {
                            schema._detailRelationships.push(relationship);
                        }
                        else if (relationship.type == "belongs_to") {
                            schema._belongsToRelationships.push(relationship);
                        }
                    }
                }
                schema._schemaFields = schemaFields;
                schema.multiTenant = true;
                if (def.crossTenant) {
                    schema.multiTenant = false;
                }
            }
            else {
                schema._schemaFields = {};
            }
            return schema;
        };
        Schema.prototype.isExposed = function (context) {
            return this.def.exposed;
        };
        Schema.prototype.getField = function (name) {
            return this._schemaFields[name];
        };
        Schema.prototype.findField = function (qualifiedName) {
            if (!qualifiedName) {
                return null;
            }
            var segments = qualifiedName.split('.');
            return this.getFieldFromSegments(this, segments, 0);
        };
        Schema.prototype.getFieldFromSegments = function (schema, segments, start) {
            var i = start;
            var last = segments.length - 1;
            while (i < last) {
                var relationship = schema.getRelationship(segments[i]);
                if (!relationship) {
                    return null;
                }
                schema = this.app.schemas.get(relationship.model);
                if (!schema) {
                    return null;
                }
                i++;
            }
            return schema.getField(segments[last]);
        };
        Schema.prototype.allFields = function () {
            return this._schemaFields;
        };
        Schema.prototype.getRelationship = function (name) {
            if (!this.def)
                return null;
            return this.def.relationships[name];
        };
        Schema.prototype.allRelationships = function () {
            if (!this.def)
                return null;
            return this.def.relationships;
        };
        Schema.prototype.allIndexes = function () {
            if (!this.def)
                return null;
            return this.def.indexes;
        };
        Schema.prototype.getSchema = function (id) {
            return this.app.schemas.get(id);
        };
        Schema.prototype.getFieldReference = function (id) {
            var ref = FieldReference.create(this, id);
            if (ref.field) {
                return ref;
            }
            return null;
        };
        Schema.prototype.hasDetailRelationships = function () {
            return this._detailRelationships.length > 0;
        };
        Schema.prototype.getDetailRelationships = function () {
            return this._detailRelationships;
        };
        Schema.prototype.hasBelongsTo = function () {
            return this._belongsToRelationships.length > 0;
        };
        Schema.prototype.getBelongsTo = function () {
            return this._belongsToRelationships;
        };
        Schema.prototype.serialize = function (context, obj) {
            var data;
            if (obj.__getSerializeData) {
                data = obj.__getSerializeData();
            }
            else {
                data = obj;
            }
            if (this.hasHiddenFields) {
                for (i = 0; i < this.hiddenFields.length; i++) {
                    delete data[this.hiddenFields[i].name];
                }
            }
            var relationship;
            var schema;
            if (this.hasBelongsTo) {
                for (var i = 0; i < this._belongsToRelationships.length; i++) {
                    relationship = this._belongsToRelationships[i];
                    if (data[relationship.name]) {
                        schema = this.getSchema(relationship.model);
                        data[relationship.name] = schema.serialize(context, data[relationship.name]);
                    }
                }
            }
            if (this.hasDetailRelationships) {
                for (var i = 0; i < this._detailRelationships.length; i++) {
                    relationship = this._detailRelationships[i];
                    if (data[relationship.name]) {
                        schema = this.getSchema(relationship.model);
                        data[relationship.name] = schema.serializeArray(context, data[relationship.name]);
                    }
                }
            }
            return data;
        };
        Schema.prototype.serializeArray = function (context, array) {
            for (var i = 0; i < array.length; i++) {
                array[i] = this.serialize(context, array[i]);
            }
            return array;
        };
        Schema.idField = "id";
        return Schema;
    })();
    Retool.Schema = Schema;
    var FieldReference = (function () {
        function FieldReference() {
        }
        FieldReference.create = function (rootSchema, qualifiedName) {
            var ref = new FieldReference();
            var segments = qualifiedName.split('.');
            ref.name = segments.pop();
            if (segments.length) {
                ref.path = segments.join('.');
                ref.pathSegments = segments;
                var schema = ref.getSchema(rootSchema, segments);
                if (schema) {
                    ref.field = schema.getField(ref.name);
                }
            }
            else {
                ref.field = rootSchema.getField(ref.name);
            }
            return ref;
        };
        FieldReference.prototype.getSchema = function (schema, segments) {
            var relationship;
            for (var i = 0; i < segments.length; i++) {
                relationship = schema.getRelationship(segments[i]);
                if (!relationship) {
                    return null;
                }
                schema = schema.getSchema(relationship.model);
                if (!schema) {
                    return null;
                }
            }
            return schema;
        };
        return FieldReference;
    })();
    Retool.FieldReference = FieldReference;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ArrayModel = (function (_super) {
        __extends(ArrayModel, _super);
        function ArrayModel(context, schema, data) {
            _super.call(this, null);
            this.schema = schema;
            this.data = data || [];
        }
        ArrayModel.createInstance = function (context, schema, data) {
            var model = new ArrayModel(context, schema, data);
            return model;
        };
        ArrayModel.prototype.vm_get_length = function (params) {
            return this.data.length;
        };
        ArrayModel.prototype.vm_push = function (params) {
            var args = params.args;
            return Array.prototype.push.apply(this.data, args);
        };
        ArrayModel.prototype.vm_pop = function (params) {
            return this.data.pop();
        };
        ArrayModel.prototype.serializeSync = function () {
            return this.data;
        };
        ArrayModel.prototype.getSerializeInfo = function () {
            var typeName;
            if (this.schema) {
                typeName = this.schema.id;
            }
            return { type: "ArrayModel", args: { typeName: typeName } };
        };
        ArrayModel.prototype.__getSerializeData = function () {
            return this.data;
        };
        return ArrayModel;
    })(Retool.VM.ObjectBase);
    Retool.ArrayModel = ArrayModel;
    Retool.VM.addType("ArrayModel", ArrayModel, null);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ORMModel = (function (_super) {
        __extends(ORMModel, _super);
        function ORMModel() {
            _super.apply(this, arguments);
        }
        ORMModel.prototype.createQuery = function (params) {
            return null;
        };
        ORMModel.prototype.getCollection = function (params) {
            return null;
        };
        ORMModel.prototype.vm_all = function (params) {
            return this.createQuery(params);
        };
        ORMModel.prototype.vm_orderBy = function (params) {
            return this.createQuery(params).vm_orderBy(params);
        };
        ORMModel.prototype.vm_new = function (params) {
            var data;
            if (params.args.length) {
                data = params.args[0];
            }
            var model = Retool.ObjectModel.createInstance(params.proc.context, this.schema, data, true);
            return model;
        };
        ORMModel.prototype.vm___loadExisting = function (params) {
            var data;
            if (params.args.length) {
                data = params.args[0];
            }
            var model = Retool.ObjectModel.createInstance(params.proc.context, this.schema, data, false);
            return model;
        };
        ORMModel.prototype.vm_limit = function (params) {
            return this.createQuery(params).vm_limit(params);
        };
        ORMModel.prototype.vm_count = function (params) {
            return this.createQuery(params).vm_count(params);
        };
        ORMModel.prototype.vm_timeframe = function (params) {
            return this.createQuery(params).vm_timeframe(params);
        };
        ORMModel.prototype.vm_sum = function (params) {
            return this.createQuery(params).vm_sum(params);
        };
        ORMModel.prototype.vm_min = function (params) {
            return this.createQuery(params).vm_min(params);
        };
        ORMModel.prototype.vm_max = function (params) {
            return this.createQuery(params).vm_max(params);
        };
        ORMModel.prototype.vm_avg = function (params) {
            return this.createQuery(params).vm_avg(params);
        };
        ORMModel.prototype.vm_startKey = function (params) {
            return this.createQuery(params).vm_startKey(params);
        };
        ORMModel.prototype.vm_endKey = function (params) {
            return this.createQuery(params).vm_endKey(params);
        };
        ORMModel.prototype.vm_where = function (params) {
            return this.createQuery(params).vm_where(params);
        };
        ORMModel.prototype.vm__del = function (params) {
            var query = this.createQuery(params);
            query.recordKey = this.data.id;
            return query.vm_del(params);
        };
        ORMModel.prototype.vm__query = function (params) {
            var query = this.createQuery(params);
            var queryData = params.getIndex(0);
            if (queryData) {
                query.deserialize(queryData);
                var methodName = queryData.method || "get";
                params.args = queryData.methodArgs;
                return query.execMethod(params, methodName);
            }
            else {
                query.vm_get(params);
            }
        };
        ORMModel.prototype.vm__find = function (params) {
            return this.createQuery(params).vm_find(params);
        };
        ORMModel.prototype.vm_findOrFail = function (params) {
            return this.createQuery(params).vm_findOrFail(params);
        };
        ORMModel.prototype.vm__save = function (params) {
            var collection = this.getCollection(params);
            params.args = [this];
            if (this.isNew) {
                return collection.vm_create(params);
            }
            else {
                return collection.vm_update(params);
            }
        };
        ORMModel.prototype.vm = function (DB) {
            function save() {
                var isNew = this.isNew;
                var errors = this.__validateToSchema();
                if (isNew) {
                    this.creating(errors);
                }
                else {
                    this.updating(errors);
                }
                this.saving(errors);
                errors.throwIfAny();
                this._save();
                if (this.__methodHasCode('duringSave')) {
                    this.duringSave();
                }
                if (isNew) {
                    this.__setIsNew(false);
                    this.created();
                }
                else {
                    this.updated();
                }
                this.saved();
                return this;
            }
            function del() {
                this.deleting();
                var count;
                if (this.__methodHasCode('duringDelete')) {
                    count = this._del();
                    this.duringDelete();
                }
                else {
                    count = this._del();
                }
                this.deleted();
                return count;
            }
            function create(body) {
                var m = this.model(body);
                m.initialize();
                m.save();
                return m;
            }
            function update(body) {
                var m = this.findOrFail(body.id);
                m.fill(body);
                m.save();
                return m;
            }
            function destroy(id) {
                var m = this.findOrFail(id);
                return m.del();
            }
            function query(query) {
                return this._query(query);
            }
            function find(id, columns) {
                return this._find(id, columns);
            }
            function __loadInstance(data, then, args) {
                var m = this.__loadExisting(data);
                return m.__callMethod(then, args);
            }
        };
        return ORMModel;
    })(Retool.ObjectModel);
    Retool.ORMModel = ORMModel;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SchemaActions = (function (_super) {
        __extends(SchemaActions, _super);
        function SchemaActions(data) {
            _super.call(this, null);
            this._actions = {};
            if (data) {
            }
        }
        SchemaActions.prototype.vm_add = function (params) {
            if (params.args.length) {
                for (var i = 0; i < params.args.length; i++) {
                    var arg = params.args[i];
                    this._actions[arg] = 1;
                }
            }
            return this;
        };
        SchemaActions.prototype.vm_remove = function (params) {
            if (params.args.length) {
                for (var i = 0; i < params.args.length; i++) {
                    var arg = params.args[i];
                    this._actions[arg] = null;
                }
            }
            return this;
        };
        SchemaActions.prototype.vm_crud = function (params) {
            this._actions["create"] = 1;
            this._actions["update"] = 1;
            this._actions["destroy"] = 1;
            this._actions["find"] = 1;
            this._actions["get"] = 1;
            return this;
        };
        SchemaActions.prototype.contains = function (action) {
            var a = this._actions[action];
            if (a) {
                return true;
            }
            return false;
        };
        return SchemaActions;
    })(Retool.VM.ObjectBase);
    Retool.SchemaActions = SchemaActions;
    var SchemaActionsStatic = (function (_super) {
        __extends(SchemaActionsStatic, _super);
        function SchemaActionsStatic() {
            _super.apply(this, arguments);
        }
        SchemaActionsStatic.prototype.vm_crud = function (params) {
            var actions = new SchemaActions();
            actions.vm_crud(params);
            return actions;
        };
        SchemaActionsStatic.prototype.vm_add = function (params) {
            var actions = new SchemaActions();
            actions.vm_add(params);
            return actions;
        };
        return SchemaActionsStatic;
    })(Retool.VM.ObjectBase);
    Retool.SchemaActionsStatic = SchemaActionsStatic;
    Retool.VM.addType("Actions", null, new SchemaActionsStatic(null));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SchemaBuilder = (function () {
        function SchemaBuilder() {
        }
        SchemaBuilder.prototype.init = function (name, settings) {
            this.def = { name: name, fields: {}, indexes: {}, relationships: {}, type: "model" };
            if (settings) {
                for (var key in settings) {
                    this.def[key] = settings[key];
                }
            }
            this.file = new Retool.FileSystem.File("models/" + name + ".mod", this.def);
        };
        SchemaBuilder.prototype.addField = function (name, fieldDef) {
            fieldDef.name = name;
            this.def.fields[name] = fieldDef;
        };
        SchemaBuilder.prototype.addRelationship = function (name, options) {
            var rel = {
                name: name,
                type: options.type,
                foreignKey: options.foreignKey,
                model: options.model
            };
            this.def.relationships[name] = rel;
        };
        SchemaBuilder.prototype.addIndex = function (name, options) {
            var index = {
                name: name,
                unique: options.unique,
                keys: options.keys,
                primary: options.primary
            };
            this.def.indexes[name] = index;
        };
        SchemaBuilder.prototype.setSource = function (func, staticPrototype) {
            var prototype = Retool.IDE.JavascriptCompiler.compileFunctionClass(func);
            if (staticPrototype) {
                prototype.extendsBase(staticPrototype);
            }
            this.file.compiledPrototype = prototype;
        };
        return SchemaBuilder;
    })();
    Retool.SchemaBuilder = SchemaBuilder;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Controller = (function (_super) {
        __extends(Controller, _super);
        function Controller(myPrototype) {
            _super.call(this, myPrototype);
        }
        Controller.createStatic = function (context, ref) {
            var proto = Retool.ScriptRunner.getCompiledPrototype(ref.file);
            if (ref.file.compileError) {
                throw ref.file.compileError;
            }
            var controller = new Controller(proto);
            controller.ref = ref;
            return controller;
        };
        return Controller;
    })(Retool.VM.ObjectWithProperties);
    Retool.Controller = Controller;
    Retool.VM.addType("ApiController", Controller, null);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ControllerRef = (function () {
        function ControllerRef() {
        }
        ControllerRef.fromFile = function (app, file) {
            var ref = new ControllerRef();
            var def = file.getContent();
            ref.id = def.name;
            ref.file = file;
            ref.def = def;
            ref.app = app;
            return ref;
        };
        return ControllerRef;
    })();
    Retool.ControllerRef = ControllerRef;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SchemaTypes = (function () {
        function SchemaTypes() {
        }
        SchemaTypes.addField = function (name, fieldType) {
            SchemaTypes.fields[name] = fieldType;
        };
        SchemaTypes.fields = {};
        return SchemaTypes;
    })();
    Retool.SchemaTypes = SchemaTypes;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SchemaField = (function () {
        function SchemaField() {
        }
        SchemaField.prototype.cast = function (value, provider) {
            return value;
        };
        SchemaField.prototype.fromDb = function (value, provider) {
            return value;
        };
        SchemaField.prototype.toDb = function (value, provider) {
            return value;
        };
        SchemaField.fromDefinition = function (def) {
            var schemaType = Retool.SchemaTypes.fields[def.type];
            if (!schemaType) {
                schemaType = Retool.SchemaString;
            }
            var field = new schemaType();
            field.name = def.name;
            field.def = def;
            if (def.name == "id") {
                field.dbColumn = "rt_id";
            }
            else {
                field.dbColumn = def.db_column;
            }
            return field;
        };
        SchemaField.prototype.getDataType = function () {
            return 0 /* String */;
        };
        return SchemaField;
    })();
    Retool.SchemaField = SchemaField;
    (function (DataType) {
        DataType[DataType["String"] = 0] = "String";
        DataType[DataType["Number"] = 1] = "Number";
        DataType[DataType["Date"] = 2] = "Date";
    })(Retool.DataType || (Retool.DataType = {}));
    var DataType = Retool.DataType;
    ;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SchemaBoolean = (function (_super) {
        __extends(SchemaBoolean, _super);
        function SchemaBoolean() {
            _super.apply(this, arguments);
        }
        SchemaBoolean.prototype.fromDb = function (value, provider) {
            return (value) ? true : false;
        };
        SchemaBoolean.prototype.toDb = function (value, provider) {
            return (value) ? 1 : 0;
        };
        SchemaBoolean.prototype.getDataType = function () {
            return 1 /* Number */;
        };
        return SchemaBoolean;
    })(Retool.SchemaField);
    Retool.SchemaBoolean = SchemaBoolean;
    Retool.SchemaTypes.addField("boolean", SchemaBoolean);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SchemaDate = (function (_super) {
        __extends(SchemaDate, _super);
        function SchemaDate() {
            _super.apply(this, arguments);
        }
        SchemaDate.prototype.cast = function (value) {
            if (!value) {
                return null;
            }
            if (value instanceof Date)
                return value;
            var date;
            if (value instanceof Number || 'number' == typeof value)
                date = new Date(Number(value));
            else if (value.toString)
                date = new Date(value.toString());
            if (date.toString() != 'Invalid Date')
                return date;
            // invalid date
            return null;
        };
        SchemaDate.prototype.getDataType = function () {
            return 2 /* Date */;
        };
        return SchemaDate;
    })(Retool.SchemaField);
    Retool.SchemaDate = SchemaDate;
    Retool.SchemaTypes.addField("date", SchemaDate);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SchemaDateTime = (function (_super) {
        __extends(SchemaDateTime, _super);
        function SchemaDateTime() {
            _super.apply(this, arguments);
        }
        SchemaDateTime.prototype.cast = function (value) {
            if (!value) {
                return null;
            }
            if (value instanceof Date)
                return value;
            var date;
            if (value instanceof Number || 'number' == typeof value)
                date = new Date(Number(value));
            else if (value.toString)
                date = new Date(value.toString());
            if (date.toString() != 'Invalid Date')
                return date;
            // invalid date
            return null;
        };
        SchemaDateTime.prototype.getDataType = function () {
            return 2 /* Date */;
        };
        return SchemaDateTime;
    })(Retool.SchemaField);
    Retool.SchemaDateTime = SchemaDateTime;
    Retool.SchemaTypes.addField("datetime", SchemaDateTime);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SchemaEmail = (function (_super) {
        __extends(SchemaEmail, _super);
        function SchemaEmail() {
            _super.apply(this, arguments);
        }
        return SchemaEmail;
    })(Retool.SchemaField);
    Retool.SchemaEmail = SchemaEmail;
    Retool.SchemaTypes.addField("email", SchemaEmail);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SchemaMoney = (function (_super) {
        __extends(SchemaMoney, _super);
        function SchemaMoney() {
            _super.apply(this, arguments);
        }
        SchemaMoney.prototype.getDataType = function () {
            return 1 /* Number */;
        };
        return SchemaMoney;
    })(Retool.SchemaField);
    Retool.SchemaMoney = SchemaMoney;
    Retool.SchemaTypes.addField("money", SchemaMoney);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SchemaInteger = (function (_super) {
        __extends(SchemaInteger, _super);
        function SchemaInteger() {
            _super.apply(this, arguments);
        }
        SchemaInteger.prototype.getDataType = function () {
            return 1 /* Number */;
        };
        return SchemaInteger;
    })(Retool.SchemaField);
    Retool.SchemaInteger = SchemaInteger;
    Retool.SchemaTypes.addField("integer", SchemaInteger);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SchemaNumber = (function (_super) {
        __extends(SchemaNumber, _super);
        function SchemaNumber() {
            _super.apply(this, arguments);
        }
        SchemaNumber.prototype.getDataType = function () {
            return 1 /* Number */;
        };
        return SchemaNumber;
    })(Retool.SchemaField);
    Retool.SchemaNumber = SchemaNumber;
    Retool.SchemaTypes.addField("number", SchemaNumber);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SchemaObjectId = (function (_super) {
        __extends(SchemaObjectId, _super);
        function SchemaObjectId() {
            _super.apply(this, arguments);
        }
        SchemaObjectId.prototype.cast = function (value, provider) {
            if (!provider) {
                throw "A db provider is required to cast Object Id";
            }
            if (value) {
                return provider.castObjectId(value);
            }
            return value;
        };
        return SchemaObjectId;
    })(Retool.SchemaField);
    Retool.SchemaObjectId = SchemaObjectId;
    Retool.SchemaTypes.addField("objectid", SchemaObjectId);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SchemaPhone = (function (_super) {
        __extends(SchemaPhone, _super);
        function SchemaPhone() {
            _super.apply(this, arguments);
        }
        return SchemaPhone;
    })(Retool.SchemaField);
    Retool.SchemaPhone = SchemaPhone;
    Retool.SchemaTypes.addField("phone", SchemaPhone);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SchemaPicklist = (function (_super) {
        __extends(SchemaPicklist, _super);
        function SchemaPicklist() {
            _super.apply(this, arguments);
        }
        return SchemaPicklist;
    })(Retool.SchemaField);
    Retool.SchemaPicklist = SchemaPicklist;
    Retool.SchemaTypes.addField("picklist", SchemaPicklist);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SchemaString = (function (_super) {
        __extends(SchemaString, _super);
        function SchemaString() {
            _super.apply(this, arguments);
        }
        return SchemaString;
    })(Retool.SchemaField);
    Retool.SchemaString = SchemaString;
    Retool.SchemaTypes.addField("string", SchemaString);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SchemaText = (function (_super) {
        __extends(SchemaText, _super);
        function SchemaText() {
            _super.apply(this, arguments);
        }
        return SchemaText;
    })(Retool.SchemaField);
    Retool.SchemaText = SchemaText;
    Retool.SchemaTypes.addField("text", SchemaText);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SchemaUrl = (function (_super) {
        __extends(SchemaUrl, _super);
        function SchemaUrl() {
            _super.apply(this, arguments);
        }
        return SchemaUrl;
    })(Retool.SchemaField);
    Retool.SchemaUrl = SchemaUrl;
    Retool.SchemaTypes.addField("url", SchemaUrl);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var DatabaseBase = (function (_super) {
        __extends(DatabaseBase, _super);
        function DatabaseBase(provider, name) {
            _super.call(this, null);
            this.provider = provider;
            this.name = name;
        }
        DatabaseBase.prototype.query = function (context, options, done) {
            this.provider.executeQuery(context, this, options, function (err, resultset) {
                if (err) {
                    done(err);
                }
                else {
                    done(null, resultset);
                }
            });
        };
        DatabaseBase.prototype.getCollection = function (schema) {
            return null;
        };
        DatabaseBase.prototype.escapeTable = function (tableName) {
            return tableName;
        };
        return DatabaseBase;
    })(Retool.VM.ObjectBase);
    Retool.DatabaseBase = DatabaseBase;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SqlServer;
    (function (SqlServer) {
        var Collection = (function (_super) {
            __extends(Collection, _super);
            function Collection(db, name, type, schema) {
                _super.call(this, null);
                this.db = db;
                this.name = name;
                this.type = type;
                this.schema = schema;
            }
            Collection.prototype.parsePostResponse = function (res, m) {
                var headers = res.headers;
                var location = headers.location;
                if (location) {
                    var segments = location.split('/');
                    if (segments.length >= 4) {
                        m.data.id = decodeURIComponent(segments[3]);
                    }
                }
            };
            Collection.prototype.vm_create = function (params) {
                var m = params.getIndex(0);
                var context = params.proc.context;
                var data = m.data;
                var self = this;
                var insert = new SqlServer.InsertBuilder(this.db, this.schema);
                var commands = insert.build(context, data);
                var sql = commands.join(";");
                var async = params.proc.pause();
                this.db.query(context, { sql: sql }, function (err, resultset) {
                    if (err) {
                        async.error(err);
                    }
                    else {
                        var lastId;
                        if (!resultset.isEmpty()) {
                            var recordSet = resultset.recordSets[0];
                            if (recordSet.rows.length) {
                                lastId = recordSet.rows[0].LAST_ID;
                            }
                            m.set("id", lastId);
                        }
                        async.resume(lastId);
                    }
                });
            };
            Collection.prototype.vm_update = function (params) {
                var m = params.getIndex(0);
                var context = params.proc.context;
                var data = m.data;
                var self = this;
                var update = new SqlServer.UpdateBuilder(this.db, this.schema);
                var commands = update.build(context, data);
                var sql = commands.join(";");
                var async = params.proc.pause();
                this.db.query(context, { sql: sql }, function (err, resultset) {
                    if (err) {
                        async.error(err);
                    }
                    else {
                        async.resume(1);
                    }
                });
            };
            Collection.prototype.castError = function (err) {
                return Retool.VM.VMError.cast(err);
            };
            Collection.prototype.vm_find = function (params) {
                var query = params.getIndex(0);
                var context = params.proc.context;
                var async = params.proc.pause();
                var self = this;
                var key = query.recordKey;
                if (!key) {
                    throw "Missing key for find";
                }
                query.conditions.push({ booleanOperator: "AND", column: "id", operator: "=", value: key });
                var select = new SqlServer.SelectStatement(context, query);
                var sql = select.getSql();
                var async = params.proc.pause();
                this.db.query(context, { sql: sql, columnsAsArray: true }, function (err, resultset) {
                    if (err) {
                        async.error(err);
                    }
                    else {
                        var rows = (resultset.recordSets[0]) ? resultset.recordSets[0].rows : [];
                        rows = select.formatRows(rows);
                        var data;
                        if (rows.length) {
                            data = rows[0];
                        }
                        var m = Retool.ObjectModel.createInstance(context, self.schema, data, false);
                        async.resume(m);
                    }
                });
            };
            Collection.prototype.vm_remove = function (params) {
                var query = params.getIndex(0);
                var context = params.proc.context;
                var self = this;
                var key = query.recordKey;
                var schema = this.schema;
                if (!key) {
                    throw "Missing key for remove";
                }
                var deleteBuilder = new SqlServer.DeleteBuilder(this.db, this.schema);
                var sql = deleteBuilder.build(context, key);
                var async = params.proc.pause();
                this.db.query(context, { sql: sql }, function (err, resultset) {
                    if (err) {
                        async.error(err);
                    }
                    else {
                        async.resume(1);
                    }
                });
            };
            Collection.prototype.vm_list = function (params) {
                var query = params.getIndex(0);
                var context = params.proc.context;
                var self = this;
                var key = query.recordKey;
                var schema = this.schema;
                var select = new SqlServer.SelectStatement(context, query);
                var sql = select.getSql();
                var async = params.proc.pause();
                this.db.query(context, { sql: sql, columnsAsArray: true }, function (err, resultset) {
                    if (err) {
                        async.error(err);
                    }
                    else {
                        var rows = (resultset.recordSets[0]) ? resultset.recordSets[0].rows : [];
                        rows = select.formatRows(rows);
                        async.resume(new Retool.ArrayModel(context, schema, rows));
                    }
                });
            };
            Collection.prototype.buildProjection = function (schema, columns) {
                var fields = {};
                for (var i = 0; i < columns.length; i++) {
                    var col = columns[i];
                    if (col) {
                        var ref = schema.getFieldReference(col);
                        if (ref) {
                            fields[col] = 1;
                        }
                    }
                }
                return fields;
            };
            Collection.prototype.formatRows = function (context, schema, results) {
                var rows = [];
                if (results) {
                    var out = [];
                    for (var i = 0; i < results.length; i++) {
                        var row = results[i];
                        row.id = row._id;
                        delete row["_id"];
                        delete row["_meta"];
                        rows.push(row);
                    }
                }
                return new Retool.ArrayModel(context, schema, rows);
            };
            Collection.prototype.getCollectionName = function (context, value) {
                return value;
            };
            return Collection;
        })(Retool.VM.ObjectBase);
        SqlServer.Collection = Collection;
    })(SqlServer = Retool.SqlServer || (Retool.SqlServer = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SqlServer;
    (function (SqlServer) {
        var Connection = (function () {
            function Connection(db, driverConnection, requestLog) {
                this.requestLog = requestLog;
                this.transactionLevel = 0;
                this.driverConnection = driverConnection;
            }
            Connection.prototype.query = function (context, options, callback) {
                var self = this;
                var sql = options.sql;
                if (this.requestLog) {
                    this.requestLog.add("SQL", sql);
                }
                if (this.transactionLevel) {
                    this.execSql(options, function (err, data) {
                        if (err) {
                            self.rollback(context, function () {
                                callback(err, data);
                            });
                        }
                        else {
                            callback(err, data);
                        }
                    });
                }
                else {
                    return this.execSql(options, function (err, data) {
                        callback(err, data);
                    });
                }
            };
            Connection.prototype.paramQuery = function (context, options, params, callback) {
                var self = this;
                var sql = options.sql;
                if (this.requestLog) {
                    this.requestLog.add("SQL", sql);
                }
                return this.execSql(options, function (err, data) {
                    if (err && self.transactionLevel) {
                        self.rollback(context, function () {
                            callback(err, data);
                        });
                    }
                    else {
                        callback(err, data);
                    }
                });
            };
            Connection.prototype.release = function () {
                if (this.driverConnection) {
                    //this.driverConnection.close();
                    this.driverConnection.release();
                    this.driverConnection = null;
                }
            };
            Connection.prototype.rollback = function (context, callback) {
                var self = this;
                if (this.requestLog) {
                    this.requestLog.add("SQL", "ROLLBACK");
                }
                this.transactionLevel = 0;
                this.driverConnection.rollback(function (err) {
                    self.release();
                    callback(err);
                });
            };
            Connection.prototype.commit = function (context, callback) {
                this._commit(context, callback);
            };
            Connection.prototype._commit = function (context, callback, force) {
                var self = this;
                if (!force) {
                    if (this.transactionLevel == 0) {
                        this.release();
                        callback(null);
                        return;
                    }
                    if (this.transactionLevel > 1) {
                        this.transactionLevel--;
                        callback(null);
                        return;
                    }
                }
                if (this.requestLog) {
                    this.requestLog.add("SQL", "COMMIT");
                }
                this.driverConnection.commit(function (err) {
                    if (err) {
                        self.rollback(context, function () {
                            callback(err);
                        });
                    }
                    else {
                        self.transactionLevel--;
                        self.release();
                        callback(err);
                    }
                });
            };
            Connection.prototype.forceCommit = function (context, callback) {
                this._commit(context, callback, true);
            };
            Connection.prototype.beginTransaction = function (context, callback) {
                var self = this;
                this.transactionLevel++;
                if (this.transactionLevel > 1) {
                    callback(null);
                    return;
                }
                if (this.requestLog) {
                    this.requestLog.add("SQL", "START TRANSACTION");
                }
                this.driverConnection.beginTransaction(function (err) {
                    if (err) {
                        self.release();
                        callback(err);
                    }
                    else {
                        callback(null);
                    }
                });
            };
            Connection.prototype.execSql = function (options, done) {
                var Request = require('tedious').Request;
                var resultSet = new SqlServer.ResultSet();
                resultSet.columnsAsArray = options.columnsAsArray;
                var conn = this.driverConnection;
                var sql = options.sql;
                var request = new Request(sql, function (err, rowCount) {
                    if (err) {
                        done(err);
                        return;
                    }
                    done(null, resultSet);
                });
                request.on('columnMetadata', function (metadata) {
                    resultSet.addRecordSet(metadata);
                });
                request.on('row', function (columns) {
                    resultSet.current.addRow(columns);
                });
                conn.execSql(request);
            };
            return Connection;
        })();
        SqlServer.Connection = Connection;
    })(SqlServer = Retool.SqlServer || (Retool.SqlServer = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SqlServer;
    (function (SqlServer) {
        var Database = (function (_super) {
            __extends(Database, _super);
            function Database() {
                _super.apply(this, arguments);
            }
            Database.prototype.getCollection = function (schema) {
                return new SqlServer.Collection(this, "model_data", "", schema);
            };
            Database.prototype.register = function () {
                Retool.Server.databases.sqlserver = this;
            };
            Database.prototype.escapeTable = function (tableName) {
                return this.provider.escapeId(tableName);
            };
            Database.prototype.getVirtualTableName = function (schema) {
                return schema.id;
            };
            Database.prototype.getTableName = function (schema) {
                return "AllUserData";
            };
            return Database;
        })(Retool.DatabaseBase);
        SqlServer.Database = Database;
    })(SqlServer = Retool.SqlServer || (Retool.SqlServer = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SqlServer;
    (function (SqlServer) {
        var DeleteBuilder = (function () {
            function DeleteBuilder(db, schema) {
                this.db = db;
                this.schema = schema;
            }
            DeleteBuilder.prototype.build = function (context, id) {
                var commands = [];
                var sql = this.getDeleteSql(context, this.schema, id);
                commands.push(sql);
                /*
                if (this.schema.hasDetailRelationships()){
                    this.addDetail(context,commands,data);
                }
                */
                return commands;
            };
            DeleteBuilder.prototype.getDeleteSql = function (context, schema, id) {
                var db = this.db;
                var provider = db.provider;
                var sql = "delete from " + db.escapeTable(db.getTableName(schema));
                sql += " where " + provider.escapeId(SqlServer.Provider.DB_ID) + "=" + provider.escape(id);
                if (schema.multiTenant) {
                    sql += " and " + provider.escapeId(SqlServer.Provider.DB_TENANT) + "=" + provider.escape(context.getTenantId());
                    sql += " and " + provider.escapeId(SqlServer.Provider.DB_VIRTUAL_TABLE) + "=" + provider.escape(db.getVirtualTableName(schema));
                }
                return sql;
            };
            return DeleteBuilder;
        })();
        SqlServer.DeleteBuilder = DeleteBuilder;
    })(SqlServer = Retool.SqlServer || (Retool.SqlServer = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SqlServer;
    (function (SqlServer) {
        var InsertBuilder = (function () {
            function InsertBuilder(db, schema) {
                this.db = db;
                this.schema = schema;
            }
            InsertBuilder.prototype.build = function (context, data) {
                var commands = [];
                var sql = this.getInsertSql(context, this.schema, data);
                commands.push(sql);
                if (this.schema.hasDetailRelationships()) {
                    this.addDetail(context, commands, data);
                }
                return commands;
            };
            InsertBuilder.prototype.getInsertSql = function (context, schema, data, variables) {
                var fields = schema.allFields();
                var field;
                var db = this.db;
                var provider = db.provider;
                var fieldNames = [];
                var values = [];
                if (schema.multiTenant) {
                    fieldNames.push(SqlServer.Provider.DB_TENANT);
                    values.push(provider.escape(context.getTenantId()));
                    fieldNames.push(SqlServer.Provider.DB_VIRTUAL_TABLE);
                    values.push(provider.escape(db.getVirtualTableName(schema)));
                }
                for (var key in fields) {
                    if (key != "id") {
                        field = fields[key];
                        if (field.dbColumn) {
                            fieldNames.push(provider.escapeId(field.dbColumn));
                            values.push(this.valueParam(field, data, key, variables));
                        }
                    }
                }
                var sql = "insert into " + db.escapeTable(db.getTableName(schema)) + "(";
                sql += fieldNames.join(",");
                sql += ") values (";
                sql += values.join(",");
                sql += ")";
                sql += ";select SCOPE_IDENTITY() as LAST_ID";
                return sql;
            };
            InsertBuilder.prototype.buildMulti = function (context, commands, schema, rows, variables) {
                if (!rows.length) {
                    return "";
                }
                var sql = this.getInsertSql(context, schema, rows[0], variables);
                if (rows.length == 1) {
                    commands.push(sql);
                    return;
                }
                var values;
                var db = this.db;
                var provider = db.provider;
                var tenantId = context.getTenantId();
                var fields = schema.allFields();
                var field;
                var data;
                for (var i = 1; i < rows.length; i++) {
                    data = rows[i];
                    values = [];
                    if (schema.multiTenant) {
                        values.push(provider.escape(tenantId));
                    }
                    for (var key in fields) {
                        if (key != "id") {
                            field = fields[key];
                            if (field.dbColumn) {
                                values.push(this.valueParam(field, data, key, variables));
                            }
                        }
                    }
                    sql += ",(" + values.join(",") + ")";
                }
                commands.push(sql);
            };
            InsertBuilder.prototype.addDetail = function (context, commands, master) {
                var db = this.db;
                var detailRelationships = this.schema.getDetailRelationships();
                var sql;
                commands.push("set @lastInsertId = last_insert_id()");
                for (var i = 0; i < detailRelationships.length; i++) {
                    var relationship = detailRelationships[i];
                    var relatedSchema = this.schema.getSchema(relationship.model);
                    var rows = master[relationship.name];
                    if (rows && rows.length) {
                        // is insert so expect variable set to last insert id
                        var variables = {};
                        variables[relationship.foreignKey] = "@lastInsertId";
                        var multiSql = this.buildMulti(context, commands, relatedSchema, rows, variables);
                        if (multiSql) {
                            commands.push(multiSql);
                        }
                    }
                }
                return sql;
            };
            InsertBuilder.prototype.valueParam = function (field, data, fieldName, variables) {
                if (variables && variables[fieldName]) {
                    return variables[fieldName];
                }
                return this.db.provider.escape(field.toDb(data[fieldName]));
            };
            return InsertBuilder;
        })();
        SqlServer.InsertBuilder = InsertBuilder;
    })(SqlServer = Retool.SqlServer || (Retool.SqlServer = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SqlServer;
    (function (SqlServer) {
        var Migrator = (function (_super) {
            __extends(Migrator, _super);
            function Migrator() {
                _super.apply(this, arguments);
            }
            Migrator.prototype.getTableMigration = function (table, schema) {
                return new SqlServer.TableMigrator(this.db, table, schema);
            };
            Migrator.prototype.executeStatement = function (statement, done) {
                /*
                this.context.query(statement,function(err,result){
                    done(err);
                })
    */
            };
            Migrator.prototype.getSchemaLoaderType = function () {
                return SqlServer.TableMigrator;
            };
            Migrator.prototype.getLoader = function (dbSchema) {
                return new SqlServer.SchemaLoader(this.context, this.db, dbSchema);
            };
            return Migrator;
        })(Retool.DatabaseMigration);
        SqlServer.Migrator = Migrator;
    })(SqlServer = Retool.SqlServer || (Retool.SqlServer = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SqlServer;
    (function (SqlServer) {
        var Model = (function (_super) {
            __extends(Model, _super);
            function Model() {
                _super.apply(this, arguments);
            }
            Model.prototype.createQuery = function (params) {
                var db = Retool.Server.data.getDatabase(params.proc.context, Model._providerName);
                return new Retool.ORM.Query(db.getCollection(this.schema));
            };
            Model.prototype.getCollection = function (params) {
                var db = Retool.Server.data.getDatabase(params.proc.context, Model._providerName);
                return db.getCollection(this.schema);
            };
            Model.prototype.getSchemaCaster = function () {
                return Retool.Server.data.getProvider(Model._providerName);
            };
            Model.prototype.getDbProvider = function (context, schema) {
                return Retool.Server.data.getProvider(Model._providerName);
            };
            Model._providerName = "sqlserver";
            return Model;
        })(Retool.ORMModel);
        SqlServer.Model = Model;
        Retool.VM.addType("SqlServerModel", Model, null);
    })(SqlServer = Retool.SqlServer || (Retool.SqlServer = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SqlServer;
    (function (SqlServer) {
        var Provider = (function () {
            function Provider() {
                var ConnectionPool = require('tedious-connection-pool');
                var poolConfig = {
                    min: 2,
                    max: 4,
                    log: true
                };
                var env = process.env;
                var sqlConfig = {
                    userName: env.SQLSERVER_USERNAME,
                    password: env.SQLSERVER_PASSWORD,
                    server: env.SQLSERVER_HOST,
                    options: {
                        database: env.SQLSERVER_DATABASE,
                        encrypt: env.SQLSERVER_ENCRYPT
                    }
                };
                this.pool = new ConnectionPool(poolConfig, sqlConfig);
            }
            Provider.prototype.getMigrator = function (context, db) {
                return new SqlServer.Migrator(context, db);
            };
            Provider.prototype.getConnection = function (context, db, callback) {
                var self = this;
                this.pool.acquire(function (err, driverConnection) {
                    if (err) {
                        callback(err, null);
                        return;
                    }
                    callback(null, new SqlServer.Connection(db, driverConnection, context.log));
                });
                /*
                var SqlConnection = require('tedious').Connection;
                var env = process.env;
                var sqlConfig = {
                    userName:env.SQLSERVER_USERNAME,
                    password:env.SQLSERVER_PASSWORD,
                    server:env.SQLSERVER_HOST,
                    options: {
                        database:env.SQLSERVER_DATABASE,
                        encrypt:env.SQLSERVER_ENCRYPT
                    }
                };
    
    
                var driverConnection = new SqlConnection(sqlConfig);
    
                driverConnection.on('connect',function(err){
                    if (err){
                        callback(err,null);
                    }
                    else {
                        // self.pool = driverConnection;
                        callback(null,new Connection(db,driverConnection,context.log));
                    }
                });
                driverConnection.on('error',function(err){
                    callback(err,null);
                });
                driverConnection.on('debug',function(msg){
                    console.log(msg);
                });
                */
            };
            Provider.prototype.beginTransaction = function (context, db, callback) {
                var self = this;
                this.pool.getConnection(function (err, connection) {
                    if (err) {
                        callback(err, null);
                    }
                    else {
                        var conn = new SqlServer.Connection(db, connection, context.log);
                        conn.beginTransaction(context, function (err) {
                            if (err) {
                                callback(err, null);
                            }
                            else {
                                callback(null, conn);
                            }
                        });
                    }
                });
            };
            Provider.prototype.escape = function (val) {
                if (val === undefined || val === null) {
                    return "NULL";
                }
                switch (typeof val) {
                    case "boolean": return (val) ? "true" : "false";
                    case "number": return val + '';
                }
                if (val instanceof Date) {
                    return this.toDateString(val);
                }
                if (typeof val == "string") {
                    if (!val.length) {
                        return "NULL";
                    }
                    val = val.replace(/[\']/g, function (s) {
                        switch (s) {
                            case "\'": return "''";
                        }
                    });
                    return "'" + val + "'";
                }
                return "NULL";
            };
            Provider.prototype.toDateString = function (date) {
                var dt = new Date(date);
                /*
                if (timeZone != 'local') {
                    var tz = convertTimezone(timeZone);
    
                    dt.setTime(dt.getTime() + (dt.getTimezoneOffset() * 60000));
                    if (tz !== false) {
                      dt.setTime(dt.getTime() + (tz * 60000));
                    }
                }
                */
                // ??? UTC and date handling, need timezone of remote database?
                var year = dt.getUTCFullYear();
                var month = this.zeroPad(dt.getUTCMonth() + 1, 2);
                var day = this.zeroPad(dt.getUTCDate(), 2);
                var hour = this.zeroPad(dt.getUTCHours(), 2);
                var minute = this.zeroPad(dt.getUTCMinutes(), 2);
                var second = this.zeroPad(dt.getUTCSeconds(), 2);
                var millisecond = this.zeroPad(dt.getUTCMilliseconds(), 3);
                return year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second + '.' + millisecond;
            };
            Provider.prototype.zeroPad = function (number, length) {
                number = number.toString();
                while (number.length < length) {
                    number = '0' + number;
                }
                return number;
            };
            Provider.prototype.escapeId = function (val) {
                val = val.replace('/\[/g', '').replace(/\]/g, '');
                return "[" + val + "]";
            };
            Provider.prototype.castObjectId = function (id) {
                return id;
            };
            Provider.prototype.isObjectId = function (id) {
                return false;
            };
            Provider.prototype.executeQuery = function (context, db, options, callback) {
                if (options) {
                    if (options.connection) {
                        this.execWithConnection(context, options, options.connection, callback);
                        return;
                    }
                    else if (options.useTransaction) {
                        this.execTransaction(context, db, options, callback);
                        return;
                    }
                }
                this.execQuery(context, db, options, callback);
            };
            Provider.prototype.execQuery = function (context, db, options, callback) {
                var self = this;
                this.getConnection(context, db, function (err, connection) {
                    if (err) {
                        callback(err, null);
                        return;
                    }
                    connection.query(context, options, function (err, resultSet) {
                        connection.release();
                        if (err) {
                            callback(err, null);
                            return;
                        }
                        callback(null, resultSet);
                    });
                });
            };
            Provider.prototype.execWithConnection = function (context, options, connection, callback) {
                connection.query(context, options, function (err, resultSet) {
                    if (err) {
                        callback(err, null);
                        return;
                    }
                    callback(null, resultSet);
                });
            };
            Provider.prototype.execTransaction = function (context, db, options, callback) {
                var self = this;
                this.getConnection(context, db, function (err, connection) {
                    if (err) {
                        callback(err, null);
                        return;
                    }
                    connection.beginTransaction(context, function (err) {
                        if (err) {
                            callback(err, null);
                            return;
                        }
                        connection.query(context, options, function (err, resultSet) {
                            if (err) {
                                callback(err, null);
                                return;
                            }
                            connection.commit(context, function (err) {
                                if (err) {
                                    callback(err, null);
                                    return;
                                }
                                callback(null, resultSet);
                            });
                        });
                    });
                });
            };
            Provider.DB_TENANT = "rt_tenant_id";
            Provider.DB_VIRTUAL_TABLE = "rt_table";
            Provider.DB_ID = "rt_id";
            return Provider;
        })();
        SqlServer.Provider = Provider;
    })(SqlServer = Retool.SqlServer || (Retool.SqlServer = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SqlServer;
    (function (SqlServer) {
        var ResultSet = (function () {
            function ResultSet() {
                this.recordSets = [];
            }
            ResultSet.prototype.isEmpty = function () {
                return (!this.recordSets.length);
            };
            ResultSet.prototype.addRecordSet = function (meta) {
                var recordSet = new RecordSet();
                recordSet.meta = meta;
                recordSet.columnsAsArray = this.columnsAsArray;
                this.recordSets.push(recordSet);
                this.current = recordSet;
            };
            return ResultSet;
        })();
        SqlServer.ResultSet = ResultSet;
        var RecordSet = (function () {
            function RecordSet() {
                this.rows = [];
            }
            RecordSet.prototype.addRow = function (columns) {
                if (this.columnsAsArray) {
                    this.rows.push(columns);
                    return;
                }
                var meta = this.meta;
                var row = {};
                for (var i = 0; i < columns.length; i++) {
                    row[meta[i].colName] = columns[i].value;
                }
                this.rows.push(row);
            };
            return RecordSet;
        })();
        SqlServer.RecordSet = RecordSet;
    })(SqlServer = Retool.SqlServer || (Retool.SqlServer = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SqlServer;
    (function (SqlServer) {
        var SchemaLoader = (function (_super) {
            __extends(SchemaLoader, _super);
            function SchemaLoader() {
                _super.apply(this, arguments);
            }
            SchemaLoader.prototype.loadTableList = function () {
                var provider = this.db.provider;
                var sql = "show tables from " + provider.escapeId(this.db.name);
                if (this.singleTable) {
                    sql += " like " + provider.escape(this.singleTable);
                }
                var self = this;
                /*
                this.context.query(sql,function(err,rows){
                    if (err){
                        self.next(err);
                        return;
                    }
                    for(var i = 0;i < rows.length;i++){
                        var row = rows[i];
                        for(var key in row){
                            var name = row[key];
                            var table = new TableSchema(name);
                            self.dbSchema.tables[name] = table;
                            break;
                        }
                    }
                    self.next();
                });
                */
            };
            SchemaLoader.prototype.loadColumns = function (table) {
                var db = this.db;
                var provider = db.provider;
                var sql = "show columns from " + provider.escapeId(db.name) + "." + provider.escapeId(table.name);
                var self = this;
                /*
                this.context.query(sql,function(err,rows){
                    if (err){
                        self.next(err);
                        return;
                    }
                    for(var i = 0;i < rows.length;i++){
                        var row = rows[i];
                        var name = row["Field"];
                        var column = new TableSchemaColumn(name);
                        self.setColumnInfo(column,row);
                        table.columns[name] = column;
                    }
                    self.next();
                });
                */
            };
            SchemaLoader.prototype.setColumnInfo = function (column, row) {
                var type = row["Type"];
                var size;
                var addon;
                var numDecimals;
                var sizeInfo;
                var i = type.indexOf("(");
                if (i >= 0) {
                    var j = type.indexOf(")");
                    sizeInfo = type.substring(i + 1, j);
                    addon = type.substr(j + 1);
                    type = type.substr(0, i);
                }
                if (sizeInfo) {
                    var segments = sizeInfo.split(',');
                    size = segments[0];
                    if (segments.length > 1) {
                        numDecimals = segments[1];
                    }
                }
                column.type = type;
                column.size = size;
                column.numDecimals = numDecimals;
                column.nullable = (row["Null"] == "YES");
                column.key = row["Key"];
                column.defaultValue = row["Default"];
                column.extra = row["Extra"];
            };
            SchemaLoader.prototype.loadIndexes = function (table) {
                var db = this.db;
                var provider = db.provider;
                var sql = "show indexes from " + provider.escapeId(db.name) + "." + provider.escapeId(table.name);
                var self = this;
                /*
                this.context.query(sql,function(err,rows){
                    if (err){
                        self.next(err);
                        return;
                    }
                    for(var i = 0;i < rows.length;i++){
                        var row = rows[i];
                        var name = row["Key_name"];
                        var index:TableSchemaIndex;
                        index = table.indexes[name];
                        if (!index){
                            var index = new TableSchemaIndex(name);
                            self.setIndexInfo(index,row);
                            table.indexes[name] = index;
                        }
                        else {
                            self.addKeyColumn(index,row);
                        }
                    }
                    self.next();
                });
                */
            };
            SchemaLoader.prototype.setIndexInfo = function (index, row) {
                index.unique = (!row["Non_unique"]);
                index.primary == (index.name == "PRIMARY");
                this.addKeyColumn(index, row);
            };
            SchemaLoader.prototype.addKeyColumn = function (index, row) {
                var seq = row["Seq_in_index"];
                index.keys[seq - 1] = row["Column_name"];
            };
            return SchemaLoader;
        })(Retool.DatabaseSchemaLoader);
        SqlServer.SchemaLoader = SchemaLoader;
    })(SqlServer = Retool.SqlServer || (Retool.SqlServer = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SqlServer;
    (function (SqlServer) {
        var SelectStatement = (function () {
            function SelectStatement(context, query, options) {
                this.query = query;
                this.nextAlias = 0;
                this.sqlOrderby = [];
                this.sqlWhere = "";
                this.collection = query.collection;
                this.db = query.collection.db;
                this.provider = this.db.provider;
                this.schema = this.collection.schema;
                this.tenantId = context.getTenantId();
                if (options) {
                    this.withLevels = options.withLevels;
                }
                var join = new SqlJoin("$root");
                join.alias = this.getNextTableAlias();
                join.schema = this.schema;
                var tablename = this.db.escapeTable(this.db.getTableName(this.schema));
                this.fromSql = "from " + tablename + " as " + join.alias;
                this.from = join;
                this.selectList = [];
            }
            SelectStatement.prototype.getSql = function () {
                if (this.text) {
                    return this.text;
                }
                return this.build();
            };
            SelectStatement.prototype.rootAlias = function () {
                return this.from.alias;
            };
            SelectStatement.prototype.addFields = function () {
                var schema = this.schema;
                if (this.query.columns && this.query.columns.length) {
                    for (var i = 0; i < this.query.columns.length; i++) {
                        var col = this.query.columns[i];
                        if (col) {
                            var ref = schema.getFieldReference(col);
                            if (ref) {
                                this.selectList.push(ref);
                            }
                        }
                    }
                }
                else {
                    var fields = schema.allFields();
                    for (var key in fields) {
                        var field = fields[key];
                        if (field.dbColumn) {
                            var ref = new Retool.FieldReference();
                            ref.name = key;
                            ref.field = field;
                            this.selectList.push(ref);
                        }
                    }
                    if (this.withLevels) {
                        var relationships = schema.getBelongsTo();
                        for (var i = 0; i < relationships.length; i++) {
                            var relationship = relationships[i];
                            this.addBelongsToFields(relationship.name, relationship);
                        }
                    }
                }
            };
            SelectStatement.prototype.addBelongsToFields = function (path, relationship) {
                var relatedSchema = this.schema.getSchema(relationship.model);
                var fields = relatedSchema.allFields();
                var pathSegments;
                if (path) {
                    pathSegments = path.split('.');
                }
                for (var key in fields) {
                    var field = fields[key];
                    if (field.dbColumn) {
                        var ref = new Retool.FieldReference();
                        ref.name = key;
                        ref.field = field;
                        ref.path = path;
                        ref.pathSegments = pathSegments;
                        this.selectList.push(ref);
                    }
                }
            };
            SelectStatement.prototype.addWhere = function (conditionList) {
                var sql = this.addConditions(this.query.conditions);
                if (sql) {
                    conditionList.push("(" + sql + ")");
                }
            };
            SelectStatement.prototype.addConditions = function (conditions) {
                var sql = "";
                for (var i = 0; i < conditions.length; i++) {
                    var cond = conditions[i];
                    if (cond.column) {
                        var ref = this.schema.getFieldReference(cond.column);
                        if (ref) {
                            var tableAlias = this.addJoinsForField(ref);
                            if (i > 0) {
                                sql += " " + cond.booleanOperator + " ";
                            }
                            sql += this.getSqlComparison(ref.field, tableAlias + "." + this.provider.escapeId(ref.field.dbColumn), cond.operator, cond.value, cond.value2);
                        }
                    }
                    else if (cond.children) {
                        sql += " " + cond.booleanOperator + " (" + this.addConditions(cond.children) + ")";
                    }
                }
                return sql;
            };
            SelectStatement.prototype.addSort = function () {
                for (var i = 0; i < this.query.orders.length; i++) {
                    var order = this.query.orders[i];
                    var ref = this.schema.getFieldReference(order.field);
                    if (ref) {
                        var tableAlias = this.addJoinsForField(ref);
                        this.sqlOrderby.push(tableAlias + "." + this.provider.escapeId(ref.field.dbColumn) + ((order.direction == "desc") ? " desc" : ""));
                    }
                }
            };
            SelectStatement.prototype.build = function () {
                var query = this.query;
                var schema = this.schema;
                var selectColumns = [];
                if (query.aggregate) {
                    if (query.aggregate == "count") {
                        selectColumns.push("count(*) as value");
                    }
                    else if (query.aggregate == "sum" || query.aggregate == "min" || query.aggregate == "max" || query.aggregate == "avg") {
                        if (query.columns) {
                            for (var i = 0; i < query.columns.length; i++) {
                                var col = query.columns[i];
                                var ref = schema.getFieldReference(col);
                                selectColumns.push(query.aggregate + "(" + this.provider.escapeId(ref.field.dbColumn) + ") as value" + i.toString());
                            }
                        }
                    }
                    else if (query.aggregate == "exists") {
                        selectColumns.push("1 as value");
                    }
                }
                else {
                    this.addFields();
                    var ref;
                    for (var i = 0; i < this.selectList.length; i++) {
                        ref = this.selectList[i];
                        var tableAlias = this.addJoinsForField(ref);
                        selectColumns.push(tableAlias + "." + this.provider.escapeId(ref.field.dbColumn));
                    }
                }
                var conditionList = [];
                if (query.conditions) {
                    this.addWhere(conditionList);
                }
                if (query.orders) {
                    this.addSort();
                }
                var rootAlias = this.rootAlias();
                if (schema.multiTenant) {
                    conditionList.push(rootAlias + "." + SqlServer.Provider.DB_TENANT + " = " + this.provider.escape(this.tenantId));
                    conditionList.push(rootAlias + "." + SqlServer.Provider.DB_VIRTUAL_TABLE + " = " + this.provider.escape(this.db.getVirtualTableName(this.schema)));
                }
                var sql = "SELECT";
                if (query.aggregate == "exists") {
                    sql += " TOP(1)";
                }
                else if (query.limit) {
                    sql += " TOP(" + this.toNumberString(this.query.limit) + ")";
                }
                sql += " " + selectColumns.join(",") + "  " + this.fromSql;
                if (conditionList.length) {
                    sql += " WHERE " + conditionList.join(" AND ");
                }
                if (this.sqlOrderby.length) {
                    sql += " ORDER BY " + this.sqlOrderby.join(",");
                }
                /*
                if (query.skip){
                    sql += " OFFSET " + this.query.skip;
                }
                */
                this.text = sql;
                return sql;
            };
            SelectStatement.prototype.toNumberString = function (val) {
                try {
                    val = parseInt(val, 10);
                    return val.toString();
                }
                catch (e) {
                    return "0";
                }
            };
            SelectStatement.prototype.addJoinsForField = function (ref) {
                if (!ref.path) {
                    return this.from.alias;
                }
                else {
                    return this.addJoin(this.from, ref.pathSegments, 0);
                }
            };
            SelectStatement.prototype.addJoin = function (parentJoin, segments, segmentIndex) {
                var db = this.db;
                var provider = this.provider;
                var segment = segments[segmentIndex];
                var join = (parentJoin.children) ? parentJoin.children[segment] : null;
                if (join == null) {
                    var parentSchema = parentJoin.schema;
                    join = new SqlJoin(segment);
                    join.alias = this.getNextTableAlias();
                    join.reference = parentSchema.getRelationship(segment);
                    join.schema = parentSchema.getSchema(join.reference.model);
                    parentJoin.addChild(join);
                    var foreignKeyFieldDef = parentSchema.getField(join.reference.foreignKey);
                    var referenceFieldDef = join.schema.getField(join.schema.idFieldName);
                    this.fromSql += " left join " + db.escapeTable(join.schema.def.db_table) + " as " + join.alias + " on " + parentJoin.alias + "." + provider.escapeId(foreignKeyFieldDef.dbColumn) + " = " + join.alias + "." + provider.escapeId(referenceFieldDef.dbColumn);
                    if (join.schema.multiTenant) {
                        this.fromSql += " and " + join.alias + ".tenant_id = " + provider.escape(this.tenantId);
                    }
                }
                segmentIndex++;
                if (segmentIndex < segments.length) {
                    return this.addJoin(join, segments, segmentIndex);
                }
                return join.alias;
            };
            SelectStatement.prototype.getNextTableAlias = function () {
                return "T" + this.nextAlias++;
            };
            SelectStatement.prototype.formatRows = function (rows) {
                var out = [];
                for (var i = 0; i < rows.length; i++) {
                    out.push(this.formatRow(rows[i]));
                }
                return out;
            };
            SelectStatement.prototype.formatRow = function (row) {
                var output = {};
                var rootJoin = this.from;
                if (rootJoin.children) {
                    this.addChildObjects(output, rootJoin);
                    var target = output;
                    var lastPath = "";
                    for (var i = 0; i < this.selectList.length; i++) {
                        var ref = this.selectList[i];
                        if (!ref.field.def.hidden) {
                            var value = ref.field.fromDb(row["f" + i]);
                            if (!ref.path) {
                                output[ref.name] = value;
                            }
                            else {
                                if (ref.path != lastPath) {
                                    target = this.getFormatTarget(ref, output);
                                    lastPath = ref.path;
                                }
                                target[ref.name] = value;
                            }
                        }
                    }
                }
                else {
                    for (var i = 0; i < this.selectList.length; i++) {
                        var ref = this.selectList[i];
                        if (!ref.field.def.hidden) {
                            output[ref.name] = ref.field.fromDb(row[i].value);
                        }
                    }
                }
                return output;
            };
            SelectStatement.prototype.getFormatTarget = function (ref, target) {
                var segments = ref.pathSegments;
                for (var i = 0; i < segments.length; i++) {
                    target = target[segments[i]];
                }
                return target;
            };
            SelectStatement.prototype.addChildObjects = function (target, join) {
                for (var key in join.children) {
                    var child = join.children[key];
                    var obj = {};
                    target[key] = obj;
                    if (child.children) {
                        this.addChildObjects(obj, child);
                    }
                }
            };
            SelectStatement.prototype.getSqlComparison = function (field, escapedColumn, operator, value, value2) {
                var valueIsField = false;
                var provider = this.provider;
                switch (operator) {
                    case "=":
                    case "!=":
                    case ">":
                    case "<":
                    case ">=":
                    case "<=":
                        return escapedColumn + operator + provider.escape(field.toDb(value));
                    case "<>":
                        return escapedColumn + " != " + provider.escape(field.toDb(value));
                    case "in":
                        return escapedColumn + " in " + this.escapeArray(field, value);
                    case "!in":
                        return escapedColumn + " not in " + this.escapeArray(field, value);
                    case "is_null":
                        return escapedColumn + " IS NULL";
                    case "is_not_null":
                        return escapedColumn + " IS NOT NULL";
                    case "between":
                        return escapedColumn + " BETWEEN " + provider.escape(field.toDb(value)) + " AND " + provider.escape(field.toDb(value2));
                    case "like":
                        return escapedColumn + " LIKE" + provider.escape(field.toDb(value));
                    case "starts_with":
                        return escapedColumn + " LIKE " + provider.escape(value + "%");
                    case "contains":
                        return escapedColumn + " LIKE " + provider.escape("%" + value + "%");
                    case "ends_with":
                        return escapedColumn + " LIKE " + provider.escape("%" + value);
                    default:
                        throw "Unknown query operator: " + operator;
                }
            };
            SelectStatement.prototype.escapeArray = function (field, value) {
                if (!value) {
                    return "()";
                }
                var s = "(";
                var provider = this.provider;
                for (var i = 0; i < value.length; i++) {
                    if (i > 0) {
                        s += ",";
                    }
                    s += provider.escape(field.toDb(value[i]));
                }
                return s + ")";
            };
            return SelectStatement;
        })();
        SqlServer.SelectStatement = SelectStatement;
        var SqlJoin = (function () {
            function SqlJoin(name) {
                this.name = name;
            }
            SqlJoin.prototype.addChild = function (join) {
                this.children = this.children || {};
                this.children[join.name] = join;
            };
            return SqlJoin;
        })();
        SqlServer.SqlJoin = SqlJoin;
    })(SqlServer = Retool.SqlServer || (Retool.SqlServer = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SqlServer;
    (function (SqlServer) {
        var TableMigrator = (function (_super) {
            __extends(TableMigrator, _super);
            function TableMigrator() {
                _super.apply(this, arguments);
            }
            TableMigrator.prototype.createTable = function (schema) {
                var sql = "create table " + this.db.escapeTable(schema.def.db_table) + "(";
                var columns = [];
                if (schema.multiTenant) {
                    columns.push("tenant_id int");
                }
                var fields = schema.allFields();
                for (var name in fields) {
                    var field = fields[name];
                    var dbColumn = field.dbColumn;
                    if (dbColumn) {
                        var dbType = this.getSqlType(field);
                        if (dbType) {
                            columns.push(dbColumn + " " + dbType);
                        }
                    }
                }
                columns.push("created_at datetime");
                columns.push("updated_at datetime");
                if (schema.multiTenant) {
                    columns.push("primary key (tenant_id,id)");
                }
                else {
                }
                sql += columns.join(",") + ")";
                this.addStatement(sql);
            };
            TableMigrator.prototype.addColumn = function (table, field) {
                var type = this.getSqlType(field);
                if (type) {
                    var sql = "ALTER TABLE " + this.db.escapeTable(table.name) + " ADD COLUMN " + this.db.provider.escapeId(field.dbColumn) + " " + type;
                    this.addStatement(sql);
                }
            };
            TableMigrator.prototype.columnTypeChanged = function (column, field) {
                var fieldType = this.getSqlType(field);
                return !this.columnTypeMatches(column, fieldType);
            };
            TableMigrator.prototype.modifyColumn = function (table, column, field) {
                var type = this.getSqlType(field);
                if (type) {
                    var sql = "ALTER IGNORE TABLE " + this.db.escapeTable(table.name) + " MODIFY COLUMN " + this.db.provider.escapeId(field.dbColumn) + " " + type;
                    this.addStatement(sql);
                }
            };
            TableMigrator.prototype.dropColumn = function (table, column) {
                var sql = "ALTER IGNORE TABLE " + this.db.escapeTable(table.name) + " DROP COLUMN " + this.db.provider.escapeId(column.name);
                this.addStatement(sql);
            };
            TableMigrator.prototype.columnTypeMatches = function (column, type) {
                if (type == "serial") {
                    return (column.type == "bigint" && column.extra == "auto_increment");
                }
                var columnType = column.type;
                if (columnType == "decimal") {
                    columnType += "(" + column.size + "," + column.numDecimals + ")";
                }
                else if (columnType == "varchar" || columnType == "tinyint") {
                    columnType += "(" + column.size + ")";
                }
                return columnType == type;
            };
            TableMigrator.prototype.addIndex = function (table, schema, index) {
                var sql = "ALTER TABLE " + this.db.escapeTable(table.name) + " ADD ";
                if (index.unique) {
                    sql += "UNIQUE ";
                }
                sql += "INDEX " + this.db.provider.escapeId(index.name) + "(";
                var keys = index.keys.split(",");
                var keyFields = [];
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    var field = schema.getField(key);
                    if (field) {
                        keyFields.push(field.dbColumn);
                    }
                }
                sql += keyFields.join(",") + ")";
                this.addStatement(sql);
            };
            TableMigrator.prototype.addPrimaryKey = function (table, schema) {
                var sql = "ALTER TABLE " + this.db.escapeTable(table.name) + " ADD primary key (";
                if (schema.multiTenant) {
                    sql += "tenant_id,";
                }
                sql += "id)";
                this.addStatement(sql);
            };
            TableMigrator.prototype.dropIndex = function (table, index) {
                var sql = "ALTER IGNORE TABLE " + this.db.escapeTable(table.name) + " DROP INDEX " + this.db.provider.escapeId(index.name);
                this.addStatement(sql);
            };
            TableMigrator.prototype.getSqlType = function (field) {
                var def = field.def;
                switch (def.type) {
                    case "objectid":
                        if (field.name == "id") {
                            return "serial";
                        }
                        return "bigint";
                        break;
                    case "string":
                    case "email":
                    case "phone":
                    case "url":
                        if (def.size) {
                            return "varchar(" + def.size + ")";
                        }
                        else {
                            return "varchar(80)";
                        }
                        break;
                    case "integer":
                        return "int";
                        break;
                    case "boolean":
                        return "tinyint(1)";
                    case "date":
                        return "date";
                    case "datetime":
                        return "datetime";
                    case "money":
                        return "decimal(15,4)";
                    case "number":
                        return "decimal(15," + (def.num_decimals || "0") + ")";
                    case "text":
                        return "mediumtext";
                }
                return null;
            };
            return TableMigrator;
        })(Retool.TableMigration);
        SqlServer.TableMigrator = TableMigrator;
    })(SqlServer = Retool.SqlServer || (Retool.SqlServer = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SqlServer;
    (function (SqlServer) {
        var UpdateBuilder = (function () {
            function UpdateBuilder(db, schema) {
                this.db = db;
                this.schema = schema;
            }
            UpdateBuilder.prototype.build = function (context, data) {
                var commands = [];
                var sql = this.getUpdateSql(context, this.schema, data);
                commands.push(sql);
                /*
                if (this.schema.hasDetailRelationships()){
                    this.addDetail(context,commands,data);
                }
                */
                return commands;
            };
            UpdateBuilder.prototype.getUpdateSql = function (context, schema, data, variables) {
                var fields = schema.allFields();
                var field;
                var db = this.db;
                var provider = db.provider;
                var values = [];
                var sql = "update " + db.escapeTable(db.getTableName(schema)) + " set ";
                for (var key in fields) {
                    if (key != "id") {
                        field = fields[key];
                        if (field.dbColumn) {
                            values.push(provider.escapeId(field.dbColumn) + "=" + this.valueParam(field, data, key, variables));
                        }
                    }
                }
                sql += values.join(",");
                sql += " where " + provider.escapeId(SqlServer.Provider.DB_ID) + "=" + provider.escape(data.id);
                if (schema.multiTenant) {
                    sql += " and " + provider.escapeId(SqlServer.Provider.DB_TENANT) + "=" + provider.escape(context.getTenantId());
                    sql += " and " + provider.escapeId(SqlServer.Provider.DB_VIRTUAL_TABLE) + "=" + provider.escape(db.getVirtualTableName(schema));
                }
                return sql;
            };
            UpdateBuilder.prototype.getInsertSql = function (context, schema, data, variables) {
                var fields = schema.allFields();
                var field;
                var db = this.db;
                var provider = db.provider;
                var fieldNames = [];
                var values = [];
                if (schema.multiTenant) {
                    fieldNames.push(SqlServer.Provider.DB_TENANT);
                    values.push(provider.escape(context.getTenantId()));
                    fieldNames.push(SqlServer.Provider.DB_VIRTUAL_TABLE);
                    values.push(provider.escape(db.getVirtualTableName(schema)));
                }
                for (var key in fields) {
                    if (key != "id") {
                        field = fields[key];
                        if (field.dbColumn) {
                            fieldNames.push(provider.escapeId(field.dbColumn));
                            values.push(this.valueParam(field, data, key, variables));
                        }
                    }
                }
                var sql = "insert into " + db.escapeTable(db.getTableName(schema)) + "(";
                sql += fieldNames.join(",");
                sql += ") values (";
                sql += values.join(",");
                sql += ")";
                sql += ";select SCOPE_IDENTITY() as LAST_ID";
                return sql;
            };
            UpdateBuilder.prototype.buildMulti = function (context, commands, schema, rows, variables) {
                if (!rows.length) {
                    return "";
                }
                var sql = this.getInsertSql(context, schema, rows[0], variables);
                if (rows.length == 1) {
                    commands.push(sql);
                    return;
                }
                var values;
                var db = this.db;
                var provider = db.provider;
                var tenantId = context.getTenantId();
                var fields = schema.allFields();
                var field;
                var data;
                for (var i = 1; i < rows.length; i++) {
                    data = rows[i];
                    values = [];
                    if (schema.multiTenant) {
                        values.push(provider.escape(tenantId));
                    }
                    for (var key in fields) {
                        if (key != "id") {
                            field = fields[key];
                            if (field.dbColumn) {
                                values.push(this.valueParam(field, data, key, variables));
                            }
                        }
                    }
                    sql += ",(" + values.join(",") + ")";
                }
                commands.push(sql);
            };
            UpdateBuilder.prototype.addDetail = function (context, commands, master) {
                var db = this.db;
                var detailRelationships = this.schema.getDetailRelationships();
                var sql;
                commands.push("set @lastInsertId = last_insert_id()");
                for (var i = 0; i < detailRelationships.length; i++) {
                    var relationship = detailRelationships[i];
                    var relatedSchema = this.schema.getSchema(relationship.model);
                    var rows = master[relationship.name];
                    if (rows && rows.length) {
                        // is insert so expect variable set to last insert id
                        var variables = {};
                        variables[relationship.foreignKey] = "@lastInsertId";
                        var multiSql = this.buildMulti(context, commands, relatedSchema, rows, variables);
                        if (multiSql) {
                            commands.push(multiSql);
                        }
                    }
                }
                return sql;
            };
            UpdateBuilder.prototype.valueParam = function (field, data, fieldName, variables) {
                if (variables && variables[fieldName]) {
                    return variables[fieldName];
                }
                return this.db.provider.escape(field.toDb(data[fieldName]));
            };
            return UpdateBuilder;
        })();
        SqlServer.UpdateBuilder = UpdateBuilder;
    })(SqlServer = Retool.SqlServer || (Retool.SqlServer = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SqlServer;
    (function (SqlServer) {
        var ProjectAdapter = (function () {
            function ProjectAdapter(context) {
                this.tableName = "ProjectFiles";
                this.defaultBranch = "master";
            }
            ProjectAdapter.prototype.getDb = function (context) {
                return Retool.Server.data.getDatabase(context, "sqlserver");
            };
            ProjectAdapter.prototype.getAll = function (context, callback) {
                var self = this;
                var db = this.getDb(context);
                var provider = db.provider;
                var branch = "master";
                var sql = "select rt_id,content from " + db.escapeTable(self.tableName) + " where rt_tenant_id=" + provider.escape(context.getTenantId()) + " and branch=" + provider.escape(this.defaultBranch);
                db.query(context, { sql: sql }, function (err, resultset) {
                    if (err) {
                        callback(err);
                        return;
                    }
                    var files = [];
                    var rows = (resultset.recordSets[0]) ? resultset.recordSets[0].rows : [];
                    var content;
                    for (var i = 0; i < rows.length; i++) {
                        var row = rows[i];
                        files.push({ name: row.rt_id, content: row.content });
                    }
                    callback(null, files);
                });
            };
            ProjectAdapter.prototype.find = function (context, filename, callback) {
                var self = this;
                var db = this.getDb(context);
                var provider = db.provider;
                var sql = "select rt_id,content from " + db.escapeTable(self.tableName) + " where rt_tenant_id=" + provider.escape(context.getTenantId()) + " and branch=" + provider.escape(this.defaultBranch) + " and rt_id=" + provider.escape(filename);
                db.query(context, { sql: sql }, function (err, resultset) {
                    if (err) {
                        callback(err);
                        return;
                    }
                    var rows = (resultset.recordSets[0]) ? resultset.recordSets[0].rows : [];
                    if (!rows.length) {
                        callback("File" + filename + " does not exist in project");
                        return;
                    }
                    var row = rows[0];
                    var file = { name: row.rt_id, content: row.content };
                    callback(null, file);
                });
            };
            ProjectAdapter.prototype.save = function (context, filename, content, async) {
                var self = this;
                var db = this.getDb(context);
                var provider = db.provider;
                var sql = "delete from " + db.escapeTable(self.tableName) + " where rt_tenant_id=" + provider.escape(context.getTenantId()) + " and branch=" + provider.escape(this.defaultBranch) + " and rt_id=" + provider.escape(filename);
                sql += ";insert into " + db.escapeTable(self.tableName) + "(rt_tenant_id,rt_id,branch,content,updated_at) values (" + provider.escape(context.getTenantId()) + "," + provider.escape(filename) + "," + provider.escape(this.defaultBranch) + "," + provider.escape(content) + ",current_timestamp) ";
                db.query(context, { sql: sql }, function (err, result) {
                    if (err) {
                        async.error(err);
                    }
                    else {
                        async.resume("ok");
                    }
                });
            };
            ProjectAdapter.prototype.remove = function (context, filename, async) {
                var self = this;
                var db = this.getDb(context);
                var provider = db.provider;
                var sql = "delete from " + db.escapeTable(self.tableName) + " where rt_tenant_id=" + provider.escape(context.getTenantId()) + " and branch=" + provider.escape(this.defaultBranch) + " and rt_id=" + provider.escape(filename);
                db.query(context, { sql: sql }, function (err, result) {
                    if (err) {
                        async.error(err);
                    }
                    else {
                        async.resume("ok");
                    }
                });
            };
            return ProjectAdapter;
        })();
        SqlServer.ProjectAdapter = ProjectAdapter;
    })(SqlServer = Retool.SqlServer || (Retool.SqlServer = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Orchestrate;
    (function (Orchestrate) {
        var Database = (function (_super) {
            __extends(Database, _super);
            function Database() {
                _super.apply(this, arguments);
            }
            Database.prototype.getMissingProperty = function (params) {
                return this.getCollectionForName(params.name);
            };
            Database.prototype.register = function () {
                Retool.Server.databases.orchestrate = this;
            };
            Database.prototype.vm_collection = function (params) {
                var arg = params.getIndex(0);
                var name;
                if (arg instanceof Retool.ObjectModel) {
                    name = arg.schema.def.db_table;
                }
                else {
                    name = arg;
                }
                return this.getCollectionForName(name);
            };
            Database.prototype.getCollection = function (schema) {
                var type = "user";
                if (schema.app == Retool.Server.systemApp) {
                    type = "system";
                }
                return new Orchestrate.Collection(this, schema.def.db_table, type);
            };
            Database.prototype.getCollectionForName = function (name) {
                return new Orchestrate.Collection(this, name, "user");
            };
            Database.prototype.escapeTable = function (tableName) {
                return tableName;
            };
            return Database;
        })(Retool.VM.ObjectBase);
        Orchestrate.Database = Database;
    })(Orchestrate = Retool.Orchestrate || (Retool.Orchestrate = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Orchestrate;
    (function (Orchestrate) {
        var Collection = (function (_super) {
            __extends(Collection, _super);
            function Collection(db, name, type) {
                _super.call(this, null);
                this.db = db;
                this.name = name;
                this.type = type;
            }
            Collection.prototype.parsePostResponse = function (res, m) {
                var headers = res.headers;
                var location = headers.location;
                if (location) {
                    var segments = location.split('/');
                    if (segments.length >= 4) {
                        m.data.id = decodeURIComponent(segments[3]);
                    }
                }
            };
            Collection.prototype.vm_create = function (params) {
                var m = params.getIndex(0);
                var context = params.proc.context;
                var data = m.data;
                // var client = Server.getDBClient(this.db); 
                var client = Orchestrate.Factory.getClient(context, this);
                var async = params.proc.pause();
                var self = this;
                if (!data.id) {
                    client.post(this.getCollectionName(context, this.name), data).then(function (result) {
                        async.resume(self.parsePostResponse(result, m));
                    }).fail(function (err) {
                        async.error(self.castError(err));
                    });
                }
                else {
                    client.put(this.getCollectionName(context, this.name), data.id, data).then(function (result) {
                        async.resume(self.parsePostResponse(result, m));
                    }).fail(function (err) {
                        async.error(self.castError(err));
                    });
                }
            };
            Collection.prototype.vm_update = function (params) {
                var m = params.getIndex(0);
                var context = params.proc.context;
                var data = m.data;
                var key = data.id;
                var client = Orchestrate.Factory.getClient(context, this);
                var async = params.proc.pause();
                var self = this;
                client.put(this.getCollectionName(context, this.name), key, data).then(function (result) {
                    async.resume(self.parsePostResponse(result, m));
                }).fail(function (err) {
                    async.error(self.castError(err));
                });
            };
            Collection.prototype.castError = function (err) {
                return Retool.VM.VMError.cast(err);
            };
            Collection.prototype.vm_find = function (params) {
                var query = params.getIndex(0);
                var context = params.proc.context;
                var client = Orchestrate.Factory.getClient(context, this);
                var async = params.proc.pause();
                var self = this;
                var key = query.recordKey;
                client.get(this.getCollectionName(context, this.name), key).then(function (result) {
                    var m = Retool.ObjectModel.createInstance(context, self.schema, result.body, false);
                    m.data.id = key;
                    async.resume(m);
                }).fail(function (err) {
                    if (err.statusCode == 404) {
                        async.resume(null);
                    }
                    else {
                        async.error(self.castError(err));
                    }
                });
            };
            Collection.prototype.vm_remove = function (params) {
                var context = params.proc.context;
                var query = params.getIndex(0);
                var client = Orchestrate.Factory.getClient(context, this);
                var async = params.proc.pause();
                var self = this;
                client.remove(this.getCollectionName(context, this.name), query.recordKey, true).then(function (result) {
                    async.resume(1);
                }).fail(function (err) {
                    async.error(self.castError(err));
                });
            };
            Collection.prototype.vm_list = function (params) {
                var context = params.proc.context;
                var client = Orchestrate.Factory.getClient(context, this);
                var async = params.proc.pause();
                var query = params.getIndex(0);
                var options = {};
                if (query.limit) {
                    options.limit = query.limit;
                }
                if (query.startKey) {
                    options.startKey = query.startKey;
                }
                if (query.endKey) {
                    options.endKey = query.endKey;
                }
                var self = this;
                var context = params.proc.context;
                if (query.conditions && query.conditions.length) {
                    var filter = Orchestrate.FilterBuilder.build(query);
                    var logEntry;
                    var start;
                    if (context.log) {
                        logEntry = context.log.add("Orchestrate.search", filter);
                        start = process.hrtime();
                    }
                    client.search(this.getCollectionName(context, this.name), filter, options).then(function (result) {
                        var elapsed = process.hrtime(start);
                        elapsed = elapsed[0] * 1000 + (elapsed[1] / 1000000);
                        logEntry.time = elapsed;
                        logEntry.response = {
                            statusCode: result.statusCode
                        };
                        async.resume(self.formatRows(context, self.schema, result.body.results));
                    }).fail(function (err) {
                        async.error(self.castError(err));
                    });
                }
                else {
                    client.list(this.getCollectionName(context, this.name), options).then(function (result) {
                        async.resume(self.formatRows(context, self.schema, result.body.results));
                    }).fail(function (err) {
                        async.error(self.castError(err));
                    });
                }
            };
            Collection.prototype.formatRows = function (context, schema, results) {
                var rows = [];
                if (results) {
                    var out = [];
                    for (var i = 0; i < results.length; i++) {
                        var item = results[i];
                        var row = item.value;
                        row.id = item.path.key;
                        rows.push(row);
                    }
                }
                return new Retool.ArrayModel(context, schema, rows);
            };
            Collection.prototype.getCollectionName = function (context, value) {
                if (this.type == "system") {
                    return value;
                }
                return context.app.name + "_" + value;
            };
            return Collection;
        })(Retool.VM.ObjectBase);
        Orchestrate.Collection = Collection;
    })(Orchestrate = Retool.Orchestrate || (Retool.Orchestrate = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Orchestrate;
    (function (Orchestrate) {
        var Factory = (function () {
            function Factory() {
            }
            Factory.getClient = function (context, collection) {
                var clientFunc = require('orchestrate');
                var client;
                if (collection.type == "system") {
                    client = clientFunc(process.env.ORCHESTRATE_API_KEY);
                }
                else {
                    client = clientFunc(process.env.ORCHESTRATE_USER_DATA_KEY);
                }
                client.requestAgent = Retool.Server.keepAliveAgent;
                return client;
            };
            return Factory;
        })();
        Orchestrate.Factory = Factory;
    })(Orchestrate = Retool.Orchestrate || (Retool.Orchestrate = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Orchestrate;
    (function (Orchestrate) {
        var FilterBuilder = (function () {
            function FilterBuilder() {
            }
            FilterBuilder.build = function (query) {
                var fb = new FilterBuilder();
                fb.query = query;
                return fb.buildFilter();
            };
            FilterBuilder.prototype.buildFilter = function () {
                var conditions = this.query.conditions;
                this.schema = this.query.collection.schema;
                var filter = this.addConditions(conditions);
                return filter;
            };
            FilterBuilder.prototype.addConditions = function (conditions) {
                var filter = "";
                for (var i = 0; i < conditions.length; i++) {
                    var cond = conditions[i];
                    if (cond.column) {
                        var ref = this.schema.getFieldReference(cond.column);
                        if (ref || cond.column == "*") {
                            var field = (ref) ? ref.field : this.getWildcardField();
                            if (i > 0) {
                                filter += " " + this.getBooleanOperator(cond.booleanOperator) + " ";
                            }
                            filter += this.getComparison(field, cond.operator, cond.value, cond.value2);
                        }
                    }
                    else if (cond.children) {
                        filter += " " + this.getBooleanOperator(cond.booleanOperator) + " (" + this.addConditions(cond.children) + ")";
                    }
                }
                return filter;
            };
            FilterBuilder.prototype.getWildcardField = function () {
                var f = new Retool.SchemaString();
                f.name = "*";
                return f;
            };
            FilterBuilder.prototype.getBooleanOperator = function (op) {
                return op;
            };
            FilterBuilder.prototype.getComparison = function (field, operator, value, value2) {
                var valueIsField = false;
                var dt = field.getDataType();
                var fieldModifier = (field.name == "*") ? "" : field.name + ":";
                switch (operator) {
                    case "=":
                        return fieldModifier + this.quote(dt, this.escapeValue(dt, value));
                    case "!=":
                    case ">":
                    case "<":
                    case ">=":
                    case "<=":
                    case "<>":
                    case "in":
                    case "!in":
                    case "is_null":
                    case "is_not_null":
                    case "between":
                    case "like":
                    case "starts_with":
                        return fieldModifier + this.escapeValue(dt, value) + '*';
                    case "contains":
                    case "ends_with":
                        throw "Unsupported operator: " + operator;
                    default:
                        throw "Unknown query operator: " + operator;
                }
            };
            FilterBuilder.prototype.escapeValue = function (dt, value) {
                if (!value) {
                    return "";
                }
                value = value.toString();
                var escaped = value.replace(/([\!\*\+\&\|\(\)\[\]\{\}\^\~\?\:\"])/g, "\\$1");
                return escaped;
            };
            FilterBuilder.prototype.quote = function (dt, value) {
                if (dt == 0 /* String */) {
                    return "\"" + value + "\"";
                }
                return value;
            };
            return FilterBuilder;
        })();
        Orchestrate.FilterBuilder = FilterBuilder;
    })(Orchestrate = Retool.Orchestrate || (Retool.Orchestrate = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Orchestrate;
    (function (Orchestrate) {
        var Model = (function (_super) {
            __extends(Model, _super);
            function Model() {
                _super.apply(this, arguments);
            }
            Model.prototype.createQuery = function (params) {
                var db = Retool.Server.getDatabase("orchestrate");
                return new Retool.ORM.Query(db.getCollection(this.schema));
            };
            Model.prototype.getCollection = function (params) {
                return Retool.Server.getDatabase("orchestrate").getCollection(this.schema);
            };
            return Model;
        })(Retool.ORMModel);
        Orchestrate.Model = Model;
        Retool.VM.addType("OrchestrateKeyValue", Model, null);
    })(Orchestrate = Retool.Orchestrate || (Retool.Orchestrate = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Orchestrate;
    (function (Orchestrate) {
        var ProjectAdapter = (function () {
            function ProjectAdapter(context) {
                this.db = require('orchestrate')('d22a8b7e-c368-41c1-96c0-b7473ef2933b');
                this.db.requestAgent = Retool.Server.keepAliveAgent;
            }
            ProjectAdapter.prototype.castError = function (err) {
                return Retool.VM.VMError.cast(err);
            };
            ProjectAdapter.prototype.getAll = function (context, callback) {
                var db = this.db;
                var collection = this.getCollectionName(context);
                var self = this;
                var startKey = this.makeKey(context, "");
                var endKey = this.makeKey(context, "~");
                db.list(collection, { limit: 100, startKey: startKey, endKey: endKey }).then(function (result) {
                    var files = [];
                    var body = result.body;
                    for (var i = 0; i < body.results.length; i++) {
                        var item = body.results[i];
                        var value = item.value;
                        if (value.name) {
                            files.push({ name: value.name, content: value.content });
                        }
                    }
                    callback(null, files);
                }).fail(function (err) {
                    callback(self.castError(err));
                });
            };
            ProjectAdapter.prototype.find = function (context, filename, callback) {
                var db = this.db;
                var collection = this.getCollectionName(context);
                var self = this;
                var key = this.makeKey(context, filename);
                db.get(collection, key).then(function (result) {
                    callback(null, result.body);
                }).fail(function (err) {
                    callback(self.castError(err));
                });
            };
            ProjectAdapter.prototype.getCollectionName = function (context) {
                return context.accountId + "$project_files_dev";
            };
            ProjectAdapter.prototype.makeKey = function (context, filename) {
                return context.app.name + "/" + filename;
            };
            ProjectAdapter.prototype.save = function (context, filename, content, async) {
                var db = this.db;
                var collection = this.getCollectionName(context);
                var self = this;
                var key = this.makeKey(context, filename);
                var start = process.hrtime();
                //content = JSON.stringify(content);
                db.put(collection, key, { name: filename, content: content }).then(function (result) {
                    var elapsed = process.hrtime(start);
                    elapsed = elapsed[0] * 1000 + (elapsed[1] / 1000000);
                    // console.log(filename + ": " + elapsed + "ms");
                    async.resume("ok");
                }).fail(function (err) {
                    async.error(self.castError(err));
                });
            };
            ProjectAdapter.prototype.remove = function (context, filename, async) {
                var db = this.db;
                var collection = this.getCollectionName(context);
                var self = this;
                var key = this.makeKey(context, filename);
                db.remove(collection, key, true).then(function (result) {
                    async.resume("1 file removed.");
                }).fail(function (err) {
                    async.error(self.castError(err));
                });
            };
            return ProjectAdapter;
        })();
        Orchestrate.ProjectAdapter = ProjectAdapter;
    })(Orchestrate = Retool.Orchestrate || (Retool.Orchestrate = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Keen;
    (function (Keen) {
        var Database = (function (_super) {
            __extends(Database, _super);
            function Database() {
                _super.apply(this, arguments);
            }
            Database.prototype.getMissingProperty = function (params) {
                return this.getCollectionForName(params.name);
            };
            Database.prototype.register = function () {
                Retool.Server.databases.keen = this;
            };
            Database.prototype.vm_collection = function (params) {
                var arg = params.getIndex(0);
                var name;
                if (arg instanceof Retool.ObjectModel) {
                    name = arg.schema.def.db_table;
                }
                else {
                    name = arg;
                }
                return this.getCollectionForName(name);
            };
            Database.prototype.getCollection = function (schema) {
                var type = "user";
                if (schema.app == Retool.Server.systemApp) {
                    type = "system";
                }
                return new Keen.Collection(this, schema.def.db_table, type);
            };
            Database.prototype.getCollectionForName = function (name) {
                return new Keen.Collection(this, name, "user");
            };
            Database.prototype.escapeTable = function (tableName) {
                return tableName;
            };
            return Database;
        })(Retool.VM.ObjectBase);
        Keen.Database = Database;
    })(Keen = Retool.Keen || (Retool.Keen = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Keen;
    (function (Keen) {
        var Collection = (function (_super) {
            __extends(Collection, _super);
            function Collection(db, name, type) {
                _super.call(this, null);
                this.db = db;
                this.name = name;
                this.type = type;
            }
            Collection.prototype.parsePostResponse = function (res, m) {
                var headers = res.headers;
                var location = headers.location;
                if (location) {
                    var segments = location.split('/');
                    if (segments.length >= 4) {
                        m.data.id = decodeURIComponent(segments[3]);
                    }
                }
            };
            Collection.prototype.vm_create = function (params) {
                var m = params.getIndex(0);
                var context = params.proc.context;
                var data = m.data;
                // var client = Server.getDBClient(this.db); 
                var client = Keen.Factory.getClient(context, this);
                var async = params.proc.pause();
                var self = this;
                if (!data.id) {
                    client.post(this.getCollectionName(context, this.name), data).then(function (result) {
                        async.resume(self.parsePostResponse(result, m));
                    }).fail(function (err) {
                        async.error(self.castError(err));
                    });
                }
                else {
                    client.put(this.getCollectionName(context, this.name), data.id, data).then(function (result) {
                        async.resume(self.parsePostResponse(result, m));
                    }).fail(function (err) {
                        async.error(self.castError(err));
                    });
                }
            };
            Collection.prototype.vm_update = function (params) {
                var m = params.getIndex(0);
                var context = params.proc.context;
                var data = m.data;
                var key = data.id;
                var client = Keen.Factory.getClient(context, this);
                var async = params.proc.pause();
                var self = this;
                client.put(this.getCollectionName(context, this.name), key, data).then(function (result) {
                    async.resume(self.parsePostResponse(result, m));
                }).fail(function (err) {
                    async.error(self.castError(err));
                });
            };
            Collection.prototype.castError = function (err) {
                return Retool.VM.VMError.cast(err);
            };
            Collection.prototype.vm_find = function (params) {
                var query = params.getIndex(0);
                var context = params.proc.context;
                var client = Keen.Factory.getClient(context, this);
                var async = params.proc.pause();
                var self = this;
                var key = query.recordKey;
                client.get(this.getCollectionName(context, this.name), key).then(function (result) {
                    var m = Retool.ObjectModel.createInstance(context, self.schema, result.body, false);
                    m.data.id = key;
                    async.resume(m);
                }).fail(function (err) {
                    if (err.statusCode == 404) {
                        async.resume(null);
                    }
                    else {
                        async.error(self.castError(err));
                    }
                });
            };
            Collection.prototype.vm_remove = function (params) {
                var context = params.proc.context;
                var query = params.getIndex(0);
                var client = Keen.Factory.getClient(context, this);
                var async = params.proc.pause();
                var self = this;
                client.remove(this.getCollectionName(context, this.name), query.recordKey, true).then(function (result) {
                    async.resume(1);
                }).fail(function (err) {
                    async.error(self.castError(err));
                });
            };
            Collection.prototype.vm_list = function (params) {
                var context = params.proc.context;
                var client = Keen.Factory.getClient(context, this);
                var query = params.getIndex(0);
                var options = {};
                var timezone = -28800;
                var apiKey = client.readkey;
                var http = new Retool.VM.Http();
                var mainGroupBy;
                if (query.groups && query.groups.length) {
                    mainGroupBy = query.groups[0];
                }
                var url = "https://api.keen.io/3.0/projects/" + client.project + "/queries";
                if (query.aggregate == "count") {
                    url += "/count";
                }
                url += "?api_key=" + apiKey;
                var q = [];
                q.push("event_collection=" + encodeURIComponent(this.schema.def.db_table));
                if (query.timeframe) {
                    q.push("timeframe=" + encodeURIComponent(query.timeframe));
                    q.push("timezone=" + timezone);
                }
                if (mainGroupBy) {
                    q.push("group_by=" + encodeURIComponent(mainGroupBy));
                }
                if (query.interval) {
                    q.push("interval=" + encodeURIComponent(query.interval));
                }
                if (q.length) {
                    url += "&" + q.join('&');
                }
                options.url = url;
                var self = this;
                http.vmCall(http.vm_get, params.proc, [options]).then(function (res) {
                    if (mainGroupBy || query.interval) {
                        return self.formatRows(context, query, res.result);
                    }
                    return res.result;
                });
            };
            Collection.prototype.getDataSetIndex = function (hash, value) {
                var item = hash[value];
                if (item) {
                    return item - 1;
                }
                hash[value] = hash._next_value;
                var n = hash._next_value++;
                return n - 1;
            };
            Collection.prototype.formatRows = function (context, query, results) {
                var mainGroupBy;
                if (query.groups && query.groups.length) {
                    mainGroupBy = query.groups[0];
                }
                if (query.interval) {
                    var labels = [];
                    var datasets = [];
                    var out = { labels: labels, datasets: datasets };
                    if (mainGroupBy) {
                        var hash = { _next_value: 1 };
                        var index;
                        for (var i = 0; i < results.length; i++) {
                            var row = results[i];
                            labels[i] = row.timeframe.start;
                            var items = row.value;
                            for (var j = 0; j < items.length; j++) {
                                var item = items[j];
                                index = this.getDataSetIndex(hash, item[mainGroupBy]);
                                var ds = datasets[index];
                                if (!ds) {
                                    ds = { data: [] };
                                    datasets[index] = ds;
                                }
                                ds.data[i] = item.result;
                            }
                        }
                    }
                    else {
                        var data = [];
                        var single = { label: "", data: data };
                        datasets.push(single);
                        for (var i = 0; i < results.length; i++) {
                            var row = results[i];
                            labels[i] = row.timeframe.start;
                            data[i] = row.value;
                        }
                    }
                    return out;
                }
                if (mainGroupBy) {
                    var labels = [];
                    var data = [];
                    for (var i = 0; i < results.length; i++) {
                        var row = results[i];
                        labels.push(row[mainGroupBy]);
                        data.push(row.result);
                    }
                    return {
                        labels: labels,
                        datasets: [{ data: data }]
                    };
                }
                return {};
            };
            Collection.prototype.getCollectionName = function (context, value) {
                if (this.type == "system") {
                    return value;
                }
                return context.app.name + "_" + value;
            };
            return Collection;
        })(Retool.VM.ObjectBase);
        Keen.Collection = Collection;
    })(Keen = Retool.Keen || (Retool.Keen = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Keen;
    (function (Keen) {
        var Factory = (function () {
            function Factory() {
            }
            Factory.getClient = function (context, collection) {
                var client;
                if (collection.type == "system") {
                }
                else {
                    client = { readkey: process.env.KEEN_READ_KEY, project: process.env.KEEN_PROJECT };
                }
                return client;
            };
            return Factory;
        })();
        Keen.Factory = Factory;
    })(Keen = Retool.Keen || (Retool.Keen = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Keen;
    (function (Keen) {
        var FilterBuilder = (function () {
            function FilterBuilder() {
            }
            FilterBuilder.build = function (query) {
                var fb = new FilterBuilder();
                fb.query = query;
                return fb.buildFilter();
            };
            FilterBuilder.prototype.buildFilter = function () {
                var conditions = this.query.conditions;
                this.schema = this.query.collection.schema;
                var filter = this.addConditions(conditions);
                return filter;
            };
            FilterBuilder.prototype.addConditions = function (conditions) {
                var filter = "";
                for (var i = 0; i < conditions.length; i++) {
                    var cond = conditions[i];
                    if (cond.column) {
                        var ref = this.schema.getFieldReference(cond.column);
                        if (ref || cond.column == "*") {
                            var field = (ref) ? ref.field : this.getWildcardField();
                            if (i > 0) {
                                filter += " " + this.getBooleanOperator(cond.booleanOperator) + " ";
                            }
                            filter += this.getComparison(field, cond.operator, cond.value, cond.value2);
                        }
                    }
                    else if (cond.children) {
                        filter += " " + this.getBooleanOperator(cond.booleanOperator) + " (" + this.addConditions(cond.children) + ")";
                    }
                }
                return filter;
            };
            FilterBuilder.prototype.getWildcardField = function () {
                var f = new Retool.SchemaString();
                f.name = "*";
                return f;
            };
            FilterBuilder.prototype.getBooleanOperator = function (op) {
                return op;
            };
            FilterBuilder.prototype.getComparison = function (field, operator, value, value2) {
                var valueIsField = false;
                var dt = field.getDataType();
                var fieldModifier = (field.name == "*") ? "" : field.name + ":";
                switch (operator) {
                    case "=":
                        return fieldModifier + this.quote(dt, this.escapeValue(dt, value));
                    case "!=":
                    case ">":
                    case "<":
                    case ">=":
                    case "<=":
                    case "<>":
                    case "in":
                    case "!in":
                    case "is_null":
                    case "is_not_null":
                    case "between":
                    case "like":
                    case "starts_with":
                        return fieldModifier + this.escapeValue(dt, value) + '*';
                    case "contains":
                    case "ends_with":
                        throw "Unsupported operator: " + operator;
                    default:
                        throw "Unknown query operator: " + operator;
                }
            };
            FilterBuilder.prototype.escapeValue = function (dt, value) {
                if (!value) {
                    return "";
                }
                value = value.toString();
                var escaped = value.replace(/([\!\*\+\&\|\(\)\[\]\{\}\^\~\?\:\"])/g, "\\$1");
                return escaped;
            };
            FilterBuilder.prototype.quote = function (dt, value) {
                if (dt == 0 /* String */) {
                    return "\"" + value + "\"";
                }
                return value;
            };
            return FilterBuilder;
        })();
        Keen.FilterBuilder = FilterBuilder;
    })(Keen = Retool.Keen || (Retool.Keen = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Keen;
    (function (Keen) {
        var Model = (function (_super) {
            __extends(Model, _super);
            function Model() {
                _super.apply(this, arguments);
            }
            Model.prototype.createQuery = function (params) {
                var db = Retool.Server.getDatabase("keen");
                return new Retool.ORM.Query(db.getCollection(this.schema));
            };
            Model.prototype.getCollection = function (params) {
                return Retool.Server.getDatabase("keen").getCollection(this.schema);
            };
            return Model;
        })(Retool.ORMModel);
        Keen.Model = Model;
        Retool.VM.addType("KeenCollection", Model, null);
    })(Keen = Retool.Keen || (Retool.Keen = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var DreamFactory;
    (function (DreamFactory) {
        var Database = (function (_super) {
            __extends(Database, _super);
            function Database() {
                _super.call(this, null);
            }
            Database.prototype.getCollection = function (schema) {
                var c = new DreamFactory.Collection(this, "model_data", "");
                c.schema = schema;
                return c;
            };
            Database.prototype.castObjectId = function (id) {
                return id;
            };
            Database.prototype.isObjectId = function (id) {
                return false;
            };
            Database.prototype.register = function () {
                Retool.Server.databases.dreamfactory = this;
            };
            Database.prototype.escapeTable = function (tableName) {
                return tableName;
            };
            return Database;
        })(Retool.VM.ObjectBase);
        DreamFactory.Database = Database;
    })(DreamFactory = Retool.DreamFactory || (Retool.DreamFactory = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var DreamFactory;
    (function (DreamFactory) {
        var Collection = (function (_super) {
            __extends(Collection, _super);
            function Collection(db, name, type) {
                _super.call(this, null);
                this.db = db;
                this.name = name;
                this.type = type;
            }
            Collection.prototype.parsePostResponse = function (res, m) {
                var headers = res.headers;
                var location = headers.location;
                if (location) {
                    var segments = location.split('/');
                    if (segments.length >= 4) {
                        m.data.id = decodeURIComponent(segments[3]);
                    }
                }
            };
            Collection.prototype.vm_create = function (params) {
            };
            Collection.prototype.vm_update = function (params) {
            };
            Collection.prototype.castError = function (err) {
                return Retool.VM.VMError.cast(err);
            };
            Collection.prototype.vm_find = function (params) {
                var query = params.getIndex(0);
                var context = params.proc.context;
                var async = params.proc.pause();
                var self = this;
                var key = query.recordKey;
                var options = {
                    url: "https://dsp-retool.cloud.dreamfactory.com/rest/db/customer/" + key,
                    headers: {
                        "X-DreamFactory-Session-Token": context.session.id,
                        "X-DreamFactory-Application-Name": "CRM"
                    }
                };
                Retool.VM.Http.doMethod("get", options, async, context.log);
            };
            Collection.prototype.vm_remove = function (params) {
            };
            Collection.prototype.vm_list = function (params) {
                var query = params.getIndex(0);
                var context = params.proc.context;
                var self = this;
                var key = query.recordKey;
                var schema = this.schema;
                var options = {
                    url: "https://dsp-retool.cloud.dreamfactory.com/rest/db/customer",
                    headers: {
                        "X-DreamFactory-Session-Token": context.session.id,
                        "X-DreamFactory-Application-Name": "CRM"
                    }
                };
                var http = new Retool.VM.Http();
                http.vmCall(http.vm_get, params.proc, [options]).then(function (res) {
                    return new Retool.ArrayModel(context, schema, res.record);
                });
                //VM.Http.doMethod("get",options,async,context.log);
            };
            Collection.prototype.buildProjection = function (schema, columns) {
                var fields = {};
                for (var i = 0; i < columns.length; i++) {
                    var col = columns[i];
                    if (col) {
                        var ref = schema.getFieldReference(col);
                        if (ref) {
                            fields[col] = 1;
                        }
                    }
                }
                return fields;
            };
            Collection.prototype.formatRows = function (context, schema, results) {
                var rows = [];
                if (results) {
                    var out = [];
                    for (var i = 0; i < results.length; i++) {
                        var row = results[i];
                        row.id = row._id;
                        delete row["_id"];
                        delete row["_meta"];
                        rows.push(row);
                    }
                }
                return new Retool.ArrayModel(context, schema, rows);
            };
            Collection.prototype.getCollectionName = function (context, value) {
                return value;
            };
            return Collection;
        })(Retool.VM.ObjectBase);
        DreamFactory.Collection = Collection;
    })(DreamFactory = Retool.DreamFactory || (Retool.DreamFactory = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var DreamFactory;
    (function (DreamFactory) {
        var Model = (function (_super) {
            __extends(Model, _super);
            function Model() {
                _super.apply(this, arguments);
            }
            Model.prototype.createQuery = function (params) {
                var db = Retool.Server.getDatabase("dreamfactory");
                return new Retool.ORM.Query(db.getCollection(this.schema));
            };
            Model.prototype.getCollection = function (params) {
                return Retool.Server.getDatabase("dreamfactory").getCollection(this.schema);
            };
            Model.prototype.getSchemaCaster = function () {
                var db = Retool.Server.getDatabase("dreamfactory");
                return db;
            };
            return Model;
        })(Retool.ORMModel);
        DreamFactory.Model = Model;
        Retool.VM.addType("DreamFactoryModel", Model, null);
    })(DreamFactory = Retool.DreamFactory || (Retool.DreamFactory = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var LocalFileSystem;
    (function (LocalFileSystem) {
        var ProjectAdapter = (function () {
            function ProjectAdapter(context, rootFolder) {
                this.list = [];
                this.current = 0;
                this.response = [];
                this.fs = require('fs');
                this.extensions = ['.js', '.css', '.png', '.jpg', '.gif', '.hbs', '.less', '.json'];
                this.includeContent = ['.js', '.css', '.json', '.hbs', '.md', '.html'];
                this.ignoreExt = ['.ds_store', '.git', ''];
                this.rootFolder = rootFolder;
            }
            ProjectAdapter.prototype.get = function (path, fileList, callback) {
                var nodePath = require("path");
                var list = [];
                for (var i = 0; i < fileList.length; i++) {
                    var file = fileList[i];
                    var extname = nodePath.extname(file);
                    if (extname && this.ignoreExt.indexOf(extname) == -1) {
                        list.push(file);
                    }
                }
                this.list = list;
                this.callback = callback;
                this.path = path;
                this.next();
            };
            ProjectAdapter.prototype.getAll = function (context, callback) {
                var self = this;
                var rootFolder = this.rootFolder;
                Retool.DirectoryReader.readdir(rootFolder, function (err, list) {
                    if (err) {
                        callback(err);
                        return;
                    }
                    self.get(rootFolder, list, function (err, data) {
                        if (err) {
                            callback(err);
                        }
                        else {
                            callback(null, data);
                        }
                    });
                });
            };
            ProjectAdapter.prototype.find = function (context, name, callback) {
                var path = require('path');
                this.callback = callback;
                this.path = this.rootFolder;
                this.list = [path.join(this.rootFolder, name)];
                this.singleFile = true;
                this.next();
            };
            ProjectAdapter.prototype.next = function () {
                if (this.current < this.list.length) {
                    this.getFileContent(this.list[this.current++]);
                }
                else {
                    if (this.singleFile) {
                        if (this.response.length) {
                            this.callback(null, this.response[0]);
                        }
                        else {
                            this.callback(null, null);
                        }
                        return;
                    }
                    this.callback(null, this.response);
                }
            };
            ProjectAdapter.prototype.getFileContent = function (filename) {
                var nodePath = require("path");
                var self = this;
                var ext = nodePath.extname(filename);
                var name = filename.substr(self.path.length + 1);
                if (this.includeContent.indexOf(ext) != -1) {
                    this.fs.readFile(filename, function (err, data) {
                        if (err) {
                            self.callback(err);
                        }
                        else {
                            var content = data.toString();
                            self.response.push({ name: name.replace(/\\/g, '/'), content: content });
                            self.next();
                        }
                    });
                }
                else {
                    self.response.push({ name: name, content: null });
                    process.nextTick(function () {
                        self.next();
                    });
                }
            };
            ProjectAdapter.prototype.save = function (context, filename, content, async) {
                var fs = require("fs");
                var path = require("path");
                var diskFilename = path.join(this.rootFolder, filename);
                var dirname = path.dirname(diskFilename);
                Retool.NodeFs.mkdir(dirname, function (err) {
                    if (err) {
                        async.error(err);
                    }
                    else {
                        try {
                            fs.writeFileSync(diskFilename, content);
                            async.resume("File saved");
                        }
                        catch (e) {
                            async.error(e);
                        }
                    }
                });
            };
            ProjectAdapter.prototype.remove = function (context, filename, async) {
                var fs = require("fs");
                var path = require("path");
                var diskFilename = path.join(this.rootFolder, filename);
                fs.unlink(diskFilename, function (err) {
                    if (err) {
                        async.error(err);
                    }
                    else {
                        fs.rmdir(path.dirname(diskFilename), function (err) {
                            async.resume("File deleted"); // do not care about errors
                        });
                    }
                });
            };
            return ProjectAdapter;
        })();
        LocalFileSystem.ProjectAdapter = ProjectAdapter;
    })(LocalFileSystem = Retool.LocalFileSystem || (Retool.LocalFileSystem = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Mongo;
    (function (Mongo) {
        var Factory = (function () {
            function Factory() {
            }
            Factory.getClient = function (context, collection) {
                return collection.db.connection;
            };
            Factory.getProjectCollection = function (context) {
                var db = Retool.Server.getDatabase("mongo");
                return db.connection.collection("project_files");
            };
            return Factory;
        })();
        Mongo.Factory = Factory;
    })(Mongo = Retool.Mongo || (Retool.Mongo = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Mongo;
    (function (Mongo) {
        var Database = (function (_super) {
            __extends(Database, _super);
            function Database() {
                _super.call(this, null);
                this.mongoClient = require('mongodb');
            }
            Database.prototype.connect = function (done) {
                var self = this;
                var url = process.env.MONGO_URL;
                this.mongoClient.connect(url, function (err, connection) {
                    self.connection = connection;
                    done(err);
                });
            };
            Database.prototype.register = function () {
                Retool.Server.databases.mongo = this;
            };
            Database.prototype.getCollection = function (schema) {
                var type = "user";
                if (schema.app == Retool.Server.systemApp) {
                    type = "system";
                }
                var c = new Mongo.Collection(this, "model_data", type);
                c.schema = schema;
                return c;
            };
            Database.prototype.castObjectId = function (id) {
                if (!id) {
                    return null;
                }
                if (id instanceof this.mongoClient.ObjectID) {
                    return id;
                }
                return this.mongoClient.ObjectID.createFromHexString(id);
            };
            Database.prototype.isObjectId = function (id) {
                return (id instanceof this.mongoClient.ObjectID);
            };
            Database.prototype.escapeTable = function (tableName) {
                return tableName;
            };
            return Database;
        })(Retool.VM.ObjectBase);
        Mongo.Database = Database;
    })(Mongo = Retool.Mongo || (Retool.Mongo = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Mongo;
    (function (Mongo) {
        var Collection = (function (_super) {
            __extends(Collection, _super);
            function Collection(db, name, type) {
                _super.call(this, null);
                this.db = db;
                this.name = name;
                this.type = type;
            }
            Collection.prototype.parsePostResponse = function (res, m) {
                var headers = res.headers;
                var location = headers.location;
                if (location) {
                    var segments = location.split('/');
                    if (segments.length >= 4) {
                        m.data.id = decodeURIComponent(segments[3]);
                    }
                }
            };
            Collection.prototype.vm_create = function (params) {
                var m = params.getIndex(0);
                var context = params.proc.context;
                var data = m.data;
                // var client = Server.getDBClient(this.db); 
                var client = Mongo.Factory.getClient(context, this);
                var async = params.proc.pause();
                var self = this;
                var c = client.collection(this.getCollectionName(context, this.name));
                var newDoc = this.toMongoDoc(data);
                newDoc._meta = this.getMeta(context);
                c.insert(newDoc, function (err, docs) {
                    if (err) {
                        async.error(self.castError(err));
                        return;
                    }
                    if (docs.length) {
                        var doc = docs[0];
                        data.id = doc._id;
                        async.resume(data.id);
                    }
                    else {
                        async.error("No record was inserted.");
                    }
                });
            };
            Collection.prototype.getMeta = function (context, currentMeta) {
                var meta = currentMeta || {};
                meta.account_id = context.accountId;
                if (this.schema) {
                    meta.model = this.schema.id.toLowerCase();
                }
                meta.lastModified = new Date();
                if (!meta.createdDate) {
                    meta.createdDate = new Date();
                }
                return meta;
            };
            Collection.prototype.vm_update = function (params) {
                var m = params.getIndex(0);
                var context = params.proc.context;
                var data = m.data;
                var key = data.id;
                var client = Mongo.Factory.getClient(context, this);
                var async = params.proc.pause();
                var self = this;
                var existingDoc = this.toMongoDoc(data);
                existingDoc._meta = this.getMeta(context);
                var c = client.collection(this.getCollectionName(context, this.name));
                var q = this.createIdFilter(context, key);
                c.update(q, existingDoc, function (err, doc) {
                    if (err) {
                        async.error(self.castError(err));
                        return;
                    }
                    if (doc) {
                        async.resume(key);
                    }
                    else {
                        async.error("No record was updated or inserted.");
                    }
                });
            };
            Collection.prototype.castError = function (err) {
                return Retool.VM.VMError.cast(err);
            };
            Collection.prototype.vm_find = function (params) {
                var query = params.getIndex(0);
                var context = params.proc.context;
                var client = Mongo.Factory.getClient(context, this);
                var async = params.proc.pause();
                var self = this;
                var key = query.recordKey;
                var c = client.collection(this.getCollectionName(context, this.name));
                var options = {};
                var q = this.createIdFilter(context, key);
                c.findOne(q, options, function (err, doc) {
                    if (err) {
                        async.error(self.castError(err));
                        return;
                    }
                    if (!doc) {
                        async.resume(null);
                        return;
                    }
                    var data = self.fromMongoDoc(doc);
                    var m = Retool.ObjectModel.createInstance(context, self.schema, data, false);
                    async.resume(m);
                });
            };
            Collection.prototype.fromMongoDoc = function (doc) {
                var out = {};
                for (var key in doc) {
                    if (key[0] == "_") {
                        if (key == "_id") {
                            out.id = doc._id;
                        }
                    }
                    else if (key == "id") {
                    }
                    else {
                        out[key] = doc[key];
                    }
                }
                return out;
            };
            Collection.prototype.toMongoDoc = function (data) {
                var doc = {};
                for (var key in data) {
                    if (key == "id") {
                    }
                    else {
                        doc[key] = data[key];
                    }
                }
                return doc;
            };
            Collection.prototype.createIdFilter = function (context, id) {
                return { _id: this.db.castObjectId(id), "_meta.account_id": context.accountId, "_meta.model": this.schema.id.toLowerCase() };
            };
            Collection.prototype.vm_remove = function (params) {
                var context = params.proc.context;
                var query = params.getIndex(0);
                var client = Mongo.Factory.getClient(context, this);
                var async = params.proc.pause();
                var self = this;
                var q = this.createIdFilter(context, query.recordKey);
                var c = client.collection(this.getCollectionName(context, this.name));
                c.remove(q, function (err, count) {
                    if (err) {
                        async.error(this.castError(err));
                        return;
                    }
                    async.resume(count);
                });
            };
            Collection.prototype.vm_list = function (params) {
                var context = params.proc.context;
                var client = Mongo.Factory.getClient(context, this);
                var async = params.proc.pause();
                var query = params.getIndex(0);
                var options = {};
                if (query.limit) {
                    options.limit = query.limit;
                }
                if (query.skip) {
                    options.skip = query.skip;
                }
                var columns = query.columns;
                if (columns && columns.length) {
                    options.fields = this.buildProjection(this.schema, columns);
                }
                var q = Mongo.FilterBuilder.build(context, query);
                if (query.orders) {
                    options.sort = Mongo.SortBuilder.build(query);
                }
                var self = this;
                var context = params.proc.context;
                var c = client.collection(this.getCollectionName(context, this.name));
                var logEntry;
                var start;
                if (context.log) {
                    logEntry = context.log.add("Mongo.find", JSON.stringify(q) + " " + JSON.stringify(options));
                    start = process.hrtime();
                }
                var cursor = c.find(q, options);
                cursor.toArray(function (err, docs) {
                    var elapsed = process.hrtime(start);
                    elapsed = elapsed[0] * 1000 + (elapsed[1] / 1000000);
                    logEntry.time = elapsed;
                    if (err) {
                        if (logEntry) {
                            logEntry.response = {
                                statusCode: "400"
                            };
                        }
                        async.error(err);
                        return;
                    }
                    if (logEntry) {
                        logEntry.response = {
                            statusCode: "200"
                        };
                    }
                    var out = self.formatRows(context, self.schema, docs);
                    async.resume(out);
                });
                return;
            };
            Collection.prototype.buildProjection = function (schema, columns) {
                var fields = {};
                for (var i = 0; i < columns.length; i++) {
                    var col = columns[i];
                    if (col) {
                        var ref = schema.getFieldReference(col);
                        if (ref) {
                            fields[col] = 1;
                        }
                    }
                }
                return fields;
            };
            Collection.prototype.formatRows = function (context, schema, results) {
                var rows = [];
                if (results) {
                    var out = [];
                    for (var i = 0; i < results.length; i++) {
                        var row = results[i];
                        row.id = row._id;
                        delete row["_id"];
                        delete row["_meta"];
                        rows.push(row);
                    }
                }
                return new Retool.ArrayModel(context, schema, rows);
            };
            Collection.prototype.getCollectionName = function (context, value) {
                return value;
            };
            return Collection;
        })(Retool.VM.ObjectBase);
        Mongo.Collection = Collection;
    })(Mongo = Retool.Mongo || (Retool.Mongo = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Mongo;
    (function (Mongo) {
        var Model = (function (_super) {
            __extends(Model, _super);
            function Model() {
                _super.apply(this, arguments);
            }
            Model.prototype.createQuery = function (params) {
                var db = Retool.Server.getDatabase("mongo");
                return new Retool.ORM.Query(db.getCollection(this.schema));
            };
            Model.prototype.getCollection = function (params) {
                return Retool.Server.getDatabase("mongo").getCollection(this.schema);
            };
            Model.prototype.getSchemaCaster = function () {
                var db = Retool.Server.getDatabase("mongo");
                return db;
            };
            return Model;
        })(Retool.ORMModel);
        Mongo.Model = Model;
        Retool.VM.addType("MongoModel", Model, null);
    })(Mongo = Retool.Mongo || (Retool.Mongo = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Mongo;
    (function (Mongo) {
        var FilterBuilder = (function () {
            function FilterBuilder() {
            }
            FilterBuilder.build = function (context, query) {
                var fb = new FilterBuilder();
                fb.query = query;
                return fb.buildFilter(context);
            };
            FilterBuilder.prototype.buildFilter = function (context) {
                var conditions = this.query.conditions;
                this.schema = this.query.collection.schema;
                var filter = [{ "_meta.account_id": context.accountId }, { "_meta.model": this.schema.id.toLowerCase() }];
                if (conditions) {
                    var condFilter = this.addConditions(conditions);
                    if (condFilter) {
                        var keys = Object.keys(condFilter);
                        if (keys[0] == "$and") {
                            var values = condFilter[keys[0]];
                            for (var i = 0; i < values.length; i++) {
                                filter.push(values[i]);
                            }
                        }
                        else {
                            filter.push(condFilter);
                        }
                    }
                }
                return { $and: filter };
            };
            FilterBuilder.prototype.addConditions = function (conditions) {
                var andFilter = [];
                var orFilter = [];
                var list;
                for (var i = 0; i < conditions.length; i++) {
                    var cond = conditions[i];
                    var list = (cond.booleanOperator == "OR") ? orFilter : andFilter;
                    var item;
                    if (cond.column) {
                        var ref = this.schema.getFieldReference(cond.column);
                        if (ref) {
                            item = this.getComparison(ref.field, cond.operator, cond.value, cond.value2);
                        }
                        else {
                            throw "Invalid field in where: " + cond.column;
                        }
                    }
                    else if (cond.children) {
                        item = this.addConditions(cond.children);
                    }
                    if (item) {
                        if (cond.booleanOperator == "NOT") {
                            list.push({ $not: item });
                        }
                        else {
                            list.push(item);
                        }
                    }
                }
                if (orFilter.length) {
                    if (andFilter.length) {
                        if (andFilter.length == 1) {
                            orFilter.push(andFilter[0]);
                        }
                        else {
                            orFilter.push({ $and: andFilter });
                        }
                    }
                    return { $or: orFilter };
                }
                else if (andFilter.length) {
                    if (andFilter.length == 1) {
                        return andFilter[0];
                    }
                    return { $and: andFilter };
                }
                return null;
            };
            FilterBuilder.prototype.getBooleanOperator = function (op) {
                switch (op) {
                    case "AND": return "$and";
                    case "OR": return "$or";
                    case "NOT": return "$not";
                }
                throw "Unknown boolean operator:" + op;
            };
            FilterBuilder.prototype.getComparison = function (field, operator, value, value2) {
                var valueIsField = false;
                var dt = field.getDataType();
                var obj = {};
                // todo:  cast value, value2 for mongo comparison
                var name = field.name;
                switch (operator) {
                    case "=":
                        obj[name] = value;
                        break;
                    case "!=":
                    case "<>":
                        obj[name] = { $ne: value };
                        break;
                    case ">":
                        obj[name] = { $gt: value };
                        break;
                    case "<":
                        obj[name] = { $lt: value };
                        break;
                    case ">=":
                        obj[name] = { $gte: value };
                        break;
                    case "<=":
                        obj[name] = { $lte: value };
                        break;
                    case "in":
                        obj[name] = { $in: value };
                        break;
                    case "!in":
                        obj[name] = { $nin: value };
                        break;
                    case "is_null":
                        obj[name] = null;
                        break;
                    case "is_not_null":
                        obj[name] = { $ne: null };
                        break;
                    case "between":
                        obj[name] = { $gte: value, $lte: value2 };
                        break;
                    case "like":
                    case "starts_with":
                        obj[name] = { $regex: '^' + this.escapeRegex(value), $options: 'i' };
                        break;
                    case "contains":
                        obj[name] = { $regex: this.escapeRegex(value), $options: 'i' };
                        break;
                    case "ends_with":
                        obj[name] = { $regex: this.escapeRegex(value) + '$', $options: 'i' };
                        break;
                    default:
                        throw "Unknown query operator: " + operator;
                }
                return obj;
            };
            FilterBuilder.prototype.escapeValue = function (dt, value) {
                if (!value) {
                    return "";
                }
                value = value.toString();
                var escaped = value.replace(/([\!\*\+\&\|\(\)\[\]\{\}\^\~\?\:\"])/g, "\\$1");
                return escaped;
            };
            FilterBuilder.prototype.escapeRegex = function (value) {
                return (value + '').replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
            };
            FilterBuilder.prototype.quote = function (dt, value) {
                if (dt == 0 /* String */) {
                    return "\"" + value + "\"";
                }
                return value;
            };
            return FilterBuilder;
        })();
        Mongo.FilterBuilder = FilterBuilder;
    })(Mongo = Retool.Mongo || (Retool.Mongo = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Mongo;
    (function (Mongo) {
        var SortBuilder = (function () {
            function SortBuilder() {
            }
            SortBuilder.build = function (query) {
                var sb = new SortBuilder();
                sb.query = query;
                return sb.buildSort();
            };
            SortBuilder.prototype.buildSort = function () {
                var orders = this.query.orders;
                this.schema = this.query.collection.schema;
                var sort = [];
                for (var i = 0; i < orders.length; i++) {
                    var ob = orders[i];
                    var ref = this.schema.getFieldReference(ob.field);
                    if (!ref) {
                        throw "Invalid order by field: " + ob.field;
                    }
                    if (ob.direction && ob.direction.toLowerCase() == "desc") {
                        sort.push([ob.field, 'desc']);
                    }
                    else {
                        sort.push([ob.field, 'asc']);
                    }
                }
                return sort;
            };
            return SortBuilder;
        })();
        Mongo.SortBuilder = SortBuilder;
    })(Mongo = Retool.Mongo || (Retool.Mongo = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Mongo;
    (function (Mongo) {
        var ProjectAdapter = (function () {
            function ProjectAdapter(context) {
            }
            ProjectAdapter.prototype.getAll = function (context, callback) {
                var c = Mongo.Factory.getProjectCollection(context);
                var cursor = c.find({ account_id: context.accountId, branch: context.projectBranch });
                cursor.toArray(function (err, docs) {
                    if (err) {
                        callback(err);
                        return;
                    }
                    var files = [];
                    for (var i = 0; i < docs.length; i++) {
                        var doc = docs[i];
                        files.push({ name: doc.name, content: doc.content });
                    }
                    callback(null, files);
                });
            };
            ProjectAdapter.prototype.find = function (context, name, callback) {
                var c = Mongo.Factory.getProjectCollection(context);
                var id = this.makeId(context, name);
                c.findOne({ _id: id }, function (err, doc) {
                    if (err) {
                        callback(err, null);
                        return;
                    }
                    if (!doc) {
                        callback("Unable to location:" + id, null);
                        return;
                    }
                    callback(null, { name: doc.name, content: doc.content });
                });
            };
            ProjectAdapter.prototype.makeId = function (context, name) {
                return context.accountId + ":" + context.projectBranch + ":" + name;
            };
            ProjectAdapter.prototype.save = function (context, filename, content, async) {
                var c = Mongo.Factory.getProjectCollection(context);
                var id = this.makeId(context, filename);
                var doc = { _id: id, name: filename, content: content, account_id: context.accountId, branch: context.projectBranch };
                c.save(doc, function (err, doc) {
                    if (err) {
                        async.error(err);
                        return;
                    }
                    async.resume(1);
                });
            };
            ProjectAdapter.prototype.remove = function (context, filename, async) {
                var c = Mongo.Factory.getProjectCollection(context);
                var id = this.makeId(context, filename);
                c.remove({ _id: id }, function (err) {
                    if (err) {
                        async.error(err);
                        return;
                    }
                    async.resume(1);
                });
            };
            return ProjectAdapter;
        })();
        Mongo.ProjectAdapter = ProjectAdapter;
    })(Mongo = Retool.Mongo || (Retool.Mongo = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Mongo;
    (function (Mongo) {
        var Provider = (function () {
            function Provider() {
            }
            Provider.prototype.castObjectId = function (id) {
            };
            Provider.prototype.isObjectId = function (id) {
                return false;
            };
            Provider.prototype.getConnection = function (callback) {
            };
            Provider.prototype.escape = function (value) {
            };
            Provider.prototype.escapeId = function (value) {
            };
            Provider.prototype.escapeTable = function (name) {
                return null;
            };
            Provider.prototype.executeQuery = function (sql, options, callback) {
            };
            Provider.prototype.beginTransaction = function (callback) {
            };
            Provider.prototype.getDatabaseName = function () {
                return null;
            };
            return Provider;
        })();
        Mongo.Provider = Provider;
    })(Mongo = Retool.Mongo || (Retool.Mongo = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var UserApps;
    (function (UserApps) {
        var UserAppCreator = (function () {
            function UserAppCreator() {
            }
            UserAppCreator.create = function (name, done) {
                /*
                var context = new Context();
                var dbName = name;
                var db = new MySql.MySqlProvider(context,Server.mySqlPool,dbName);
                context.db = db;
    
                var sql = "CREATE DATABASE IF NOT EXISTS " + db.escapeId(dbName);
                context.query(sql,function(err,result){
                    if (err){
                        done(err,null);
                        return;
                    }
    
                    var volume = new FileSystem.Volume(dbName,{useFolders:false});
                    var app = new Application(dbName);
                    app.load(volume);
                    var db:IDatabase = null;
                    app.migrateDatabase(context,db,function(err,migtrateResult){
                        var source = new Context();
                        var copier = new ProjectCopier();
                        copier.copy(source,context,{assets:true},function(err,files){
                            done(err,result);
                        
                        });
                    })
                    
    
                    
                });
                */
            };
            return UserAppCreator;
        })();
        UserApps.UserAppCreator = UserAppCreator;
    })(UserApps = Retool.UserApps || (Retool.UserApps = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ProjectCopier = (function () {
        function ProjectCopier() {
        }
        ProjectCopier.prototype.copy = function (source, dest, options, done) {
            this.source = source;
            this.dest = dest;
            this.done = done;
            this.sourceAdapter = source.app.getProjectAdapter(source);
            this.destAdapter = dest.app.getProjectAdapter(dest);
            this.loadSource();
        };
        ProjectCopier.prototype.import = function (dest, files, done) {
            this.dest = dest;
            this.done = done;
            var src = new Retool.VM.Src();
            this.destAdapter = dest.app.getProjectAdapter(dest);
            this.files = files;
            this.startWrite();
        };
        ProjectCopier.prototype.loadSource = function () {
            var self = this;
            this.sourceAdapter.getAll(this.source, function (err, files) {
                if (err) {
                    this.done(err);
                    return;
                }
                self.files = files;
                self.startWrite();
            });
        };
        ProjectCopier.prototype.startWrite = function () {
            this.index = 0;
            this.next();
        };
        ProjectCopier.prototype.next = function () {
            var index = this.index++;
            if (index < this.files.length) {
                var file = this.files[index];
                this.writeFile(file);
            }
            else {
                this.done(null, this.files);
            }
        };
        ProjectCopier.prototype.writeFile = function (file) {
            var self = this;
            var async = Retool.makeAsync(function (err, data) {
                if (err) {
                    self.done(err, null);
                    return;
                }
                var segments = file.name.split("/");
                if (segments.length > 2 && segments[0] == "assets" && (segments[1] == "bootstrap" || segments[1] == "images")) {
                    var name = segments.slice(1).join('/');
                    var dbName = "?"; // to do
                    self.next();
                    /*
                    BatchRunner.copyS3File("master/" + name,dbName + "/" + name,function(err){
                        if (err){
                            // todo: add to log
                            //self.done(err,null);
                            //return;
                        }
                        self.next();
                    });
                    */
                    return;
                }
                self.next();
            });
            this.destAdapter.save(this.dest, file.name, file.content, async);
        };
        return ProjectCopier;
    })();
    Retool.ProjectCopier = ProjectCopier;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var ControllerTestFixture = (function (_super) {
            __extends(ControllerTestFixture, _super);
            function ControllerTestFixture(myPrototype, controller) {
                _super.call(this, myPrototype);
                this.controller = controller;
                this.data = {};
                this.chai = require('chai');
            }
            ControllerTestFixture.prototype.vm_get_controller = function (params) {
                return this.controller;
            };
            ControllerTestFixture.prototype.vm_assert = function (params) {
                var args = params.args;
                if (args.length == 2) {
                    this.chai.assert(args[0], args[1]);
                }
                else {
                    throw "Assert expects 2 arguments";
                }
            };
            ControllerTestFixture.prototype.vm_expect = function (params) {
                var args = params.args;
                if (args.length == 1) {
                    return this.chai.expect(args[0]);
                }
                else {
                    throw "Expect expects 1 argument";
                }
            };
            ControllerTestFixture.prototype.vm_get_assert = function (params) {
                return this.chai.assert;
            };
            ControllerTestFixture.prototype.getMissingProperty = function (params) {
                if (params.errorIfMissing) {
                    if (params.name in this.data) {
                        return this.data[params.name];
                    }
                    throw "ReferenceError: " + params.name + " is not defined";
                }
                return this[params.name];
            };
            ControllerTestFixture.prototype.setMissingProperty = function (params) {
                this.data[params.name] = params.value;
            };
            return ControllerTestFixture;
        })(VM.ObjectBase);
        VM.ControllerTestFixture = ControllerTestFixture;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var TestRunner = (function () {
        function TestRunner() {
        }
        TestRunner.run = function (context, options, done) {
            var file = context.getFile(options.filename);
            if (file) {
                var prototype = Retool.ScriptRunner.getCompiledPrototype(file);
                var controller = TestRunner.createControllerInstance(context, file);
                var target = new Retool.VM.ControllerTestFixture(prototype, controller);
                var proc = new Retool.VM.Process();
                proc.debugEnabled = true;
                target.callConstructor(proc);
                var internal = ['before', 'beforeEach', 'after', 'afterEach'];
                var methods = [];
                for (var methodName in prototype.methods) {
                    if (methodName[0] != "_" && internal.indexOf(methodName) == -1) {
                        methods.push(prototype.methods[methodName]);
                    }
                }
                var runner = new TestRunner();
                runner.context = context;
                runner.testPrototype = prototype;
                runner.current = 0;
                runner.methods = methods;
                if (methods.length) {
                    runner.currentMethod = methods[0];
                }
                runner.target = target;
                runner.done = done;
                runner.testResults = { methods: {} };
                runner.startTime = process.hrtime();
                runner.runBefore(function (err) {
                    if (err) {
                        runner.testResults.before = { error: err };
                        done(runner.testResults);
                    }
                    else {
                        runner.next();
                    }
                });
            }
        };
        TestRunner.createControllerInstance = function (context, testFile) {
            /*
            var info = FileSystem.PathInfo.parseFilename(testFile.getFullName());
            var segments = info.path.split('/');
            var controllerFile = ControllerLocator.getFileByRoute(context,segments[1] + "/" + FileSystem.PathInfo.getFilenameWithoutExtension(info.filename));
            var controllerDef = <IControllerDefinition>controllerFile.getContent();
            var controllerPrototype = ControllerLocator.getPrototype(segments[1],controllerFile);
            var model:Model;
            if (controllerDef.model){
                model = Model.createStaticForId(context,controllerDef.model);
            }
            return new VM.Controller(controllerPrototype,controllerDef,model);
            */
            return null;
        };
        TestRunner.prototype.next = function () {
            var self = this;
            if (this.current >= this.methods.length) {
                self.runAfter(function (err) {
                    if (err) {
                        self.testResults.after = { error: err };
                    }
                    var elapsed = process.hrtime(self.startTime);
                    self.testResults.milliseconds = Math.round(elapsed[0] * 1000 + (elapsed[1] / 1000000));
                    self.done(self.testResults);
                });
                return;
            }
            var method = this.currentMethod = this.methods[this.current++];
            this.runBeforeEach();
        };
        TestRunner.prototype.runBefore = function (done) {
            if (this.target.myPrototype.methods["before"]) {
                var self = this;
                Retool.ScriptRunner.run({ target: this.target, method: "before", args: [], context: this.context }, function (err, result) {
                    done(err);
                });
            }
            else {
                done();
            }
        };
        TestRunner.prototype.runAfter = function (done) {
            if (this.target.myPrototype.methods["after"]) {
                var self = this;
                Retool.ScriptRunner.run({ target: this.target, method: "after", args: [], context: this.context }, function (err, result) {
                    done(err);
                });
            }
            else {
                done();
            }
        };
        TestRunner.prototype.runBeforeEach = function () {
            if (this.target.myPrototype.methods["beforeEach"]) {
                var self = this;
                Retool.ScriptRunner.run({ target: this.target, method: "beforeEach", args: [], context: this.context }, function (err, result) {
                    if (err) {
                        self.testResults.methods[self.currentMethod.name] = { status: "fail", error: err };
                        self.next();
                    }
                    else {
                        self.runMethodTest();
                    }
                });
            }
            else {
                this.runMethodTest();
            }
        };
        TestRunner.prototype.runMethodTest = function () {
            var self = this;
            Retool.ScriptRunner.run({ target: this.target, method: this.currentMethod.name, args: [], context: this.context }, function (err, result) {
                if (err) {
                    self.testResults.methods[self.currentMethod.name] = { status: "fail", error: err };
                }
                else {
                    self.testResults.methods[self.currentMethod.name] = { status: "pass" };
                }
                self.runAfterEach();
            });
        };
        TestRunner.prototype.runAfterEach = function () {
            if (this.target.myPrototype.methods["afterEach"]) {
                var self = this;
                Retool.ScriptRunner.run({ target: this.target, method: "afterEach", args: [], context: this.context }, function (err, result) {
                    if (err) {
                        self.testResults.methods[self.currentMethod.name] = { status: "fail", error: err };
                        self.next();
                    }
                    else {
                        self.next();
                    }
                });
            }
            else {
                this.next();
            }
        };
        return TestRunner;
    })();
    Retool.TestRunner = TestRunner;
})(Retool || (Retool = {}));
var LISA;
(function (LISA) {
    var BF = (function () {
        function BF() {
        }
        BF.fromLineal = function (value) {
            return 0;
        };
        return BF;
    })();
    LISA.BF = BF;
})(LISA || (LISA = {}));
var Retool;
(function (Retool) {
    var VMScripts;
    (function (VMScripts) {
        var VMScriptBase = (function () {
            function VMScriptBase() {
            }
            VMScriptBase.prototype.mustBe = function (role) {
                return true;
            };
            VMScriptBase.prototype.save = function (doc) {
            };
            VMScriptBase.prototype.extend = function (def) {
            };
            return VMScriptBase;
        })();
        VMScripts.VMScriptBase = VMScriptBase;
        var MyVMScript = (function (_super) {
            __extends(MyVMScript, _super);
            function MyVMScript() {
                _super.apply(this, arguments);
                this.var2 = 8;
            }
            MyVMScript.prototype.save = function (doc) {
                this.mustBe("user");
                var name = "User is: " + this.userName;
                return name;
            };
            return MyVMScript;
        })(VMScriptBase);
        VMScripts.MyVMScript = MyVMScript;
        function addModel(name, func) {
        }
        VMScripts.models = {
            add: function (name, func) {
            }
        };
        function stringField(attrib) {
            if (attrib) {
                return JSON.stringify(attrib);
            }
            else {
                "@@stringField";
            }
        }
        VMScripts.stringField = stringField;
        var InventoryLookup = (function (_super) {
            __extends(InventoryLookup, _super);
            function InventoryLookup() {
                _super.apply(this, arguments);
                this.name = stringField({ required: true });
                this.address = stringField({ max_length: 50 });
                this.city = stringField();
                this.state = stringField();
                this.def = {
                    actions: {
                        save: function (doc) {
                            this.mustBe("User");
                        }
                    }
                };
            }
            InventoryLookup.prototype.save = function (doc) {
                this.mustBe("User");
                var c = this.city;
            };
            InventoryLookup.prototype.calculate = function () {
                return InventoryLib.calculate(100, 200);
            };
            return InventoryLookup;
        })(VMScriptBase);
        VMScripts.InventoryLookup = InventoryLookup;
        var InventoryLib = (function () {
            function InventoryLib() {
            }
            InventoryLib.calculate = function (a, b) {
                return LISA.BF.fromLineal(a + b);
            };
            return InventoryLib;
        })();
        VMScripts.InventoryLib = InventoryLib;
    })(VMScripts = Retool.VMScripts || (Retool.VMScripts = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var modelScope;
    (function (modelScope) {
        var ModelBase = (function () {
            function ModelBase(data) {
            }
            ModelBase.prototype.mustBe = function (role) {
                return false;
            };
            ModelBase.prototype.save = function () {
            };
            return ModelBase;
        })();
        modelScope.ModelBase = ModelBase;
        function stringField(attrib) {
            return null;
        }
        modelScope.stringField = stringField;
    })(modelScope = Retool.modelScope || (Retool.modelScope = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var modelScope;
    (function (modelScope) {
        var Customer = (function (_super) {
            __extends(Customer, _super);
            function Customer(data) {
                _super.call(this, data);
            }
            Customer.prototype.save = function () {
                this.mustBe("user");
                _super.prototype.save.call(this);
            };
            Customer.prototype.getFull = function () {
                return this.name + this.city;
            };
            Customer.calculate = function (a, b) {
                return a + b;
            };
            return Customer;
        })(modelScope.ModelBase);
        modelScope.Customer = Customer;
    })(modelScope = Retool.modelScope || (Retool.modelScope = {}));
})(Retool || (Retool = {}));
var ModelBase = (function () {
    function ModelBase(data) {
    }
    ModelBase.prototype.save = function () {
    };
    ModelBase.prototype.mustBe = function (role) {
        return false;
    };
    return ModelBase;
})();
var Customer = (function (_super) {
    __extends(Customer, _super);
    function Customer(data) {
        _super.call(this, data);
    }
    Customer.prototype.save = function () {
        this.mustBe("user");
        //var b = this.name;
        _super.prototype.save.call(this);
    };
    return Customer;
})(ModelBase);
/*
<div class="panel">
  <input value="first_name">
  <input value="last_name">
  <input value="territory_id" autocomplete ="territory/_drop">
</div>


{$:"div",css:"panel",children:[
    {$:"input",value:"first_name"},
    {$:"input",value:"last_name"},
    {$:"input",value:"territory_id",autocomplete:"territory/_drop"}
]}


class Salesperson extends Model {
  beforeSave(errors){
    if (this.first_name > this.last_name){
        errors.field("first_name","First name cannot be greater than last name.");
    }
  }
}

class SalespersonController extends Controller {
  btnSave_onclick(){
    model.save();
    location = "salespeople/index";
  }
}

*/
var Retool;
(function (Retool) {
    var SessionStore = (function () {
        function SessionStore() {
        }
        SessionStore.prototype.get = function (id, done) {
        };
        SessionStore.prototype.create = function (id, session, done) {
        };
        SessionStore.prototype.destroy = function (id, done) {
        };
        return SessionStore;
    })();
    Retool.SessionStore = SessionStore;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var RedisSessionStore = (function (_super) {
        __extends(RedisSessionStore, _super);
        function RedisSessionStore(client, options) {
            _super.call(this);
            this.client = client;
            this.expire = options.expire;
        }
        RedisSessionStore.prototype.get = function (id, done) {
            var self = this;
            this.client.get(id, function (err, data) {
                if (!data) {
                    done();
                    return;
                }
                data = data.toString();
                try {
                    var result = JSON.parse(data);
                }
                catch (e) {
                    done(e);
                    return;
                }
                if (result && result.userId && result.accountId) {
                    done(null, result);
                    self.touch(id);
                    return;
                }
                done();
            });
        };
        RedisSessionStore.prototype.touch = function (id) {
            this.client.expire(id, this.expire);
        };
        RedisSessionStore.prototype.create = function (id, session, done) {
            var jsess;
            try {
                jsess = JSON.stringify(session);
            }
            catch (e) {
                done(e);
                return;
            }
            this.client.setex(id, this.expire, jsess, function (err) {
                done(err);
            });
        };
        RedisSessionStore.prototype.destroy = function (id, done) {
            this.client.del(id, done);
        };
        return RedisSessionStore;
    })(Retool.SessionStore);
    Retool.RedisSessionStore = RedisSessionStore;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var RetoolAuthSessionStore = (function (_super) {
        __extends(RetoolAuthSessionStore, _super);
        function RetoolAuthSessionStore(client, options) {
            _super.call(this);
            this.expire = options.expire;
        }
        RetoolAuthSessionStore.prototype.get = function (id, done) {
            var self = this;
            var url = "https://retoolaccountsdev1.azurewebsites.net/api/v1/session/" + encodeURIComponent(id);
            var request = require('request');
            var options = {
                url: url,
                method: "GET",
                rejectUnauthorized: false,
                agent: Retool.Server.keepAliveAgent,
                headers: {
                    'User-Agent': 'request',
                    'Connection': 'keep-alive'
                }
            };
            var req = request(options, function (error, response, body) {
                try {
                    body = JSON.parse(body);
                }
                catch (e) {
                    done("Unable to parse session info");
                    return;
                }
                if (!body.success || !body.session) {
                    done(body.errors[0]);
                    return;
                }
                var result = { userId: body.session.user_id, accountId: body.session.account_id };
                done(null, result);
            });
        };
        RetoolAuthSessionStore.prototype.destroy = function (id, done) {
            var self = this;
            var url = "https://retoolaccountsdev1.azurewebsites.net/api/v1/logout/" + encodeURIComponent(id);
            var request = require('request');
            var options = {
                url: url,
                method: "GET",
                rejectUnauthorized: false,
                agent: Retool.Server.keepAliveAgent,
                headers: {
                    'User-Agent': 'request',
                    'Connection': 'keep-alive'
                }
            };
            var req = request(options, function (error, response, body) {
                try {
                    body = JSON.parse(body);
                }
                catch (e) {
                    done("Unable to parse session info");
                    return;
                }
                if (!body.success || !body.session) {
                    done(body.errors[0]);
                    return;
                }
                var result = {};
                done(null, result);
            });
        };
        RetoolAuthSessionStore.signin = function (email, password, done) {
            var self = this;
            var url = "https://retoolaccountsdev1.azurewebsites.net/api/v1/login";
            var request = require('request');
            var options = {
                url: url,
                method: "POST",
                rejectUnauthorized: false,
                agent: Retool.Server.keepAliveAgent,
                headers: {
                    'User-Agent': 'request',
                    'Connection': 'keep-alive',
                    'Content-Type': 'application/json'
                }
            };
            var body = { email: email, password: password };
            options.body = JSON.stringify(body);
            var req = request(options, function (error, response, res) {
                try {
                    res = JSON.parse(res);
                }
                catch (e) {
                    done("Unable to parse session info");
                    return;
                }
                if (!res.success) {
                    var err = res.errors[0];
                    if (!err) {
                        err = "Invalid email or password";
                    }
                    done(err);
                    return;
                }
                var result = { token: res.token };
                done(null, result);
            });
        };
        return RetoolAuthSessionStore;
    })(Retool.SessionStore);
    Retool.RetoolAuthSessionStore = RetoolAuthSessionStore;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Session = (function () {
        function Session(options) {
            this.id = options.id;
            this.userId = options.userId;
            this.accountId = options.accountId;
        }
        Session.prototype.hasRole = function (role) {
            return false;
        };
        Session.prototype.toJSON = function () {
            return { userId: this.userId, accountId: this.accountId, role: this.role };
        };
        return Session;
    })();
    Retool.Session = Session;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SessionManager = (function () {
        function SessionManager(store) {
            this.store = store;
        }
        SessionManager.prototype.get = function (token, done) {
            var key = this.getKey(token);
            this.store.get(key, function (err, data) {
                if (err) {
                    done(err);
                    return;
                }
                var session;
                if (data && data.userId && data.accountId) {
                    session = new Retool.Session({ id: token, userId: data.userId, accountId: data.accountId });
                }
                done(null, session);
            });
        };
        SessionManager.prototype.create = function (options, done) {
            var uid = require('uid-safe');
            var token = options.token || uid.sync(24);
            var session = new Retool.Session({ id: token, userId: options.userId, accountId: options.accountId });
            var key = this.getKey(token);
            this.store.create(key, session, function (err) {
                if (err) {
                    done(err);
                    return;
                }
                done(null, session);
            });
        };
        SessionManager.prototype.destroy = function (token, done) {
            var key = this.getKey(token);
            this.store.destroy(key, done);
        };
        SessionManager.prototype.getKey = function (id) {
            return id;
            // return "rtsess:" + id;
        };
        return SessionManager;
    })();
    Retool.SessionManager = SessionManager;
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var Src = (function (_super) {
            __extends(Src, _super);
            function Src() {
                _super.call(this, null);
                this._templateParser = new Retool.Transformers.TemplateParser();
                this._templateSerializer = new Retool.Transformers.TemplateSerializer();
                this._componentParser = new Retool.Transformers.ComponentParser();
                this._componentSerializer = new Retool.Transformers.ComponentSerializer();
                this._controllerParser = new Retool.Transformers.ControllerParser();
                this._controllerSerializer = new Retool.Transformers.ControllerSerializer();
                this._modelParser = new Retool.Transformers.ModelParser();
                this._modelSerializer = new Retool.Transformers.ModelSerializer();
            }
            Src.prototype.vm_getAllFiles = function (params) {
                var context = params.proc.context;
                var async = params.proc.pause();
                this.getAllFiles(context, async);
            };
            Src.prototype.getAllFiles = function (context, async) {
                var adapter = context.app.getProjectAdapter(context);
                var self = this;
                adapter.getAll(context, function (err, files) {
                    if (err) {
                        async.error(err);
                        return;
                    }
                    var volume = new Retool.FileSystem.Volume("get", { useFolders: false });
                    if (files) {
                        for (var i = 0; i < files.length; i++) {
                            var entry = files[i];
                            var content = self.parseSource(entry);
                            var file = new Retool.FileSystem.File(entry.name, content);
                            volume.addFile(file);
                        }
                    }
                    Retool.Server.baseApplication.merge(volume);
                    var response = self.volumeToResponse(volume);
                    async.resume(response);
                });
            };
            Src.prototype.getVolume = function (context, async) {
                var adapter = context.app.getProjectAdapter(context);
                var self = this;
                adapter.getAll(context, function (err, files) {
                    if (err) {
                        async.error(err);
                        return;
                    }
                    var volume = new Retool.FileSystem.Volume("get", { useFolders: false });
                    if (files) {
                        for (var i = 0; i < files.length; i++) {
                            var entry = files[i];
                            var content = self.parseSource(entry);
                            var file = new Retool.FileSystem.File(entry.name, content);
                            volume.addFile(file);
                        }
                    }
                    async.resume(volume);
                });
            };
            Src.prototype.parseSource = function (entry) {
                var fileType = Retool.FileSystem.FilePath.getType(entry.name);
                var name = Retool.FileSystem.FilePath.getName(entry.name);
                switch (fileType) {
                    case 0 /* Template */: return this._templateParser.parse(name, entry.content);
                    case 8 /* Component */: return this._componentParser.parse(name, entry.content);
                    case 2 /* Controller */: return this._controllerParser.parse(name, entry.content);
                    case 1 /* Model */: return this._modelParser.parse(name, entry.content);
                }
                return entry.content;
            };
            Src.prototype.volumeToResponse = function (volume) {
                var out = [];
                var files = volume.files;
                for (var key in files) {
                    var file = files[key];
                    out.push({ name: file.getFullName(), content: file.getContent() });
                }
                return out;
            };
            Src.prototype.loadVolume = function (context, volume, adapter, async) {
                var self = this;
                var trimData = false;
                adapter.getAll(context, function (err, files) {
                    if (err) {
                        async.error(err);
                        return;
                    }
                    volume.removeAll();
                    var n = 0;
                    if (files) {
                        for (var i = 0; i < files.length; i++) {
                            var entry = files[i];
                            // todo: parse content
                            var content = entry.content;
                            var file = new Retool.FileSystem.File(entry.name, content);
                            volume.addFile(file);
                        }
                        n = files.length;
                    }
                    async.resume(n);
                });
            };
            Src.prototype.vm_save = function (params) {
                var context = params.proc.context;
                if (!context.app.canWrite(context)) {
                    throw new VM.VMError("Project is read-only");
                }
                var args = params.getArgs("name", "content");
                var filename = args.name;
                if (!filename) {
                    throw new VM.VMError("invalid file name");
                }
                var content = args.content;
                var adapter = context.app.getProjectAdapter(context);
                var async = params.proc.pause();
                var self = this;
                var callback = Retool.makeAsync(function (err, result) {
                    if (err) {
                        async.error(err);
                        return;
                    }
                    context.app.clear();
                    async.resume("1 file saved.");
                    return;
                });
                var serialized = this.serializeContent(filename, content);
                adapter.save(context, filename, serialized, callback);
            };
            Src.prototype.serializeContent = function (filename, content) {
                var fileType = Retool.FileSystem.FilePath.getType(filename);
                switch (fileType) {
                    case 0 /* Template */: return this._templateSerializer.serialize(content);
                    case 2 /* Controller */: return this._controllerSerializer.serialize(content);
                    case 1 /* Model */: return this._modelSerializer.serialize(content);
                    case 8 /* Component */: return this._componentSerializer.serialize(content);
                }
                if (content) {
                    return content.toString();
                }
                return "";
            };
            Src.prototype.vm_destroy = function (params) {
                var async = params.proc.pause();
                var context = params.proc.context;
                if (!context.app.canWrite(context)) {
                    throw new VM.VMError("Project is read-only");
                }
                var args = params.getArgs("name");
                var filename = args.name;
                if (!filename) {
                    throw new VM.VMError("invalid file name");
                }
                context.app.clear();
                var adapter = context.app.getProjectAdapter(context);
                adapter.remove(context, filename, async);
            };
            Src.prototype.updateCaches = function (context, filename, done) {
                var app = context.app;
                var fileType = Retool.FileSystem.FilePath.getType(filename);
                if (fileType == 1 /* Model */ || fileType == 2 /* Controller */) {
                    app.volume.dumpCache();
                    app.load(app.volume);
                }
                done();
            };
            Src.prototype.vm_buildClientApp = function (params) {
                var runtime = require("./retool-runtime.js");
                var app = runtime({ runningOnServer: true, project: [] });
                var helperLocator = app.runtime.helpers;
                var entries = params.getIndex(0);
                var out = [];
                var logger = new Retool.ErrorLogger();
                for (var i = 0; i < entries.length; i++) {
                    var entry = entries[i];
                    var fileType = Retool.FileSystem.FilePath.getType(entry.name);
                    if (fileType == 0 /* Template */) {
                        var outFile = new Retool.FileSystem.File(entry.name, entry.content);
                        var template = Retool.IDE.TemplateCompiler.compile(null, outFile, helperLocator, logger);
                        template.file = undefined;
                        template.definition.source_code = undefined;
                        out.push({ name: entry.name, content: null, compiledContent: template, compiledPrototype: outFile.compiledPrototype });
                    }
                    else if (fileType == 1 /* Model */ || fileType == 2 /* Controller */) {
                        var content = entry.content;
                        content.source_code = undefined;
                        out.push(entry);
                    }
                    else {
                        out.push(entry);
                    }
                }
                return out;
            };
            return Src;
        })(VM.ObjectBase);
        VM.Src = Src;
        VM.addType("Src", null, new Src());
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var Encryption = (function (_super) {
            __extends(Encryption, _super);
            function Encryption() {
                _super.call(this, null);
            }
            Encryption.prototype.vm_hash = function (params) {
                var bcrypt = require("bcrypt-nodejs");
                return bcrypt.hashSync(params.args[0]);
            };
            Encryption.prototype.vm_compare = function (params) {
                var bcrypt = require("bcrypt-nodejs");
                return bcrypt.compareSync(params.args[0], params.args[1]);
            };
            Encryption.prototype.vm_md5 = function (params) {
                var crypto = require("crypto");
                var hash = crypto.createHash("md5");
                var value = params.args[0];
                if (value) {
                    hash.update(params.args[0]);
                    return hash.digest("hex");
                }
                else {
                    return null;
                }
            };
            return Encryption;
        })(VM.ObjectBase);
        VM.Encryption = Encryption;
        VM.addType("Encryption", null, new Encryption());
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var Session = (function (_super) {
            __extends(Session, _super);
            function Session() {
                _super.call(this, null);
                // this.req = req;
            }
            Session.prototype.hasRole = function (role) {
                return true;
            };
            return Session;
        })(VM.ObjectBase);
        VM.Session = Session;
        VM.addType("Session", null, new Session());
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var Http = (function (_super) {
            __extends(Http, _super);
            function Http() {
                _super.call(this, null);
            }
            Http.prototype.vm_post = function (params) {
                var arg = params.getIndex(0);
                var async = params.proc.pause();
                Http.doMethod("POST", arg, async, params.proc.context.log);
                /*
                var request = require('request');
                var arg = params.getIndex(0);
                var headers:any = arg.headers || {};
    
    
                var options:any = {
                    url: arg.url,
                    method:"POST",
                    rejectUnauthorized:false,
                    headers: headers
                };
                if (arg.body){
                    options.body = JSON.stringify(arg.body);
                }
                var async = params.proc.pause();
                request(options, function(error,response,body){
                    try {
                        if (!error && response.statusCode == 200) {
                            var info = JSON.parse(body);
                            async.resume(info);
                        }
                        else {
                            async.exception(error);
                        }
                    }
                    catch(e){
                        async.exception(e);
                    }
                });*/
            };
            Http.prototype.vm_get = function (params) {
                var arg = params.getIndex(0);
                var async = params.proc.pause();
                Http.doMethod("GET", arg, async, params.proc.context.log);
            };
            Http.doMethod = function (method, arg, async, log) {
                var request = require('request');
                var options = {
                    url: arg.url,
                    method: method,
                    rejectUnauthorized: false,
                    agent: Retool.Server.keepAliveAgent,
                    headers: {
                        'User-Agent': 'request',
                        'Connection': 'keep-alive'
                    }
                };
                if (arg.headers) {
                    for (var headerKey in arg.headers) {
                        options.headers[headerKey] = arg.headers[headerKey];
                    }
                }
                if (!arg.asFormData) {
                    options.headers['Content-Type'] = 'application/json';
                    if (arg.body) {
                        options.body = JSON.stringify(arg.body);
                    }
                }
                else {
                    options.form = arg.body;
                }
                var logEntry;
                var start;
                if (log) {
                    logEntry = log.add(options.method, options.url);
                    logEntry.headers = options.headers;
                    logEntry.body = options.body;
                    start = new Date();
                }
                var req = request(options, function (error, response, body) {
                    if (logEntry) {
                        var now = new Date();
                        logEntry.time = now - start;
                        logEntry.response = {
                            body: body
                        };
                        if (response) {
                            logEntry.response.statusCode = response.statusCode;
                            logEntry.response.headers = response.headers;
                        }
                        logEntry.error = error;
                    }
                    try {
                        if (!error && response.statusCode >= 200 && response.statusCode <= 299) {
                            var info;
                            if (body) {
                                info = JSON.parse(body);
                            }
                            async.resume(info);
                        }
                        else {
                            if (!error) {
                                try {
                                    error = JSON.parse(body);
                                }
                                catch (e) {
                                }
                                if (!error) {
                                    error = body;
                                }
                                if (!error) {
                                    error = "Http Status: " + response.statusCode + " on " + arg.url;
                                }
                            }
                            async.error(error);
                        }
                    }
                    catch (e) {
                        async.error(e);
                    }
                });
                /*
                if (arg.asFormData){
                    var reqForm = req.form();
                    reqForm.append("myfield","myvalue");
                }
                */
            };
            return Http;
        })(VM.ObjectBase);
        VM.Http = Http;
        VM.addType("Http", null, new Http());
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var File = (function (_super) {
            __extends(File, _super);
            function File() {
                _super.call(this, null);
            }
            File.prototype.vm_read = function (params) {
                var fs = require('fs');
                var filename = params.args[0];
                return fs.readFileSync(filename, 'utf8');
            };
            File.prototype.vm_write = function (params) {
                var fs = require('fs');
                var filename = params.args[0];
                var content = params.args[1];
                fs.writeFileSync(filename, content);
            };
            return File;
        })(VM.ObjectBase);
        VM.File = File;
        VM.addType("File", null, new File());
        var Path = (function (_super) {
            __extends(Path, _super);
            function Path() {
                _super.call(this, null);
            }
            Path.prototype.vm_join = function (params) {
                var path = require('path');
                return path.join.apply(path, params.args);
            };
            return Path;
        })(VM.ObjectBase);
        VM.Path = Path;
        VM.addType("Path", null, new Path());
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var Global = (function (_super) {
            __extends(Global, _super);
            function Global() {
                _super.apply(this, arguments);
            }
            Global.prototype.vm_isObject = function (params) {
                var x = params.args[0];
                return typeof x === "object" && x !== null;
            };
            Global.prototype.vm_isArray = function (params) {
                var x = params.args[0];
                return Array.isArray(x);
            };
            return Global;
        })(VM.ObjectBase);
        VM.Global = Global;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var DB = (function (_super) {
            __extends(DB, _super);
            function DB() {
                _super.apply(this, arguments);
            }
            DB.prototype.vm_beginTransaction = function (params) {
                var proc = params.proc;
                if (proc.connection && proc.connection.transactionLevel) {
                    proc.connection.transactionLevel++;
                    return;
                }
                var context = proc.context;
                var provider = null; // ?????
                var db = null; // ??????
                var async = proc.pause();
                provider.beginTransaction(context, db, function (err, connection) {
                    if (err) {
                        async.error(err);
                        return;
                    }
                    proc.connection = connection;
                    async.resume(connection);
                });
            };
            DB.prototype.vm_commit = function (params) {
                var proc = params.proc;
                var context = proc.context;
                if (proc.connection) {
                    var async = proc.pause();
                    proc.connection.commit(context, function (err) {
                        if (err) {
                            async.error(err);
                            return;
                        }
                        async.resume(true);
                    });
                }
                return;
            };
            return DB;
        })(VM.ObjectBase);
        VM.DB = DB;
        VM.addType("DB", null, new DB(null));
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var StormpathAuth = (function (_super) {
            __extends(StormpathAuth, _super);
            function StormpathAuth() {
                _super.call(this, null);
            }
            StormpathAuth.prototype.init = function (done) {
                var stormpath = require('stormpath');
                var apiKey = new stormpath.ApiKey(process.env.STORMPATH_API_KEY_ID, process.env.STORMPATH_API_KEY_SECRET);
                this.stormpath = new stormpath.Client({ apiKey: apiKey });
                var self = this;
                var href = "https://api.stormpath.com/v1/applications/3gr0PEBZc4jlFY4dJ421UD";
                this.stormpath.getApplication(href, function (err, app) {
                    self.stormpathApplication = app;
                    done(null, null);
                });
            };
            StormpathAuth.prototype.vm_authenticateAccount = function (params) {
                var async = params.proc.pause();
                var args = params.getArgs("info");
                this.stormpathApplication.authenticateAccount(args.info, function (err, result) {
                    if (err) {
                        async.error(err);
                    }
                    else {
                        result.getAccount(function (err, account) {
                            if (err) {
                                async.error(err);
                            }
                            else {
                                account.getGroups(function (err, groups) {
                                    if (err) {
                                        async.error(err);
                                        return;
                                    }
                                    async.resume({ account: account, groups: groups });
                                });
                            }
                        });
                    }
                });
            };
            StormpathAuth.prototype.vm_groupExists = function (params) {
                var async = params.proc.pause();
                var args = params.getArgs("group");
                this.stormpathApplication.getGroups({ name: args.group, limit: 1 }, function (err, groups) {
                    if (err) {
                        async.error(err);
                    }
                    else {
                        var exists = (groups.items.length > 0);
                        async.resume(exists);
                    }
                });
            };
            StormpathAuth.prototype.vm_sendPasswordReset = function (params) {
                var async = params.proc.pause();
                var args = params.getArgs("email");
                this.stormpathApplication.sendPasswordResetEmail(args.email, function (err, token) {
                    if (err) {
                        async.error(err);
                    }
                    else {
                        async.resume("ok");
                    }
                });
            };
            StormpathAuth.prototype.vm_resetPassword = function (params) {
                var async = params.proc.pause();
                var args = params.getArgs("options");
                var options = args.options;
                var token = options.token;
                var password = options.password;
                this.stormpathApplication.resetPassword(token, password, function (err, account) {
                    if (err) {
                        async.error(err);
                    }
                    else {
                        async.resume("ok");
                    }
                });
            };
            StormpathAuth.prototype.vm_saveAccount = function (params) {
                var async = params.proc.pause();
                var args = params.getArgs("account");
                var account = args.account;
                account.save(function (err, result) {
                    if (err) {
                        async.error(err);
                    }
                    else {
                        async.resume(result);
                    }
                });
            };
            StormpathAuth.prototype.vm_createAccount = function (params) {
                var async = params.proc.pause();
                var args = params.getArgs("account");
                this.stormpathApplication.createAccount(args.account, function (err, createdAccount) {
                    if (err) {
                        async.error(err);
                    }
                    else {
                        async.resume(createdAccount);
                    }
                });
            };
            StormpathAuth.prototype.vm_createGroup = function (params) {
                var async = params.proc.pause();
                var args = params.getArgs("group");
                this.stormpathApplication.createGroup(args.group, function (err, createdGroup) {
                    if (err) {
                        async.error(err);
                    }
                    else {
                        async.resume(createdGroup);
                    }
                });
            };
            StormpathAuth.prototype.vm_addToGroup = function (params) {
                var async = params.proc.pause();
                var args = params.getArgs("info");
                var account = args.info.account;
                account.addToGroup(args.info.group, function (err, membership) {
                    if (err) {
                        async.error(err);
                    }
                    else {
                        async.resume(membership);
                    }
                });
            };
            return StormpathAuth;
        })(VM.ObjectBase);
        VM.StormpathAuth = StormpathAuth;
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var VM;
    (function (VM) {
        var Auth = (function (_super) {
            __extends(Auth, _super);
            function Auth() {
                _super.call(this, null);
                /* !!! this only needs to be exposed to the Authentication/Login app, not to all applications, check an environment variable? */
                this.authUrl = "https://auth-retool.herokuapp.com";
            }
            Auth.prototype.init = function (done) {
            };
            Auth.prototype.vm_signin = function (params) {
                var async = params.proc.pause();
                var email = params.get("email");
                var password = params.get("password");
                var arg = this.createRequest("auth");
                ;
                var context = params.proc.context;
                arg.body = { email: email, password: password };
                var currentSessionId = (context.session) ? context.session.id : "";
                arg.url = "https://dsp-retool.cloud.dreamfactory.com/rest/user/session";
                arg.headers = {
                    "X-DreamFactory-Application-Name": "CRM",
                    "X-DreamFactory-Session-Token": currentSessionId
                };
                async.onerror(function (err) {
                    err = new Retool.ValidationError("Invalid email or password");
                    async.error(err);
                });
                async.then(function (result) {
                    var profile = result.profile;
                    /*
                    var userDd = profile.user_id;
                    var accountId = profile.account_id;
                    */
                    var userId = result.id;
                    var accountId = "guest";
                    var token = result.session_id;
                    Retool.Server.sessionManager.create({ userId: userId, accountId: accountId, token: token }, function (err, session) {
                        if (err) {
                            async.error(err);
                            return;
                        }
                        context.responseHeaders["X-Retool-Auth-Token"] = session.id;
                        async.resume(session);
                    });
                });
                if (context.session && context.session.id) {
                    // destroy the existing session
                    context.responseHeaders["X-Retool-Auth-Token"] = "destroy";
                    Retool.Server.sessionManager.destroy(context.session.id, function (err) {
                        // ignore error
                    });
                }
                VM.Http.doMethod("POST", arg, async, params.proc.context.log);
            };
            Auth.prototype.vm_signup = function (params) {
                var async = params.proc.pause();
                var email = params.get("email");
                var password = params.get("password");
                var firstName = params.get("firstName");
                var lastName = params.get("lastName");
                var arg = this.createRequest("signup");
                arg.body = { email: email, password: password, first_name: firstName, last_name: lastName };
                async.onerror(function (err) {
                    async.error(err);
                });
                async.then(function (result) {
                    async.resume(result);
                });
                VM.Http.doMethod("POST", arg, async, params.proc.context.log);
            };
            Auth.prototype.vm_getResetToken = function (params) {
                var async = params.proc.pause();
                var email = params.get("email");
                var arg = this.createRequest("getresettoken");
                arg.body = { email: email };
                async.onerror(function (err) {
                    async.error(err);
                });
                async.then(function (result) {
                    async.resume(result);
                });
                VM.Http.doMethod("POST", arg, async, params.proc.context.log);
            };
            Auth.prototype.vm_updatePassword = function (params) {
                var async = params.proc.pause();
                var email = params.get("email");
                var password = params.get("password");
                var token = params.get("token");
                var arg = this.createRequest("updatepassword");
                arg.body = { email: email, password: password, token: token };
                async.onerror(function (err) {
                    async.error(err);
                });
                async.then(function (result) {
                    async.resume(result);
                });
                VM.Http.doMethod("POST", arg, async, params.proc.context.log);
            };
            Auth.prototype.vm_verifyAccount = function (params) {
                var async = params.proc.pause();
                var email = params.get("email");
                var token = params.get("token");
                var arg = this.createRequest("verifyaccount");
                arg.body = { email: email, token: token };
                async.onerror(function (err) {
                    async.error(err);
                });
                async.then(function (result) {
                    async.resume(result);
                });
                VM.Http.doMethod("POST", arg, async, params.proc.context.log);
            };
            Auth.prototype.createRequest = function (path) {
                var headers = {};
                headers["X-RT-AKY"] = process.env.RETOOL_AUTH;
                return { url: this.authUrl + "/" + path, headers: headers };
            };
            return Auth;
        })(VM.ObjectBase);
        VM.Auth = Auth;
        VM.addType("Auth", null, new Auth());
    })(VM = Retool.VM || (Retool.VM = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SystemModels;
    (function (SystemModels) {
        var Account = (function (_super) {
            __extends(Account, _super);
            function Account() {
                _super.apply(this, arguments);
            }
            Account.prototype.define = function (schema) {
                schema.init("Admin.Account", { db_table: "admin_accounts", label: "Account" });
                schema.setSource(RetoolVMCode.SystemModels.Account);
                schema.addField("id", { type: "objectid", label: "Id" });
                schema.addField("name", { type: "string", size: 80, label: "Name" });
            };
            return Account;
        })(Retool.ObjectModel);
        SystemModels.Account = Account;
    })(SystemModels = Retool.SystemModels || (Retool.SystemModels = {}));
})(Retool || (Retool = {}));
var RetoolVMCode;
(function (RetoolVMCode) {
    var SystemModels;
    (function (SystemModels) {
        function Account(auth) {
            function actions() {
                return RetoolVMCode.Actions.crud().add("signup");
            }
            function signup(args) {
                var newAccount = this.auth.createAccount({ givenName: args.firstName, surname: args.lastName, username: args.email, email: args.email, password: args.password });
                var newGroup = this.auth.createGroup({ name: "org_" + args.domain });
                this.auth.addToGroup({ account: newAccount, group: newGroup });
            }
        }
        SystemModels.Account = Account;
    })(SystemModels = RetoolVMCode.SystemModels || (RetoolVMCode.SystemModels = {}));
})(RetoolVMCode || (RetoolVMCode = {}));
var Retool;
(function (Retool) {
    var SystemModels;
    (function (SystemModels) {
        var User = (function (_super) {
            __extends(User, _super);
            function User() {
                _super.apply(this, arguments);
            }
            User.prototype.define = function (schema) {
                schema.init("System.User", { exposed: false, db_table: "users", label: "User" });
                schema.addField("id", { type: "string", label: "Id" });
                schema.addField("email", { type: "email", size: 60, label: "Email" });
            };
            User.prototype.vm = function () {
            };
            return User;
        })(Retool.Orchestrate.Model);
        SystemModels.User = User;
        Retool.Server.addSystemModel(User);
    })(SystemModels = Retool.SystemModels || (Retool.SystemModels = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SystemModels;
    (function (SystemModels) {
        var ProjectFiles = (function (_super) {
            __extends(ProjectFiles, _super);
            function ProjectFiles() {
                _super.apply(this, arguments);
            }
            ProjectFiles.prototype.define = function (schema) {
                schema.init("ProjectFiles", { db_table: "project_files", exposed: true, label: "Project Files", crossTenant: true });
                schema.addField("id", { type: "objectid", label: "Id" });
                schema.addField("name", { type: "string", size: 128, label: "Name" });
                schema.addField("content", { type: "text", label: "Content" });
                schema.addIndex("name", { unique: true, keys: "name" });
            };
            ProjectFiles.prototype.vm__hello = function (params) {
                return "Hello from ProjectFiles";
            };
            ProjectFiles.prototype.vm__upload_asset = function (params) {
                var context = params.proc.context;
                if (!context.app.canWrite(context)) {
                    throw new Retool.VM.VMError("Project is read-only");
                }
                var bucketPath = context.app.getBucketPath(context);
                var filename = bucketPath + "/" + params.get("name");
                var body = params.get("body");
                var AWS = Retool.BatchRunner.getAWS();
                // Create a bucket using bound parameters and put something in it.
                // Make sure to change the bucket name from "myBucket" to something unique.
                var ext = Retool.FileSystem.PathInfo.getExtension(filename);
                var contentType = "binary/octet-stream";
                if (ext == "css" || ext == "less") {
                    contentType = "text/css";
                }
                else if (ext == "js") {
                    contentType == "application.javascript";
                }
                var self = this;
                var async = params.proc.pause();
                var s3bucket = new AWS.S3({ params: { Bucket: 'retool-hosted-assets', ContentType: contentType } });
                s3bucket.createBucket(function () {
                    var data = { Key: filename, Body: body };
                    s3bucket.putObject(data, function (err, data) {
                        if (err) {
                            async.error(Retool.VM.VMError.cast(err));
                        }
                        else {
                            async.resume("ok");
                        }
                    });
                });
            };
            ProjectFiles.prototype.vm__s3Put = function (params) {
                var async = params.proc.pause();
                var AWS = Retool.BatchRunner.getAWS();
                var arg = params.args[0];
                var context = params.proc.context;
                if (!context.app.canWrite(context)) {
                    throw new Retool.VM.VMError("Project is read-only");
                }
                var bucketPath = context.app.getBucketPath(context);
                var filename = bucketPath + "/" + arg.key;
                var body = arg.body;
                var s3bucket = new AWS.S3({ params: { Bucket: 'retool-hosted-assets', ContentType: "application/javascript" } });
                var data = { Key: filename, Body: body };
                s3bucket.putObject(data, function (err, data) {
                    if (err) {
                        async.error(err);
                    }
                    else {
                        async.resume("file saved to s3");
                    }
                });
            };
            ProjectFiles.prototype.vm__s3Get = function (params) {
                var async = params.proc.pause();
                var AWS = Retool.BatchRunner.getAWS();
                var arg = params.args[0];
                var context = params.proc.context;
                var bucketPath = context.app.getBucketPath(context);
                var filename = bucketPath + "/" + arg.key;
                var s3bucket = new AWS.S3({ params: { Bucket: 'retool-hosted-assets', ContentType: "application/javascript" } });
                var data = { Key: filename };
                s3bucket.getObject(data, function (err, data) {
                    if (err) {
                        async.error(err);
                    }
                    else {
                        async.resume(data);
                    }
                });
            };
            ProjectFiles.prototype.vm__buildProject = function (params) {
                var entries = params.getIndex(0);
                var compiler = new Retool.Srv.Compilers.ProjectCompiler();
                var async = params.proc.pause();
                compiler.compile(entries, function (err, result) {
                    if (err) {
                        async.error(err);
                        return;
                    }
                    async.resume(result);
                });
            };
            ProjectFiles.prototype.vm__ensureProject = function (params) {
                /*
                if (!params.proc.context.projectId){
                    throw "Invalid project name";
                }
                */
            };
            ProjectFiles.prototype.vm__session_status = function (params) {
                var context = params.proc.context;
                var session = context.session;
                var out = {};
                if (session) {
                    out = { accountId: session.accountId, avatar_url: session.avatar_url };
                }
                var path = require('path');
                var user = require(path.join(Retool.Server.ghostPath, "core", "server", "api", "users"));
                var async = params.proc.pause();
                var userId = params.proc.context.session.userId;
                user.read({ id: "me", context: { user: userId } }).then(function (data) {
                    out.me = data;
                    out.theme = Retool.Server.themeDescription;
                    async.resume(out);
                }).catch(function (err) {
                    async.error(err);
                });
                return out;
            };
            ProjectFiles.prototype.vm__copy_base = function (params) {
                var copier = new Retool.ProjectCopier();
                var dest = params.proc.context;
                var source = new Retool.Context();
                var sourceName = params.getIndex(0);
                source.app = new Retool.SystemProject(sourceName);
                if (!sourceName) {
                    throw new Retool.VM.VMError("copy base requires a name");
                }
                var async = params.proc.pause();
                copier.copy(source, dest, {}, function (err, result) {
                    if (err) {
                        async.error(err);
                    }
                    else {
                        var count = 0;
                        if (result) {
                            count = result.length;
                        }
                        async.resume(count + " files copied.");
                    }
                });
            };
            ProjectFiles.prototype.vm = function (File, Path, Src, Actions) {
                function list() {
                    this._ensureProject();
                    return Src.getAllFiles();
                }
                function update(name, content) {
                    // requires login
                    this._ensureProject();
                    return Src.save(name, content);
                }
                function create(name, content) {
                    // requires login
                    this._ensureProject();
                    return Src.save(name, content);
                }
                function destroy(name) {
                    // requires login
                    this._ensureProject();
                    return Src.destroy(name);
                }
                function generate(name) {
                    this._ensureProject();
                    return Src.generate(name);
                }
                function session_status() {
                    return this._session_status();
                }
                function get_build(name) {
                    this._ensureProject();
                    var key = "builds/" + name;
                    var body = this._s3Get({ key: key }).Body.toString();
                    return JSON.parse(body);
                }
                function upload_asset(params) {
                    this._ensureProject();
                    return this._upload_asset(params);
                }
                function copy_base(name) {
                    return this._copy_base(name);
                }
                function build() {
                    this._ensureProject();
                    // requires login
                    var files = Src.getAllFiles();
                    var serverPath = Path.join(".", "app.server-side.json");
                    //File.write(serverPath,JSON.stringify(files));
                    var clientPath = Path.join(".", "app.client-side.js");
                    var clientApp = this._buildProject(files);
                    File.write(clientPath, "ClientApp=" + JSON.stringify(clientApp) + ";");
                    // this._s3Put({key:"builds/preview.client-side.js",body:JSON.stringify(clientApp)});
                    return "build ok";
                }
                function getCompiled() {
                    var files = Src.getAllFiles();
                    var compiledProject = this._buildProject(files);
                    return compiledProject;
                }
            };
            return ProjectFiles;
        })(Retool.ObjectModel);
        SystemModels.ProjectFiles = ProjectFiles;
        Retool.Server.addSystemModel(ProjectFiles);
    })(SystemModels = Retool.SystemModels || (Retool.SystemModels = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SystemModels;
    (function (SystemModels) {
        var AppAccount = (function (_super) {
            __extends(AppAccount, _super);
            function AppAccount() {
                _super.apply(this, arguments);
            }
            AppAccount.prototype.define = function (schema) {
                schema.init("App.Account", {});
                schema.setSource(RetoolVMCode.SystemModels.AppAccount);
            };
            return AppAccount;
        })(Retool.ObjectModel);
        SystemModels.AppAccount = AppAccount;
    })(SystemModels = Retool.SystemModels || (Retool.SystemModels = {}));
})(Retool || (Retool = {}));
var RetoolVMCode;
(function (RetoolVMCode) {
    var SystemModels;
    (function (SystemModels) {
        function AppAccount(File, Path, auth) {
            function actions() {
                return RetoolVMCode.Actions.add("signup");
            }
            function signup(args) {
                var newAccount = auth.createAccount({ givenName: args.firstName, surname: args.lastName, username: args.email, email: args.email, password: args.password });
                var newGroup = auth.createGroup({ name: "org_" + args.domain });
                auth.addToGroup({ account: newAccount, group: newGroup });
            }
        }
        SystemModels.AppAccount = AppAccount;
    })(SystemModels = RetoolVMCode.SystemModels || (RetoolVMCode.SystemModels = {}));
})(RetoolVMCode || (RetoolVMCode = {}));
var Retool;
(function (Retool) {
    var Public = (function (_super) {
        __extends(Public, _super);
        function Public() {
            _super.apply(this, arguments);
        }
        Public.prototype.define = function (schema) {
            schema.init("Public", { exposed: true, type: "endpoint" });
        };
        Public.prototype.vm__signout = function (params) {
            var async = params.proc.pause();
            var id = params.proc.context.session.id;
            Retool.Server.sessionManager.destroy(id, function (err, result) {
                async.resume(result);
            });
        };
        Public.prototype.vm__signup = function (params) {
            var domain = params.get("domain") + "-app";
            var self = this;
            Retool.UserApps.UserAppCreator.create(domain, function (err, result) {
                if (err) {
                    throw Retool.VM.VMError.cast(err);
                }
                else {
                    return { redirect: "https://" + domain + "." + Retool.Server.hostName + "/ide" };
                }
            });
        };
        Public.prototype.vm__getToken = function (params) {
            var code = params.get("code");
            console.log("Checking oauth code: " + code);
            var oauth = require("oauth").OAuth2;
            var GITHUB_CLIENT_ID = process.env.GITHUB_CLIENT_ID;
            var GITHUB_CLIENT_SECRET = process.env.GITHUB_CLIENT_SECRET;
            var OAuth2 = new oauth(GITHUB_CLIENT_ID, GITHUB_CLIENT_SECRET, "https://github.com/", "login/oauth/authorize", "login/oauth/access_token");
            var async = params.proc.pause();
            console.log("OAuth created: " + code);
            OAuth2.getOAuthAccessToken(code, { 'grant_type': 'client_credentials' }, function (err, access_token, refresh_token) {
                console.log("OAuth result err: " + err + "  access_token:" + access_token + " refresh_token:" + refresh_token);
                if (err) {
                    async.error(Retool.VM.VMError.cast(err));
                    return;
                }
                var accessToken = access_token;
                console.log("AccessToken: " + accessToken + "\n");
                var request = require('request');
                var options = {
                    url: "https://api.github.com/user",
                    headers: {
                        'Authorization': "token " + accessToken,
                        'Accept': "application/json",
                        'User-Agent': "retool-io-app"
                    }
                };
                request(options, function (error, response, body) {
                    if (error || response.statusCode != 200) {
                        async.error(Retool.VM.VMError.cast(error));
                        return;
                    }
                    try {
                        body = JSON.parse(body);
                    }
                    catch (e) {
                        async.resume("Unable to parse github account info");
                        return;
                    }
                    async.resume(body);
                });
            });
        };
        Public.prototype.vm__signin = function (params, email, password) {
            var async = params.pause();
            //var email = params.getIndex(0);
            // var password = params.getIndex(1);
            Retool.RetoolAuthSessionStore.signin(email, password, function (err, res) {
                if (err) {
                    async.error(err);
                    return;
                }
                async.resume(res);
            });
        };
        Public.prototype.vm__startSession = function (params) {
            var arg = { username: params.get("login"), avatar_url: params.get("avatar_url") };
            // params.proc.context.signin(arg);
        };
        Public.prototype.vm = function (System) {
            function signin(email, password) {
                return this._signin(email, password);
            }
            function signout() {
                return this._signout();
            }
            function signup(params) {
                return this._signup(params);
            }
        };
        return Public;
    })(Retool.ObjectModel);
    Retool.Public = Public;
    Retool.Server.addSystemModel(Public);
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var SystemModels;
    (function (SystemModels) {
        var Project = (function (_super) {
            __extends(Project, _super);
            function Project() {
                _super.apply(this, arguments);
            }
            Project.prototype.define = function (schema) {
                schema.init("System.Project", { exposed: false, db_table: "projects", label: "Project" });
                schema.addField("id", { type: "string", label: "Id" });
                schema.addField("name", { type: "string", label: "Name" });
                schema.addField("owner", { type: "string", size: 60, label: "Owner" });
            };
            Project.prototype.vm__getAccount = function (params) {
                return params.proc.context.accountId;
            };
            Project.prototype.vm = function (System) {
                function getAllForCurrentAccount() {
                    var account = this._getAccount();
                    var projects = this.startKey(account + "/").endKey(account + "/~").get();
                    return projects;
                }
            };
            return Project;
        })(Retool.Orchestrate.Model);
        SystemModels.Project = Project;
        Retool.Server.addSystemModel(Project);
        var Projects = (function (_super) {
            __extends(Projects, _super);
            function Projects() {
                _super.apply(this, arguments);
            }
            Projects.prototype.define = function (schema) {
                schema.init("System.Projects", { exposed: true });
            };
            Projects.prototype.vm__getAccount = function (params) {
                return params.proc.context.accountId;
            };
            Projects.prototype.vm = function (System) {
                function query(params) {
                    return System.Project.getAllForCurrentAccount();
                }
                function create(body) {
                    if (!body.name) {
                        throw "Invalid project name";
                    }
                    body.id = this._getAccount() + "/" + body.name;
                    body.owner = this._getAccount();
                    var project = System.Project.create(body);
                    return project;
                }
                function destroy(id) {
                    id = this._getAccount() + "/" + id;
                    return System.Project.destroy(id);
                }
            };
            return Projects;
        })(Retool.ObjectModel);
        SystemModels.Projects = Projects;
        Retool.Server.addSystemModel(Projects);
    })(SystemModels = Retool.SystemModels || (Retool.SystemModels = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ServerRendering;
    (function (ServerRendering) {
        var Page = (function () {
            function Page() {
                this.cache = false;
                this.Runtime = require("./retool-runtime.js");
            }
            Page.prototype.render = function (href, callback) {
                var self = this;
                if (this.cache && this.app) {
                    return self.renderTemplate(href, callback);
                }
                this.init(function () {
                    self.renderTemplate(href, callback);
                });
            };
            Page.prototype.init = function (done) {
                var src = new Retool.VM.Src();
                var context = new Retool.Context();
                context.app = new Retool.SystemProject("");
                var self = this;
                var async = Retool.makeAsync(function (err, files) {
                    if (err) {
                        done(err);
                        return;
                    }
                    var compiler = new Retool.Srv.Compilers.ProjectCompiler();
                    compiler.compile(files, function (err, result) {
                        if (err) {
                            async.error(err);
                            return;
                        }
                        var project = result;
                        self.AppGlobal = self.Runtime.start({ runningOnServer: true, project: project });
                        self.app = self.AppGlobal.currentApp;
                        self.app.sendData = function (data) {
                            self.handleClientRequest(data);
                        };
                        return done();
                    });
                });
                var files = src.getAllFiles(context, async);
            };
            Page.prototype.renderTemplate = function (href, callback) {
                var url = new this.Runtime.Url();
                url.domainName = "frontend";
                url.app = this.app;
                url.href(href);
                var canvas = new this.Runtime.ServerCanvas("m");
                canvas.app = this.app;
                canvas.url = url;
                canvas.done = callback;
                canvas.draw({ staticPageMode: true });
            };
            Page.prototype.writeHeadSection = function (w, layout) {
                w.writeTag("head");
                var stylesheets = this.getStylesheetElements(layout);
                for (var i = 0; i < stylesheets.length; i++) {
                    var sheet = stylesheets[i];
                    var href = sheet.href;
                    if (href) {
                        var segments = href.split('/');
                        var folder = segments[0];
                        if (folder == "css") {
                            href = "/assets/" + href;
                            w.writeTag("link", null, { href: href, rel: "stylesheet", type: "text/css" });
                        }
                        else {
                            var assetLink = "https://s3.amazonaws.com/retool-hosted-assets/working1/" + href;
                            w.writeTag("link", null, { href: assetLink, rel: "stylesheet", type: "text/css" });
                        }
                    }
                }
                w.write("</head>");
            };
            Page.prototype.getStylesheetElements = function (layout) {
                var list = [];
                if (layout && layout.definition && layout.definition.elements) {
                    var elements = layout.definition.elements;
                    for (var i = 0; i < elements.length; i++) {
                        if (elements[i].kind == "r-stylesheet") {
                            list.push(elements[i]);
                        }
                    }
                }
                return list;
            };
            Page.prototype.handleClientRequest = function (clientRequest) {
                var req = new ServerRendering.Request();
                var res = new ServerRendering.Response();
                // run batch
                var batch = new Retool.BatchRunner(clientRequest.data, req, res);
                res.send = function (data) {
                    console.log("res.send=", data);
                    clientRequest.success(data);
                };
                try {
                    console.log("run batch", clientRequest.data);
                    batch.run();
                }
                catch (e) {
                    console.log("batch error=", e);
                    var e = Retool.VM.VMError.cast(e);
                    clientRequest.error(e);
                }
            };
            return Page;
        })();
        ServerRendering.Page = Page;
    })(ServerRendering = Retool.ServerRendering || (Retool.ServerRendering = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var ServerRendering;
    (function (ServerRendering) {
        var Response = (function () {
            function Response() {
            }
            Response.prototype.set = function (key, value) {
            };
            Response.prototype.send = function (data) {
            };
            return Response;
        })();
        ServerRendering.Response = Response;
        var Request = (function () {
            function Request() {
                this.headers = {};
            }
            return Request;
        })();
        ServerRendering.Request = Request;
    })(ServerRendering = Retool.ServerRendering || (Retool.ServerRendering = {}));
})(Retool || (Retool = {}));
var Retool;
(function (Retool) {
    var Integrations;
    (function (Integrations) {
        var Ghost = (function () {
            function Ghost() {
            }
            Ghost.start = function () {
                var path = require('path');
                var express = require('express');
                var ghostDir = process.cwd();
                var routes = require(path.resolve(ghostDir, './core/server/routes'));
                var middleware = require(path.resolve(ghostDir, './core/server/middleware/middleware'));
                var errors = require(path.resolve(ghostDir, './core/server/errors'));
                Retool.Server.ghostPath = ghostDir;
                // inject the script onto the admin ember page that will add the Retool Apps button
                var ghostScriptTagsPath = path.resolve(ghostDir, './core/server/helpers/ghost_script_tags');
                var ghostScriptTags = require(ghostScriptTagsPath);
                require.cache[require.resolve(ghostScriptTagsPath)].exports = function () {
                    var scriptList = ghostScriptTags();
                    scriptList += ('<script src="/retool/assets/ghost-retool-admin.js"></script>');
                    return scriptList;
                };
                //
                var frontendRoutes = routes.frontend;
                var frontendRouter = express.Router();
                routes.frontend = function () {
                    frontendRouter.use(function (req, res, next) {
                        // todo: see if there is a retool frontend page that matches the url, if so render the retool-page template, data
                        var defaultApp = "crm";
                        var accountId;
                        var path = req.path;
                        if (path && path[path.length - 1] == "/") {
                            path = path.substr(0, path.length - 1);
                        }
                        if (path == "/") {
                            path == "/index";
                        }
                        // return res.send("Hello from retool");
                        var template = path.substr(0);
                        var page = Retool.Server.page;
                        return page.render(template, function (err, templateHTML) {
                            if (err) {
                                templateHTML = err;
                            }
                            res.send(templateHTML);
                        });
                        Retool.Server.getApplication(accountId, defaultApp, function (err, volume) {
                            console.log("Checking for=", path);
                            var file = volume.getFile("partials" + path + ".retool.js");
                            if (!file) {
                                return next();
                            }
                            try {
                                res.render("retool", { retoolData: { template: defaultApp + path } });
                            }
                            catch (e) {
                                console.log("catch=", e);
                                return next(e);
                            }
                        });
                    });
                    return frontendRouter;
                };
                var apiRoutes = routes.api;
                var ghostStaticTheme = middleware.staticTheme;
                var cacheBlogApp = middleware.cacheBlogApp;
                var apiAuthenticate = middleware.authenticate;
                var staticRouter = express.Router();
                staticRouter.use(function (req, res, next) {
                    if (req.path.indexOf(".retool.js") != -1) {
                        return errors.error404(req, res, next);
                    }
                    return next();
                });
                staticRouter.get('/retool/theme-download/:signature', Ghost.loadRequestGlobals(), Ghost.themeDownload(options));
                staticRouter.use('/retool/assets', express.static(__dirname + '/public'));
                staticRouter.use('/retool/assets', errors.error404);
                staticRouter.use('/retool', function (req, res) {
                    res.sendFile(path.join(__dirname, "public", "index.html"));
                });
                // add the original ghost routes
                staticRouter.use(ghostStaticTheme());
                // use the new static theme router
                middleware.staticTheme = function () {
                    return staticRouter;
                };
                // for trust proxy to work on Microsoft Azure
                middleware.cacheBlogApp = function (app) {
                    app.use(function (req, res, next) {
                        if (req.headers['x-arr-ssl'] && !req.headers['x-forwarded-proto']) {
                            req.headers['x-forwarded-proto'] = 'https';
                        }
                        return next();
                    }, Ghost.loadRequestGlobals());
                    cacheBlogApp(app);
                };
                // remove the public retool path from the authentication chain
                middleware.authenticate = function (req, res, next) {
                    var path;
                    path = req.path;
                    if (path.indexOf('/ghost/api/v0.1/retool/public/') === 0) {
                        next();
                    }
                    else {
                        apiAuthenticate(req, res, next);
                    }
                };
                var options = options || {};
                options.basedir = path.resolve(ghostDir, './content/apps');
                options.themedir = path.resolve(ghostDir, './content/themes');
                routes.api = function (middleware) {
                    var apiRouter = apiRoutes(middleware);
                    Ghost.addApiRoutes(apiRouter, options);
                    return apiRouter;
                };
                // Register the {{retool template="name"}}  helper
                var helpers = require(path.resolve(ghostDir, './core/server/routes'));
                var hbs = require('express-hbs');
                hbs.registerAsyncHelper('retool', function (options, cb) {
                    var hash = {};
                    if (options) {
                        hash = options.hash || hash;
                    }
                    var template = hash.template;
                    console.log(options);
                    if (!template && options.data.root.retoolData) {
                        template = options.data.root.retoolData.template;
                    }
                    if (template) {
                        /*
                        return ServerRendering.Page.renderTemplate(template,function(err,templateHTML){
                            if (err){
                                templateHTML = err;
                            }
                            cb(new hbs.handlebars.SafeString(templateHTML));
                        });
                        */
                        return;
                    }
                    else {
                        return cb("");
                    }
                });
                Retool.Server.initialize(options, function (err, result) {
                    if (err) {
                        console.log("err", err);
                        throw err;
                    }
                    Retool.Server.started = true;
                });
            };
            Ghost.addApiRoutes = function (apiRouter, options) {
                //var caller = require('caller');
                var bodyParser = require('body-parser');
                var index = new Retool.Index();
                apiRouter.use(bodyParser.raw({ limit: 1048576 }));
                apiRouter.use(function startup(req, res, next) {
                    if (Retool.Server.started) {
                        return next();
                    }
                    res.status(503).send("Server is starting");
                });
                //parent.use(bodyParser.raw({limit:1048576}));
                //parent.use(bodyParser.json({limit:1048576}));
                apiRouter.use('/retool/', Ghost.loadRequestGlobals());
                apiRouter.post("/retool/upload-theme", Ghost.ensureApiAuthorized(), Ghost.themeUpload(options));
                apiRouter.get("/retool/theme-download-url", Ghost.ensureApiAuthorized(), Ghost.getThemeDownloadURL(options));
                apiRouter.use("/retool/*", function (req, res) {
                    index.processRequest(req, res);
                });
            };
            Ghost.loadRequestGlobals = function () {
                return function (req, res, next) {
                    var path = require('path');
                    var ghostDir = Retool.Server.ghostPath;
                    var ghostApi = require(path.resolve(ghostDir, './core/server/api'));
                    var ghostConfig = require(path.resolve(ghostDir, './core/server/config'));
                    ghostApi.settings.read({ key: 'activeTheme', context: { internal: true } }).then(function (result) {
                        var themeName = result.settings[0].value;
                        var themePath = path.join(ghostConfig.paths.themePath, themeName);
                        var pkg = ghostConfig.paths.availableThemes[themeName]['package.json'];
                        if (pkg) {
                            Retool.Server.themeDescription = pkg.name + " " + pkg.version;
                        }
                        else {
                            Retool.Server.themeDescription = themeName;
                        }
                        console.log("themePath", themePath);
                        Retool.Server.projectFolder = themePath;
                    }).catch(function (error) {
                        console.error(error);
                    }).finally(function () {
                        next();
                    });
                };
            };
            Ghost.ensureApiAuthorized = function () {
                console.log('ensure api authorized');
                return function (req, res, next) {
                    if (!req.user || !req.user.id) {
                        console.log('error');
                        return res.status(401).json({
                            message: 'Not authorized'
                        });
                    }
                    else {
                        console.log('next');
                        return next();
                    }
                };
            };
            Ghost.generateThemeDownloadHash = function (salt, now) {
                var crypto = require('crypto');
                var md5sum = crypto.createHash('md5');
                var staticSalt = 'fad0d55a-2893-42e0-98cc-5d37a71fa8e4';
                md5sum.update(salt);
                md5sum.update(staticSalt);
                md5sum.update(now.toString());
                return md5sum.digest('hex');
            };
            Ghost.generateThemeDownloadSignature = function (salt, now) {
                console.log('hash', salt, now);
                var hash = Ghost.generateThemeDownloadHash(salt, now);
                return hash + now.toString(16);
            };
            Ghost.validateThemeDownloadSignature = function (salt, signature) {
                var time = parseInt(signature.substr(32), 16);
                var hash = signature.substr(0, 32);
                console.log('validate', salt, signature, time, hash);
                var now = (new Date()).getTime();
                if ((now - time) < 60000) {
                    var calculatedHash = Ghost.generateThemeDownloadHash(salt, time);
                    console.log(hash, time, calculatedHash);
                    if (calculatedHash === hash) {
                        return true;
                    }
                }
            };
            Ghost.themeDownload = function (options) {
                return function (req, res, next) {
                    var signature = req.params.signature;
                    if (!signature) {
                        return res.status(400).send('Unable to determine request signature');
                    }
                    else if (!Ghost.validateThemeDownloadSignature(Retool.Server.themeDescription, signature)) {
                        return res.status(400).send('Invalid request signature');
                    }
                    else {
                        var themePath = Retool.Server.projectFolder;
                        var zipstream = require('zip-stream');
                        var dir = require('node-dir');
                        var path = require('path');
                        var fs = require('fs');
                        if (themePath.indexOf(['content', 'themes'].join(path.sep)) < 0) {
                            return res.status(500).send('Problem determing theme directory');
                        }
                        else {
                            dir.files(themePath, function (err, filePaths) {
                                if (err) {
                                    return res.status(500).send('Error reading files: ' + err);
                                }
                                else {
                                    var zip = zipstream();
                                    var addfiles = function (rootDir, filePaths, done) {
                                        if (filePaths.length) {
                                            var filePath = filePaths.pop();
                                            var zipPath = rootDir + '/' + filePath.substr(themePath.length).split(path.sep).join('/');
                                            zip.entry(fs.createReadStream(filePath), { name: zipPath }, function (err) {
                                                if (err) {
                                                    done(err);
                                                }
                                                else {
                                                    addfiles(rootDir, filePaths, done);
                                                }
                                            });
                                        }
                                        else {
                                            done();
                                        }
                                    };
                                    zip.on('error', function (error) {
                                        console.error(error);
                                    });
                                    var downloadFileName = path.basename(themePath);
                                    res.set('Content-Type', 'application/zip');
                                    res.set('Content-Disposition', 'Attachment; filename="' + downloadFileName + '.zip');
                                    zip.pipe(res);
                                    zip.entry(null, { name: downloadFileName + '/' }, function (err, entry) {
                                        if (err) {
                                            console.error(err);
                                            res.end();
                                        }
                                        else {
                                            addfiles(downloadFileName, filePaths, function (err) {
                                                if (err) {
                                                    console.log(err);
                                                    res.end();
                                                }
                                                else {
                                                    zip.finish();
                                                }
                                            });
                                        }
                                    });
                                }
                            });
                        }
                    }
                };
            };
            Ghost.getThemeDownloadURL = function (options) {
                console.log('ensure api authorized');
                return function (req, res, next) {
                    var themeDescription = Retool.Server.themeDescription;
                    var now = (new Date()).getTime();
                    var url = Ghost.generateThemeDownloadSignature(themeDescription, now);
                    return res.json({
                        url: url
                    });
                };
            };
            Ghost.themeUpload = function (options) {
                return function (req, res, next) {
                    var unzip = require('unzip');
                    var BusBoy = require('busboy');
                    var fs = require('fs');
                    var path = require('path');
                    var mkdirp = require('mkdirp');
                    var ghostDir = Retool.Server.ghostPath;
                    var ghostApi = require(path.resolve(ghostDir, './core/server/api'));
                    var ghostConfig = require(path.resolve(ghostDir, './core/server/config'));
                    var requireTree = require(path.resolve(ghostDir, './core/server/require-tree')).readAll;
                    var busboy = new BusBoy({ headers: req.headers });
                    var unzipping = false;
                    req.files = req.files || {};
                    req.body = req.body || {};
                    busboy.on('file', function (fieldname, file, filename, encoding, mimetype) {
                        // If the filename is invalid, skip the stream
                        if (!filename) {
                            return file.resume();
                        }
                        /*
                        if(!req.body.theme) {
                            res.status(400).send({code: 400, message: 'theme name required'});
                        }
                        */
                        var themename = path.basename(filename, '.zip');
                        if (mimetype !== "application/x-zip-compressed" && mimetype !== "application/zip") {
                            return res.status(400).send({ code: 400, message: 'Invalid mimetype: ' + mimetype });
                        }
                        file.on('end', function () {
                            req.files[fieldname] = {
                                type: mimetype,
                                encoding: encoding,
                                name: filename
                            };
                        });
                        file.on('error', function (error) {
                            console.log('Error', 'Something went wrong uploading the file', error);
                        });
                        var filePath = path.join(__dirname, 'public', filename);
                        var unzipParser = unzip.Parse();
                        unzipParser.on('error', function (error) {
                            console.log('Error', 'Unable to extract zip: ', error);
                            res.status(500).send({ code: 500, message: 'Unable to extract zip: ' + error });
                        });
                        unzipping = true;
                        var archive = file.pipe(unzipParser);
                        archive.on('entry', function (entry) {
                            if (entry.type === "File") {
                                console.log(entry.path);
                                var pathSegments = entry.path.split('/');
                                pathSegments.shift();
                                var filePath = path.resolve(options.themedir, themename, pathSegments.join(path.sep));
                                var dir = path.dirname(filePath);
                                mkdirp(dir, function (error) {
                                    if (error) {
                                        console.log('Error', 'Error file path for ' + entry.path + ':', error);
                                        res.status(500).send({ code: 500, message: 'Error file path for ' + entry.path + ':' + error });
                                    }
                                    else {
                                        entry.pipe(fs.createWriteStream(filePath));
                                    }
                                });
                            }
                            else {
                                entry.autodrain();
                            }
                        });
                        unzipParser.on('close', function () {
                            console.log('zip closed');
                            requireTree(ghostConfig.paths.themePath).then(function (path) {
                                console.log(path);
                                ghostConfig.paths.availableThemes = path;
                            }).then(function () {
                                return ghostApi.init();
                            }).catch(function (error) {
                                console.log("error re-initializing theme paths");
                            }).finally(function () {
                                res.send({ code: 200, uploaded: true });
                            });
                            /*
                            ghostApi.settings.read({key: 'activeTheme', context: {internal: true}})
                                .then(function(result) {
                                    console.log("active theme is ", result);
                                    console.log("config is", ghostConfig.paths.availableThemes,
                                    console.log("theme path is", ghostConfig.paths.themePath));
                                });
    
                            ghostApi.init()
                                .then(function(result) {
                                    console.log(result.availableThemes.value);
                                    res.send({code: 200, uploaded: true});
                                })
                                .catch(function(error) {
                                    res.send({code: 500, message: 'Error updating settings cache:' + error});
                                })
                            */
                        });
                        /*
                        var stream = fs.createWriteStream(filePath);
    
                        stream.on('error', function (error) {
                            console.log('Error', 'Something went wrong uploading the file', error);
                        });
                        */
                    });
                    busboy.on('error', function (error) {
                        console.log('Error', 'Something went wrong parsing the form', error);
                        res.status(500).send({ code: 500, message: 'Could not parse upload completely.' });
                    });
                    busboy.on('field', function (fieldname, val) {
                        //req.body[fieldname] = val;
                    });
                    busboy.on('finish', function () {
                        console.log('busboy finished');
                        if (!unzipping) {
                            res.send({ code: 200, uploaded: true });
                        }
                    });
                    req.pipe(busboy);
                };
            };
            return Ghost;
        })();
        Integrations.Ghost = Ghost;
    })(Integrations = Retool.Integrations || (Retool.Integrations = {}));
})(Retool || (Retool = {}));
/*
  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*jslint bitwise:true plusplus:true */
/*global esprima:true, define:true, exports:true, window: true,
throwError: true, generateStatement: true, peek: true,
parseAssignmentExpression: true, parseBlock: true, parseExpression: true,
parseFunctionDeclaration: true, parseFunctionExpression: true,
parseFunctionSourceElements: true, parseVariableIdentifier: true,
parseLeftHandSideExpression: true,
parseStatement: true, parseSourceElement: true */

(function (root, factory) {
    'use strict';

    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,
    // Rhino, and plain browser loading.
    
    factory((root.esprima = {}));

}(Retool.IDE.JavascriptParser, function (exports) {
    'use strict';

    var Token,
        TokenName,
        FnExprTokens,
        Syntax,
        PropertyKind,
        Messages,
        Regex,
        SyntaxTreeDelegate,
        source,
        strict,
        index,
        lineNumber,
        lineStart,
        length,
        delegate,
        lookahead,
        state,
        extra;

    Token = {
        BooleanLiteral: 1,
        EOF: 2,
        Identifier: 3,
        Keyword: 4,
        NullLiteral: 5,
        NumericLiteral: 6,
        Punctuator: 7,
        StringLiteral: 8,
        RegularExpression: 9,
        XJSIdentifier: 11,
        XJSText: 12        
    };

    TokenName = {};
    TokenName[Token.BooleanLiteral] = 'Boolean';
    TokenName[Token.EOF] = '<end>';
    TokenName[Token.Identifier] = 'Identifier';
    TokenName[Token.Keyword] = 'Keyword';
    TokenName[Token.NullLiteral] = 'Null';
    TokenName[Token.NumericLiteral] = 'Numeric';
    TokenName[Token.Punctuator] = 'Punctuator';
    TokenName[Token.StringLiteral] = 'String';
    TokenName[Token.XJSIdentifier] = 'XJSIdentifier';
    TokenName[Token.XJSText] = 'XJSText';    
    TokenName[Token.RegularExpression] = 'RegularExpression';

    // A function following one of those tokens is an expression.
    FnExprTokens = ["(", "{", "[", "in", "typeof", "instanceof", "new",
                    "return", "case", "delete", "throw", "void",
                    // assignment operators
                    "=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=",
                    "&=", "|=", "^=", ",",
                    // binary/unary operators
                    "+", "-", "*", "/", "%", "++", "--", "<<", ">>", ">>>", "&",
                    "|", "^", "!", "~", "&&", "||", "?", ":", "===", "==", ">=",
                    "<=", "<", ">", "!=", "!=="];

    Syntax = {
        AssignmentExpression: 'AssignmentExpression',
        ArrayExpression: 'ArrayExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassDeclaration: 'ClassDeclaration',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DoWhileStatement: 'DoWhileStatement',
        DebuggerStatement: 'DebuggerStatement',
        EmptyStatement: 'EmptyStatement',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForInStatement: 'ForInStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        Program: 'Program',
        Property: 'Property',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SwitchStatement: 'SwitchStatement',
        SwitchCase: 'SwitchCase',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        HTMLExpressionStatement: 'HTMLExpressionStatement', 
        XJSIdentifier: 'XJSIdentifier',
        XJSNamespacedName: 'XJSNamespacedName',
        XJSMemberExpression: 'XJSMemberExpression',
        XJSEmptyExpression: 'XJSEmptyExpression',
        XJSExpressionContainer: 'XJSExpressionContainer',
        XJSElement: 'XJSElement',
        XJSClosingElement: 'XJSClosingElement',
        XJSOpeningElement: 'XJSOpeningElement',
        XJSAttribute: 'XJSAttribute',
        XJSSpreadAttribute: 'XJSSpreadAttribute',
        XJSText: 'XJSText',               
    };

    PropertyKind = {
        Data: 1,
        Get: 2,
        Set: 4
    };

    // Error messages should be identical to V8.
    Messages = {
        UnexpectedToken:  'Unexpected token %0',
        UnexpectedNumber:  'Unexpected number',
        UnexpectedString:  'Unexpected string',
        UnexpectedIdentifier:  'Unexpected identifier',
        UnexpectedReserved:  'Unexpected reserved word',
        UnexpectedEOS:  'Unexpected end of input',
        NewlineAfterThrow:  'Illegal newline after throw',
        InvalidRegExp: 'Invalid regular expression',
        UnterminatedRegExp:  'Invalid regular expression: missing /',
        InvalidLHSInAssignment:  'Invalid left-hand side in assignment',
        InvalidLHSInForIn:  'Invalid left-hand side in for-in',
        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
        NoCatchOrFinally:  'Missing catch or finally after try',
        UnknownLabel: 'Undefined label \'%0\'',
        Redeclaration: '%0 \'%1\' has already been declared',
        IllegalContinue: 'Illegal continue statement',
        IllegalBreak: 'Illegal break statement',
        IllegalReturn: 'Illegal return statement',
        StrictModeWith:  'Strict mode code may not include a with statement',
        StrictCatchVariable:  'Catch variable may not be eval or arguments in strict mode',
        StrictVarName:  'Variable name may not be eval or arguments in strict mode',
        StrictParamName:  'Parameter name eval or arguments is not allowed in strict mode',
        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
        StrictFunctionName:  'Function name may not be eval or arguments in strict mode',
        StrictOctalLiteral:  'Octal literals are not allowed in strict mode.',
        StrictDelete:  'Delete of an unqualified identifier in strict mode.',
        StrictDuplicateProperty:  'Duplicate data property in object literal not allowed in strict mode',
        AccessorDataProperty:  'Object literal may not have data and accessor property with the same name',
        AccessorGetSet:  'Object literal may not have multiple get/set accessors with the same name',
        StrictLHSAssignment:  'Assignment to eval or arguments is not allowed in strict mode',
        StrictLHSPostfix:  'Postfix increment/decrement may not have eval or arguments operand in strict mode',
        StrictLHSPrefix:  'Prefix increment/decrement may not have eval or arguments operand in strict mode',
        StrictReservedWord:  'Use of future reserved word in strict mode',
        InvalidXJSAttributeValue: 'XJS value should be either an expression or a quoted XJS text',    
        ExpectedXJSClosingTag: 'Expected corresponding XJS closing tag for %0',   
        AdjacentXJSElements: 'Adjacent XJS elements must be wrapped in an enclosing tag',                 
    };

    // See also tools/generate-unicode-regex.py.
    Regex = {
        NonAsciiIdentifierStart: new RegExp('[\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]'),
        NonAsciiIdentifierPart: new RegExp('[\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0300-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u0483-\u0487\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u05d0-\u05ea\u05f0-\u05f2\u0610-\u061a\u0620-\u0669\u066e-\u06d3\u06d5-\u06dc\u06df-\u06e8\u06ea-\u06fc\u06ff\u0710-\u074a\u074d-\u07b1\u07c0-\u07f5\u07fa\u0800-\u082d\u0840-\u085b\u08a0\u08a2-\u08ac\u08e4-\u08fe\u0900-\u0963\u0966-\u096f\u0971-\u0977\u0979-\u097f\u0981-\u0983\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bc-\u09c4\u09c7\u09c8\u09cb-\u09ce\u09d7\u09dc\u09dd\u09df-\u09e3\u09e6-\u09f1\u0a01-\u0a03\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a59-\u0a5c\u0a5e\u0a66-\u0a75\u0a81-\u0a83\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abc-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ad0\u0ae0-\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3c-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b5c\u0b5d\u0b5f-\u0b63\u0b66-\u0b6f\u0b71\u0b82\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd0\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c58\u0c59\u0c60-\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbc-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0cde\u0ce0-\u0ce3\u0ce6-\u0cef\u0cf1\u0cf2\u0d02\u0d03\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d-\u0d44\u0d46-\u0d48\u0d4a-\u0d4e\u0d57\u0d60-\u0d63\u0d66-\u0d6f\u0d7a-\u0d7f\u0d82\u0d83\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e01-\u0e3a\u0e40-\u0e4e\u0e50-\u0e59\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb9\u0ebb-\u0ebd\u0ec0-\u0ec4\u0ec6\u0ec8-\u0ecd\u0ed0-\u0ed9\u0edc-\u0edf\u0f00\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e-\u0f47\u0f49-\u0f6c\u0f71-\u0f84\u0f86-\u0f97\u0f99-\u0fbc\u0fc6\u1000-\u1049\u1050-\u109d\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u135d-\u135f\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176c\u176e-\u1770\u1772\u1773\u1780-\u17d3\u17d7\u17dc\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u1820-\u1877\u1880-\u18aa\u18b0-\u18f5\u1900-\u191c\u1920-\u192b\u1930-\u193b\u1946-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u19d0-\u19d9\u1a00-\u1a1b\u1a20-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1aa7\u1b00-\u1b4b\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1bf3\u1c00-\u1c37\u1c40-\u1c49\u1c4d-\u1c7d\u1cd0-\u1cd2\u1cd4-\u1cf6\u1d00-\u1de6\u1dfc-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u200c\u200d\u203f\u2040\u2054\u2071\u207f\u2090-\u209c\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d7f-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2de0-\u2dff\u2e2f\u3005-\u3007\u3021-\u302f\u3031-\u3035\u3038-\u303c\u3041-\u3096\u3099\u309a\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua62b\ua640-\ua66f\ua674-\ua67d\ua67f-\ua697\ua69f-\ua6f1\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua827\ua840-\ua873\ua880-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f7\ua8fb\ua900-\ua92d\ua930-\ua953\ua960-\ua97c\ua980-\ua9c0\ua9cf-\ua9d9\uaa00-\uaa36\uaa40-\uaa4d\uaa50-\uaa59\uaa60-\uaa76\uaa7a\uaa7b\uaa80-\uaac2\uaadb-\uaadd\uaae0-\uaaef\uaaf2-\uaaf6\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabea\uabec\uabed\uabf0-\uabf9\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff3f\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]')
    };

    // Ensure the condition is true, otherwise throw an error.
    // This is only to have a better contract semantic, i.e. another safety net
    // to catch a logic error. The condition shall be fulfilled in normal case.
    // Do NOT use this to enforce a certain condition on any user input.

    function assert(condition, message) {
        if (!condition) {
            throw new Error('ASSERT: ' + message);
        }
    }

    function isDecimalDigit(ch) {
        return (ch >= 48 && ch <= 57);   // 0..9
    }

    function isHexDigit(ch) {
        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
    }

    function isOctalDigit(ch) {
        return '01234567'.indexOf(ch) >= 0;
    }


    // 7.2 White Space

    function isWhiteSpace(ch) {
        return (ch === 32) ||  // space
            (ch === 9) ||      // tab
            (ch === 0xB) ||
            (ch === 0xC) ||
            (ch === 0xA0) ||
            (ch >= 0x1680 && '\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\uFEFF'.indexOf(String.fromCharCode(ch)) > 0);
    }

    // 7.3 Line Terminators

    function isLineTerminator(ch) {
        return (ch === 10) || (ch === 13) || (ch === 0x2028) || (ch === 0x2029);
    }

    // 7.6 Identifier Names and Identifiers

    function isIdentifierStart(ch) {
        return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)
            (ch >= 65 && ch <= 90) ||         // A..Z
            (ch >= 97 && ch <= 122) ||        // a..z
            (ch === 92) ||                    // \ (backslash)
            ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(String.fromCharCode(ch)));
    }

    function isIdentifierPart(ch) {
        return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)
            (ch >= 65 && ch <= 90) ||         // A..Z
            (ch >= 97 && ch <= 122) ||        // a..z
            (ch >= 48 && ch <= 57) ||         // 0..9
            (ch === 92) ||                    // \ (backslash)
            ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(String.fromCharCode(ch)));
    }

    // 7.6.1.2 Future Reserved Words

    function isFutureReservedWord(id) {
        switch (id) {
        case 'class':
        case 'enum':
        case 'export':
        case 'extends':
        case 'import':
      //  case 'super':
            return true;
        default:
            return false;
        }
    }

    function isStrictModeReservedWord(id) {
        switch (id) {
        case 'implements':
        case 'interface':
        case 'package':
        case 'private':
        case 'protected':
        case 'public':
        case 'static':
        case 'yield':
        case 'let':
            return true;
        default:
            return false;
        }
    }

    function isRestrictedWord(id) {
        return id === 'eval' || id === 'arguments';
    }

    // 7.6.1.1 Keywords

    function isKeyword(id) {
        if (strict && isStrictModeReservedWord(id)) {
            return true;
        }

        // 'const' is specialized as Keyword in V8.
        // 'yield' and 'let' are for compatiblity with SpiderMonkey and ES.next.
        // Some others are from future reserved words.

        switch (id.length) {
        case 2:
            return (id === 'if') || (id === 'in') || (id === 'do');
        case 3:
            return (id === 'var') || (id === 'for') || (id === 'new') ||
                (id === 'try') || (id === 'let');
        case 4:
            return (id === 'this') || (id === 'else') || (id === 'case') ||
                (id === 'void') || (id === 'with') || (id === 'enum');
        case 5:
            return (id === 'while') || (id === 'break') || (id === 'catch') ||
                (id === 'throw') || (id === 'const') || (id === 'yield') ||
                (id === 'class'); // || (id === 'super');
        case 6:
            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
                (id === 'switch') || (id === 'export') || (id === 'import');
        case 7:
            return (id === 'default') || (id === 'finally') || (id === 'extends');
        case 8:
            return (id === 'function') || (id === 'continue') || (id === 'debugger');
        case 10:
            return (id === 'instanceof');
        default:
            return false;
        }
    }

    // 7.4 Comments

    function skipComment() {
        var ch, blockComment, lineComment;

        blockComment = false;
        lineComment = false;

        while (index < length) {
            ch = source.charCodeAt(index);

            if (lineComment) {
                ++index;
                if (isLineTerminator(ch)) {
                    lineComment = false;
                    if (ch === 13 && source.charCodeAt(index) === 10) {
                        ++index;
                    }
                    ++lineNumber;
                    lineStart = index;
                }
            } else if (blockComment) {
                if (isLineTerminator(ch)) {
                    if (ch === 13 && source.charCodeAt(index + 1) === 10) {
                        ++index;
                    }
                    ++lineNumber;
                    ++index;
                    lineStart = index;
                    if (index >= length) {
                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                    }
                } else {
                    ch = source.charCodeAt(index++);
                    if (index >= length) {
                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                    }
                    // Block comment ends with '*/' (char #42, char #47).
                    if (ch === 42) {
                        ch = source.charCodeAt(index);
                        if (ch === 47) {
                            ++index;
                            blockComment = false;
                        }
                    }
                }
            } else if (ch === 47) {
                ch = source.charCodeAt(index + 1);
                // Line comment starts with '//' (char #47, char #47).
                if (ch === 47) {
                    index += 2;
                    lineComment = true;
                } else if (ch === 42) {
                    // Block comment starts with '/*' (char #47, char #42).
                    index += 2;
                    blockComment = true;
                    if (index >= length) {
                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                    }
                } else {
                    break;
                }
            } else if (isWhiteSpace(ch)) {
                ++index;
            } else if (isLineTerminator(ch)) {
                ++index;
                if (ch === 13 && source.charCodeAt(index) === 10) {
                    ++index;
                }
                ++lineNumber;
                lineStart = index;
            } else {
                break;
            }
        }
    }

    function scanHexEscape(prefix) {
        var i, len, ch, code = 0;

        len = (prefix === 'u') ? 4 : 2;
        for (i = 0; i < len; ++i) {
            if (index < length && isHexDigit(source[index])) {
                ch = source[index++];
                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
            } else {
                return '';
            }
        }
        return String.fromCharCode(code);
    }

    function getEscapedIdentifier() {
        var ch, id;

        ch = source.charCodeAt(index++);
        id = String.fromCharCode(ch);

        // '\u' (char #92, char #117) denotes an escaped character.
        if (ch === 92) {
            if (source.charCodeAt(index) !== 117) {
                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
            }
            ++index;
            ch = scanHexEscape('u');
            if (!ch || ch === '\\' || !isIdentifierStart(ch.charCodeAt(0))) {
                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
            }
            id = ch;
        }

        while (index < length) {
            ch = source.charCodeAt(index);
            if (!isIdentifierPart(ch)) {
                break;
            }
            ++index;
            id += String.fromCharCode(ch);

            // '\u' (char #92, char #117) denotes an escaped character.
            if (ch === 92) {
                id = id.substr(0, id.length - 1);
                if (source.charCodeAt(index) !== 117) {
                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                }
                ++index;
                ch = scanHexEscape('u');
                if (!ch || ch === '\\' || !isIdentifierPart(ch.charCodeAt(0))) {
                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                }
                id += ch;
            }
        }

        return id;
    }

    function getIdentifier() {
        var start, ch;

        start = index++;
        while (index < length) {
            ch = source.charCodeAt(index);
            if (ch === 92) {
                // Blackslash (char #92) marks Unicode escape sequence.
                index = start;
                return getEscapedIdentifier();
            }
            if (isIdentifierPart(ch)) {
                ++index;
            } else {
                break;
            }
        }

        return source.slice(start, index);
    }

    function getTypeNameIdentifier(){
        var start, ch;

        start = index++;
        while (index < length) {
            ch = source.charCodeAt(index);

            if (isIdentifierPart(ch)) {
                ++index;
            } 
            else if (ch == 46 && ((index + 1) < length) && source[index + 1] >= 'A' && source[index + 1] <='Z')
                index += 2 ;
            else {
                break;
            }
        }

        return source.slice(start, index);

    }

    function scanIdentifier() {
        var start, id, type;

        start = index;

        // Backslash (char #92) starts an escaped character.
        if (source[index] >= 'A' && source[index] <='Z'){
            id = getTypeNameIdentifier();
        }
        else {
            id = (source.charCodeAt(index) === 92) ? getEscapedIdentifier() : getIdentifier();
        }

        // There is no keyword or literal with only one character.
        // Thus, it must be an identifier.
        if (id.length === 1) {
            type = Token.Identifier;
        } else if (isKeyword(id)) {
            type = Token.Keyword;
        } else if (id === 'null') {
            type = Token.NullLiteral;
        } else if (id === 'true' || id === 'false') {
            type = Token.BooleanLiteral;
        } else {
            type = Token.Identifier;
        }

        return {
            type: type,
            value: id,
            lineNumber: lineNumber,
            lineStart: lineStart,
            range: [start, index]
        };
    }


    // 7.7 Punctuators

    function scanPunctuator() {
        var start = index,
            code = source.charCodeAt(index),
            code2,
            ch1 = source[index],
            ch2,
            ch3,
            ch4;

        switch (code) {

        // Check for most common single-character punctuators.
        case 46:   // . dot
        case 40:   // ( open bracket
        case 41:   // ) close bracket
        case 59:   // ; semicolon
        case 44:   // , comma
        case 123:  // { open curly brace
        case 125:  // } close curly brace
        case 91:   // [
        case 93:   // ]
        case 58:   // :
        case 63:   // ?
        case 126:  // ~
            ++index;
            if (extra.tokenize) {
                if (code === 40) {
                    extra.openParenToken = extra.tokens.length;
                } else if (code === 123) {
                    extra.openCurlyToken = extra.tokens.length;
                }
            }
            return {
                type: Token.Punctuator,
                value: String.fromCharCode(code),
                lineNumber: lineNumber,
                lineStart: lineStart,
                range: [start, index]
            };

        default:
            code2 = source.charCodeAt(index + 1);

            // '=' (char #61) marks an assignment or comparison operator.
            if (code2 === 61) {
                switch (code) {
                case 37:  // %
                case 38:  // &
                case 42:  // *:
                case 43:  // +
                case 45:  // -
                case 47:  // /
                case 60:  // <
                case 62:  // >
                case 94:  // ^
                case 124: // |
                    index += 2;
                    return {
                        type: Token.Punctuator,
                        value: String.fromCharCode(code) + String.fromCharCode(code2),
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        range: [start, index]
                    };

                case 33: // !
                case 61: // =
                    index += 2;

                    // !== and ===
                    if (source.charCodeAt(index) === 61) {
                        ++index;
                    }
                    return {
                        type: Token.Punctuator,
                        value: source.slice(start, index),
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        range: [start, index]
                    };
                default:
                    break;
                }
            }
            break;
        }

        // Peek more characters.

        ch2 = source[index + 1];
        ch3 = source[index + 2];
        ch4 = source[index + 3];

        // 4-character punctuator: >>>=

        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {
            if (ch4 === '=') {
                index += 4;
                return {
                    type: Token.Punctuator,
                    value: '>>>=',
                    lineNumber: lineNumber,
                    lineStart: lineStart,
                    range: [start, index]
                };
            }
        }

        // 3-character punctuators: === !== >>> <<= >>=

        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {
            index += 3;
            return {
                type: Token.Punctuator,
                value: '>>>',
                lineNumber: lineNumber,
                lineStart: lineStart,
                range: [start, index]
            };
        }

        if (ch1 === '<' && ch2 === '<' && ch3 === '=') {
            index += 3;
            return {
                type: Token.Punctuator,
                value: '<<=',
                lineNumber: lineNumber,
                lineStart: lineStart,
                range: [start, index]
            };
        }

        if (ch1 === '>' && ch2 === '>' && ch3 === '=') {
            index += 3;
            return {
                type: Token.Punctuator,
                value: '>>=',
                lineNumber: lineNumber,
                lineStart: lineStart,
                range: [start, index]
            };
        }

        // Other 2-character punctuators: ++ -- << >> && ||

        if (ch1 === ch2 && ('+-<>&|'.indexOf(ch1) >= 0)) {
            index += 2;
            return {
                type: Token.Punctuator,
                value: ch1 + ch2,
                lineNumber: lineNumber,
                lineStart: lineStart,
                range: [start, index]
            };
        }

        if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {
            ++index;
            return {
                type: Token.Punctuator,
                value: ch1,
                lineNumber: lineNumber,
                lineStart: lineStart,
                range: [start, index]
            };
        }

        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
    }

    // 7.8.3 Numeric Literals

    function scanHexLiteral(start) {
        var number = '';

        while (index < length) {
            if (!isHexDigit(source[index])) {
                break;
            }
            number += source[index++];
        }

        if (number.length === 0) {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        if (isIdentifierStart(source.charCodeAt(index))) {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        return {
            type: Token.NumericLiteral,
            value: parseInt('0x' + number, 16),
            lineNumber: lineNumber,
            lineStart: lineStart,
            range: [start, index]
        };
    }

    function scanOctalLiteral(start) {
        var number = '0' + source[index++];
        while (index < length) {
            if (!isOctalDigit(source[index])) {
                break;
            }
            number += source[index++];
        }

        if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        return {
            type: Token.NumericLiteral,
            value: parseInt(number, 8),
            octal: true,
            lineNumber: lineNumber,
            lineStart: lineStart,
            range: [start, index]
        };
    }

    function scanNumericLiteral() {
        var number, start, ch;

        ch = source[index];
        assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),
            'Numeric literal must start with a decimal digit or a decimal point');

        start = index;
        number = '';
        if (ch !== '.') {
            number = source[index++];
            ch = source[index];

            // Hex number starts with '0x'.
            // Octal number starts with '0'.
            if (number === '0') {
                if (ch === 'x' || ch === 'X') {
                    ++index;
                    return scanHexLiteral(start);
                }
                if (isOctalDigit(ch)) {
                    return scanOctalLiteral(start);
                }

                // decimal number starts with '0' such as '09' is illegal.
                if (ch && isDecimalDigit(ch.charCodeAt(0))) {
                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                }
            }

            while (isDecimalDigit(source.charCodeAt(index))) {
                number += source[index++];
            }
            ch = source[index];
        }

        if (ch === '.') {
            number += source[index++];
            while (isDecimalDigit(source.charCodeAt(index))) {
                number += source[index++];
            }
            ch = source[index];
        }

        if (ch === 'e' || ch === 'E') {
            number += source[index++];

            ch = source[index];
            if (ch === '+' || ch === '-') {
                number += source[index++];
            }
            if (isDecimalDigit(source.charCodeAt(index))) {
                while (isDecimalDigit(source.charCodeAt(index))) {
                    number += source[index++];
                }
            } else {
                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
            }
        }

        if (isIdentifierStart(source.charCodeAt(index))) {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        return {
            type: Token.NumericLiteral,
            value: parseFloat(number),
            lineNumber: lineNumber,
            lineStart: lineStart,
            range: [start, index]
        };
    }

    // 7.8.4 String Literals

    function scanStringLiteral() {
        var str = '', quote, start, ch, code, unescaped, restore, octal = false;

        quote = source[index];
        assert((quote === '\'' || quote === '"'),
            'String literal must starts with a quote');

        start = index;
        ++index;

        while (index < length) {
            ch = source[index++];

            if (ch === quote) {
                quote = '';
                break;
            } else if (ch === '\\') {
                ch = source[index++];
                if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
                    switch (ch) {
                    case 'n':
                        str += '\n';
                        break;
                    case 'r':
                        str += '\r';
                        break;
                    case 't':
                        str += '\t';
                        break;
                    case 'u':
                    case 'x':
                        restore = index;
                        unescaped = scanHexEscape(ch);
                        if (unescaped) {
                            str += unescaped;
                        } else {
                            index = restore;
                            str += ch;
                        }
                        break;
                    case 'b':
                        str += '\b';
                        break;
                    case 'f':
                        str += '\f';
                        break;
                    case 'v':
                        str += '\v';
                        break;

                    default:
                        if (isOctalDigit(ch)) {
                            code = '01234567'.indexOf(ch);

                            // \0 is not octal escape sequence
                            if (code !== 0) {
                                octal = true;
                            }

                            if (index < length && isOctalDigit(source[index])) {
                                octal = true;
                                code = code * 8 + '01234567'.indexOf(source[index++]);

                                // 3 digits are only allowed when string starts
                                // with 0, 1, 2, 3
                                if ('0123'.indexOf(ch) >= 0 &&
                                        index < length &&
                                        isOctalDigit(source[index])) {
                                    code = code * 8 + '01234567'.indexOf(source[index++]);
                                }
                            }
                            str += String.fromCharCode(code);
                        } else {
                            str += ch;
                        }
                        break;
                    }
                } else {
                    ++lineNumber;
                    if (ch ===  '\r' && source[index] === '\n') {
                        ++index;
                    }
                }
            } else if (isLineTerminator(ch.charCodeAt(0))) {
                break;
            } else {
                str += ch;
            }
        }

        if (quote !== '') {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        return {
            type: Token.StringLiteral,
            value: str,
            octal: octal,
            lineNumber: lineNumber,
            lineStart: lineStart,
            range: [start, index]
        };
    }

    function scanRegExp() {
        var str, ch, start, pattern, flags, value, classMarker = false, restore, terminated = false;

        lookahead = null;
        skipComment();

        start = index;
        ch = source[index];
        assert(ch === '/', 'Regular expression literal must start with a slash');
        str = source[index++];

        while (index < length) {
            ch = source[index++];
            str += ch;
            if (classMarker) {
                if (ch === ']') {
                    classMarker = false;
                }
            } else {
                if (ch === '\\') {
                    ch = source[index++];
                    // ECMA-262 7.8.5
                    if (isLineTerminator(ch.charCodeAt(0))) {
                        throwError({}, Messages.UnterminatedRegExp);
                    }
                    str += ch;
                } else if (ch === '/') {
                    terminated = true;
                    break;
                } else if (ch === '[') {
                    classMarker = true;
                } else if (isLineTerminator(ch.charCodeAt(0))) {
                    throwError({}, Messages.UnterminatedRegExp);
                }
            }
        }

        if (!terminated) {
            throwError({}, Messages.UnterminatedRegExp);
        }

        // Exclude leading and trailing slash.
        pattern = str.substr(1, str.length - 2);

        flags = '';
        while (index < length) {
            ch = source[index];
            if (!isIdentifierPart(ch.charCodeAt(0))) {
                break;
            }

            ++index;
            if (ch === '\\' && index < length) {
                ch = source[index];
                if (ch === 'u') {
                    ++index;
                    restore = index;
                    ch = scanHexEscape('u');
                    if (ch) {
                        flags += ch;
                        for (str += '\\u'; restore < index; ++restore) {
                            str += source[restore];
                        }
                    } else {
                        index = restore;
                        flags += 'u';
                        str += '\\u';
                    }
                } else {
                    str += '\\';
                }
            } else {
                flags += ch;
                str += ch;
            }
        }

        try {
            value = new RegExp(pattern, flags);
        } catch (e) {
            throwError({}, Messages.InvalidRegExp);
        }

        peek();


        if (extra.tokenize) {
            return {
                type: Token.RegularExpression,
                value: value,
                lineNumber: lineNumber,
                lineStart: lineStart,
                range: [start, index]
            };
        }
        return {
            literal: str,
            value: value,
            range: [start, index]
        };
    }

    function isIdentifierName(token) {
        return token.type === Token.Identifier ||
            token.type === Token.Keyword ||
            token.type === Token.BooleanLiteral ||
            token.type === Token.NullLiteral;
    }

    function advanceSlash() {
        var prevToken,
            checkToken;
        // Using the following algorithm:
        // https://github.com/mozilla/sweet.js/wiki/design
        prevToken = extra.tokens[extra.tokens.length - 1];
        if (!prevToken) {
            // Nothing before that: it cannot be a division.
            return scanRegExp();
        }
        if (prevToken.type === "Punctuator") {
            if (prevToken.value === ")") {
                checkToken = extra.tokens[extra.openParenToken - 1];
                if (checkToken &&
                        checkToken.type === "Keyword" &&
                        (checkToken.value === "if" ||
                         checkToken.value === "while" ||
                         checkToken.value === "for" ||
                         checkToken.value === "with")) {
                    return scanRegExp();
                }
                return scanPunctuator();
            }
            if (prevToken.value === "}") {
                // Dividing a function by anything makes little sense,
                // but we have to check for that.
                if (extra.tokens[extra.openCurlyToken - 3] &&
                        extra.tokens[extra.openCurlyToken - 3].type === "Keyword") {
                    // Anonymous function.
                    checkToken = extra.tokens[extra.openCurlyToken - 4];
                    if (!checkToken) {
                        return scanPunctuator();
                    }
                } else if (extra.tokens[extra.openCurlyToken - 4] &&
                        extra.tokens[extra.openCurlyToken - 4].type === "Keyword") {
                    // Named function.
                    checkToken = extra.tokens[extra.openCurlyToken - 5];
                    if (!checkToken) {
                        return scanRegExp();
                    }
                } else {
                    return scanPunctuator();
                }
                // checkToken determines whether the function is
                // a declaration or an expression.
                if (FnExprTokens.indexOf(checkToken.value) >= 0) {
                    // It is an expression.
                    return scanPunctuator();
                }
                // It is a declaration.
                return scanRegExp();
            }
            return scanRegExp();
        }
        if (prevToken.type === "Keyword") {
            return scanRegExp();
        }
        return scanPunctuator();
    }

    function advance() {
        var ch;

        if (!state.inXJSChild) {
            skipComment();
        }

        if (index >= length) {
            return {
                type: Token.EOF,
                lineNumber: lineNumber,
                lineStart: lineStart,
                range: [index, index]
            };
        }

        if (state.inXJSChild) {
            return advanceXJSChild();
        }

        ch = source.charCodeAt(index);

        // Very common: ( and ) and ;
        if (ch === 40 || ch === 41 || ch === 58) {
            return scanPunctuator();
        }

        // String literal starts with single quote (#39) or double quote (#34).
        if (ch === 39 || ch === 34) {
            if (state.inXJSTag) {
                return scanXJSStringLiteral();
            }
            return scanStringLiteral();
        }

        if (state.inXJSTag && isXJSIdentifierStart(ch)) {
            return scanXJSIdentifier();
        }

        if (ch === 96) {
            return scanTemplate();
        }
        if (isIdentifierStart(ch)) {
            return scanIdentifier();
        }

        // Dot (.) char #46 can also start a floating-point number, hence the need
        // to check the next character.
        if (ch === 46) {
            if (isDecimalDigit(source.charCodeAt(index + 1))) {
                return scanNumericLiteral();
            }
            return scanPunctuator();
        }

        if (isDecimalDigit(ch)) {
            return scanNumericLiteral();
        }

        // Slash (/) char #47 can also start a regex.
        if (extra.tokenize && ch === 47) {
            return advanceSlash();
        }

        return scanPunctuator();
    }

    function lex() {
        var token;

        token = lookahead;
        index = token.range[1];
        lineNumber = token.lineNumber;
        lineStart = token.lineStart;

        lookahead = advance();

        index = token.range[1];
        lineNumber = token.lineNumber;
        lineStart = token.lineStart;

        return token;
    }

    function peek() {
        var pos, line, start;

        pos = index;
        line = lineNumber;
        start = lineStart;
        lookahead = advance();
        index = pos;
        lineNumber = line;
        lineStart = start;
    }

    SyntaxTreeDelegate = {

        name: 'SyntaxTree',

        postProcess: function (node) {
            return node;
        },

        createArrayExpression: function (elements) {
            return {
                type: Syntax.ArrayExpression,
                elements: elements
            };
        },

        createAssignmentExpression: function (operator, left, right) {
            return {
                type: Syntax.AssignmentExpression,
                operator: operator,
                left: left,
                right: right
            };
        },

        createBinaryExpression: function (operator, left, right) {
            var type = (operator === '||' || operator === '&&') ? Syntax.LogicalExpression :
                        Syntax.BinaryExpression;
            return {
                type: type,
                operator: operator,
                left: left,
                right: right
            };
        },

        createBlockStatement: function (body) {
            return {
                type: Syntax.BlockStatement,
                body: body
            };
        },

        createBreakStatement: function (label) {
            return {
                type: Syntax.BreakStatement,
                label: label
            };
        },

        createCallExpression: function (callee, args) {
            return {
                type: Syntax.CallExpression,
                callee: callee,
                'arguments': args
            };
        },

        createCatchClause: function (param, body) {
            return {
                type: Syntax.CatchClause,
                param: param,
                body: body
            };
        },

        createClassDeclaration: function(id,baseId,body) {
            return {
                type: Syntax.ClassDeclaration,
                id:id,
                body:body,
                baseId:baseId
            }
        },

        createConditionalExpression: function (test, consequent, alternate) {
            return {
                type: Syntax.ConditionalExpression,
                test: test,
                consequent: consequent,
                alternate: alternate
            };
        },

        createContinueStatement: function (label) {
            return {
                type: Syntax.ContinueStatement,
                label: label
            };
        },

        createDebuggerStatement: function () {
            return {
                type: Syntax.DebuggerStatement
            };
        },

        createDoWhileStatement: function (body, test) {
            return {
                type: Syntax.DoWhileStatement,
                body: body,
                test: test
            };
        },

        createEmptyStatement: function () {
            return {
                type: Syntax.EmptyStatement
            };
        },

        createExpressionStatement: function (expression) {
            return {
                type: Syntax.ExpressionStatement,
                expression: expression
            };
        },

        createForStatement: function (init, test, update, body) {
            return {
                type: Syntax.ForStatement,
                init: init,
                test: test,
                update: update,
                body: body
            };
        },

        createForInStatement: function (left, right, body) {
            return {
                type: Syntax.ForInStatement,
                left: left,
                right: right,
                body: body,
                each: false
            };
        },

        createFunctionDeclaration: function (id, params, defaults, body) {
            return {
                type: Syntax.FunctionDeclaration,
                id: id,
                params: params,
                defaults: defaults,
                body: body,
                rest: null,
                generator: false,
                expression: false
            };
        },

        createFunctionExpression: function (id, params, defaults, body) {
            return {
                type: Syntax.FunctionExpression,
                id: id,
                params: params,
                defaults: defaults,
                body: body,
                rest: null,
                generator: false,
                expression: false
            };
        },

        createIdentifier: function (name) {
            return {
                type: Syntax.Identifier,
                name: name
            };
        },

        createIfStatement: function (test, consequent, alternate) {
            return {
                type: Syntax.IfStatement,
                test: test,
                consequent: consequent,
                alternate: alternate
            };
        },

        createLabeledStatement: function (label, body) {
            return {
                type: Syntax.LabeledStatement,
                label: label,
                body: body
            };
        },

        createLiteral: function (token) {
            return {
                type: Syntax.Literal,
                value: token.value,
                raw: source.slice(token.range[0], token.range[1])
            };
        },

        createMemberExpression: function (accessor, object, property) {
            return {
                type: Syntax.MemberExpression,
                computed: accessor === '[',
                object: object,
                property: property
            };
        },

        createNewExpression: function (callee, args) {
            return {
                type: Syntax.NewExpression,
                callee: callee,
                'arguments': args
            };
        },

        createObjectExpression: function (properties) {
            return {
                type: Syntax.ObjectExpression,
                properties: properties
            };
        },

        createPostfixExpression: function (operator, argument) {
            return {
                type: Syntax.UpdateExpression,
                operator: operator,
                argument: argument,
                prefix: false
            };
        },

        createProgram: function (body) {
            return {
                type: Syntax.Program,
                body: body
            };
        },

        createProperty: function (kind, key, value) {
            return {
                type: Syntax.Property,
                key: key,
                value: value,
                kind: kind
            };
        },

        createReturnStatement: function (argument) {
            return {
                type: Syntax.ReturnStatement,
                argument: argument
            };
        },

        createSequenceExpression: function (expressions) {
            return {
                type: Syntax.SequenceExpression,
                expressions: expressions
            };
        },

        createSwitchCase: function (test, consequent) {
            return {
                type: Syntax.SwitchCase,
                test: test,
                consequent: consequent
            };
        },

        createSwitchStatement: function (discriminant, cases) {
            return {
                type: Syntax.SwitchStatement,
                discriminant: discriminant,
                cases: cases
            };
        },

        createThisExpression: function () {
            return {
                type: Syntax.ThisExpression
            };
        },

        createThrowStatement: function (argument) {
            return {
                type: Syntax.ThrowStatement,
                argument: argument
            };
        },

        createTryStatement: function (block, guardedHandlers, handlers, finalizer) {
            return {
                type: Syntax.TryStatement,
                block: block,
                guardedHandlers: guardedHandlers,
                handlers: handlers,
                finalizer: finalizer
            };
        },

        createUnaryExpression: function (operator, argument) {
            if (operator === '++' || operator === '--') {
                return {
                    type: Syntax.UpdateExpression,
                    operator: operator,
                    argument: argument,
                    prefix: true
                };
            }
            return {
                type: Syntax.UnaryExpression,
                operator: operator,
                argument: argument
            };
        },

        createVariableDeclaration: function (declarations, kind) {
            return {
                type: Syntax.VariableDeclaration,
                declarations: declarations,
                kind: kind
            };
        },

        createVariableDeclarator: function (id, init) {
            return {
                type: Syntax.VariableDeclarator,
                id: id,
                init: init
            };
        },

        createWhileStatement: function (test, body) {
            return {
                type: Syntax.WhileStatement,
                test: test,
                body: body
            };
        },

        createWithStatement: function (object, body) {
            return {
                type: Syntax.WithStatement,
                object: object,
                body: body
            };
        },

        createHTMLExpressionStatement: function (expression) {
            return {
                type: Syntax.HTMLExpressionStatement,
                expression: expression
            };
        },

        createXJSAttribute: function (name, value) {
            return {
                type: Syntax.XJSAttribute,
                name: name,
                value: value || null
            };
        },

        createXJSSpreadAttribute: function (argument) {
            return {
                type: Syntax.XJSSpreadAttribute,
                argument: argument
            };
        },

        createXJSIdentifier: function (name) {
            return {
                type: Syntax.XJSIdentifier,
                name: name
            };
        },

        createXJSNamespacedName: function (namespace, name) {
            return {
                type: Syntax.XJSNamespacedName,
                namespace: namespace,
                name: name
            };
        },

        createXJSMemberExpression: function (object, property) {
            return {
                type: Syntax.XJSMemberExpression,
                object: object,
                property: property
            };
        },

        createXJSElement: function (openingElement, closingElement, children) {
            return {
                type: Syntax.XJSElement,
                openingElement: openingElement,
                closingElement: closingElement,
                children: children
            };
        },

        createXJSEmptyExpression: function () {
            return {
                type: Syntax.XJSEmptyExpression
            };
        },

        createXJSExpressionContainer: function (expression) {
            return {
                type: Syntax.XJSExpressionContainer,
                expression: expression
            };
        },

        createXJSOpeningElement: function (name, attributes, selfClosing) {
            return {
                type: Syntax.XJSOpeningElement,
                name: name,
                selfClosing: selfClosing,
                attributes: attributes
            };
        },

        createXJSClosingElement: function (name) {
            return {
                type: Syntax.XJSClosingElement,
                name: name
            };
        },        
    };

    // Return true if there is a line terminator before the next token.

    function peekLineTerminator() {
        var pos, line, start, found;

        pos = index;
        line = lineNumber;
        start = lineStart;
        skipComment();
        found = lineNumber !== line;
        index = pos;
        lineNumber = line;
        lineStart = start;

        return found;
    }

    // Throw an exception

    function throwError(token, messageFormat) {
        var error,
            args = Array.prototype.slice.call(arguments, 2),
            msg = messageFormat.replace(
                /%(\d)/g,
                function (whole, index) {
                    assert(index < args.length, 'Message reference must be in range');
                    return args[index];
                }
            );

        if (typeof token.lineNumber === 'number') {
            error = new Error('Line ' + token.lineNumber + ': ' + msg);
            error.index = token.range[0];
            error.lineNumber = token.lineNumber;
            error.column = token.range[0] - lineStart + 1;
        } else {
            error = new Error('Line ' + lineNumber + ': ' + msg);
            error.index = index;
            error.lineNumber = lineNumber;
            error.column = index - lineStart + 1;
        }

            try {
                throw new Error("test");
            }
            catch(e) {
                console.log(e.stack);
            }


        error.description = msg;
        throw error;
    }

    function throwErrorTolerant() {
        try {
            throwError.apply(null, arguments);
        } catch (e) {
            if (extra.errors) {
                extra.errors.push(e);
            } else {
                throw e;
            }
        }
    }


    // Throw an exception because of the token.

    function throwUnexpected(token) {
        if (token.type === Token.EOF) {
            throwError(token, Messages.UnexpectedEOS);
        }

        if (token.type === Token.NumericLiteral) {
            throwError(token, Messages.UnexpectedNumber);
        }

        if (token.type === Token.StringLiteral) {
            throwError(token, Messages.UnexpectedString);
        }

        if (token.type === Token.Identifier) {
            throwError(token, Messages.UnexpectedIdentifier);
        }

        if (token.type === Token.Keyword) {
            if (isFutureReservedWord(token.value)) {
                throwError(token, Messages.UnexpectedReserved);
            } else if (strict && isStrictModeReservedWord(token.value)) {
                throwErrorTolerant(token, Messages.StrictReservedWord);
                return;
            }
            throwError(token, Messages.UnexpectedToken, token.value);
        }

        // BooleanLiteral, NullLiteral, or Punctuator.
        throwError(token, Messages.UnexpectedToken, token.value);
    }

    // Expect the next token to match the specified punctuator.
    // If not, an exception will be thrown.

    function expect(value) {
        var token = lex();
        if (token.type !== Token.Punctuator || token.value !== value) {
            throwUnexpected(token);
        }
    }

    // Expect the next token to match the specified keyword.
    // If not, an exception will be thrown.

    function expectKeyword(keyword) {
        var token = lex();
        if (token.type !== Token.Keyword || token.value !== keyword) {
            throwUnexpected(token);
        }
    }

    // Return true if the next token matches the specified punctuator.

    function match(value) {
        return lookahead.type === Token.Punctuator && lookahead.value === value;
    }

    // Return true if the next token matches the specified keyword

    function matchKeyword(keyword) {
        return lookahead.type === Token.Keyword && lookahead.value === keyword;
    }

    // Return true if the next token is an assignment operator
    function matchAssign() {
        var op;

        if (lookahead.type !== Token.Punctuator) {
            return false;
        }
        op = lookahead.value;
        return op === '=' ||
            op === '*=' ||
            op === '/=' ||
            op === '%=' ||
            op === '+=' ||
            op === '-=' ||
            op === '<<=' ||
            op === '>>=' ||
            op === '>>>=' ||
            op === '&=' ||
            op === '^=' ||
            op === '|=';
    }

    function consumeSemicolon() {
        var line;

        // Catch the very common case first: immediately a semicolon (char #59).
        if (source.charCodeAt(index) === 59) {
            lex();
            return;
        }

        line = lineNumber;
        skipComment();
        if (lineNumber !== line) {
            return;
        }

        if (match(';')) {
            lex();
            return;
        }

        if (lookahead.type !== Token.EOF && !match('}')) {
            throwUnexpected(lookahead);
        }
    }

    // Return true if provided expression is LeftHandSideExpression

    function isLeftHandSide(expr) {
        return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;
    }

    // 11.1.4 Array Initialiser

    function parseArrayInitialiser() {
        var elements = [];

        expect('[');

        while (!match(']')) {
            if (match(',')) {
                lex();
                elements.push(null);
            } else {
                elements.push(parseAssignmentExpression());

                if (!match(']')) {
                    expect(',');
                }
            }
        }

        expect(']');

        return delegate.createArrayExpression(elements);
    }

    // 11.1.5 Object Initialiser

    function parsePropertyFunction(param, first) {
        var previousStrict, body;

        previousStrict = strict;
        body = parseFunctionSourceElements();
        if (first && strict && isRestrictedWord(param[0].name)) {
            throwErrorTolerant(first, Messages.StrictParamName);
        }
        strict = previousStrict;
        return delegate.createFunctionExpression(null, param, [], body);
    }

    function parseObjectPropertyKey() {
        var token = lex();

        // Note: This function is called only from parseObjectProperty(), where
        // EOF and Punctuator tokens are already filtered out.

        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
            if (strict && token.octal) {
                throwErrorTolerant(token, Messages.StrictOctalLiteral);
            }
            return delegate.createLiteral(token);
        }

        return delegate.createIdentifier(token.value);
    }

    function parseObjectProperty() {
        var token, key, id, value, param;

        token = lookahead;

        if (token.type === Token.Identifier) {

            id = parseObjectPropertyKey();

            // Property Assignment: Getter and Setter.

            if (token.value === 'get' && !match(':')) {
                key = parseObjectPropertyKey();
                expect('(');
                expect(')');
                value = parsePropertyFunction([]);
                return delegate.createProperty('get', key, value);
            }
            if (token.value === 'set' && !match(':')) {
                key = parseObjectPropertyKey();
                expect('(');
                token = lookahead;
                if (token.type !== Token.Identifier) {
                    throwUnexpected(lex());
                }
                param = [ parseVariableIdentifier() ];
                expect(')');
                value = parsePropertyFunction(param, token);
                return delegate.createProperty('set', key, value);
            }
            expect(':');
            value = parseAssignmentExpression();
            return delegate.createProperty('init', id, value);
        }
        if (token.type === Token.EOF || token.type === Token.Punctuator) {
            throwUnexpected(token);
        } else {
            key = parseObjectPropertyKey();
            expect(':');
            value = parseAssignmentExpression();
            return delegate.createProperty('init', key, value);
        }
    }

    function parseObjectInitialiser() {
        var properties = [], property, name, key, kind, map = {}, toString = String;

        expect('{');

        while (!match('}')) {
            property = parseObjectProperty();

            if (property.key.type === Syntax.Identifier) {
                name = property.key.name;
            } else {
                name = toString(property.key.value);
            }
            kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;

            key = '$' + name;
            if (Object.prototype.hasOwnProperty.call(map, key)) {
                if (map[key] === PropertyKind.Data) {
                    if (strict && kind === PropertyKind.Data) {
                        throwErrorTolerant({}, Messages.StrictDuplicateProperty);
                    } else if (kind !== PropertyKind.Data) {
                        throwErrorTolerant({}, Messages.AccessorDataProperty);
                    }
                } else {
                    if (kind === PropertyKind.Data) {
                        throwErrorTolerant({}, Messages.AccessorDataProperty);
                    } else if (map[key] & kind) {
                        throwErrorTolerant({}, Messages.AccessorGetSet);
                    }
                }
                map[key] |= kind;
            } else {
                map[key] = kind;
            }

            properties.push(property);

            if (!match('}')) {
                expect(',');
            }
        }

        expect('}');

        return delegate.createObjectExpression(properties);
    }

    // 11.1.6 The Grouping Operator

    function parseGroupExpression() {
        var expr;

        expect('(');

        expr = parseExpression();

        expect(')');

        return expr;
    }


    // 11.1 Primary Expressions

    function parsePrimaryExpression() {
        var type, token;

        type = lookahead.type;

        if (type === Token.Identifier) {
            return delegate.createIdentifier(lex().value);
        }

        if (type === Token.StringLiteral || type === Token.NumericLiteral) {
            if (strict && lookahead.octal) {
                throwErrorTolerant(lookahead, Messages.StrictOctalLiteral);
            }
            return delegate.createLiteral(lex());
        }

        if (type === Token.Keyword) {
            if (matchKeyword('this')) {
                lex();
                return delegate.createThisExpression();
            }

            if (matchKeyword('function')) {
                return parseFunctionExpression();
            }
        }

        if (type === Token.BooleanLiteral) {
            token = lex();
            token.value = (token.value === 'true');
            return delegate.createLiteral(token);
        }

        if (type === Token.NullLiteral) {
            token = lex();
            token.value = null;
            return delegate.createLiteral(token);
        }

        if (match('[')) {
            return parseArrayInitialiser();
        }

        if (match('{')) {
            return parseObjectInitialiser();
        }

        if (match('(')) {
            return parseGroupExpression();
        }

        if (match('/') || match('/=')) {
            return delegate.createLiteral(scanRegExp());
        }

        return throwUnexpected(lex());
    }

    function parseHTMLExpression() {
        return parseXJSElement();
    }

    // 11.2 Left-Hand-Side Expressions

    function parseArguments() {
        var args = [];

        expect('(');

        if (!match(')')) {
            while (index < length) {
                args.push(parseAssignmentExpression());
                if (match(')')) {
                    break;
                }
                expect(',');
            }
        }

        expect(')');

        return args;
    }

    function parseNonComputedProperty() {
        var token = lex();

        if (!isIdentifierName(token)) {
            throwUnexpected(token);
        }

        return delegate.createIdentifier(token.value);
    }

    function parseNonComputedMember() {
        expect('.');

        return parseNonComputedProperty();
    }

    function parseComputedMember() {
        var expr;

        expect('[');

        expr = parseExpression();

        expect(']');

        return expr;
    }

    function parseNewExpression() {
        var callee, args;

        expectKeyword('new');
        callee = parseLeftHandSideExpression();
        args = match('(') ? parseArguments() : [];

        return delegate.createNewExpression(callee, args);
    }

    function parseLeftHandSideExpressionAllowCall() {
        var expr, args, property;

        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();

        while (match('.') || match('[') || match('(')) {
            if (match('(')) {
                args = parseArguments();
                expr = delegate.createCallExpression(expr, args);
            } else if (match('[')) {
                property = parseComputedMember();
                expr = delegate.createMemberExpression('[', expr, property);
            } else {
                property = parseNonComputedMember();
                expr = delegate.createMemberExpression('.', expr, property);
            }
        }

        return expr;
    }


    function parseLeftHandSideExpression() {
        var expr, property;

        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();

        while (match('.') || match('[')) {
            if (match('[')) {
                property = parseComputedMember();
                expr = delegate.createMemberExpression('[', expr, property);
            } else {
                property = parseNonComputedMember();
                expr = delegate.createMemberExpression('.', expr, property);
            }
        }

        return expr;
    }

    // 11.3 Postfix Expressions

    function parsePostfixExpression() {
        var expr = parseLeftHandSideExpressionAllowCall(), token;

        if (lookahead.type !== Token.Punctuator) {
            return expr;
        }

        if ((match('++') || match('--')) && !peekLineTerminator()) {
            // 11.3.1, 11.3.2
            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                throwErrorTolerant({}, Messages.StrictLHSPostfix);
            }

            if (!isLeftHandSide(expr)) {
                throwError({}, Messages.InvalidLHSInAssignment);
            }

            token = lex();
            expr = delegate.createPostfixExpression(token.value, expr);
        }

        return expr;
    }

    // 11.4 Unary Operators

    function parseUnaryExpression() {
        var token, expr;

        if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
            return parsePostfixExpression();
        }

        if (match('++') || match('--')) {
            token = lex();
            expr = parseUnaryExpression();
            // 11.4.4, 11.4.5
            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                throwErrorTolerant({}, Messages.StrictLHSPrefix);
            }

            if (!isLeftHandSide(expr)) {
                throwError({}, Messages.InvalidLHSInAssignment);
            }

            return delegate.createUnaryExpression(token.value, expr);
        }

        if (match('+') || match('-') || match('~') || match('!')) {
            token = lex();
            expr = parseUnaryExpression();
            return delegate.createUnaryExpression(token.value, expr);
        }

        if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
            token = lex();
            expr = parseUnaryExpression();
            expr = delegate.createUnaryExpression(token.value, expr);
            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {
                throwErrorTolerant({}, Messages.StrictDelete);
            }
            return expr;
        }

        return parsePostfixExpression();
    }

    function binaryPrecedence(token, allowIn) {
        var prec = 0;

        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
            return 0;
        }

        switch (token.value) {
        case '||':
            prec = 1;
            break;

        case '&&':
            prec = 2;
            break;

        case '|':
            prec = 3;
            break;

        case '^':
            prec = 4;
            break;

        case '&':
            prec = 5;
            break;

        case '==':
        case '!=':
        case '===':
        case '!==':
            prec = 6;
            break;

        case '<':
        case '>':
        case '<=':
        case '>=':
        case 'instanceof':
            prec = 7;
            break;

        case 'in':
            prec = allowIn ? 7 : 0;
            break;

        case '<<':
        case '>>':
        case '>>>':
            prec = 8;
            break;

        case '+':
        case '-':
            prec = 9;
            break;

        case '*':
        case '/':
        case '%':
            prec = 11;
            break;

        default:
            break;
        }

        return prec;
    }

    // 11.5 Multiplicative Operators
    // 11.6 Additive Operators
    // 11.7 Bitwise Shift Operators
    // 11.8 Relational Operators
    // 11.9 Equality Operators
    // 11.10 Binary Bitwise Operators
    // 11.11 Binary Logical Operators

    function parseBinaryExpression() {
        var expr, token, prec, previousAllowIn, stack, right, operator, left, i;

        previousAllowIn = state.allowIn;
        state.allowIn = true;

        expr = parseUnaryExpression();

        token = lookahead;
        prec = binaryPrecedence(token, previousAllowIn);
        if (prec === 0) {
            return expr;
        }
        token.prec = prec;
        lex();

        stack = [expr, token, parseUnaryExpression()];

        while ((prec = binaryPrecedence(lookahead, previousAllowIn)) > 0) {

            // Reduce: make a binary expression from the three topmost entries.
            while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
                right = stack.pop();
                operator = stack.pop().value;
                left = stack.pop();
                stack.push(delegate.createBinaryExpression(operator, left, right));
            }

            // Shift.
            token = lex();
            token.prec = prec;
            stack.push(token);
            stack.push(parseUnaryExpression());
        }

        state.allowIn = previousAllowIn;

        // Final reduce to clean-up the stack.
        i = stack.length - 1;
        expr = stack[i];
        while (i > 1) {
            expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
            i -= 2;
        }
        return expr;
    }


    // 11.12 Conditional Operator

    function parseConditionalExpression() {
        var expr, previousAllowIn, consequent, alternate;

        expr = parseBinaryExpression();

        if (match('?')) {
            lex();
            previousAllowIn = state.allowIn;
            state.allowIn = true;
            consequent = parseAssignmentExpression();
            state.allowIn = previousAllowIn;
            expect(':');
            alternate = parseAssignmentExpression();

            expr = delegate.createConditionalExpression(expr, consequent, alternate);
        }

        return expr;
    }

    // 11.13 Assignment Operators

    function parseAssignmentExpression() {
        var token, left, right;

        token = lookahead;
        left = parseConditionalExpression();

        if (matchAssign()) {
            // LeftHandSideExpression
            if (!isLeftHandSide(left)) {
                throwError({}, Messages.InvalidLHSInAssignment);
            }

            // 11.13.1
            if (strict && left.type === Syntax.Identifier && isRestrictedWord(left.name)) {
                throwErrorTolerant(token, Messages.StrictLHSAssignment);
            }

            token = lex();
            right = parseAssignmentExpression();
            return delegate.createAssignmentExpression(token.value, left, right);
        }

        return left;
    }

    // 11.14 Comma Operator

    function parseExpression() {
        var expr = parseAssignmentExpression();

        if (match(',')) {
            expr = delegate.createSequenceExpression([ expr ]);

            while (index < length) {
                if (!match(',')) {
                    break;
                }
                lex();
                expr.expressions.push(parseAssignmentExpression());
            }

        }
        return expr;
    }

    // 12.1 Block

    function parseStatementList() {
        var list = [],
            statement;

        while (index < length) {
            if (match('}')) {
                break;
            }
            statement = parseSourceElement();
            if (typeof statement === 'undefined') {
                break;
            }
            list.push(statement);
        }

        return list;
    }

    function parseBlock() {
        var block;

        expect('{');

        block = parseStatementList();

        expect('}');

        return delegate.createBlockStatement(block);
    }

    // 12.2 Variable Statement

    function parseVariableIdentifier() {
        var token = lex();

        if (token.type !== Token.Identifier) {
            throwUnexpected(token);
        }

        return delegate.createIdentifier(token.value);
    }

    function parseVariableDeclaration(kind) {
        var id = parseVariableIdentifier(),
            init = null;

        // 12.2.1
        if (strict && isRestrictedWord(id.name)) {
            throwErrorTolerant({}, Messages.StrictVarName);
        }

        if (kind === 'const') {
            expect('=');
            init = parseAssignmentExpression();
        } else if (match('=')) {
            lex();
            init = parseAssignmentExpression();
        }

        return delegate.createVariableDeclarator(id, init);
    }

    function parseVariableDeclarationList(kind) {
        var list = [];

        do {
            list.push(parseVariableDeclaration(kind));
            if (!match(',')) {
                break;
            }
            lex();
        } while (index < length);

        return list;
    }

    function parseVariableStatement() {
        var declarations;

        expectKeyword('var');

        declarations = parseVariableDeclarationList();

        consumeSemicolon();

        return delegate.createVariableDeclaration(declarations, 'var');
    }

    // kind may be `const` or `let`
    // Both are experimental and not in the specification yet.
    // see http://wiki.ecmascript.org/doku.php?id=harmony:const
    // and http://wiki.ecmascript.org/doku.php?id=harmony:let
    function parseConstLetDeclaration(kind) {
        var declarations;

        expectKeyword(kind);

        declarations = parseVariableDeclarationList(kind);

        consumeSemicolon();

        return delegate.createVariableDeclaration(declarations, kind);
    }

    // 12.3 Empty Statement

    function parseEmptyStatement() {
        expect(';');
        return delegate.createEmptyStatement();
    }

    // 12.4 Expression Statement

    function parseExpressionStatement() {
        var expr = parseExpression();
        consumeSemicolon();
        return delegate.createExpressionStatement(expr);
    }

    // HTML Enhancements

    var XHTMLEntities = {
        quot: '\u0022',
        amp: '&',
        apos: '\u0027',
        lt: '<',
        gt: '>',
        nbsp: '\u00A0',
        iexcl: '\u00A1',
        cent: '\u00A2',
        pound: '\u00A3',
        curren: '\u00A4',
        yen: '\u00A5',
        brvbar: '\u00A6',
        sect: '\u00A7',
        uml: '\u00A8',
        copy: '\u00A9',
        ordf: '\u00AA',
        laquo: '\u00AB',
        not: '\u00AC',
        shy: '\u00AD',
        reg: '\u00AE',
        macr: '\u00AF',
        deg: '\u00B0',
        plusmn: '\u00B1',
        sup2: '\u00B2',
        sup3: '\u00B3',
        acute: '\u00B4',
        micro: '\u00B5',
        para: '\u00B6',
        middot: '\u00B7',
        cedil: '\u00B8',
        sup1: '\u00B9',
        ordm: '\u00BA',
        raquo: '\u00BB',
        frac14: '\u00BC',
        frac12: '\u00BD',
        frac34: '\u00BE',
        iquest: '\u00BF',
        Agrave: '\u00C0',
        Aacute: '\u00C1',
        Acirc: '\u00C2',
        Atilde: '\u00C3',
        Auml: '\u00C4',
        Aring: '\u00C5',
        AElig: '\u00C6',
        Ccedil: '\u00C7',
        Egrave: '\u00C8',
        Eacute: '\u00C9',
        Ecirc: '\u00CA',
        Euml: '\u00CB',
        Igrave: '\u00CC',
        Iacute: '\u00CD',
        Icirc: '\u00CE',
        Iuml: '\u00CF',
        ETH: '\u00D0',
        Ntilde: '\u00D1',
        Ograve: '\u00D2',
        Oacute: '\u00D3',
        Ocirc: '\u00D4',
        Otilde: '\u00D5',
        Ouml: '\u00D6',
        times: '\u00D7',
        Oslash: '\u00D8',
        Ugrave: '\u00D9',
        Uacute: '\u00DA',
        Ucirc: '\u00DB',
        Uuml: '\u00DC',
        Yacute: '\u00DD',
        THORN: '\u00DE',
        szlig: '\u00DF',
        agrave: '\u00E0',
        aacute: '\u00E1',
        acirc: '\u00E2',
        atilde: '\u00E3',
        auml: '\u00E4',
        aring: '\u00E5',
        aelig: '\u00E6',
        ccedil: '\u00E7',
        egrave: '\u00E8',
        eacute: '\u00E9',
        ecirc: '\u00EA',
        euml: '\u00EB',
        igrave: '\u00EC',
        iacute: '\u00ED',
        icirc: '\u00EE',
        iuml: '\u00EF',
        eth: '\u00F0',
        ntilde: '\u00F1',
        ograve: '\u00F2',
        oacute: '\u00F3',
        ocirc: '\u00F4',
        otilde: '\u00F5',
        ouml: '\u00F6',
        divide: '\u00F7',
        oslash: '\u00F8',
        ugrave: '\u00F9',
        uacute: '\u00FA',
        ucirc: '\u00FB',
        uuml: '\u00FC',
        yacute: '\u00FD',
        thorn: '\u00FE',
        yuml: '\u00FF',
        OElig: '\u0152',
        oelig: '\u0153',
        Scaron: '\u0160',
        scaron: '\u0161',
        Yuml: '\u0178',
        fnof: '\u0192',
        circ: '\u02C6',
        tilde: '\u02DC',
        Alpha: '\u0391',
        Beta: '\u0392',
        Gamma: '\u0393',
        Delta: '\u0394',
        Epsilon: '\u0395',
        Zeta: '\u0396',
        Eta: '\u0397',
        Theta: '\u0398',
        Iota: '\u0399',
        Kappa: '\u039A',
        Lambda: '\u039B',
        Mu: '\u039C',
        Nu: '\u039D',
        Xi: '\u039E',
        Omicron: '\u039F',
        Pi: '\u03A0',
        Rho: '\u03A1',
        Sigma: '\u03A3',
        Tau: '\u03A4',
        Upsilon: '\u03A5',
        Phi: '\u03A6',
        Chi: '\u03A7',
        Psi: '\u03A8',
        Omega: '\u03A9',
        alpha: '\u03B1',
        beta: '\u03B2',
        gamma: '\u03B3',
        delta: '\u03B4',
        epsilon: '\u03B5',
        zeta: '\u03B6',
        eta: '\u03B7',
        theta: '\u03B8',
        iota: '\u03B9',
        kappa: '\u03BA',
        lambda: '\u03BB',
        mu: '\u03BC',
        nu: '\u03BD',
        xi: '\u03BE',
        omicron: '\u03BF',
        pi: '\u03C0',
        rho: '\u03C1',
        sigmaf: '\u03C2',
        sigma: '\u03C3',
        tau: '\u03C4',
        upsilon: '\u03C5',
        phi: '\u03C6',
        chi: '\u03C7',
        psi: '\u03C8',
        omega: '\u03C9',
        thetasym: '\u03D1',
        upsih: '\u03D2',
        piv: '\u03D6',
        ensp: '\u2002',
        emsp: '\u2003',
        thinsp: '\u2009',
        zwnj: '\u200C',
        zwj: '\u200D',
        lrm: '\u200E',
        rlm: '\u200F',
        ndash: '\u2013',
        mdash: '\u2014',
        lsquo: '\u2018',
        rsquo: '\u2019',
        sbquo: '\u201A',
        ldquo: '\u201C',
        rdquo: '\u201D',
        bdquo: '\u201E',
        dagger: '\u2020',
        Dagger: '\u2021',
        bull: '\u2022',
        hellip: '\u2026',
        permil: '\u2030',
        prime: '\u2032',
        Prime: '\u2033',
        lsaquo: '\u2039',
        rsaquo: '\u203A',
        oline: '\u203E',
        frasl: '\u2044',
        euro: '\u20AC',
        image: '\u2111',
        weierp: '\u2118',
        real: '\u211C',
        trade: '\u2122',
        alefsym: '\u2135',
        larr: '\u2190',
        uarr: '\u2191',
        rarr: '\u2192',
        darr: '\u2193',
        harr: '\u2194',
        crarr: '\u21B5',
        lArr: '\u21D0',
        uArr: '\u21D1',
        rArr: '\u21D2',
        dArr: '\u21D3',
        hArr: '\u21D4',
        forall: '\u2200',
        part: '\u2202',
        exist: '\u2203',
        empty: '\u2205',
        nabla: '\u2207',
        isin: '\u2208',
        notin: '\u2209',
        ni: '\u220B',
        prod: '\u220F',
        sum: '\u2211',
        minus: '\u2212',
        lowast: '\u2217',
        radic: '\u221A',
        prop: '\u221D',
        infin: '\u221E',
        ang: '\u2220',
        and: '\u2227',
        or: '\u2228',
        cap: '\u2229',
        cup: '\u222A',
        'int': '\u222B',
        there4: '\u2234',
        sim: '\u223C',
        cong: '\u2245',
        asymp: '\u2248',
        ne: '\u2260',
        equiv: '\u2261',
        le: '\u2264',
        ge: '\u2265',
        sub: '\u2282',
        sup: '\u2283',
        nsub: '\u2284',
        sube: '\u2286',
        supe: '\u2287',
        oplus: '\u2295',
        otimes: '\u2297',
        perp: '\u22A5',
        sdot: '\u22C5',
        lceil: '\u2308',
        rceil: '\u2309',
        lfloor: '\u230A',
        rfloor: '\u230B',
        lang: '\u2329',
        rang: '\u232A',
        loz: '\u25CA',
        spades: '\u2660',
        clubs: '\u2663',
        hearts: '\u2665',
        diams: '\u2666'
    };    

    function parseHTMLExpressionStatement() {        
        var marker = markerCreate(), expr = parseHTMLExpression();
        return markerApply(marker, delegate.createHTMLExpressionStatement(expr));
    }

    function lookahead2() {
        var adv, pos, line, start, result;

        // If we are collecting the tokens, don't grab the next one yet.
        adv = (typeof extra.advance === 'function') ? extra.advance : advance;

        pos = index;
        line = lineNumber;
        start = lineStart;

        // Scan for the next immediate token.
        if (lookahead === null) {
            lookahead = adv();
        }
        index = lookahead.range[1];
        lineNumber = lookahead.lineNumber;
        lineStart = lookahead.lineStart;

        // Grab the token right after.
        result = adv();
        index = pos;
        lineNumber = line;
        lineStart = start;

        return result;
    }    

    function markerCreate() {
        if (!extra.loc && !extra.range) {
            return undefined;
        }
        skipComment();
        return {offset: index, line: lineNumber, col: index - lineStart};
    }

    function markerApply(marker, node) {
        if (extra.range) {
            node.range = [marker.offset, index];
        }
        if (extra.loc) {
            node.loc = {
                start: {
                    line: marker.line,
                    column: marker.col
                },
                end: {
                    line: lineNumber,
                    column: index - lineStart
                }
            };
            node = delegate.postProcess(node);
        }
        if (extra.attachComment) {
            processComment(node);
        }
        return node;
    }

    function markerCreatePreserveWhitespace() {
        if (!extra.loc && !extra.range) {
            return undefined;
        }
        return {offset: index, line: lineNumber, col: index - lineStart};
    }        

    function getQualifiedXJSName(object) {
        if (object.type === Syntax.XJSIdentifier) {
            return object.name;
        }
        if (object.type === Syntax.XJSNamespacedName) {
            return object.namespace.name + ':' + object.name.name;
        }
        if (object.type === Syntax.XJSMemberExpression) {
            return (
                getQualifiedXJSName(object.object) + '.' +
                getQualifiedXJSName(object.property)
            );
        }
    }

    function isXJSIdentifierStart(ch) {
        // exclude backslash (\)
        return (ch !== 92) && isIdentifierStart(ch);
    }

    function isXJSIdentifierPart(ch) {
        // exclude backslash (\) and add hyphen (-)
        return (ch !== 92) && (ch === 45 || isIdentifierPart(ch));
    }

    function scanXJSIdentifier() {
        var ch, start, value = '';

        start = index;
        while (index < length) {
            ch = source.charCodeAt(index);
            if (!isXJSIdentifierPart(ch)) {
                break;
            }
            value += source[index++];
        }

        return {
            type: Token.XJSIdentifier,
            value: value,
            lineNumber: lineNumber,
            lineStart: lineStart,
            range: [start, index]
        };
    }

    function scanXJSEntity() {
        var ch, str = '', start = index, count = 0, code;
        ch = source[index];
        assert(ch === '&', 'Entity must start with an ampersand');
        index++;
        while (index < length && count++ < 10) {
            ch = source[index++];
            if (ch === ';') {
                break;
            }
            str += ch;
        }

        // Well-formed entity (ending was found).
        if (ch === ';') {
            // Numeric entity.
            if (str[0] === '#') {
                if (str[1] === 'x') {
                    code = +('0' + str.substr(1));
                } else {
                    // Removing leading zeros in order to avoid treating as octal in old browsers.
                    code = +str.substr(1).replace(Regex.LeadingZeros, '');
                }

                if (!isNaN(code)) {
                    return String.fromCharCode(code);
                }
            } else if (XHTMLEntities[str]) {
                return XHTMLEntities[str];
            }
        }

        // Treat non-entity sequences as regular text.
        index = start + 1;
        return '&';
    }

    function scanXJSText(stopChars) {
        var ch, str = '', start;
        start = index;
        while (index < length) {
            ch = source[index];
            if (stopChars.indexOf(ch) !== -1) {
                break;
            }
            if (ch === '&') {
                str += scanXJSEntity();
            } else {
                index++;
                if (ch === '\r' && source[index] === '\n') {
                    str += ch;
                    ch = source[index];
                    index++;
                }
                if (isLineTerminator(ch.charCodeAt(0))) {
                    ++lineNumber;
                    lineStart = index;
                }
                str += ch;
            }
        }
        return {
            type: Token.XJSText,
            value: str,
            lineNumber: lineNumber,
            lineStart: lineStart,
            range: [start, index]
        };
    }

    function scanXJSStringLiteral() {
        var innerToken, quote, start;

        quote = source[index];
        assert((quote === '\'' || quote === '"'),
            'String literal must starts with a quote');

        start = index;
        ++index;

        innerToken = scanXJSText([quote]);

        if (quote !== source[index]) {
            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }

        ++index;

        innerToken.range = [start, index];

        return innerToken;
    }

    /**
     * Between XJS opening and closing tags (e.g. <foo>HERE</foo>), anything that
     * is not another XJS tag and is not an expression wrapped by {} is text.
     */
    function advanceXJSChild() {
        var ch = source.charCodeAt(index);

        // { (60)
        if (ch !== 60) {
            return scanXJSText(['<']);
        }

        return scanPunctuator();
    }

    function parseXJSIdentifier() {
        var token, marker = markerCreate();

        if(lookahead.type === Token.Punctuator && lookahead.value === "/") {
            lex();
            if(lookahead.type === Token.XJSIdentifier && lookahead.value === "script") {
                lex();
                lex();
                throw new Error("end of script");
            }
        }
        if (lookahead.type !== Token.XJSIdentifier) {            
            throwUnexpected(lookahead);
        }

        token = lex();
        return markerApply(marker, delegate.createXJSIdentifier(token.value));
    }

    function parseXJSNamespacedName() {
        var namespace, name, marker = markerCreate();

        namespace = parseXJSIdentifier();
        expect(':');
        name = parseXJSIdentifier();

        return markerApply(marker, delegate.createXJSNamespacedName(namespace, name));
    }

    function parseXJSMemberExpression() {
        var marker = markerCreate(),
            expr = parseXJSIdentifier();

        while (match('.')) {
            lex();
            expr = markerApply(marker, delegate.createXJSMemberExpression(expr, parseXJSIdentifier()));
        }

        return expr;
    }

    function parseXJSElementName() {
        if (lookahead2().value === ':') {
            return parseXJSNamespacedName();
        }
        if (lookahead2().value === '.') {
            return parseXJSMemberExpression();
        }

        return parseXJSIdentifier();
    }

    function parseXJSAttributeName() {
        if (lookahead2().value === ':') {
            return parseXJSNamespacedName();
        }

        return parseXJSIdentifier();
    }

    function parseXJSAttributeValue() {
        var value, marker;
        if (match('<')) {
            value = parseXJSElement();
        } else if (lookahead.type === Token.XJSText) {
            marker = markerCreate();
            value = markerApply(marker, delegate.createLiteral(lex()));
        } else {
            throwError({}, Messages.InvalidXJSAttributeValue);
        }
        return value;
    }

    function parseXJSEmptyExpression() {
        var marker = markerCreatePreserveWhitespace();
        while (source.charAt(index) !== '}') {
            index++;
        }
        return markerApply(marker, delegate.createXJSEmptyExpression());
    }

    function parseXJSAttribute() {
        var name, marker;

        marker = markerCreate();

        name = parseXJSAttributeName();

        // HTML empty attribute
        if (match('=')) {
            lex();
            return markerApply(marker, delegate.createXJSAttribute(name, parseXJSAttributeValue()));
        }

        return markerApply(marker, delegate.createXJSAttribute(name));
    }

    function parseXJSChild() {
        var token, marker;
        if (!match('<')) {
            marker = markerCreatePreserveWhitespace();
            token = markerApply(marker, delegate.createLiteral(lex()));
        } else {
            token = parseXJSElement();
        }
        return token;
    }

    function parseXJSClosingElement() {
        var name, origInXJSChild, origInXJSTag, marker = markerCreate();
        origInXJSChild = state.inXJSChild;
        origInXJSTag = state.inXJSTag;
        state.inXJSChild = false;
        state.inXJSTag = true;
        expect('<');
        expect('/');
        name = parseXJSElementName();
        // Because advance() (called by lex() called by expect()) expects there
        // to be a valid token after >, it needs to know whether to look for a
        // standard JS token or an XJS text node
        state.inXJSChild = origInXJSChild;
        state.inXJSTag = origInXJSTag;
        expect('>');
        return markerApply(marker, delegate.createXJSClosingElement(name));
    }

    function parseXJSOpeningElement() {
        var name, attribute, attributes = [], selfClosing = false, origInXJSChild, origInXJSTag, marker = markerCreate();

        origInXJSChild = state.inXJSChild;
        origInXJSTag = state.inXJSTag;
        state.inXJSChild = false;
        state.inXJSTag = true;

        expect('<');

        name = parseXJSElementName();

        while (index < length &&
                lookahead.value !== '/' &&
                lookahead.value !== '>') {
            attributes.push(parseXJSAttribute());
        }

        state.inXJSTag = origInXJSTag;

        if (lookahead.value === '/') {
            expect('/');
            // Because advance() (called by lex() called by expect()) expects
            // there to be a valid token after >, it needs to know whether to
            // look for a standard JS token or an XJS text node
            state.inXJSChild = origInXJSChild;
            expect('>');
            selfClosing = true;
        } else {
            state.inXJSChild = true;
            expect('>');
        }
        return markerApply(marker, delegate.createXJSOpeningElement(name, attributes, selfClosing));
    }

    function parseXJSElement() {
        var openingElement, closingElement = null, children = [], origInXJSChild, origInXJSTag, marker = markerCreate();

        origInXJSChild = state.inXJSChild;
        origInXJSTag = state.inXJSTag;
        openingElement = parseXJSOpeningElement();

        if(openingElement.name.name === "script") {
            state = {
                allowIn: true,
                labelSet: {},
                inFunctionBody: false,
                inIteration: false,
                inSwitch: false
            };            
            var program = parseProgram(null, true);
            children.push(program);
        } else if (!openingElement.selfClosing) {
            while (index < length) {
                state.inXJSChild = false; // Call lookahead2() with inXJSChild = false because </ should not be considered in the child
                if (lookahead.value === '<' && lookahead2().value === '/') {
                    break;
                }
                state.inXJSChild = true;
                children.push(parseXJSChild());
            }
            state.inXJSChild = origInXJSChild;
            state.inXJSTag = origInXJSTag;

            closingElement = parseXJSClosingElement();
            if (getQualifiedXJSName(closingElement.name) !== getQualifiedXJSName(openingElement.name)) {
                throwError({}, Messages.ExpectedXJSClosingTag, getQualifiedXJSName(openingElement.name));
            }
        }

        // When (erroneously) writing two adjacent tags like
        //
        //     var x = <div>one</div><div>two</div>;
        //
        // the default error message is a bit incomprehensible. Since it's
        // rarely (never?) useful to write a less-than sign after an XJS
        // element, we disallow it here in the parser in order to provide a
        // better error message. (In the rare case that the less-than operator
        // was intended, the left tag can be wrapped in parentheses.)
        /*
        if (!origInXJSChild && match('<')) {
            throwError(lookahead, Messages.AdjacentXJSElements);
        }
        */

        return markerApply(marker, delegate.createXJSElement(openingElement, closingElement, children));
    }         

    // 12.5 If statement

    function parseIfStatement() {
        var test, consequent, alternate;

        expectKeyword('if');

        expect('(');

        test = parseExpression();

        expect(')');

        consequent = parseStatement();

        if (matchKeyword('else')) {
            lex();
            alternate = parseStatement();
        } else {
            alternate = null;
        }

        return delegate.createIfStatement(test, consequent, alternate);
    }

    // 12.6 Iteration Statements

    function parseDoWhileStatement() {
        var body, test, oldInIteration;

        expectKeyword('do');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = parseStatement();

        state.inIteration = oldInIteration;

        expectKeyword('while');

        expect('(');

        test = parseExpression();

        expect(')');

        if (match(';')) {
            lex();
        }

        return delegate.createDoWhileStatement(body, test);
    }

    function parseWhileStatement() {
        var test, body, oldInIteration;

        expectKeyword('while');

        expect('(');

        test = parseExpression();

        expect(')');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = parseStatement();

        state.inIteration = oldInIteration;

        return delegate.createWhileStatement(test, body);
    }

    function parseForVariableDeclaration() {
        var token = lex(),
            declarations = parseVariableDeclarationList();

        return delegate.createVariableDeclaration(declarations, token.value);
    }

    function parseForStatement() {
        var init, test, update, left, right, body, oldInIteration;

        init = test = update = null;

        expectKeyword('for');

        expect('(');

        if (match(';')) {
            lex();
        } else {
            if (matchKeyword('var') || matchKeyword('let')) {
                state.allowIn = false;
                init = parseForVariableDeclaration();
                state.allowIn = true;

                if (init.declarations.length === 1 && matchKeyword('in')) {
                    lex();
                    left = init;
                    right = parseExpression();
                    init = null;
                }
            } else {
                state.allowIn = false;
                init = parseExpression();
                state.allowIn = true;

                if (matchKeyword('in')) {
                    // LeftHandSideExpression
                    if (!isLeftHandSide(init)) {
                        throwError({}, Messages.InvalidLHSInForIn);
                    }

                    lex();
                    left = init;
                    right = parseExpression();
                    init = null;
                }
            }

            if (typeof left === 'undefined') {
                expect(';');
            }
        }

        if (typeof left === 'undefined') {

            if (!match(';')) {
                test = parseExpression();
            }
            expect(';');

            if (!match(')')) {
                update = parseExpression();
            }
        }

        expect(')');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = parseStatement();

        state.inIteration = oldInIteration;

        return (typeof left === 'undefined') ?
                delegate.createForStatement(init, test, update, body) :
                delegate.createForInStatement(left, right, body);
    }

    // 12.7 The continue statement

    function parseContinueStatement() {
        var label = null, key;

        expectKeyword('continue');

        // Optimize the most common form: 'continue;'.
        if (source.charCodeAt(index) === 59) {
            lex();

            if (!state.inIteration) {
                throwError({}, Messages.IllegalContinue);
            }

            return delegate.createContinueStatement(null);
        }

        if (peekLineTerminator()) {
            if (!state.inIteration) {
                throwError({}, Messages.IllegalContinue);
            }

            return delegate.createContinueStatement(null);
        }

        if (lookahead.type === Token.Identifier) {
            label = parseVariableIdentifier();

            key = '$' + label.name;
            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError({}, Messages.UnknownLabel, label.name);
            }
        }

        consumeSemicolon();

        if (label === null && !state.inIteration) {
            throwError({}, Messages.IllegalContinue);
        }

        return delegate.createContinueStatement(label);
    }

    // 12.8 The break statement

    function parseBreakStatement() {
        var label = null, key;

        expectKeyword('break');

        // Catch the very common case first: immediately a semicolon (char #59).
        if (source.charCodeAt(index) === 59) {
            lex();

            if (!(state.inIteration || state.inSwitch)) {
                throwError({}, Messages.IllegalBreak);
            }

            return delegate.createBreakStatement(null);
        }

        if (peekLineTerminator()) {
            if (!(state.inIteration || state.inSwitch)) {
                throwError({}, Messages.IllegalBreak);
            }

            return delegate.createBreakStatement(null);
        }

        if (lookahead.type === Token.Identifier) {
            label = parseVariableIdentifier();

            key = '$' + label.name;
            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError({}, Messages.UnknownLabel, label.name);
            }
        }

        consumeSemicolon();

        if (label === null && !(state.inIteration || state.inSwitch)) {
            throwError({}, Messages.IllegalBreak);
        }

        return delegate.createBreakStatement(label);
    }

    // 12.9 The return statement

    function parseReturnStatement() {
        var argument = null;

        expectKeyword('return');

        if (!state.inFunctionBody) {
            throwErrorTolerant({}, Messages.IllegalReturn);
        }

        // 'return' followed by a space and an identifier is very common.
        if (source.charCodeAt(index) === 32) {
            if (isIdentifierStart(source.charCodeAt(index + 1))) {
                argument = parseExpression();
                consumeSemicolon();
                return delegate.createReturnStatement(argument);
            }
        }

        if (peekLineTerminator()) {
            return delegate.createReturnStatement(null);
        }

        if (!match(';')) {
            if (!match('}') && lookahead.type !== Token.EOF) {
                argument = parseExpression();
            }
        }

        consumeSemicolon();

        return delegate.createReturnStatement(argument);
    }

    // 12.10 The with statement

    function parseWithStatement() {
        var object, body;

        if (strict) {
            throwErrorTolerant({}, Messages.StrictModeWith);
        }

        expectKeyword('with');

        expect('(');

        object = parseExpression();

        expect(')');

        body = parseStatement();

        return delegate.createWithStatement(object, body);
    }

    // 12.10 The swith statement

    function parseSwitchCase() {
        var test,
            consequent = [],
            statement;

        if (matchKeyword('default')) {
            lex();
            test = null;
        } else {
            expectKeyword('case');
            test = parseExpression();
        }
        expect(':');

        while (index < length) {
            if (match('}') || matchKeyword('default') || matchKeyword('case')) {
                break;
            }
            statement = parseStatement();
            consequent.push(statement);
        }

        return delegate.createSwitchCase(test, consequent);
    }

    function parseSwitchStatement() {
        var discriminant, cases, clause, oldInSwitch, defaultFound;

        expectKeyword('switch');

        expect('(');

        discriminant = parseExpression();

        expect(')');

        expect('{');

        if (match('}')) {
            lex();
            return delegate.createSwitchStatement(discriminant);
        }

        cases = [];

        oldInSwitch = state.inSwitch;
        state.inSwitch = true;
        defaultFound = false;

        while (index < length) {
            if (match('}')) {
                break;
            }
            clause = parseSwitchCase();
            if (clause.test === null) {
                if (defaultFound) {
                    throwError({}, Messages.MultipleDefaultsInSwitch);
                }
                defaultFound = true;
            }
            cases.push(clause);
        }

        state.inSwitch = oldInSwitch;

        expect('}');

        return delegate.createSwitchStatement(discriminant, cases);
    }

    // 12.13 The throw statement

    function parseThrowStatement() {
        var argument;

        expectKeyword('throw');

        if (peekLineTerminator()) {
            throwError({}, Messages.NewlineAfterThrow);
        }

        argument = parseExpression();

        consumeSemicolon();

        return delegate.createThrowStatement(argument);
    }

    // 12.14 The try statement

    function parseCatchClause() {
        var param, body;

        expectKeyword('catch');

        expect('(');
        if (match(')')) {
            throwUnexpected(lookahead);
        }

        param = parseExpression();
        // 12.14.1
        if (strict && param.type === Syntax.Identifier && isRestrictedWord(param.name)) {
            throwErrorTolerant({}, Messages.StrictCatchVariable);
        }

        expect(')');
        body = parseBlock();
        return delegate.createCatchClause(param, body);
    }

    function parseTryStatement() {
        var block, handlers = [], finalizer = null;

        expectKeyword('try');

        block = parseBlock();

        if (matchKeyword('catch')) {
            handlers.push(parseCatchClause());
        }

        if (matchKeyword('finally')) {
            lex();
            finalizer = parseBlock();
        }

        if (handlers.length === 0 && !finalizer) {
            throwError({}, Messages.NoCatchOrFinally);
        }

        return delegate.createTryStatement(block, [], handlers, finalizer);
    }

    // 12.15 The debugger statement

    function parseDebuggerStatement() {
        expectKeyword('debugger');

        consumeSemicolon();

        return delegate.createDebuggerStatement();
    }

    // 12 Statements

    function parseStatement() {
        var type = lookahead.type,
            expr,
            labeledBody,
            key;

        if (type === Token.EOF) {
            throwUnexpected(lookahead);
        }

        if (type === Token.Punctuator) {
            switch (lookahead.value) {
            case ';':
                return parseEmptyStatement();
            case '{':
                return parseBlock();
            case '(':
                return parseExpressionStatement();
            case '<':
                return parseHTMLExpressionStatement();
            default:
                break;
            }
        }

        if (type === Token.Keyword) {
            switch (lookahead.value) {
            case 'break':
                return parseBreakStatement();
            case 'class':
                return parseClassDeclaration();
            case 'continue':
                return parseContinueStatement();
            case 'debugger':
                return parseDebuggerStatement();
            case 'do':
                return parseDoWhileStatement();
            case 'for':
                return parseForStatement();
            case 'function':
                return parseFunctionDeclaration();
            case 'if':
                return parseIfStatement();
            case 'return':
                return parseReturnStatement();
            case 'switch':
                return parseSwitchStatement();
            case 'throw':
                return parseThrowStatement();
            case 'try':
                return parseTryStatement();
            case 'var':
                return parseVariableStatement();
            case 'while':
                return parseWhileStatement();
            case 'with':
                return parseWithStatement();
            default:
                break;
            }
        }

        expr = parseExpression();

        // 12.12 Labelled Statements
        if ((expr.type === Syntax.Identifier) && match(':')) {
            lex();

            key = '$' + expr.name;
            if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError({}, Messages.Redeclaration, 'Label', expr.name);
            }

            state.labelSet[key] = true;
            labeledBody = parseStatement();
            delete state.labelSet[key];
            return delegate.createLabeledStatement(expr, labeledBody);
        }

        consumeSemicolon();

        return delegate.createExpressionStatement(expr);
    }

    // 13 Function Definition
    function parseFunctionSourceElements() {
        var sourceElement, sourceElements = [], token, directive, firstRestricted,
            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody;

        expect('{');

        while (index < length) {
            if (lookahead.type !== Token.StringLiteral) {
                break;
            }
            token = lookahead;

            sourceElement = parseSourceElement();
            sourceElements.push(sourceElement);
            if (sourceElement.expression.type !== Syntax.Literal) {
                // this is not directive
                break;
            }
            directive = source.slice(token.range[0] + 1, token.range[1] - 1);
            if (directive === 'use strict') {
                strict = true;
                if (firstRestricted) {
                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);
                }
            } else {
                if (!firstRestricted && token.octal) {
                    firstRestricted = token;
                }
            }
        }

        oldLabelSet = state.labelSet;
        oldInIteration = state.inIteration;
        oldInSwitch = state.inSwitch;
        oldInFunctionBody = state.inFunctionBody;

        state.labelSet = {};
        state.inIteration = false;
        state.inSwitch = false;
        state.inFunctionBody = true;

        while (index < length) {
            if (match('}')) {
                break;
            }
            sourceElement = parseSourceElement();
            if (typeof sourceElement === 'undefined') {
                break;
            }
            sourceElements.push(sourceElement);
        }

        expect('}');

        state.labelSet = oldLabelSet;
        state.inIteration = oldInIteration;
        state.inSwitch = oldInSwitch;
        state.inFunctionBody = oldInFunctionBody;

        return delegate.createBlockStatement(sourceElements);
    }

    function parseParams(firstRestricted) {
        var param, params = [], token, stricted, paramSet, key, message;
        expect('(');

        if (!match(')')) {
            paramSet = {};
            while (index < length) {
                token = lookahead;
                param = parseVariableIdentifier();
                key = '$' + token.value;
                if (strict) {
                    if (isRestrictedWord(token.value)) {
                        stricted = token;
                        message = Messages.StrictParamName;
                    }
                    if (Object.prototype.hasOwnProperty.call(paramSet, key)) {
                        stricted = token;
                        message = Messages.StrictParamDupe;
                    }
                } else if (!firstRestricted) {
                    if (isRestrictedWord(token.value)) {
                        firstRestricted = token;
                        message = Messages.StrictParamName;
                    } else if (isStrictModeReservedWord(token.value)) {
                        firstRestricted = token;
                        message = Messages.StrictReservedWord;
                    } else if (Object.prototype.hasOwnProperty.call(paramSet, key)) {
                        firstRestricted = token;
                        message = Messages.StrictParamDupe;
                    }
                }
                params.push(param);
                paramSet[key] = true;
                if (match(')')) {
                    break;
                }
                expect(',');
            }
        }

        expect(')');

        return {
            params: params,
            stricted: stricted,
            firstRestricted: firstRestricted,
            message: message
        };
    }

    function parseClassDeclaration(){

        var id,baseId, body,sourceElement, sourceElements = [], token,
            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody;

        expectKeyword('class');
        token = lookahead;
        id = parseVariableIdentifier();
        if (matchKeyword("extends")){
            lex();
            token = lookahead;
            baseId = parseVariableIdentifier();
        }

        expect('{');
        body = parseClassSourceElements();
        expect('}');

        return delegate.createClassDeclaration(id,baseId,body);

    }

    function parseClassSourceElements(){
        var sourceElement, sourceElements = [], 
            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody;

        oldLabelSet = state.labelSet;
        oldInIteration = state.inIteration;
        oldInSwitch = state.inSwitch;
        oldInFunctionBody = state.inFunctionBody;

        state.labelSet = {};
        state.inIteration = false;
        state.inSwitch = false;
        state.inFunctionBody = false;

        while (index < length) {
            if (match('}')) {
                break;
            }
            sourceElement = parseSourceElement(true);
            if (typeof sourceElement === 'undefined') {
                break;
            }
            sourceElements.push(sourceElement);
        }

         state.labelSet = oldLabelSet;
        state.inIteration = oldInIteration;
        state.inSwitch = oldInSwitch;
        state.inFunctionBody = oldInFunctionBody;

        return delegate.createBlockStatement(sourceElements);
    }

    function parseFunctionDeclaration(impliedFunction) {
        // impliedFunction is true when declaring a function within a class declaration, the function keyword is implied

        var id, params = [], body, token, stricted, tmp, firstRestricted, message, previousStrict;
        if (!impliedFunction){
            expectKeyword('function');
        }
        token = lookahead;
        id = parseVariableIdentifier();
        if (strict) {
            if (isRestrictedWord(token.value)) {
                throwErrorTolerant(token, Messages.StrictFunctionName);
            }
        } else {
            if (isRestrictedWord(token.value)) {
                firstRestricted = token;
                message = Messages.StrictFunctionName;
            } else if (isStrictModeReservedWord(token.value)) {
                firstRestricted = token;
                message = Messages.StrictReservedWord;
            }
        }

        tmp = parseParams(firstRestricted);
        params = tmp.params;
        stricted = tmp.stricted;
        firstRestricted = tmp.firstRestricted;
        if (tmp.message) {
            message = tmp.message;
        }

        previousStrict = strict;
        body = parseFunctionSourceElements();
        if (strict && firstRestricted) {
            throwError(firstRestricted, message);
        }
        if (strict && stricted) {
            throwErrorTolerant(stricted, message);
        }
        strict = previousStrict;

        return delegate.createFunctionDeclaration(id, params, [], body);
    }

    function parseFunctionExpression() {
        var token, id = null, stricted, firstRestricted, message, tmp, params = [], body, previousStrict;

        expectKeyword('function');

        if (!match('(')) {
            token = lookahead;
            id = parseVariableIdentifier();
            if (strict) {
                if (isRestrictedWord(token.value)) {
                    throwErrorTolerant(token, Messages.StrictFunctionName);
                }
            } else {
                if (isRestrictedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictFunctionName;
                } else if (isStrictModeReservedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictReservedWord;
                }
            }
        }

        tmp = parseParams(firstRestricted);
        params = tmp.params;
        stricted = tmp.stricted;
        firstRestricted = tmp.firstRestricted;
        if (tmp.message) {
            message = tmp.message;
        }

        previousStrict = strict;
        body = parseFunctionSourceElements();
        if (strict && firstRestricted) {
            throwError(firstRestricted, message);
        }
        if (strict && stricted) {
            throwErrorTolerant(stricted, message);
        }
        strict = previousStrict;

        return delegate.createFunctionExpression(id, params, [], body);
    }

    // 14 Program

    function parseSourceElement(inClassDeclaration, inProgramDeclaration) {
        if (lookahead.type === Token.Keyword) {
            switch (lookahead.value) {
            case 'const':
            case 'let':
                return parseConstLetDeclaration(lookahead.value);
            case 'function':
                return parseFunctionDeclaration();
            default:
                return parseStatement();
            }
        }

        if (lookahead.type === Token.Identifier && inClassDeclaration) {
            return parseFunctionDeclaration(true);
        }
        if(match('{') && inProgramDeclaration) {
            return parseObjectInitialiser();
        }

        if (lookahead.type !== Token.EOF) {
            return parseStatement();
        }
    }

    function parseSourceElements(inClassDeclaration, inProgramDeclaration) {
        var sourceElement, sourceElements = [], token, directive, firstRestricted;

        while (index < length) {
            token = lookahead;
            if (token.type !== Token.StringLiteral) {
                break;
            }

            sourceElement = parseSourceElement(null, inProgramDeclaration);
            sourceElements.push(sourceElement);
            if (sourceElement.expression.type !== Syntax.Literal) {
                // this is not directive
                break;
            }
            directive = source.slice(token.range[0] + 1, token.range[1] - 1);
            if (directive === 'use strict') {
                strict = true;
                if (firstRestricted) {
                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);
                }
            } else {
                if (!firstRestricted && token.octal) {
                    firstRestricted = token;
                }
            }
        }

        while (index < length) {

            try {
                sourceElement = parseSourceElement(inClassDeclaration, inProgramDeclaration);                             
            } catch(err) {
                if(err.message === "end of script") {
                    break;
                } else {
                    throw err;
                }
            }
            if (typeof sourceElement === 'undefined') {
                break;
            }
            sourceElements.push(sourceElement);
        }
        return sourceElements;
    }

   
    function parseProgram(impliedClassDefinition, inProgramDeclaration) {
        var body;
        strict = false;
        peek();
        if (impliedClassDefinition){
            body = parseClassSourceElements();
        }
        else {
            body = parseSourceElements(null, inProgramDeclaration);
        }
        return delegate.createProgram(body);
    }

    // The following functions are needed only when the option to preserve
    // the comments is active.

    function addComment(type, value, start, end, loc) {
        assert(typeof start === 'number', 'Comment must have valid position');

        // Because the way the actual token is scanned, often the comments
        // (if any) are skipped twice during the lexical analysis.
        // Thus, we need to skip adding a comment if the comment array already
        // handled it.
        if (extra.comments.length > 0) {
            if (extra.comments[extra.comments.length - 1].range[1] > start) {
                return;
            }
        }

        extra.comments.push({
            type: type,
            value: value,
            range: [start, end],
            loc: loc
        });
    }

    function scanComment() {
        var comment, ch, loc, start, blockComment, lineComment;

        comment = '';
        blockComment = false;
        lineComment = false;

        while (index < length) {
            ch = source[index];

            if (lineComment) {
                ch = source[index++];
                if (isLineTerminator(ch.charCodeAt(0))) {
                    loc.end = {
                        line: lineNumber,
                        column: index - lineStart - 1
                    };
                    lineComment = false;
                    addComment('Line', comment, start, index - 1, loc);
                    if (ch === '\r' && source[index] === '\n') {
                        ++index;
                    }
                    ++lineNumber;
                    lineStart = index;
                    comment = '';
                } else if (index >= length) {
                    lineComment = false;
                    comment += ch;
                    loc.end = {
                        line: lineNumber,
                        column: length - lineStart
                    };
                    addComment('Line', comment, start, length, loc);
                } else {
                    comment += ch;
                }
            } else if (blockComment) {
                if (isLineTerminator(ch.charCodeAt(0))) {
                    if (ch === '\r' && source[index + 1] === '\n') {
                        ++index;
                        comment += '\r\n';
                    } else {
                        comment += ch;
                    }
                    ++lineNumber;
                    ++index;
                    lineStart = index;
                    if (index >= length) {
                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                    }
                } else {
                    ch = source[index++];
                    if (index >= length) {
                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                    }
                    comment += ch;
                    if (ch === '*') {
                        ch = source[index];
                        if (ch === '/') {
                            comment = comment.substr(0, comment.length - 1);
                            blockComment = false;
                            ++index;
                            loc.end = {
                                line: lineNumber,
                                column: index - lineStart
                            };
                            addComment('Block', comment, start, index, loc);
                            comment = '';
                        }
                    }
                }
            } else if (ch === '/') {
                ch = source[index + 1];
                if (ch === '/') {
                    loc = {
                        start: {
                            line: lineNumber,
                            column: index - lineStart
                        }
                    };
                    start = index;
                    index += 2;
                    lineComment = true;
                    if (index >= length) {
                        loc.end = {
                            line: lineNumber,
                            column: index - lineStart
                        };
                        lineComment = false;
                        addComment('Line', comment, start, index, loc);
                    }
                } else if (ch === '*') {
                    start = index;
                    index += 2;
                    blockComment = true;
                    loc = {
                        start: {
                            line: lineNumber,
                            column: index - lineStart - 2
                        }
                    };
                    if (index >= length) {
                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
                    }
                } else {
                    break;
                }
            } else if (isWhiteSpace(ch.charCodeAt(0))) {
                ++index;
            } else if (isLineTerminator(ch.charCodeAt(0))) {
                ++index;
                if (ch ===  '\r' && source[index] === '\n') {
                    ++index;
                }
                ++lineNumber;
                lineStart = index;
            } else {
                break;
            }
        }
    }

    function filterCommentLocation() {
        var i, entry, comment, comments = [];

        for (i = 0; i < extra.comments.length; ++i) {
            entry = extra.comments[i];
            comment = {
                type: entry.type,
                value: entry.value
            };
            if (extra.range) {
                comment.range = entry.range;
            }
            if (extra.loc) {
                comment.loc = entry.loc;
            }
            comments.push(comment);
        }

        extra.comments = comments;
    }

    function collectToken() {
        var start, loc, token, range, value;

        skipComment();
        start = index;
        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart
            }
        };

        token = extra.advance();
        loc.end = {
            line: lineNumber,
            column: index - lineStart
        };

        if (token.type !== Token.EOF) {
            range = [token.range[0], token.range[1]];
            value = source.slice(token.range[0], token.range[1]);
            extra.tokens.push({
                type: TokenName[token.type],
                value: value,
                range: range,
                loc: loc
            });
        }

        return token;
    }

    function collectRegex() {
        var pos, loc, regex, token;

        skipComment();

        pos = index;
        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart
            }
        };

        regex = extra.scanRegExp();
        loc.end = {
            line: lineNumber,
            column: index - lineStart
        };

        if (!extra.tokenize) {
            // Pop the previous token, which is likely '/' or '/='
            if (extra.tokens.length > 0) {
                token = extra.tokens[extra.tokens.length - 1];
                if (token.range[0] === pos && token.type === 'Punctuator') {
                    if (token.value === '/' || token.value === '/=') {
                        extra.tokens.pop();
                    }
                }
            }

            extra.tokens.push({
                type: 'RegularExpression',
                value: regex.literal,
                range: [pos, index],
                loc: loc
            });
        }

        return regex;
    }

    function filterTokenLocation() {
        var i, entry, token, tokens = [];

        for (i = 0; i < extra.tokens.length; ++i) {
            entry = extra.tokens[i];
            token = {
                type: entry.type,
                value: entry.value
            };
            if (extra.range) {
                token.range = entry.range;
            }
            if (extra.loc) {
                token.loc = entry.loc;
            }
            tokens.push(token);
        }

        extra.tokens = tokens;
    }

    function createLocationMarker() {
        var marker = {};

        marker.range = [index, index];
        marker.loc = {
            start: {
                line: lineNumber,
                column: index - lineStart
            },
            end: {
                line: lineNumber,
                column: index - lineStart
            }
        };

        marker.end = function () {
            this.range[1] = index;
            this.loc.end.line = lineNumber;
            this.loc.end.column = index - lineStart;
        };

        marker.applyGroup = function (node) {
            if (extra.range) {
                node.groupRange = [this.range[0], this.range[1]];
            }
            if (extra.loc) {
                node.groupLoc = {
                    start: {
                        line: this.loc.start.line,
                        column: this.loc.start.column
                    },
                    end: {
                        line: this.loc.end.line,
                        column: this.loc.end.column
                    }
                };
                node = delegate.postProcess(node);
            }
        };

        marker.apply = function (node) {
            if (extra.range) {
                node.range = [this.range[0], this.range[1]];
            }
            if (extra.loc) {
                node.loc = {
                    start: {
                        line: this.loc.start.line,
                        column: this.loc.start.column
                    },
                    end: {
                        line: this.loc.end.line,
                        column: this.loc.end.column
                    }
                };
                node = delegate.postProcess(node);
            }
        };

        return marker;
    }

    function trackGroupExpression() {
        var marker, expr;

        skipComment();
        marker = createLocationMarker();
        expect('(');

        expr = parseExpression();

        expect(')');

        marker.end();
        marker.applyGroup(expr);

        return expr;
    }

    function trackLeftHandSideExpression() {
        var marker, expr, property;

        skipComment();
        marker = createLocationMarker();

        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();

        while (match('.') || match('[')) {
            if (match('[')) {
                property = parseComputedMember();
                expr = delegate.createMemberExpression('[', expr, property);
                marker.end();
                marker.apply(expr);
            } else {
                property = parseNonComputedMember();
                expr = delegate.createMemberExpression('.', expr, property);
                marker.end();
                marker.apply(expr);
            }
        }

        return expr;
    }

    function trackLeftHandSideExpressionAllowCall() {
        var marker, expr, args, property;

        skipComment();
        marker = createLocationMarker();

        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();

        while (match('.') || match('[') || match('(')) {
            if (match('(')) {
                args = parseArguments();
                expr = delegate.createCallExpression(expr, args);
                marker.end();
                marker.apply(expr);
            } else if (match('[')) {
                property = parseComputedMember();
                expr = delegate.createMemberExpression('[', expr, property);
                marker.end();
                marker.apply(expr);
            } else {
                property = parseNonComputedMember();
                expr = delegate.createMemberExpression('.', expr, property);
                marker.end();
                marker.apply(expr);
            }
        }

        return expr;
    }

    function filterGroup(node) {
        var n, i, entry;

        n = (Object.prototype.toString.apply(node) === '[object Array]') ? [] : {};
        for (i in node) {
            if (node.hasOwnProperty(i) && i !== 'groupRange' && i !== 'groupLoc') {
                entry = node[i];
                if (entry === null || typeof entry !== 'object' || entry instanceof RegExp) {
                    n[i] = entry;
                } else {
                    n[i] = filterGroup(entry);
                }
            }
        }
        return n;
    }

    function wrapTrackingFunction(range, loc) {

        return function (parseFunction) {

            function isBinary(node) {
                return node.type === Syntax.LogicalExpression ||
                    node.type === Syntax.BinaryExpression;
            }

            function visit(node) {
                var start, end;

                if (isBinary(node.left)) {
                    visit(node.left);
                }
                if (isBinary(node.right)) {
                    visit(node.right);
                }

                if (range) {
                    if (node.left.groupRange || node.right.groupRange) {
                        start = node.left.groupRange ? node.left.groupRange[0] : node.left.range[0];
                        end = node.right.groupRange ? node.right.groupRange[1] : node.right.range[1];
                        node.range = [start, end];
                    } else if (typeof node.range === 'undefined') {
                        start = node.left.range[0];
                        end = node.right.range[1];
                        node.range = [start, end];
                    }
                }
                if (loc) {
                    if (node.left.groupLoc || node.right.groupLoc) {
                        start = node.left.groupLoc ? node.left.groupLoc.start : node.left.loc.start;
                        end = node.right.groupLoc ? node.right.groupLoc.end : node.right.loc.end;
                        node.loc = {
                            start: start,
                            end: end
                        };
                        node = delegate.postProcess(node);
                    } else if (typeof node.loc === 'undefined') {
                        node.loc = {
                            start: node.left.loc.start,
                            end: node.right.loc.end
                        };
                        node = delegate.postProcess(node);
                    }
                }
            }

            return function () {
                var marker, node;

                skipComment();

                marker = createLocationMarker();
                node = parseFunction.apply(null, arguments);
                marker.end();

                if (range && typeof node.range === 'undefined') {
                    marker.apply(node);
                }

                if (loc && typeof node.loc === 'undefined') {
                    marker.apply(node);
                }

                if (isBinary(node)) {
                    visit(node);
                }

                return node;
            };
        };
    }

    function patch() {

        var wrapTracking;

        if (extra.comments) {
            extra.skipComment = skipComment;
            skipComment = scanComment;
        }

        if (extra.range || extra.loc) {

            extra.parseGroupExpression = parseGroupExpression;
            extra.parseLeftHandSideExpression = parseLeftHandSideExpression;
            extra.parseLeftHandSideExpressionAllowCall = parseLeftHandSideExpressionAllowCall;
            parseGroupExpression = trackGroupExpression;
            parseLeftHandSideExpression = trackLeftHandSideExpression;
            parseLeftHandSideExpressionAllowCall = trackLeftHandSideExpressionAllowCall;

            wrapTracking = wrapTrackingFunction(extra.range, extra.loc);

            extra.parseAssignmentExpression = parseAssignmentExpression;
            extra.parseBinaryExpression = parseBinaryExpression;
            extra.parseBlock = parseBlock;
            extra.parseFunctionSourceElements = parseFunctionSourceElements;
            extra.parseCatchClause = parseCatchClause;
            extra.parseComputedMember = parseComputedMember;
            extra.parseConditionalExpression = parseConditionalExpression;
            extra.parseConstLetDeclaration = parseConstLetDeclaration;
            extra.parseExpression = parseExpression;
            extra.parseForVariableDeclaration = parseForVariableDeclaration;
            extra.parseFunctionDeclaration = parseFunctionDeclaration;
            extra.parseFunctionExpression = parseFunctionExpression;
            extra.parseNewExpression = parseNewExpression;
            extra.parseNonComputedProperty = parseNonComputedProperty;
            extra.parseObjectProperty = parseObjectProperty;
            extra.parseObjectPropertyKey = parseObjectPropertyKey;
            extra.parsePostfixExpression = parsePostfixExpression;
            extra.parsePrimaryExpression = parsePrimaryExpression;
            extra.parseProgram = parseProgram;
            extra.parsePropertyFunction = parsePropertyFunction;
            extra.parseStatement = parseStatement;
            extra.parseSwitchCase = parseSwitchCase;
            extra.parseUnaryExpression = parseUnaryExpression;
            extra.parseVariableDeclaration = parseVariableDeclaration;
            extra.parseVariableIdentifier = parseVariableIdentifier;

            parseAssignmentExpression = wrapTracking(extra.parseAssignmentExpression);
            parseBinaryExpression = wrapTracking(extra.parseBinaryExpression);
            parseBlock = wrapTracking(extra.parseBlock);
            parseFunctionSourceElements = wrapTracking(extra.parseFunctionSourceElements);
            parseCatchClause = wrapTracking(extra.parseCatchClause);
            parseComputedMember = wrapTracking(extra.parseComputedMember);
            parseConditionalExpression = wrapTracking(extra.parseConditionalExpression);
            parseConstLetDeclaration = wrapTracking(extra.parseConstLetDeclaration);
            parseExpression = wrapTracking(extra.parseExpression);
            parseForVariableDeclaration = wrapTracking(extra.parseForVariableDeclaration);
            parseFunctionDeclaration = wrapTracking(extra.parseFunctionDeclaration);
            parseFunctionExpression = wrapTracking(extra.parseFunctionExpression);
            parseLeftHandSideExpression = wrapTracking(parseLeftHandSideExpression);
            parseNewExpression = wrapTracking(extra.parseNewExpression);
            parseNonComputedProperty = wrapTracking(extra.parseNonComputedProperty);
            parseObjectProperty = wrapTracking(extra.parseObjectProperty);
            parseObjectPropertyKey = wrapTracking(extra.parseObjectPropertyKey);
            parsePostfixExpression = wrapTracking(extra.parsePostfixExpression);
            parsePrimaryExpression = wrapTracking(extra.parsePrimaryExpression);
            parseProgram = wrapTracking(extra.parseProgram);
            parsePropertyFunction = wrapTracking(extra.parsePropertyFunction);
            parseStatement = wrapTracking(extra.parseStatement);
            parseSwitchCase = wrapTracking(extra.parseSwitchCase);
            parseUnaryExpression = wrapTracking(extra.parseUnaryExpression);
            parseVariableDeclaration = wrapTracking(extra.parseVariableDeclaration);
            parseVariableIdentifier = wrapTracking(extra.parseVariableIdentifier);
        }

        if (typeof extra.tokens !== 'undefined') {
            extra.advance = advance;
            extra.scanRegExp = scanRegExp;

            advance = collectToken;
            scanRegExp = collectRegex;
        }
    }

    function unpatch() {
        if (typeof extra.skipComment === 'function') {
            skipComment = extra.skipComment;
        }

        if (extra.range || extra.loc) {
            parseAssignmentExpression = extra.parseAssignmentExpression;
            parseBinaryExpression = extra.parseBinaryExpression;
            parseBlock = extra.parseBlock;
            parseFunctionSourceElements = extra.parseFunctionSourceElements;
            parseCatchClause = extra.parseCatchClause;
            parseComputedMember = extra.parseComputedMember;
            parseConditionalExpression = extra.parseConditionalExpression;
            parseConstLetDeclaration = extra.parseConstLetDeclaration;
            parseExpression = extra.parseExpression;
            parseForVariableDeclaration = extra.parseForVariableDeclaration;
            parseFunctionDeclaration = extra.parseFunctionDeclaration;
            parseFunctionExpression = extra.parseFunctionExpression;
            parseGroupExpression = extra.parseGroupExpression;
            parseLeftHandSideExpression = extra.parseLeftHandSideExpression;
            parseLeftHandSideExpressionAllowCall = extra.parseLeftHandSideExpressionAllowCall;
            parseNewExpression = extra.parseNewExpression;
            parseNonComputedProperty = extra.parseNonComputedProperty;
            parseObjectProperty = extra.parseObjectProperty;
            parseObjectPropertyKey = extra.parseObjectPropertyKey;
            parsePrimaryExpression = extra.parsePrimaryExpression;
            parsePostfixExpression = extra.parsePostfixExpression;
            parseProgram = extra.parseProgram;
            parsePropertyFunction = extra.parsePropertyFunction;
            parseStatement = extra.parseStatement;
            parseSwitchCase = extra.parseSwitchCase;
            parseUnaryExpression = extra.parseUnaryExpression;
            parseVariableDeclaration = extra.parseVariableDeclaration;
            parseVariableIdentifier = extra.parseVariableIdentifier;
        }

        if (typeof extra.scanRegExp === 'function') {
            advance = extra.advance;
            scanRegExp = extra.scanRegExp;
        }
    }

    // This is used to modify the delegate.

    function extend(object, properties) {
        var entry, result = {};

        for (entry in object) {
            if (object.hasOwnProperty(entry)) {
                result[entry] = object[entry];
            }
        }

        for (entry in properties) {
            if (properties.hasOwnProperty(entry)) {
                result[entry] = properties[entry];
            }
        }

        return result;
    }

    function tokenize(code, options) {
        var toString,
            token,
            tokens;

        toString = String;
        if (typeof code !== 'string' && !(code instanceof String)) {
            code = toString(code);
        }

        delegate = SyntaxTreeDelegate;
        source = code;
        index = 0;
        lineNumber = (source.length > 0) ? 1 : 0;
        lineStart = 0;
        length = source.length;
        lookahead = null;
        state = {
            allowIn: true,
            labelSet: {},
            inFunctionBody: false,
            inIteration: false,
            inSwitch: false
        };

        extra = {};

        // Options matching.
        options = options || {};

        // Of course we collect tokens here.
        options.tokens = true;
        extra.tokens = [];
        extra.tokenize = true;
        // The following two fields are necessary to compute the Regex tokens.
        extra.openParenToken = -1;
        extra.openCurlyToken = -1;

        extra.range = (typeof options.range === 'boolean') && options.range;
        extra.loc = (typeof options.loc === 'boolean') && options.loc;

        if (typeof options.comment === 'boolean' && options.comment) {
            extra.comments = [];
        }
        if (typeof options.tolerant === 'boolean' && options.tolerant) {
            extra.errors = [];
        }

        if (length > 0) {
            if (typeof source[0] === 'undefined') {
                // Try first to convert to a string. This is good as fast path
                // for old IE which understands string indexing for string
                // literals only and not for string object.
                if (code instanceof String) {
                    source = code.valueOf();
                }
            }
        }

        patch();

        try {
            peek();
            if (lookahead.type === Token.EOF) {
                return extra.tokens;
            }

            token = lex();
            while (lookahead.type !== Token.EOF) {
                try {
                    token = lex();
                } catch (lexError) {
                    token = lookahead;
                    if (extra.errors) {
                        extra.errors.push(lexError);
                        // We have to break on the first error
                        // to avoid infinite loops.
                        break;
                    } else {
                        throw lexError;
                    }
                }
            }

            filterTokenLocation();
            tokens = extra.tokens;
            if (typeof extra.comments !== 'undefined') {
                filterCommentLocation();
                tokens.comments = extra.comments;
            }
            if (typeof extra.errors !== 'undefined') {
                tokens.errors = extra.errors;
            }
        } catch (e) {
            throw e;
        } finally {
            unpatch();
            extra = {};
        }
        return tokens;
    }

    function parse(code, options) {
        var program, toString;

        toString = String;
        if (typeof code !== 'string' && !(code instanceof String)) {
            code = toString(code);
        }

        delegate = SyntaxTreeDelegate;
        source = code;
        index = 0;
        lineNumber = (source.length > 0) ? 1 : 0;
        lineStart = 0;
        length = source.length;
        lookahead = null;
        state = {
            allowIn: true,
            labelSet: {},
            inFunctionBody: false,
            inIteration: false,
            inSwitch: false
        };
        var impliedClass = false;

        extra = {};
        if (typeof options !== 'undefined') {
            extra.range = (typeof options.range === 'boolean') && options.range;
            extra.loc = (typeof options.loc === 'boolean') && options.loc;

            if (extra.loc && options.source !== null && options.source !== undefined) {
                delegate = extend(delegate, {
                    'postProcess': function (node) {
                        node.loc.source = toString(options.source);
                        return node;
                    }
                });
            }

            if (typeof options.tokens === 'boolean' && options.tokens) {
                extra.tokens = [];
            }
            if (typeof options.comment === 'boolean' && options.comment) {
                extra.comments = [];
            }
            if (typeof options.tolerant === 'boolean' && options.tolerant) {
                extra.errors = [];
            }
        }

        if (length > 0) {
            if (typeof source[0] === 'undefined') {
                // Try first to convert to a string. This is good as fast path
                // for old IE which understands string indexing for string
                // literals only and not for string object.
                if (code instanceof String) {
                    source = code.valueOf();
                }
            }
        }

        patch();
        try {
            program = parseProgram(impliedClass);
            if (typeof extra.comments !== 'undefined') {
                filterCommentLocation();
                program.comments = extra.comments;
            }
            if (typeof extra.tokens !== 'undefined') {
                filterTokenLocation();
                program.tokens = extra.tokens;
            }
            if (typeof extra.errors !== 'undefined') {
                program.errors = extra.errors;
            }
            if (extra.range || extra.loc) {
                program.body = filterGroup(program.body);
            }
        } catch (e) {
            throw e;
        } finally {
            unpatch();
            extra = {};
        }

        return program;
    }

    // Sync with package.json and component.json.
    exports.version = '1.1.0-dev';

    exports.tokenize = tokenize;

    exports.parse = parse;

    // Deep copy.
    exports.Syntax = (function () {
        var name, types = {};

        if (typeof Object.create === 'function') {
            types = Object.create(null);
        }

        for (name in Syntax) {
            if (Syntax.hasOwnProperty(name)) {
                types[name] = Syntax[name];
            }
        }

        if (typeof Object.freeze === 'function') {
            Object.freeze(types);
        }

        return types;
    }());

}));
/* vim: set sw=4 ts=4 et tw=80 : */(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],2:[function(require,module,exports){
'use strict';

exports.Parser = require('./lib/tree_construction/parser');
exports.SimpleApiParser = require('./lib/simple_api/simple_api_parser');
exports.TreeSerializer =
exports.Serializer = require('./lib/serialization/serializer');
exports.JsDomParser = require('./lib/jsdom/jsdom_parser');

exports.TreeAdapters = {
    default: require('./lib/tree_adapters/default'),
    htmlparser2: require('./lib/tree_adapters/htmlparser2')
};

},{"./lib/jsdom/jsdom_parser":7,"./lib/serialization/serializer":9,"./lib/simple_api/simple_api_parser":10,"./lib/tree_adapters/default":15,"./lib/tree_adapters/htmlparser2":16,"./lib/tree_construction/parser":20}],3:[function(require,module,exports){
'use strict';

var Tokenizer = require('../tokenization/tokenizer'),
    HTML = require('./html');

//Aliases
var $ = HTML.TAG_NAMES,
    NS = HTML.NAMESPACES,
    ATTRS = HTML.ATTRS;


//MIME types
var MIME_TYPES = {
    TEXT_HTML: 'text/html',
    APPLICATION_XML: 'application/xhtml+xml'
};

//Attributes
var DEFINITION_URL_ATTR = 'definitionurl',
    ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL',
    SVG_ATTRS_ADJUSTMENT_MAP = {
        'attributename': 'attributeName',
        'attributetype': 'attributeType',
        'basefrequency': 'baseFrequency',
        'baseprofile': 'baseProfile',
        'calcmode': 'calcMode',
        'clippathunits': 'clipPathUnits',
        'contentscripttype': 'contentScriptType',
        'contentstyletype': 'contentStyleType',
        'diffuseconstant': 'diffuseConstant',
        'edgemode': 'edgeMode',
        'externalresourcesrequired': 'externalResourcesRequired',
        'filterres': 'filterRes',
        'filterunits': 'filterUnits',
        'glyphref': 'glyphRef',
        'gradienttransform': 'gradientTransform',
        'gradientunits': 'gradientUnits',
        'kernelmatrix': 'kernelMatrix',
        'kernelunitlength': 'kernelUnitLength',
        'keypoints': 'keyPoints',
        'keysplines': 'keySplines',
        'keytimes': 'keyTimes',
        'lengthadjust': 'lengthAdjust',
        'limitingconeangle': 'limitingConeAngle',
        'markerheight': 'markerHeight',
        'markerunits': 'markerUnits',
        'markerwidth': 'markerWidth',
        'maskcontentunits': 'maskContentUnits',
        'maskunits': 'maskUnits',
        'numoctaves': 'numOctaves',
        'pathlength': 'pathLength',
        'patterncontentunits': 'patternContentUnits',
        'patterntransform': 'patternTransform',
        'patternunits': 'patternUnits',
        'pointsatx': 'pointsAtX',
        'pointsaty': 'pointsAtY',
        'pointsatz': 'pointsAtZ',
        'preservealpha': 'preserveAlpha',
        'preserveaspectratio': 'preserveAspectRatio',
        'primitiveunits': 'primitiveUnits',
        'refx': 'refX',
        'refy': 'refY',
        'repeatcount': 'repeatCount',
        'repeatdur': 'repeatDur',
        'requiredextensions': 'requiredExtensions',
        'requiredfeatures': 'requiredFeatures',
        'specularconstant': 'specularConstant',
        'specularexponent': 'specularExponent',
        'spreadmethod': 'spreadMethod',
        'startoffset': 'startOffset',
        'stddeviation': 'stdDeviation',
        'stitchtiles': 'stitchTiles',
        'surfacescale': 'surfaceScale',
        'systemlanguage': 'systemLanguage',
        'tablevalues': 'tableValues',
        'targetx': 'targetX',
        'targety': 'targetY',
        'textlength': 'textLength',
        'viewbox': 'viewBox',
        'viewtarget': 'viewTarget',
        'xchannelselector': 'xChannelSelector',
        'ychannelselector': 'yChannelSelector',
        'zoomandpan': 'zoomAndPan'
    },
    XML_ATTRS_ADJUSTMENT_MAP = {
        'xlink:actuate': {prefix: 'xlink', name: 'actuate', namespace: NS.XLINK},
        'xlink:arcrole': {prefix: 'xlink', name: 'arcrole', namespace: NS.XLINK},
        'xlink:href': {prefix: 'xlink', name: 'href', namespace: NS.XLINK},
        'xlink:role': {prefix: 'xlink', name: 'role', namespace: NS.XLINK},
        'xlink:show': {prefix: 'xlink', name: 'show', namespace: NS.XLINK},
        'xlink:title': {prefix: 'xlink', name: 'title', namespace: NS.XLINK},
        'xlink:type': {prefix: 'xlink', name: 'type', namespace: NS.XLINK},
        'xml:base': {prefix: 'xml', name: 'base', namespace: NS.XML},
        'xml:lang': {prefix: 'xml', name: 'lang', namespace: NS.XML},
        'xml:space': {prefix: 'xml', name: 'space', namespace: NS.XML},
        'xmlns': {prefix: '', name: 'xmlns', namespace: NS.XMLNS},
        'xmlns:xlink': {prefix: 'xmlns', name: 'xlink', namespace: NS.XMLNS}

    };

//SVG tag names adjustment map
var SVG_TAG_NAMES_ADJUSTMENT_MAP = {
    'altglyph': 'altGlyph',
    'altglyphdef': 'altGlyphDef',
    'altglyphitem': 'altGlyphItem',
    'animatecolor': 'animateColor',
    'animatemotion': 'animateMotion',
    'animatetransform': 'animateTransform',
    'clippath': 'clipPath',
    'feblend': 'feBlend',
    'fecolormatrix': 'feColorMatrix',
    'fecomponenttransfer': 'feComponentTransfer',
    'fecomposite': 'feComposite',
    'feconvolvematrix': 'feConvolveMatrix',
    'fediffuselighting': 'feDiffuseLighting',
    'fedisplacementmap': 'feDisplacementMap',
    'fedistantlight': 'feDistantLight',
    'feflood': 'feFlood',
    'fefunca': 'feFuncA',
    'fefuncb': 'feFuncB',
    'fefuncg': 'feFuncG',
    'fefuncr': 'feFuncR',
    'fegaussianblur': 'feGaussianBlur',
    'feimage': 'feImage',
    'femerge': 'feMerge',
    'femergenode': 'feMergeNode',
    'femorphology': 'feMorphology',
    'feoffset': 'feOffset',
    'fepointlight': 'fePointLight',
    'fespecularlighting': 'feSpecularLighting',
    'fespotlight': 'feSpotLight',
    'fetile': 'feTile',
    'feturbulence': 'feTurbulence',
    'foreignobject': 'foreignObject',
    'glyphref': 'glyphRef',
    'lineargradient': 'linearGradient',
    'radialgradient': 'radialGradient',
    'textpath': 'textPath'
};

//Tags that causes exit from foreign content
var EXITS_FOREIGN_CONTENT = {};

EXITS_FOREIGN_CONTENT[$.B] = true;
EXITS_FOREIGN_CONTENT[$.BIG] = true;
EXITS_FOREIGN_CONTENT[$.BLOCKQUOTE] = true;
EXITS_FOREIGN_CONTENT[$.BODY] = true;
EXITS_FOREIGN_CONTENT[$.BR] = true;
EXITS_FOREIGN_CONTENT[$.CENTER] = true;
EXITS_FOREIGN_CONTENT[$.CODE] = true;
EXITS_FOREIGN_CONTENT[$.DD] = true;
EXITS_FOREIGN_CONTENT[$.DIV] = true;
EXITS_FOREIGN_CONTENT[$.DL] = true;
EXITS_FOREIGN_CONTENT[$.DT] = true;
EXITS_FOREIGN_CONTENT[$.EM] = true;
EXITS_FOREIGN_CONTENT[$.EMBED] = true;
EXITS_FOREIGN_CONTENT[$.H1] = true;
EXITS_FOREIGN_CONTENT[$.H2] = true;
EXITS_FOREIGN_CONTENT[$.H3] = true;
EXITS_FOREIGN_CONTENT[$.H4] = true;
EXITS_FOREIGN_CONTENT[$.H5] = true;
EXITS_FOREIGN_CONTENT[$.H6] = true;
EXITS_FOREIGN_CONTENT[$.HEAD] = true;
EXITS_FOREIGN_CONTENT[$.HR] = true;
EXITS_FOREIGN_CONTENT[$.I] = true;
EXITS_FOREIGN_CONTENT[$.IMG] = true;
EXITS_FOREIGN_CONTENT[$.LI] = true;
EXITS_FOREIGN_CONTENT[$.LISTING] = true;
EXITS_FOREIGN_CONTENT[$.MENU] = true;
EXITS_FOREIGN_CONTENT[$.META] = true;
EXITS_FOREIGN_CONTENT[$.NOBR] = true;
EXITS_FOREIGN_CONTENT[$.OL] = true;
EXITS_FOREIGN_CONTENT[$.P] = true;
EXITS_FOREIGN_CONTENT[$.PRE] = true;
EXITS_FOREIGN_CONTENT[$.RUBY] = true;
EXITS_FOREIGN_CONTENT[$.S] = true;
EXITS_FOREIGN_CONTENT[$.SMALL] = true;
EXITS_FOREIGN_CONTENT[$.SPAN] = true;
EXITS_FOREIGN_CONTENT[$.STRONG] = true;
EXITS_FOREIGN_CONTENT[$.STRIKE] = true;
EXITS_FOREIGN_CONTENT[$.SUB] = true;
EXITS_FOREIGN_CONTENT[$.SUP] = true;
EXITS_FOREIGN_CONTENT[$.TABLE] = true;
EXITS_FOREIGN_CONTENT[$.TT] = true;
EXITS_FOREIGN_CONTENT[$.U] = true;
EXITS_FOREIGN_CONTENT[$.UL] = true;
EXITS_FOREIGN_CONTENT[$.VAR] = true;

//Check exit from foreign content
exports.causesExit = function (startTagToken) {
    var tn = startTagToken.tagName;

    if (tn === $.FONT && (Tokenizer.getTokenAttr(startTagToken, ATTRS.COLOR) !== null ||
        Tokenizer.getTokenAttr(startTagToken, ATTRS.SIZE) !== null ||
        Tokenizer.getTokenAttr(startTagToken, ATTRS.FACE) !== null)) {
        return true;
    }

    return EXITS_FOREIGN_CONTENT[tn];
};

//Token adjustments
exports.adjustTokenMathMLAttrs = function (token) {
    for (var i = 0; i < token.attrs.length; i++) {
        if (token.attrs[i].name === DEFINITION_URL_ATTR) {
            token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
            break;
        }
    }
};

exports.adjustTokenSVGAttrs = function (token) {
    for (var i = 0; i < token.attrs.length; i++) {
        var adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];

        if (adjustedAttrName)
            token.attrs[i].name = adjustedAttrName;
    }
};

exports.adjustTokenXMLAttrs = function (token) {
    for (var i = 0; i < token.attrs.length; i++) {
        var adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];

        if (adjustedAttrEntry) {
            token.attrs[i].prefix = adjustedAttrEntry.prefix;
            token.attrs[i].name = adjustedAttrEntry.name;
            token.attrs[i].namespace = adjustedAttrEntry.namespace;
        }
    }
};

exports.adjustTokenSVGTagName = function (token) {
    var adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP[token.tagName];

    if (adjustedTagName)
        token.tagName = adjustedTagName;
};

//Integration points
exports.isMathMLTextIntegrationPoint = function (tn, ns) {
    return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);
};

exports.isHtmlIntegrationPoint = function (tn, ns, attrs) {
    if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {
        for (var i = 0; i < attrs.length; i++) {
            if (attrs[i].name === ATTRS.ENCODING) {
                var value = attrs[i].value.toLowerCase();

                return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
            }
        }
    }

    return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);
};

},{"../tokenization/tokenizer":14,"./html":4}],4:[function(require,module,exports){
'use strict';

var NS = exports.NAMESPACES = {
    HTML: 'http://www.w3.org/1999/xhtml',
    MATHML: 'http://www.w3.org/1998/Math/MathML',
    SVG: 'http://www.w3.org/2000/svg',
    XLINK: 'http://www.w3.org/1999/xlink',
    XML: 'http://www.w3.org/XML/1998/namespace',
    XMLNS: 'http://www.w3.org/2000/xmlns/'
};

exports.ATTRS = {
    TYPE: 'type',
    ACTION: 'action',
    ENCODING: 'encoding',
    PROMPT: 'prompt',
    NAME: 'name',
    COLOR: 'color',
    FACE: 'face',
    SIZE: 'size'
};

var $ = exports.TAG_NAMES = {
    A: 'a',
    ADDRESS: 'address',
    ANNOTATION_XML: 'annotation-xml',
    APPLET: 'applet',
    AREA: 'area',
    ARTICLE: 'article',
    ASIDE: 'aside',

    B: 'b',
    BASE: 'base',
    BASEFONT: 'basefont',
    BGSOUND: 'bgsound',
    BIG: 'big',
    BLOCKQUOTE: 'blockquote',
    BODY: 'body',
    BR: 'br',
    BUTTON: 'button',

    CAPTION: 'caption',
    CENTER: 'center',
    CODE: 'code',
    COL: 'col',
    COLGROUP: 'colgroup',
    COMMAND: 'command',

    DD: 'dd',
    DESC: 'desc',
    DETAILS: 'details',
    DIALOG: 'dialog',
    DIR: 'dir',
    DIV: 'div',
    DL: 'dl',
    DT: 'dt',

    EM: 'em',
    EMBED: 'embed',

    FIELDSET: 'fieldset',
    FIGCAPTION: 'figcaption',
    FIGURE: 'figure',
    FONT: 'font',
    FOOTER: 'footer',
    FOREIGN_OBJECT: 'foreignObject',
    FORM: 'form',
    FRAME: 'frame',
    FRAMESET: 'frameset',

    H1: 'h1',
    H2: 'h2',
    H3: 'h3',
    H4: 'h4',
    H5: 'h5',
    H6: 'h6',
    HEAD: 'head',
    HEADER: 'header',
    HGROUP: 'hgroup',
    HR: 'hr',
    HTML: 'html',

    I: 'i',
    IMG: 'img',
    IMAGE: 'image',
    INPUT: 'input',
    IFRAME: 'iframe',
    ISINDEX: 'isindex',

    KEYGEN: 'keygen',

    LABEL: 'label',
    LI: 'li',
    LINK: 'link',
    LISTING: 'listing',

    MAIN: 'main',
    MALIGNMARK: 'malignmark',
    MARQUEE: 'marquee',
    MATH: 'math',
    MENU: 'menu',
    MENUITEM: 'menuitem',
    META: 'meta',
    MGLYPH: 'mglyph',
    MI: 'mi',
    MO: 'mo',
    MN: 'mn',
    MS: 'ms',
    MTEXT: 'mtext',

    NAV: 'nav',
    NOBR: 'nobr',
    NOFRAMES: 'noframes',
    NOEMBED: 'noembed',
    NOSCRIPT: 'noscript',

    OBJECT: 'object',
    OL: 'ol',
    OPTGROUP: 'optgroup',
    OPTION: 'option',

    P: 'p',
    PARAM: 'param',
    PLAINTEXT: 'plaintext',
    PRE: 'pre',

    RP: 'rp',
    RT: 'rt',
    RUBY: 'ruby',

    S: 's',
    SCRIPT: 'script',
    SECTION: 'section',
    SELECT: 'select',
    SOURCE: 'source',
    SMALL: 'small',
    SPAN: 'span',
    STRIKE: 'strike',
    STRONG: 'strong',
    STYLE: 'style',
    SUB: 'sub',
    SUMMARY: 'summary',
    SUP: 'sup',

    TABLE: 'table',
    TBODY: 'tbody',
    TEMPLATE: 'template',
    TEXTAREA: 'textarea',
    TFOOT: 'tfoot',
    TD: 'td',
    TH: 'th',
    THEAD: 'thead',
    TITLE: 'title',
    TR: 'tr',
    TRACK: 'track',
    TT: 'tt',

    U: 'u',
    UL: 'ul',

    SVG: 'svg',

    VAR: 'var',

    WBR: 'wbr',

    XMP: 'xmp'
};

var SPECIAL_ELEMENTS = exports.SPECIAL_ELEMENTS = {};

SPECIAL_ELEMENTS[NS.HTML] = {};
SPECIAL_ELEMENTS[NS.HTML][$.ADDRESS] = true;
SPECIAL_ELEMENTS[NS.HTML][$.APPLET] = true;
SPECIAL_ELEMENTS[NS.HTML][$.AREA] = true;
SPECIAL_ELEMENTS[NS.HTML][$.ARTICLE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.ASIDE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BASE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BASEFONT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BGSOUND] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BLOCKQUOTE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BODY] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BUTTON] = true;
SPECIAL_ELEMENTS[NS.HTML][$.CAPTION] = true;
SPECIAL_ELEMENTS[NS.HTML][$.CENTER] = true;
SPECIAL_ELEMENTS[NS.HTML][$.COL] = true;
SPECIAL_ELEMENTS[NS.HTML][$.COLGROUP] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DD] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DETAILS] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DIR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DIV] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DL] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.EMBED] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FIELDSET] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FIGCAPTION] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FIGURE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FOOTER] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FORM] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FRAME] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FRAMESET] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H1] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H2] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H3] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H4] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H5] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H6] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HEAD] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HEADER] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HGROUP] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HTML] = true;
SPECIAL_ELEMENTS[NS.HTML][$.IFRAME] = true;
SPECIAL_ELEMENTS[NS.HTML][$.IMG] = true;
SPECIAL_ELEMENTS[NS.HTML][$.INPUT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.ISINDEX] = true;
SPECIAL_ELEMENTS[NS.HTML][$.LI] = true;
SPECIAL_ELEMENTS[NS.HTML][$.LINK] = true;
SPECIAL_ELEMENTS[NS.HTML][$.LISTING] = true;
SPECIAL_ELEMENTS[NS.HTML][$.MAIN] = true;
SPECIAL_ELEMENTS[NS.HTML][$.MARQUEE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.MENU] = true;
SPECIAL_ELEMENTS[NS.HTML][$.MENUITEM] = true;
SPECIAL_ELEMENTS[NS.HTML][$.META] = true;
SPECIAL_ELEMENTS[NS.HTML][$.NAV] = true;
SPECIAL_ELEMENTS[NS.HTML][$.NOEMBED] = true;
SPECIAL_ELEMENTS[NS.HTML][$.NOFRAMES] = true;
SPECIAL_ELEMENTS[NS.HTML][$.NOSCRIPT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.OBJECT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.OL] = true;
SPECIAL_ELEMENTS[NS.HTML][$.P] = true;
SPECIAL_ELEMENTS[NS.HTML][$.PARAM] = true;
SPECIAL_ELEMENTS[NS.HTML][$.PLAINTEXT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.PRE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SCRIPT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SECTION] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SELECT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SOURCE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.STYLE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SUMMARY] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TABLE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TBODY] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TD] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TEMPLATE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TEXTAREA] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TFOOT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TH] = true;
SPECIAL_ELEMENTS[NS.HTML][$.THEAD] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TITLE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TRACK] = true;
SPECIAL_ELEMENTS[NS.HTML][$.UL] = true;
SPECIAL_ELEMENTS[NS.HTML][$.WBR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.XMP] = true;

SPECIAL_ELEMENTS[NS.MATHML] = {};
SPECIAL_ELEMENTS[NS.MATHML][$.MI] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.MO] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.MN] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.MS] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.MTEXT] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.ANNOTATION_XML] = true;

SPECIAL_ELEMENTS[NS.SVG] = {};
SPECIAL_ELEMENTS[NS.SVG][$.TITLE] = true;
SPECIAL_ELEMENTS[NS.SVG][$.FOREIGN_OBJECT] = true;
SPECIAL_ELEMENTS[NS.SVG][$.DESC] = true;

},{}],5:[function(require,module,exports){
'use strict';

exports.REPLACEMENT_CHARACTER = '\uFFFD';

exports.CODE_POINTS = {
    EOF: -1,
    NULL: 0x00,
    TABULATION: 0x09,
    CARRIAGE_RETURN: 0x0D,
    LINE_FEED: 0x0A,
    FORM_FEED: 0x0C,
    SPACE: 0x20,
    EXCLAMATION_MARK: 0x21,
    QUOTATION_MARK: 0x22,
    NUMBER_SIGN: 0x23,
    AMPERSAND: 0x26,
    APOSTROPHE: 0x27,
    HYPHEN_MINUS: 0x2D,
    SOLIDUS: 0x2F,
    DIGIT_0: 0x30,
    DIGIT_9: 0x39,
    SEMICOLON: 0x3B,
    LESS_THAN_SIGN: 0x3C,
    EQUALS_SIGN: 0x3D,
    GREATER_THAN_SIGN: 0x3E,
    QUESTION_MARK: 0x3F,
    LATIN_CAPITAL_A: 0x41,
    LATIN_CAPITAL_F: 0x46,
    LATIN_CAPITAL_X: 0x58,
    LATIN_CAPITAL_Z: 0x5A,
    GRAVE_ACCENT: 0x60,
    LATIN_SMALL_A: 0x61,
    LATIN_SMALL_F: 0x66,
    LATIN_SMALL_X: 0x78,
    LATIN_SMALL_Z: 0x7A,
    BOM: 0xFEFF,
    REPLACEMENT_CHARACTER: 0xFFFD
};

exports.CODE_POINT_SEQUENCES = {
    DASH_DASH_STRING: [0x2D, 0x2D], //--
    DOCTYPE_STRING: [0x44, 0x4F, 0x43, 0x54, 0x59, 0x50, 0x45], //DOCTYPE
    CDATA_START_STRING: [0x5B, 0x43, 0x44, 0x41, 0x54, 0x41, 0x5B], //[CDATA[
    CDATA_END_STRING: [0x5D, 0x5D, 0x3E], //]]>
    SCRIPT_STRING: [0x73, 0x63, 0x72, 0x69, 0x70, 0x74], //script
    PUBLIC_STRING: [0x50, 0x55, 0x42, 0x4C, 0x49, 0x43], //PUBLIC
    SYSTEM_STRING: [0x53, 0x59, 0x53, 0x54, 0x45, 0x4D] //SYSTEM
};

},{}],6:[function(require,module,exports){
'use strict';

exports.mergeOptions = function (defaults, options) {
    options = options || {};

    return [defaults, options].reduce(function (merged, optObj) {
        Object.keys(optObj).forEach(function (key) {
            merged[key] = optObj[key];
        });

        return merged;
    }, {});
};

},{}],7:[function(require,module,exports){
(function (process){
'use strict';

var Parser = require('../tree_construction/parser'),
    ParsingUnit = require('./parsing_unit');

//API
exports.parseDocument = function (html, treeAdapter) {
    //NOTE: this should be reentrant, so we create new parser here
    var parser = new Parser(treeAdapter),
        parsingUnit = new ParsingUnit(parser);

    //NOTE: override parser loop method
    parser._runParsingLoop = function () {
        parsingUnit.parsingLoopLock = true;

        while (!parsingUnit.suspended && !this.stopped)
            this._iterateParsingLoop();

        parsingUnit.parsingLoopLock = false;

        if (this.stopped)
            parsingUnit.callback(this.document);
    };

    //NOTE: wait while parserController will be adopted by calling code, then
    //start parsing
    process.nextTick(function () {
        parser.parse(html);
    });

    return parsingUnit;
};

exports.parseInnerHtml = function (innerHtml, contextElement, treeAdapter) {
    //NOTE: this should be reentrant, so we create new parser here
    var parser = new Parser(treeAdapter);

    return parser.parseFragment(innerHtml, contextElement);
};
}).call(this,require('_process'))
},{"../tree_construction/parser":20,"./parsing_unit":8,"_process":1}],8:[function(require,module,exports){
'use strict';

var ParsingUnit = module.exports = function (parser) {
    this.parser = parser;
    this.suspended = false;
    this.parsingLoopLock = false;
    this.callback = null;
};

ParsingUnit.prototype._stateGuard = function (suspend) {
    if (this.suspended && suspend)
        throw new Error('parse5: Parser was already suspended. Please, check your control flow logic.');

    else if (!this.suspended && !suspend)
        throw new Error('parse5: Parser was already resumed. Please, check your control flow logic.');

    return suspend;
};

ParsingUnit.prototype.suspend = function () {
    this.suspended = this._stateGuard(true);

    return this;
};

ParsingUnit.prototype.resume = function () {
    this.suspended = this._stateGuard(false);

    //NOTE: don't enter parsing loop if it is locked. Without this lock _runParsingLoop() may be called
    //while parsing loop is still running. E.g. when suspend() and resume() called synchronously.
    if (!this.parsingLoopLock)
        this.parser._runParsingLoop();

    return this;
};

ParsingUnit.prototype.documentWrite = function (html) {
    this.parser.tokenizer.preprocessor.write(html);

    return this;
};

ParsingUnit.prototype.handleScripts = function (scriptHandler) {
    this.parser.scriptHandler = scriptHandler;

    return this;
};

ParsingUnit.prototype.done = function (callback) {
    this.callback = callback;

    return this;
};

},{}],9:[function(require,module,exports){
'use strict';

var DefaultTreeAdapter = require('../tree_adapters/default'),
    Utils = require('../common/utils'),
    HTML = require('../common/html');

//Aliases
var $ = HTML.TAG_NAMES,
    NS = HTML.NAMESPACES;

//Default serializer options
var DEFAULT_OPTIONS = {encodeHtmlEntities: true};

//Escaping regexes
var AMP_REGEX = /&/g,
    NBSP_REGEX = /\u00a0/g,
    DOUBLE_QUOTE_REGEX = /"/g,
    LT_REGEX = /</g,
    GT_REGEX = />/g;

//Escape string
function escapeString(str, attrMode) {
    str = str
        .replace(AMP_REGEX, '&amp;')
        .replace(NBSP_REGEX, '&nbsp;');

    if (attrMode)
        str = str.replace(DOUBLE_QUOTE_REGEX, '&quot;');

    else {
        str = str
            .replace(LT_REGEX, '&lt;')
            .replace(GT_REGEX, '&gt;');
    }

    return str;
}


//Enquote doctype ID
function enquoteDoctypeId(id) {
    var quote = id.indexOf('"') !== -1 ? '\'' : '"';

    return quote + id + quote;
}


//Serializer
var Serializer = module.exports = function (treeAdapter, options) {
    this.treeAdapter = treeAdapter || DefaultTreeAdapter;
    this.options = Utils.mergeOptions(DEFAULT_OPTIONS, options);
};


//API
Serializer.prototype.serialize = function (node) {
    this.html = '';
    this._serializeChildNodes(node);

    return this.html;
};


//Internals
Serializer.prototype._serializeChildNodes = function (parentNode) {
    var childNodes = this.treeAdapter.getChildNodes(parentNode);

    if (childNodes) {
        for (var i = 0, cnLength = childNodes.length; i < cnLength; i++) {
            var currentNode = childNodes[i];

            if (this.treeAdapter.isElementNode(currentNode))
                this._serializeElement(currentNode);

            else if (this.treeAdapter.isTextNode(currentNode))
                this._serializeTextNode(currentNode);

            else if (this.treeAdapter.isCommentNode(currentNode))
                this._serializeCommentNode(currentNode);

            else if (this.treeAdapter.isDocumentTypeNode(currentNode))
                this._serializeDocumentTypeNode(currentNode);
        }
    }
};

Serializer.prototype._serializeElement = function (node) {
    var tn = this.treeAdapter.getTagName(node),
        ns = this.treeAdapter.getNamespaceURI(node),
        qualifiedTn = (ns === NS.HTML || ns === NS.SVG || ns === NS.MATHML) ? tn : (ns + ':' + tn);

    this.html += '<' + qualifiedTn;
    this._serializeAttributes(node);
    this.html += '>';

    if (tn !== $.AREA && tn !== $.BASE && tn !== $.BASEFONT && tn !== $.BGSOUND && tn !== $.BR && tn !== $.BR &&
        tn !== $.COL && tn !== $.EMBED && tn !== $.FRAME && tn !== $.HR && tn !== $.IMG && tn !== $.INPUT &&
        tn !== $.KEYGEN && tn !== $.LINK && tn !== $.MENUITEM && tn !== $.META && tn !== $.PARAM && tn !== $.SOURCE &&
        tn !== $.TRACK && tn !== $.WBR) {

        if (tn === $.PRE || tn === $.TEXTAREA || tn === $.LISTING) {
            var firstChild = this.treeAdapter.getFirstChild(node);

            if (firstChild && this.treeAdapter.isTextNode(firstChild)) {
                var content = this.treeAdapter.getTextNodeContent(firstChild);

                if (content[0] === '\n')
                    this.html += '\n';
            }
        }

        var childNodesHolder = tn === $.TEMPLATE && ns === NS.HTML ?
                               this.treeAdapter.getChildNodes(node)[0] :
                               node;

        this._serializeChildNodes(childNodesHolder);
        this.html += '</' + qualifiedTn + '>';
    }
};

Serializer.prototype._serializeAttributes = function (node) {
    var attrs = this.treeAdapter.getAttrList(node);

    for (var i = 0, attrsLength = attrs.length; i < attrsLength; i++) {
        var attr = attrs[i],
            value = this.options.encodeHtmlEntities ? escapeString(attr.value, true) : attr.value;

        this.html += ' ';

        if (!attr.namespace)
            this.html += attr.name;

        else if (attr.namespace === NS.XML)
            this.html += 'xml:' + attr.name;

        else if (attr.namespace === NS.XMLNS) {
            if (attr.name !== 'xmlns')
                this.html += 'xmlns:';

            this.html += attr.name;
        }

        else if (attr.namespace === NS.XLINK)
            this.html += 'xlink:' + attr.name;

        else
            this.html += attr.namespace + ':' + attr.name;

        this.html += '="' + value + '"';
    }
};

Serializer.prototype._serializeTextNode = function (node) {
    var content = this.treeAdapter.getTextNodeContent(node),
        parent = this.treeAdapter.getParentNode(node),
        parentTn = void 0;

    if(parent && this.treeAdapter.isElementNode(parent))
        parentTn = this.treeAdapter.getTagName(parent);

    if (parentTn === $.STYLE || parentTn === $.SCRIPT || parentTn === $.XMP || parentTn === $.IFRAME ||
        parentTn === $.NOEMBED || parentTn === $.NOFRAMES || parentTn === $.PLAINTEXT || parentTn === $.NOSCRIPT) {
        this.html += content;
    }

    else
        this.html += this.options.encodeHtmlEntities ? escapeString(content, false) : content;
};

Serializer.prototype._serializeCommentNode = function (node) {
    this.html += '<!--' + this.treeAdapter.getCommentNodeContent(node) + '-->';
};

Serializer.prototype._serializeDocumentTypeNode = function (node) {
    var name = this.treeAdapter.getDocumentTypeNodeName(node),
        publicId = this.treeAdapter.getDocumentTypeNodePublicId(node),
        systemId = this.treeAdapter.getDocumentTypeNodeSystemId(node);

    this.html += '<!DOCTYPE ' + name;

    if (publicId !== null)
        this.html += ' PUBLIC ' + enquoteDoctypeId(publicId);

    else if (systemId !== null)
        this.html += ' SYSTEM';

    if (systemId !== null)
        this.html += ' ' + enquoteDoctypeId(systemId);


    this.html += '>';
};

},{"../common/html":4,"../common/utils":6,"../tree_adapters/default":15}],10:[function(require,module,exports){
'use strict';

var Tokenizer = require('../tokenization/tokenizer'),
    TokenizerProxy = require('./tokenizer_proxy');

//Skipping handler
function skip() {
    //NOTE: do nothing =)
}

//SimpleApiParser
var SimpleApiParser = module.exports = function (handlers) {
    this.handlers = {
        doctype: handlers.doctype || skip,
        startTag: handlers.startTag || skip,
        endTag: handlers.endTag || skip,
        text: handlers.text || skip,
        comment: handlers.comment || skip
    };
};

//API
SimpleApiParser.prototype.parse = function (html) {
    var token = null;

    this._reset(html);

    do {
        token = this.tokenizerProxy.getNextToken();

        if (token.type === Tokenizer.CHARACTER_TOKEN ||
            token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN ||
            token.type === Tokenizer.NULL_CHARACTER_TOKEN) {
            this.pendingText = (this.pendingText || '') + token.chars;
        }

        else {
            this._emitPendingText();
            this._handleToken(token);
        }
    } while (token.type !== Tokenizer.EOF_TOKEN)
};

//Internals
SimpleApiParser.prototype._handleToken = function (token) {
    if (token.type === Tokenizer.START_TAG_TOKEN)
        this.handlers.startTag(token.tagName, token.attrs, token.selfClosing);

    else if (token.type === Tokenizer.END_TAG_TOKEN)
        this.handlers.endTag(token.tagName);

    else if (token.type === Tokenizer.COMMENT_TOKEN)
        this.handlers.comment(token.data);

    else if (token.type === Tokenizer.DOCTYPE_TOKEN)
        this.handlers.doctype(token.name, token.publicId, token.systemId);

};

SimpleApiParser.prototype._reset = function (html) {
    this.tokenizerProxy = new TokenizerProxy(html);
    this.pendingText = null;
};

SimpleApiParser.prototype._emitPendingText = function () {
    if (this.pendingText !== null) {
        this.handlers.text(this.pendingText);
        this.pendingText = null;
    }
};

},{"../tokenization/tokenizer":14,"./tokenizer_proxy":11}],11:[function(require,module,exports){
'use strict';

var Tokenizer = require('../tokenization/tokenizer'),
    ForeignContent = require('../common/foreign_content'),
    UNICODE = require('../common/unicode'),
    HTML = require('../common/html');

//Aliases
var $ = HTML.TAG_NAMES,
    NS = HTML.NAMESPACES;


//Tokenizer proxy
//NOTE: this proxy simulates adjustment of the Tokenizer which performed by standard parser during tree construction.
var TokenizerProxy = module.exports = function (html) {
    this.tokenizer = new Tokenizer(html);

    this.namespaceStack = [];
    this.namespaceStackTop = -1;
    this.currentNamespace = null;
    this.inForeignContent = false;
};

//API
TokenizerProxy.prototype.getNextToken = function () {
    var token = this.tokenizer.getNextToken();

    if (token.type === Tokenizer.START_TAG_TOKEN)
        this._handleStartTagToken(token);

    else if (token.type === Tokenizer.END_TAG_TOKEN)
        this._handleEndTagToken(token);

    else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN && this.inForeignContent) {
        token.type = Tokenizer.CHARACTER_TOKEN;
        token.chars = UNICODE.REPLACEMENT_CHARACTER;
    }

    return token;
};

//Namespace stack mutations
TokenizerProxy.prototype._enterNamespace = function (namespace) {
    this.namespaceStackTop++;
    this.namespaceStack.push(namespace);

    this.inForeignContent = namespace !== NS.HTML;
    this.currentNamespace = namespace;
    this.tokenizer.allowCDATA = this.inForeignContent;
};

TokenizerProxy.prototype._leaveCurrentNamespace = function () {
    this.namespaceStackTop--;
    this.namespaceStack.pop();

    this.currentNamespace = this.namespaceStack[this.namespaceStackTop];
    this.inForeignContent = this.currentNamespace !== NS.HTML;
    this.tokenizer.allowCDATA = this.inForeignContent;
};

//Token handlers
TokenizerProxy.prototype._ensureTokenizerState = function (tn) {
    if (tn === $.TEXTAREA || tn === $.TITLE)
        this.tokenizer.state = Tokenizer.RCDATA_STATE;

    else if (tn === $.PLAINTEXT)
        this.tokenizer.state = Tokenizer.PLAINTEXT_STATE;

    else if (tn === $.SCRIPT)
        this.tokenizer.state = Tokenizer.SCRIPT_DATA_STATE;

    else if (tn === $.STYLE || tn === $.IFRAME || tn === $.XMP ||
             tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT) {
        this.tokenizer.state = Tokenizer.RAWTEXT_STATE;
    }
};

TokenizerProxy.prototype._handleStartTagToken = function (token) {
    var tn = token.tagName;

    if (tn === $.SVG)
        this._enterNamespace(NS.SVG);

    else if (tn === $.MATH)
        this._enterNamespace(NS.MATHML);

    else {
        if (this.inForeignContent) {
            if (ForeignContent.causesExit(token))
                this._leaveCurrentNamespace();

            else if (ForeignContent.isMathMLTextIntegrationPoint(tn, this.currentNamespace) ||
                     ForeignContent.isHtmlIntegrationPoint(tn, this.currentNamespace, token.attrs)) {
                this._enterNamespace(NS.HTML);
            }
        }

        else
            this._ensureTokenizerState(tn);
    }
};

TokenizerProxy.prototype._handleEndTagToken = function (token) {
    var tn = token.tagName;

    if (!this.inForeignContent) {
        var previousNs = this.namespaceStack[this.namespaceStackTop - 1];

        //NOTE: check for exit from integration point
        if (ForeignContent.isMathMLTextIntegrationPoint(tn, previousNs) ||
            ForeignContent.isHtmlIntegrationPoint(tn, previousNs, token.attrs)) {
            this._leaveCurrentNamespace();
        }

        else if (tn === $.SCRIPT)
            this.tokenizer.state = Tokenizer.DATA_STATE;
    }

    else if ((tn === $.SVG && this.currentNamespace === NS.SVG) || (tn === $.MATH && this.currentNamespace === NS.MATHML))
        this._leaveCurrentNamespace();
};

},{"../common/foreign_content":3,"../common/html":4,"../common/unicode":5,"../tokenization/tokenizer":14}],12:[function(require,module,exports){
'use strict';

//NOTE: this file contains auto generated trie structure that is used for named entity references consumption
//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#tokenizing-character-references and
//http://www.whatwg.org/specs/web-apps/current-work/multipage/named-character-references.html#named-character-references)
module.exports = {
    0x41: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [193]}}, c: [193]}}}}}}}}}, 0x62: {l: {0x72: {l: {0x65: {l: {0x76: {l: {0x65: {l: {0x3B: {c: [258]}}}}}}}}}}}, 0x63: {l: {0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [194]}}, c: [194]}}}}}, 0x79: {l: {0x3B: {c: [1040]}}}}}, 0x45: {l: {0x6C: {l: {0x69: {l: {0x67: {l: {0x3B: {c: [198]}}, c: [198]}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120068]}}}}}, 0x67: {l: {0x72: {l: {0x61: {l: {0x76: {l: {0x65: {l: {0x3B: {c: [192]}}, c: [192]}}}}}}}}}, 0x6C: {l: {0x70: {l: {0x68: {l: {0x61: {l: {0x3B: {c: [913]}}}}}}}}}, 0x6D: {l: {0x61: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [256]}}}}}}}}}, 0x4D: {l: {0x50: {l: {0x3B: {c: [38]}}, c: [38]}}}, 0x6E: {l: {0x64: {l: {0x3B: {c: [10835]}}}}}, 0x6F: {l: {0x67: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [260]}}}}}}}, 0x70: {l: {0x66: {l: {0x3B: {c: [120120]}}}}}}}, 0x70: {l: {0x70: {l: {0x6C: {l: {0x79: {l: {0x46: {l: {0x75: {l: {0x6E: {l: {0x63: {l: {0x74: {l: {0x69: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [8289]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x72: {l: {0x69: {l: {0x6E: {l: {0x67: {l: {0x3B: {c: [197]}}, c: [197]}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119964]}}}}}, 0x73: {l: {0x69: {l: {0x67: {l: {0x6E: {l: {0x3B: {c: [8788]}}}}}}}}}}}, 0x74: {l: {0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [195]}}, c: [195]}}}}}}}}}, 0x75: {l: {0x6D: {l: {0x6C: {l: {0x3B: {c: [196]}}, c: [196]}}}}}}},
    0x61: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [225]}}, c: [225]}}}}}}}}}, 0x62: {l: {0x72: {l: {0x65: {l: {0x76: {l: {0x65: {l: {0x3B: {c: [259]}}}}}}}}}}}, 0x63: {l: {0x3B: {c: [8766]}, 0x64: {l: {0x3B: {c: [8767]}}}, 0x45: {l: {0x3B: {c: [8766, 819]}}}, 0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [226]}}, c: [226]}}}}}, 0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [180]}}, c: [180]}}}}}, 0x79: {l: {0x3B: {c: [1072]}}}}}, 0x65: {l: {0x6C: {l: {0x69: {l: {0x67: {l: {0x3B: {c: [230]}}, c: [230]}}}}}}}, 0x66: {l: {0x3B: {c: [8289]}, 0x72: {l: {0x3B: {c: [120094]}}}}}, 0x67: {l: {0x72: {l: {0x61: {l: {0x76: {l: {0x65: {l: {0x3B: {c: [224]}}, c: [224]}}}}}}}}}, 0x6C: {l: {0x65: {l: {0x66: {l: {0x73: {l: {0x79: {l: {0x6D: {l: {0x3B: {c: [8501]}}}}}}}}}, 0x70: {l: {0x68: {l: {0x3B: {c: [8501]}}}}}}}, 0x70: {l: {0x68: {l: {0x61: {l: {0x3B: {c: [945]}}}}}}}}}, 0x6D: {l: {0x61: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [257]}}}}}, 0x6C: {l: {0x67: {l: {0x3B: {c: [10815]}}}}}}}, 0x70: {l: {0x3B: {c: [38]}}, c: [38]}}}, 0x6E: {l: {0x64: {l: {0x61: {l: {0x6E: {l: {0x64: {l: {0x3B: {c: [10837]}}}}}}}, 0x3B: {c: [8743]}, 0x64: {l: {0x3B: {c: [10844]}}}, 0x73: {l: {0x6C: {l: {0x6F: {l: {0x70: {l: {0x65: {l: {0x3B: {c: [10840]}}}}}}}}}}}, 0x76: {l: {0x3B: {c: [10842]}}}}}, 0x67: {l: {0x3B: {c: [8736]}, 0x65: {l: {0x3B: {c: [10660]}}}, 0x6C: {l: {0x65: {l: {0x3B: {c: [8736]}}}}}, 0x6D: {l: {0x73: {l: {0x64: {l: {0x61: {l: {0x61: {l: {0x3B: {c: [10664]}}}, 0x62: {l: {0x3B: {c: [10665]}}}, 0x63: {l: {0x3B: {c: [10666]}}}, 0x64: {l: {0x3B: {c: [10667]}}}, 0x65: {l: {0x3B: {c: [10668]}}}, 0x66: {l: {0x3B: {c: [10669]}}}, 0x67: {l: {0x3B: {c: [10670]}}}, 0x68: {l: {0x3B: {c: [10671]}}}}}, 0x3B: {c: [8737]}}}}}}}, 0x72: {l: {0x74: {l: {0x3B: {c: [8735]}, 0x76: {l: {0x62: {l: {0x3B: {c: [8894]}, 0x64: {l: {0x3B: {c: [10653]}}}}}}}}}}}, 0x73: {l: {0x70: {l: {0x68: {l: {0x3B: {c: [8738]}}}}}, 0x74: {l: {0x3B: {c: [197]}}}}}, 0x7A: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [9084]}}}}}}}}}}}}}, 0x6F: {l: {0x67: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [261]}}}}}}}, 0x70: {l: {0x66: {l: {0x3B: {c: [120146]}}}}}}}, 0x70: {l: {0x61: {l: {0x63: {l: {0x69: {l: {0x72: {l: {0x3B: {c: [10863]}}}}}}}}}, 0x3B: {c: [8776]}, 0x45: {l: {0x3B: {c: [10864]}}}, 0x65: {l: {0x3B: {c: [8778]}}}, 0x69: {l: {0x64: {l: {0x3B: {c: [8779]}}}}}, 0x6F: {l: {0x73: {l: {0x3B: {c: [39]}}}}}, 0x70: {l: {0x72: {l: {0x6F: {l: {0x78: {l: {0x3B: {c: [8776]}, 0x65: {l: {0x71: {l: {0x3B: {c: [8778]}}}}}}}}}}}}}}}, 0x72: {l: {0x69: {l: {0x6E: {l: {0x67: {l: {0x3B: {c: [229]}}, c: [229]}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119990]}}}}}, 0x74: {l: {0x3B: {c: [42]}}}, 0x79: {l: {0x6D: {l: {0x70: {l: {0x3B: {c: [8776]}, 0x65: {l: {0x71: {l: {0x3B: {c: [8781]}}}}}}}}}}}}}, 0x74: {l: {0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [227]}}, c: [227]}}}}}}}}}, 0x75: {l: {0x6D: {l: {0x6C: {l: {0x3B: {c: [228]}}, c: [228]}}}}}, 0x77: {l: {0x63: {l: {0x6F: {l: {0x6E: {l: {0x69: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [8755]}}}}}}}}}}}}}, 0x69: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [10769]}}}}}}}}}}},
    0x62: {l: {0x61: {l: {0x63: {l: {0x6B: {l: {0x63: {l: {0x6F: {l: {0x6E: {l: {0x67: {l: {0x3B: {c: [8780]}}}}}}}}}, 0x65: {l: {0x70: {l: {0x73: {l: {0x69: {l: {0x6C: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [1014]}}}}}}}}}}}}}}}, 0x70: {l: {0x72: {l: {0x69: {l: {0x6D: {l: {0x65: {l: {0x3B: {c: [8245]}}}}}}}}}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [8765]}, 0x65: {l: {0x71: {l: {0x3B: {c: [8909]}}}}}}}}}}}}}}}, 0x72: {l: {0x76: {l: {0x65: {l: {0x65: {l: {0x3B: {c: [8893]}}}}}}}, 0x77: {l: {0x65: {l: {0x64: {l: {0x3B: {c: [8965]}, 0x67: {l: {0x65: {l: {0x3B: {c: [8965]}}}}}}}}}}}}}}}, 0x62: {l: {0x72: {l: {0x6B: {l: {0x3B: {c: [9141]}, 0x74: {l: {0x62: {l: {0x72: {l: {0x6B: {l: {0x3B: {c: [9142]}}}}}}}}}}}}}}}, 0x63: {l: {0x6F: {l: {0x6E: {l: {0x67: {l: {0x3B: {c: [8780]}}}}}}}, 0x79: {l: {0x3B: {c: [1073]}}}}}, 0x64: {l: {0x71: {l: {0x75: {l: {0x6F: {l: {0x3B: {c: [8222]}}}}}}}}}, 0x65: {l: {0x63: {l: {0x61: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [8757]}, 0x65: {l: {0x3B: {c: [8757]}}}}}}}}}}}, 0x6D: {l: {0x70: {l: {0x74: {l: {0x79: {l: {0x76: {l: {0x3B: {c: [10672]}}}}}}}}}}}, 0x70: {l: {0x73: {l: {0x69: {l: {0x3B: {c: [1014]}}}}}}}, 0x72: {l: {0x6E: {l: {0x6F: {l: {0x75: {l: {0x3B: {c: [8492]}}}}}}}}}, 0x74: {l: {0x61: {l: {0x3B: {c: [946]}}}, 0x68: {l: {0x3B: {c: [8502]}}}, 0x77: {l: {0x65: {l: {0x65: {l: {0x6E: {l: {0x3B: {c: [8812]}}}}}}}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120095]}}}}}, 0x69: {l: {0x67: {l: {0x63: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [8898]}}}}}, 0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [9711]}}}}}}}, 0x75: {l: {0x70: {l: {0x3B: {c: [8899]}}}}}}}, 0x6F: {l: {0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [10752]}}}}}}}, 0x70: {l: {0x6C: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [10753]}}}}}}}}}, 0x74: {l: {0x69: {l: {0x6D: {l: {0x65: {l: {0x73: {l: {0x3B: {c: [10754]}}}}}}}}}}}}}, 0x73: {l: {0x71: {l: {0x63: {l: {0x75: {l: {0x70: {l: {0x3B: {c: [10758]}}}}}}}}}, 0x74: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [9733]}}}}}}}}}, 0x74: {l: {0x72: {l: {0x69: {l: {0x61: {l: {0x6E: {l: {0x67: {l: {0x6C: {l: {0x65: {l: {0x64: {l: {0x6F: {l: {0x77: {l: {0x6E: {l: {0x3B: {c: [9661]}}}}}}}}}, 0x75: {l: {0x70: {l: {0x3B: {c: [9651]}}}}}}}}}}}}}}}}}}}}}, 0x75: {l: {0x70: {l: {0x6C: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [10756]}}}}}}}}}}}, 0x76: {l: {0x65: {l: {0x65: {l: {0x3B: {c: [8897]}}}}}}}, 0x77: {l: {0x65: {l: {0x64: {l: {0x67: {l: {0x65: {l: {0x3B: {c: [8896]}}}}}}}}}}}}}}}, 0x6B: {l: {0x61: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [10509]}}}}}}}}}}}, 0x6C: {l: {0x61: {l: {0x63: {l: {0x6B: {l: {0x6C: {l: {0x6F: {l: {0x7A: {l: {0x65: {l: {0x6E: {l: {0x67: {l: {0x65: {l: {0x3B: {c: [10731]}}}}}}}}}}}}}}}, 0x73: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x72: {l: {0x65: {l: {0x3B: {c: [9642]}}}}}}}}}}}}}, 0x74: {l: {0x72: {l: {0x69: {l: {0x61: {l: {0x6E: {l: {0x67: {l: {0x6C: {l: {0x65: {l: {0x3B: {c: [9652]}, 0x64: {l: {0x6F: {l: {0x77: {l: {0x6E: {l: {0x3B: {c: [9662]}}}}}}}}}, 0x6C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x3B: {c: [9666]}}}}}}}}}, 0x72: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x3B: {c: [9656]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x6E: {l: {0x6B: {l: {0x3B: {c: [9251]}}}}}}}, 0x6B: {l: {0x31: {l: {0x32: {l: {0x3B: {c: [9618]}}}, 0x34: {l: {0x3B: {c: [9617]}}}}}, 0x33: {l: {0x34: {l: {0x3B: {c: [9619]}}}}}}}, 0x6F: {l: {0x63: {l: {0x6B: {l: {0x3B: {c: [9608]}}}}}}}}}, 0x6E: {l: {0x65: {l: {0x3B: {c: [61, 8421]}, 0x71: {l: {0x75: {l: {0x69: {l: {0x76: {l: {0x3B: {c: [8801, 8421]}}}}}}}}}}}, 0x6F: {l: {0x74: {l: {0x3B: {c: [8976]}}}}}}}, 0x4E: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [10989]}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120147]}}}}}, 0x74: {l: {0x3B: {c: [8869]}, 0x74: {l: {0x6F: {l: {0x6D: {l: {0x3B: {c: [8869]}}}}}}}}}, 0x77: {l: {0x74: {l: {0x69: {l: {0x65: {l: {0x3B: {c: [8904]}}}}}}}}}, 0x78: {l: {0x62: {l: {0x6F: {l: {0x78: {l: {0x3B: {c: [10697]}}}}}}}, 0x64: {l: {0x6C: {l: {0x3B: {c: [9488]}}}, 0x4C: {l: {0x3B: {c: [9557]}}}, 0x72: {l: {0x3B: {c: [9484]}}}, 0x52: {l: {0x3B: {c: [9554]}}}}}, 0x44: {l: {0x6C: {l: {0x3B: {c: [9558]}}}, 0x4C: {l: {0x3B: {c: [9559]}}}, 0x72: {l: {0x3B: {c: [9555]}}}, 0x52: {l: {0x3B: {c: [9556]}}}}}, 0x68: {l: {0x3B: {c: [9472]}, 0x64: {l: {0x3B: {c: [9516]}}}, 0x44: {l: {0x3B: {c: [9573]}}}, 0x75: {l: {0x3B: {c: [9524]}}}, 0x55: {l: {0x3B: {c: [9576]}}}}}, 0x48: {l: {0x3B: {c: [9552]}, 0x64: {l: {0x3B: {c: [9572]}}}, 0x44: {l: {0x3B: {c: [9574]}}}, 0x75: {l: {0x3B: {c: [9575]}}}, 0x55: {l: {0x3B: {c: [9577]}}}}}, 0x6D: {l: {0x69: {l: {0x6E: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [8863]}}}}}}}}}}}, 0x70: {l: {0x6C: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [8862]}}}}}}}}}, 0x74: {l: {0x69: {l: {0x6D: {l: {0x65: {l: {0x73: {l: {0x3B: {c: [8864]}}}}}}}}}}}, 0x75: {l: {0x6C: {l: {0x3B: {c: [9496]}}}, 0x4C: {l: {0x3B: {c: [9563]}}}, 0x72: {l: {0x3B: {c: [9492]}}}, 0x52: {l: {0x3B: {c: [9560]}}}}}, 0x55: {l: {0x6C: {l: {0x3B: {c: [9564]}}}, 0x4C: {l: {0x3B: {c: [9565]}}}, 0x72: {l: {0x3B: {c: [9561]}}}, 0x52: {l: {0x3B: {c: [9562]}}}}}, 0x76: {l: {0x3B: {c: [9474]}, 0x68: {l: {0x3B: {c: [9532]}}}, 0x48: {l: {0x3B: {c: [9578]}}}, 0x6C: {l: {0x3B: {c: [9508]}}}, 0x4C: {l: {0x3B: {c: [9569]}}}, 0x72: {l: {0x3B: {c: [9500]}}}, 0x52: {l: {0x3B: {c: [9566]}}}}}, 0x56: {l: {0x3B: {c: [9553]}, 0x68: {l: {0x3B: {c: [9579]}}}, 0x48: {l: {0x3B: {c: [9580]}}}, 0x6C: {l: {0x3B: {c: [9570]}}}, 0x4C: {l: {0x3B: {c: [9571]}}}, 0x72: {l: {0x3B: {c: [9567]}}}, 0x52: {l: {0x3B: {c: [9568]}}}}}}}}}, 0x70: {l: {0x72: {l: {0x69: {l: {0x6D: {l: {0x65: {l: {0x3B: {c: [8245]}}}}}}}}}}}, 0x72: {l: {0x65: {l: {0x76: {l: {0x65: {l: {0x3B: {c: [728]}}}}}}}, 0x76: {l: {0x62: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [166]}}, c: [166]}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119991]}}}}}, 0x65: {l: {0x6D: {l: {0x69: {l: {0x3B: {c: [8271]}}}}}}}, 0x69: {l: {0x6D: {l: {0x3B: {c: [8765]}, 0x65: {l: {0x3B: {c: [8909]}}}}}}}, 0x6F: {l: {0x6C: {l: {0x62: {l: {0x3B: {c: [10693]}}}, 0x3B: {c: [92]}, 0x68: {l: {0x73: {l: {0x75: {l: {0x62: {l: {0x3B: {c: [10184]}}}}}}}}}}}}}}}, 0x75: {l: {0x6C: {l: {0x6C: {l: {0x3B: {c: [8226]}, 0x65: {l: {0x74: {l: {0x3B: {c: [8226]}}}}}}}}}, 0x6D: {l: {0x70: {l: {0x3B: {c: [8782]}, 0x45: {l: {0x3B: {c: [10926]}}}, 0x65: {l: {0x3B: {c: [8783]}, 0x71: {l: {0x3B: {c: [8783]}}}}}}}}}}}}},
    0x42: {l: {0x61: {l: {0x63: {l: {0x6B: {l: {0x73: {l: {0x6C: {l: {0x61: {l: {0x73: {l: {0x68: {l: {0x3B: {c: [8726]}}}}}}}}}}}}}}}, 0x72: {l: {0x76: {l: {0x3B: {c: [10983]}}}, 0x77: {l: {0x65: {l: {0x64: {l: {0x3B: {c: [8966]}}}}}}}}}}}, 0x63: {l: {0x79: {l: {0x3B: {c: [1041]}}}}}, 0x65: {l: {0x63: {l: {0x61: {l: {0x75: {l: {0x73: {l: {0x65: {l: {0x3B: {c: [8757]}}}}}}}}}}}, 0x72: {l: {0x6E: {l: {0x6F: {l: {0x75: {l: {0x6C: {l: {0x6C: {l: {0x69: {l: {0x73: {l: {0x3B: {c: [8492]}}}}}}}}}}}}}}}}}, 0x74: {l: {0x61: {l: {0x3B: {c: [914]}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120069]}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120121]}}}}}}}, 0x72: {l: {0x65: {l: {0x76: {l: {0x65: {l: {0x3B: {c: [728]}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [8492]}}}}}}}, 0x75: {l: {0x6D: {l: {0x70: {l: {0x65: {l: {0x71: {l: {0x3B: {c: [8782]}}}}}}}}}}}}},
    0x43: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [262]}}}}}}}}}, 0x70: {l: {0x3B: {c: [8914]}, 0x69: {l: {0x74: {l: {0x61: {l: {0x6C: {l: {0x44: {l: {0x69: {l: {0x66: {l: {0x66: {l: {0x65: {l: {0x72: {l: {0x65: {l: {0x6E: {l: {0x74: {l: {0x69: {l: {0x61: {l: {0x6C: {l: {0x44: {l: {0x3B: {c: [8517]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x79: {l: {0x6C: {l: {0x65: {l: {0x79: {l: {0x73: {l: {0x3B: {c: [8493]}}}}}}}}}}}}}, 0x63: {l: {0x61: {l: {0x72: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [268]}}}}}}}}}, 0x65: {l: {0x64: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [199]}}, c: [199]}}}}}}}, 0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [264]}}}}}}}, 0x6F: {l: {0x6E: {l: {0x69: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [8752]}}}}}}}}}}}}}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [266]}}}}}}}, 0x65: {l: {0x64: {l: {0x69: {l: {0x6C: {l: {0x6C: {l: {0x61: {l: {0x3B: {c: [184]}}}}}}}}}}}, 0x6E: {l: {0x74: {l: {0x65: {l: {0x72: {l: {0x44: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [183]}}}}}}}}}}}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [8493]}}}}}, 0x48: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1063]}}}}}}}, 0x68: {l: {0x69: {l: {0x3B: {c: [935]}}}}}, 0x69: {l: {0x72: {l: {0x63: {l: {0x6C: {l: {0x65: {l: {0x44: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [8857]}}}}}}}, 0x4D: {l: {0x69: {l: {0x6E: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [8854]}}}}}}}}}}}, 0x50: {l: {0x6C: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [8853]}}}}}}}}}, 0x54: {l: {0x69: {l: {0x6D: {l: {0x65: {l: {0x73: {l: {0x3B: {c: [8855]}}}}}}}}}}}}}}}}}}}}}, 0x6C: {l: {0x6F: {l: {0x63: {l: {0x6B: {l: {0x77: {l: {0x69: {l: {0x73: {l: {0x65: {l: {0x43: {l: {0x6F: {l: {0x6E: {l: {0x74: {l: {0x6F: {l: {0x75: {l: {0x72: {l: {0x49: {l: {0x6E: {l: {0x74: {l: {0x65: {l: {0x67: {l: {0x72: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8754]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x73: {l: {0x65: {l: {0x43: {l: {0x75: {l: {0x72: {l: {0x6C: {l: {0x79: {l: {0x44: {l: {0x6F: {l: {0x75: {l: {0x62: {l: {0x6C: {l: {0x65: {l: {0x51: {l: {0x75: {l: {0x6F: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [8221]}}}}}}}}}}}}}}}}}}}}}}}, 0x51: {l: {0x75: {l: {0x6F: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [8217]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x6F: {l: {0x6C: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [8759]}, 0x65: {l: {0x3B: {c: [10868]}}}}}}}}}, 0x6E: {l: {0x67: {l: {0x72: {l: {0x75: {l: {0x65: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [8801]}}}}}}}}}}}}}, 0x69: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [8751]}}}}}}}, 0x74: {l: {0x6F: {l: {0x75: {l: {0x72: {l: {0x49: {l: {0x6E: {l: {0x74: {l: {0x65: {l: {0x67: {l: {0x72: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8750]}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x70: {l: {0x66: {l: {0x3B: {c: [8450]}}}, 0x72: {l: {0x6F: {l: {0x64: {l: {0x75: {l: {0x63: {l: {0x74: {l: {0x3B: {c: [8720]}}}}}}}}}}}}}}}, 0x75: {l: {0x6E: {l: {0x74: {l: {0x65: {l: {0x72: {l: {0x43: {l: {0x6C: {l: {0x6F: {l: {0x63: {l: {0x6B: {l: {0x77: {l: {0x69: {l: {0x73: {l: {0x65: {l: {0x43: {l: {0x6F: {l: {0x6E: {l: {0x74: {l: {0x6F: {l: {0x75: {l: {0x72: {l: {0x49: {l: {0x6E: {l: {0x74: {l: {0x65: {l: {0x67: {l: {0x72: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8755]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x4F: {l: {0x50: {l: {0x59: {l: {0x3B: {c: [169]}}, c: [169]}}}}}, 0x72: {l: {0x6F: {l: {0x73: {l: {0x73: {l: {0x3B: {c: [10799]}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119966]}}}}}}}, 0x75: {l: {0x70: {l: {0x43: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [8781]}}}}}}}, 0x3B: {c: [8915]}}}}}}},
    0x63: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [263]}}}}}}}}}, 0x70: {l: {0x61: {l: {0x6E: {l: {0x64: {l: {0x3B: {c: [10820]}}}}}}}, 0x62: {l: {0x72: {l: {0x63: {l: {0x75: {l: {0x70: {l: {0x3B: {c: [10825]}}}}}}}}}}}, 0x63: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [10827]}}}}}, 0x75: {l: {0x70: {l: {0x3B: {c: [10823]}}}}}}}, 0x3B: {c: [8745]}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [10816]}}}}}}}, 0x73: {l: {0x3B: {c: [8745, 65024]}}}}}, 0x72: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [8257]}}}}}, 0x6F: {l: {0x6E: {l: {0x3B: {c: [711]}}}}}}}}}, 0x63: {l: {0x61: {l: {0x70: {l: {0x73: {l: {0x3B: {c: [10829]}}}}}, 0x72: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [269]}}}}}}}}}, 0x65: {l: {0x64: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [231]}}, c: [231]}}}}}}}, 0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [265]}}}}}}}, 0x75: {l: {0x70: {l: {0x73: {l: {0x3B: {c: [10828]}, 0x73: {l: {0x6D: {l: {0x3B: {c: [10832]}}}}}}}}}}}}}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [267]}}}}}}}, 0x65: {l: {0x64: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [184]}}, c: [184]}}}}}, 0x6D: {l: {0x70: {l: {0x74: {l: {0x79: {l: {0x76: {l: {0x3B: {c: [10674]}}}}}}}}}}}, 0x6E: {l: {0x74: {l: {0x3B: {c: [162]}, 0x65: {l: {0x72: {l: {0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [183]}}}}}}}}}}}}, c: [162]}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120096]}}}}}, 0x68: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1095]}}}}}, 0x65: {l: {0x63: {l: {0x6B: {l: {0x3B: {c: [10003]}, 0x6D: {l: {0x61: {l: {0x72: {l: {0x6B: {l: {0x3B: {c: [10003]}}}}}}}}}}}}}}}, 0x69: {l: {0x3B: {c: [967]}}}}}, 0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [710]}, 0x65: {l: {0x71: {l: {0x3B: {c: [8791]}}}}}, 0x6C: {l: {0x65: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x6C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x3B: {c: [8634]}}}}}}}}}, 0x72: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x3B: {c: [8635]}}}}}}}}}}}}}}}}}}}}}, 0x64: {l: {0x61: {l: {0x73: {l: {0x74: {l: {0x3B: {c: [8859]}}}}}}}, 0x63: {l: {0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [8858]}}}}}}}}}, 0x64: {l: {0x61: {l: {0x73: {l: {0x68: {l: {0x3B: {c: [8861]}}}}}}}}}, 0x52: {l: {0x3B: {c: [174]}}}, 0x53: {l: {0x3B: {c: [9416]}}}}}}}}}}}, 0x3B: {c: [9675]}, 0x45: {l: {0x3B: {c: [10691]}}}, 0x65: {l: {0x3B: {c: [8791]}}}, 0x66: {l: {0x6E: {l: {0x69: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [10768]}}}}}}}}}}}, 0x6D: {l: {0x69: {l: {0x64: {l: {0x3B: {c: [10991]}}}}}}}, 0x73: {l: {0x63: {l: {0x69: {l: {0x72: {l: {0x3B: {c: [10690]}}}}}}}}}}}}}, 0x6C: {l: {0x75: {l: {0x62: {l: {0x73: {l: {0x3B: {c: [9827]}, 0x75: {l: {0x69: {l: {0x74: {l: {0x3B: {c: [9827]}}}}}}}}}}}}}}}, 0x6F: {l: {0x6C: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [58]}, 0x65: {l: {0x3B: {c: [8788]}, 0x71: {l: {0x3B: {c: [8788]}}}}}}}}}}}, 0x6D: {l: {0x6D: {l: {0x61: {l: {0x3B: {c: [44]}, 0x74: {l: {0x3B: {c: [64]}}}}}}}, 0x70: {l: {0x3B: {c: [8705]}, 0x66: {l: {0x6E: {l: {0x3B: {c: [8728]}}}}}, 0x6C: {l: {0x65: {l: {0x6D: {l: {0x65: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [8705]}}}}}}}}}, 0x78: {l: {0x65: {l: {0x73: {l: {0x3B: {c: [8450]}}}}}}}}}}}}}}}, 0x6E: {l: {0x67: {l: {0x3B: {c: [8773]}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [10861]}}}}}}}}}, 0x69: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [8750]}}}}}}}}}, 0x70: {l: {0x66: {l: {0x3B: {c: [120148]}}}, 0x72: {l: {0x6F: {l: {0x64: {l: {0x3B: {c: [8720]}}}}}}}, 0x79: {l: {0x3B: {c: [169]}, 0x73: {l: {0x72: {l: {0x3B: {c: [8471]}}}}}}, c: [169]}}}}}, 0x72: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8629]}}}}}}}, 0x6F: {l: {0x73: {l: {0x73: {l: {0x3B: {c: [10007]}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119992]}}}}}, 0x75: {l: {0x62: {l: {0x3B: {c: [10959]}, 0x65: {l: {0x3B: {c: [10961]}}}}}, 0x70: {l: {0x3B: {c: [10960]}, 0x65: {l: {0x3B: {c: [10962]}}}}}}}}}, 0x74: {l: {0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [8943]}}}}}}}}}, 0x75: {l: {0x64: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6C: {l: {0x3B: {c: [10552]}}}, 0x72: {l: {0x3B: {c: [10549]}}}}}}}}}}}, 0x65: {l: {0x70: {l: {0x72: {l: {0x3B: {c: [8926]}}}}}, 0x73: {l: {0x63: {l: {0x3B: {c: [8927]}}}}}}}, 0x6C: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8630]}, 0x70: {l: {0x3B: {c: [10557]}}}}}}}}}}}, 0x70: {l: {0x62: {l: {0x72: {l: {0x63: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [10824]}}}}}}}}}}}, 0x63: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [10822]}}}}}, 0x75: {l: {0x70: {l: {0x3B: {c: [10826]}}}}}}}, 0x3B: {c: [8746]}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [8845]}}}}}}}, 0x6F: {l: {0x72: {l: {0x3B: {c: [10821]}}}}}, 0x73: {l: {0x3B: {c: [8746, 65024]}}}}}, 0x72: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8631]}, 0x6D: {l: {0x3B: {c: [10556]}}}}}}}}}, 0x6C: {l: {0x79: {l: {0x65: {l: {0x71: {l: {0x70: {l: {0x72: {l: {0x65: {l: {0x63: {l: {0x3B: {c: [8926]}}}}}}}}}, 0x73: {l: {0x75: {l: {0x63: {l: {0x63: {l: {0x3B: {c: [8927]}}}}}}}}}}}}}, 0x76: {l: {0x65: {l: {0x65: {l: {0x3B: {c: [8910]}}}}}}}, 0x77: {l: {0x65: {l: {0x64: {l: {0x67: {l: {0x65: {l: {0x3B: {c: [8911]}}}}}}}}}}}}}}}, 0x72: {l: {0x65: {l: {0x6E: {l: {0x3B: {c: [164]}}, c: [164]}}}}}, 0x76: {l: {0x65: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x6C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x3B: {c: [8630]}}}}}}}}}, 0x72: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x3B: {c: [8631]}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x76: {l: {0x65: {l: {0x65: {l: {0x3B: {c: [8910]}}}}}}}, 0x77: {l: {0x65: {l: {0x64: {l: {0x3B: {c: [8911]}}}}}}}}}, 0x77: {l: {0x63: {l: {0x6F: {l: {0x6E: {l: {0x69: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [8754]}}}}}}}}}}}}}, 0x69: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [8753]}}}}}}}}}, 0x79: {l: {0x6C: {l: {0x63: {l: {0x74: {l: {0x79: {l: {0x3B: {c: [9005]}}}}}}}}}}}}},
    0x64: {l: {0x61: {l: {0x67: {l: {0x67: {l: {0x65: {l: {0x72: {l: {0x3B: {c: [8224]}}}}}}}}}, 0x6C: {l: {0x65: {l: {0x74: {l: {0x68: {l: {0x3B: {c: [8504]}}}}}}}}}, 0x72: {l: {0x72: {l: {0x3B: {c: [8595]}}}}}, 0x73: {l: {0x68: {l: {0x3B: {c: [8208]}, 0x76: {l: {0x3B: {c: [8867]}}}}}}}}}, 0x41: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8659]}}}}}}}, 0x62: {l: {0x6B: {l: {0x61: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [10511]}}}}}}}}}}}, 0x6C: {l: {0x61: {l: {0x63: {l: {0x3B: {c: [733]}}}}}}}}}, 0x63: {l: {0x61: {l: {0x72: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [271]}}}}}}}}}, 0x79: {l: {0x3B: {c: [1076]}}}}}, 0x64: {l: {0x61: {l: {0x67: {l: {0x67: {l: {0x65: {l: {0x72: {l: {0x3B: {c: [8225]}}}}}}}}}, 0x72: {l: {0x72: {l: {0x3B: {c: [8650]}}}}}}}, 0x3B: {c: [8518]}, 0x6F: {l: {0x74: {l: {0x73: {l: {0x65: {l: {0x71: {l: {0x3B: {c: [10871]}}}}}}}}}}}}}, 0x65: {l: {0x67: {l: {0x3B: {c: [176]}}, c: [176]}, 0x6C: {l: {0x74: {l: {0x61: {l: {0x3B: {c: [948]}}}}}}}, 0x6D: {l: {0x70: {l: {0x74: {l: {0x79: {l: {0x76: {l: {0x3B: {c: [10673]}}}}}}}}}}}}}, 0x66: {l: {0x69: {l: {0x73: {l: {0x68: {l: {0x74: {l: {0x3B: {c: [10623]}}}}}}}}}, 0x72: {l: {0x3B: {c: [120097]}}}}}, 0x48: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10597]}}}}}}}, 0x68: {l: {0x61: {l: {0x72: {l: {0x6C: {l: {0x3B: {c: [8643]}}}, 0x72: {l: {0x3B: {c: [8642]}}}}}}}}}, 0x69: {l: {0x61: {l: {0x6D: {l: {0x3B: {c: [8900]}, 0x6F: {l: {0x6E: {l: {0x64: {l: {0x3B: {c: [8900]}, 0x73: {l: {0x75: {l: {0x69: {l: {0x74: {l: {0x3B: {c: [9830]}}}}}}}}}}}}}}}, 0x73: {l: {0x3B: {c: [9830]}}}}}}}, 0x65: {l: {0x3B: {c: [168]}}}, 0x67: {l: {0x61: {l: {0x6D: {l: {0x6D: {l: {0x61: {l: {0x3B: {c: [989]}}}}}}}}}}}, 0x73: {l: {0x69: {l: {0x6E: {l: {0x3B: {c: [8946]}}}}}}}, 0x76: {l: {0x3B: {c: [247]}, 0x69: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [247]}, 0x6F: {l: {0x6E: {l: {0x74: {l: {0x69: {l: {0x6D: {l: {0x65: {l: {0x73: {l: {0x3B: {c: [8903]}}}}}}}}}}}}}}}}, c: [247]}}}}}, 0x6F: {l: {0x6E: {l: {0x78: {l: {0x3B: {c: [8903]}}}}}}}}}}}, 0x6A: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1106]}}}}}}}, 0x6C: {l: {0x63: {l: {0x6F: {l: {0x72: {l: {0x6E: {l: {0x3B: {c: [8990]}}}}}}}, 0x72: {l: {0x6F: {l: {0x70: {l: {0x3B: {c: [8973]}}}}}}}}}}}, 0x6F: {l: {0x6C: {l: {0x6C: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [36]}}}}}}}}}, 0x70: {l: {0x66: {l: {0x3B: {c: [120149]}}}}}, 0x74: {l: {0x3B: {c: [729]}, 0x65: {l: {0x71: {l: {0x3B: {c: [8784]}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [8785]}}}}}}}}}}}, 0x6D: {l: {0x69: {l: {0x6E: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [8760]}}}}}}}}}}}, 0x70: {l: {0x6C: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [8724]}}}}}}}}}, 0x73: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x72: {l: {0x65: {l: {0x3B: {c: [8865]}}}}}}}}}}}}}}}, 0x75: {l: {0x62: {l: {0x6C: {l: {0x65: {l: {0x62: {l: {0x61: {l: {0x72: {l: {0x77: {l: {0x65: {l: {0x64: {l: {0x67: {l: {0x65: {l: {0x3B: {c: [8966]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x77: {l: {0x6E: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8595]}}}}}}}}}}}, 0x64: {l: {0x6F: {l: {0x77: {l: {0x6E: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x73: {l: {0x3B: {c: [8650]}}}}}}}}}}}}}}}}}}}}}, 0x68: {l: {0x61: {l: {0x72: {l: {0x70: {l: {0x6F: {l: {0x6F: {l: {0x6E: {l: {0x6C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x3B: {c: [8643]}}}}}}}}}, 0x72: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x3B: {c: [8642]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x72: {l: {0x62: {l: {0x6B: {l: {0x61: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [10512]}}}}}}}}}}}}}, 0x63: {l: {0x6F: {l: {0x72: {l: {0x6E: {l: {0x3B: {c: [8991]}}}}}}}, 0x72: {l: {0x6F: {l: {0x70: {l: {0x3B: {c: [8972]}}}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119993]}}}, 0x79: {l: {0x3B: {c: [1109]}}}}}, 0x6F: {l: {0x6C: {l: {0x3B: {c: [10742]}}}}}, 0x74: {l: {0x72: {l: {0x6F: {l: {0x6B: {l: {0x3B: {c: [273]}}}}}}}}}}}, 0x74: {l: {0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [8945]}}}}}}}, 0x72: {l: {0x69: {l: {0x3B: {c: [9663]}, 0x66: {l: {0x3B: {c: [9662]}}}}}}}}}, 0x75: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8693]}}}}}}}, 0x68: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10607]}}}}}}}}}, 0x77: {l: {0x61: {l: {0x6E: {l: {0x67: {l: {0x6C: {l: {0x65: {l: {0x3B: {c: [10662]}}}}}}}}}}}}}, 0x7A: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1119]}}}}}, 0x69: {l: {0x67: {l: {0x72: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [10239]}}}}}}}}}}}}}}}}},
    0x44: {l: {0x61: {l: {0x67: {l: {0x67: {l: {0x65: {l: {0x72: {l: {0x3B: {c: [8225]}}}}}}}}}, 0x72: {l: {0x72: {l: {0x3B: {c: [8609]}}}}}, 0x73: {l: {0x68: {l: {0x76: {l: {0x3B: {c: [10980]}}}}}}}}}, 0x63: {l: {0x61: {l: {0x72: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [270]}}}}}}}}}, 0x79: {l: {0x3B: {c: [1044]}}}}}, 0x44: {l: {0x3B: {c: [8517]}, 0x6F: {l: {0x74: {l: {0x72: {l: {0x61: {l: {0x68: {l: {0x64: {l: {0x3B: {c: [10513]}}}}}}}}}}}}}}}, 0x65: {l: {0x6C: {l: {0x3B: {c: [8711]}, 0x74: {l: {0x61: {l: {0x3B: {c: [916]}}}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120071]}}}}}, 0x69: {l: {0x61: {l: {0x63: {l: {0x72: {l: {0x69: {l: {0x74: {l: {0x69: {l: {0x63: {l: {0x61: {l: {0x6C: {l: {0x41: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [180]}}}}}}}}}}}, 0x44: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [729]}}}, 0x75: {l: {0x62: {l: {0x6C: {l: {0x65: {l: {0x41: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [733]}}}}}}}}}}}}}}}}}}}}}}}, 0x47: {l: {0x72: {l: {0x61: {l: {0x76: {l: {0x65: {l: {0x3B: {c: [96]}}}}}}}}}}}, 0x54: {l: {0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [732]}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x6D: {l: {0x6F: {l: {0x6E: {l: {0x64: {l: {0x3B: {c: [8900]}}}}}}}}}}}, 0x66: {l: {0x66: {l: {0x65: {l: {0x72: {l: {0x65: {l: {0x6E: {l: {0x74: {l: {0x69: {l: {0x61: {l: {0x6C: {l: {0x44: {l: {0x3B: {c: [8518]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x4A: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1026]}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120123]}}}}}, 0x74: {l: {0x3B: {c: [168]}, 0x44: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [8412]}}}}}}}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8784]}}}}}}}}}}}}}, 0x75: {l: {0x62: {l: {0x6C: {l: {0x65: {l: {0x43: {l: {0x6F: {l: {0x6E: {l: {0x74: {l: {0x6F: {l: {0x75: {l: {0x72: {l: {0x49: {l: {0x6E: {l: {0x74: {l: {0x65: {l: {0x67: {l: {0x72: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8751]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x44: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [168]}}}, 0x77: {l: {0x6E: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8659]}}}}}}}}}}}}}}}}}}}, 0x4C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8656]}}}}}}}}}}}, 0x52: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8660]}}}}}}}}}}}}}}}}}}}}}, 0x54: {l: {0x65: {l: {0x65: {l: {0x3B: {c: [10980]}}}}}}}}}}}}}, 0x6F: {l: {0x6E: {l: {0x67: {l: {0x4C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [10232]}}}}}}}}}}}, 0x52: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [10234]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x52: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [10233]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x52: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8658]}}}}}}}}}}}, 0x54: {l: {0x65: {l: {0x65: {l: {0x3B: {c: [8872]}}}}}}}}}}}}}}}}}, 0x55: {l: {0x70: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8657]}}}}}}}}}}}, 0x44: {l: {0x6F: {l: {0x77: {l: {0x6E: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8661]}}}}}}}}}}}}}}}}}}}}}}}, 0x56: {l: {0x65: {l: {0x72: {l: {0x74: {l: {0x69: {l: {0x63: {l: {0x61: {l: {0x6C: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [8741]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x77: {l: {0x6E: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10515]}}}}}}}, 0x3B: {c: [8595]}, 0x55: {l: {0x70: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8693]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8659]}}}}}}}}}}}, 0x42: {l: {0x72: {l: {0x65: {l: {0x76: {l: {0x65: {l: {0x3B: {c: [785]}}}}}}}}}}}, 0x4C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x52: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x56: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x6F: {l: {0x72: {l: {0x3B: {c: [10576]}}}}}}}}}}}}}}}}}}}}}}}, 0x54: {l: {0x65: {l: {0x65: {l: {0x56: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x6F: {l: {0x72: {l: {0x3B: {c: [10590]}}}}}}}}}}}}}}}}}}}, 0x56: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x6F: {l: {0x72: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10582]}}}}}}}, 0x3B: {c: [8637]}}}}}}}}}}}}}}}}}}}}}, 0x52: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x54: {l: {0x65: {l: {0x65: {l: {0x56: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x6F: {l: {0x72: {l: {0x3B: {c: [10591]}}}}}}}}}}}}}}}}}}}, 0x56: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x6F: {l: {0x72: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10583]}}}}}}}, 0x3B: {c: [8641]}}}}}}}}}}}}}}}}}}}}}}}, 0x54: {l: {0x65: {l: {0x65: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8615]}}}}}}}}}}}, 0x3B: {c: [8868]}}}}}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119967]}}}}}, 0x74: {l: {0x72: {l: {0x6F: {l: {0x6B: {l: {0x3B: {c: [272]}}}}}}}}}}}, 0x53: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1029]}}}}}}}, 0x5A: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1039]}}}}}}}}},
    0x45: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [201]}}, c: [201]}}}}}}}}}, 0x63: {l: {0x61: {l: {0x72: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [282]}}}}}}}}}, 0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [202]}}, c: [202]}}}}}, 0x79: {l: {0x3B: {c: [1069]}}}}}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [278]}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120072]}}}}}, 0x67: {l: {0x72: {l: {0x61: {l: {0x76: {l: {0x65: {l: {0x3B: {c: [200]}}, c: [200]}}}}}}}}}, 0x6C: {l: {0x65: {l: {0x6D: {l: {0x65: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [8712]}}}}}}}}}}}}}, 0x6D: {l: {0x61: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [274]}}}}}}}, 0x70: {l: {0x74: {l: {0x79: {l: {0x53: {l: {0x6D: {l: {0x61: {l: {0x6C: {l: {0x6C: {l: {0x53: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x72: {l: {0x65: {l: {0x3B: {c: [9723]}}}}}}}}}}}}}}}}}}}}}}}, 0x56: {l: {0x65: {l: {0x72: {l: {0x79: {l: {0x53: {l: {0x6D: {l: {0x61: {l: {0x6C: {l: {0x6C: {l: {0x53: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x72: {l: {0x65: {l: {0x3B: {c: [9643]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x4E: {l: {0x47: {l: {0x3B: {c: [330]}}}}}, 0x6F: {l: {0x67: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [280]}}}}}}}, 0x70: {l: {0x66: {l: {0x3B: {c: [120124]}}}}}}}, 0x70: {l: {0x73: {l: {0x69: {l: {0x6C: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [917]}}}}}}}}}}}}}, 0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [10869]}, 0x54: {l: {0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [8770]}}}}}}}}}}}}}}}, 0x69: {l: {0x6C: {l: {0x69: {l: {0x62: {l: {0x72: {l: {0x69: {l: {0x75: {l: {0x6D: {l: {0x3B: {c: [8652]}}}}}}}}}}}}}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [8496]}}}}}, 0x69: {l: {0x6D: {l: {0x3B: {c: [10867]}}}}}}}, 0x74: {l: {0x61: {l: {0x3B: {c: [919]}}}}}, 0x54: {l: {0x48: {l: {0x3B: {c: [208]}}, c: [208]}}}, 0x75: {l: {0x6D: {l: {0x6C: {l: {0x3B: {c: [203]}}, c: [203]}}}}}, 0x78: {l: {0x69: {l: {0x73: {l: {0x74: {l: {0x73: {l: {0x3B: {c: [8707]}}}}}}}}}, 0x70: {l: {0x6F: {l: {0x6E: {l: {0x65: {l: {0x6E: {l: {0x74: {l: {0x69: {l: {0x61: {l: {0x6C: {l: {0x45: {l: {0x3B: {c: [8519]}}}}}}}}}}}}}}}}}}}}}}}}},
    0x65: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [233]}}, c: [233]}}}}}}}, 0x73: {l: {0x74: {l: {0x65: {l: {0x72: {l: {0x3B: {c: [10862]}}}}}}}}}}}, 0x63: {l: {0x61: {l: {0x72: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [283]}}}}}}}}}, 0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [234]}}, c: [234]}, 0x3B: {c: [8790]}}}}}, 0x6F: {l: {0x6C: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [8789]}}}}}}}}}, 0x79: {l: {0x3B: {c: [1101]}}}}}, 0x44: {l: {0x44: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [10871]}}}}}}}, 0x6F: {l: {0x74: {l: {0x3B: {c: [8785]}}}}}}}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [279]}}}}}}}, 0x65: {l: {0x3B: {c: [8519]}}}, 0x66: {l: {0x44: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [8786]}}}}}}}, 0x72: {l: {0x3B: {c: [120098]}}}}}, 0x67: {l: {0x3B: {c: [10906]}, 0x72: {l: {0x61: {l: {0x76: {l: {0x65: {l: {0x3B: {c: [232]}}, c: [232]}}}}}}}, 0x73: {l: {0x3B: {c: [10902]}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [10904]}}}}}}}}}}}, 0x6C: {l: {0x3B: {c: [10905]}, 0x69: {l: {0x6E: {l: {0x74: {l: {0x65: {l: {0x72: {l: {0x73: {l: {0x3B: {c: [9191]}}}}}}}}}}}}}, 0x6C: {l: {0x3B: {c: [8467]}}}, 0x73: {l: {0x3B: {c: [10901]}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [10903]}}}}}}}}}}}, 0x6D: {l: {0x61: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [275]}}}}}}}, 0x70: {l: {0x74: {l: {0x79: {l: {0x3B: {c: [8709]}, 0x73: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [8709]}}}}}}}, 0x76: {l: {0x3B: {c: [8709]}}}}}}}}}, 0x73: {l: {0x70: {l: {0x31: {l: {0x33: {l: {0x3B: {c: [8196]}}}, 0x34: {l: {0x3B: {c: [8197]}}}}}, 0x3B: {c: [8195]}}}}}}}, 0x6E: {l: {0x67: {l: {0x3B: {c: [331]}}}, 0x73: {l: {0x70: {l: {0x3B: {c: [8194]}}}}}}}, 0x6F: {l: {0x67: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [281]}}}}}}}, 0x70: {l: {0x66: {l: {0x3B: {c: [120150]}}}}}}}, 0x70: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [8917]}, 0x73: {l: {0x6C: {l: {0x3B: {c: [10723]}}}}}}}}}, 0x6C: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [10865]}}}}}}}, 0x73: {l: {0x69: {l: {0x3B: {c: [949]}, 0x6C: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [949]}}}}}}}, 0x76: {l: {0x3B: {c: [1013]}}}}}}}}}, 0x71: {l: {0x63: {l: {0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [8790]}}}}}}}, 0x6F: {l: {0x6C: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [8789]}}}}}}}}}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [8770]}}}}}, 0x6C: {l: {0x61: {l: {0x6E: {l: {0x74: {l: {0x67: {l: {0x74: {l: {0x72: {l: {0x3B: {c: [10902]}}}}}}}, 0x6C: {l: {0x65: {l: {0x73: {l: {0x73: {l: {0x3B: {c: [10901]}}}}}}}}}}}}}}}}}}}, 0x75: {l: {0x61: {l: {0x6C: {l: {0x73: {l: {0x3B: {c: [61]}}}}}}}, 0x65: {l: {0x73: {l: {0x74: {l: {0x3B: {c: [8799]}}}}}}}, 0x69: {l: {0x76: {l: {0x3B: {c: [8801]}, 0x44: {l: {0x44: {l: {0x3B: {c: [10872]}}}}}}}}}}}, 0x76: {l: {0x70: {l: {0x61: {l: {0x72: {l: {0x73: {l: {0x6C: {l: {0x3B: {c: [10725]}}}}}}}}}}}}}}}, 0x72: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [10609]}}}}}}}, 0x44: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [8787]}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [8495]}}}}}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [8784]}}}}}}}, 0x69: {l: {0x6D: {l: {0x3B: {c: [8770]}}}}}}}, 0x74: {l: {0x61: {l: {0x3B: {c: [951]}}}, 0x68: {l: {0x3B: {c: [240]}}, c: [240]}}}, 0x75: {l: {0x6D: {l: {0x6C: {l: {0x3B: {c: [235]}}, c: [235]}}}, 0x72: {l: {0x6F: {l: {0x3B: {c: [8364]}}}}}}}, 0x78: {l: {0x63: {l: {0x6C: {l: {0x3B: {c: [33]}}}}}, 0x69: {l: {0x73: {l: {0x74: {l: {0x3B: {c: [8707]}}}}}}}, 0x70: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x61: {l: {0x74: {l: {0x69: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [8496]}}}}}}}}}}}}}}}}}, 0x6F: {l: {0x6E: {l: {0x65: {l: {0x6E: {l: {0x74: {l: {0x69: {l: {0x61: {l: {0x6C: {l: {0x65: {l: {0x3B: {c: [8519]}}}}}}}}}}}}}}}}}}}}}}}}},
    0x66: {l: {0x61: {l: {0x6C: {l: {0x6C: {l: {0x69: {l: {0x6E: {l: {0x67: {l: {0x64: {l: {0x6F: {l: {0x74: {l: {0x73: {l: {0x65: {l: {0x71: {l: {0x3B: {c: [8786]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x63: {l: {0x79: {l: {0x3B: {c: [1092]}}}}}, 0x65: {l: {0x6D: {l: {0x61: {l: {0x6C: {l: {0x65: {l: {0x3B: {c: [9792]}}}}}}}}}}}, 0x66: {l: {0x69: {l: {0x6C: {l: {0x69: {l: {0x67: {l: {0x3B: {c: [64259]}}}}}}}}}, 0x6C: {l: {0x69: {l: {0x67: {l: {0x3B: {c: [64256]}}}}}, 0x6C: {l: {0x69: {l: {0x67: {l: {0x3B: {c: [64260]}}}}}}}}}, 0x72: {l: {0x3B: {c: [120099]}}}}}, 0x69: {l: {0x6C: {l: {0x69: {l: {0x67: {l: {0x3B: {c: [64257]}}}}}}}}}, 0x6A: {l: {0x6C: {l: {0x69: {l: {0x67: {l: {0x3B: {c: [102, 106]}}}}}}}}}, 0x6C: {l: {0x61: {l: {0x74: {l: {0x3B: {c: [9837]}}}}}, 0x6C: {l: {0x69: {l: {0x67: {l: {0x3B: {c: [64258]}}}}}}}, 0x74: {l: {0x6E: {l: {0x73: {l: {0x3B: {c: [9649]}}}}}}}}}, 0x6E: {l: {0x6F: {l: {0x66: {l: {0x3B: {c: [402]}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120151]}}}}}, 0x72: {l: {0x61: {l: {0x6C: {l: {0x6C: {l: {0x3B: {c: [8704]}}}}}}}, 0x6B: {l: {0x3B: {c: [8916]}, 0x76: {l: {0x3B: {c: [10969]}}}}}}}}}, 0x70: {l: {0x61: {l: {0x72: {l: {0x74: {l: {0x69: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [10765]}}}}}}}}}}}}}}}, 0x72: {l: {0x61: {l: {0x63: {l: {0x31: {l: {0x32: {l: {0x3B: {c: [189]}}, c: [189]}, 0x33: {l: {0x3B: {c: [8531]}}}, 0x34: {l: {0x3B: {c: [188]}}, c: [188]}, 0x35: {l: {0x3B: {c: [8533]}}}, 0x36: {l: {0x3B: {c: [8537]}}}, 0x38: {l: {0x3B: {c: [8539]}}}}}, 0x32: {l: {0x33: {l: {0x3B: {c: [8532]}}}, 0x35: {l: {0x3B: {c: [8534]}}}}}, 0x33: {l: {0x34: {l: {0x3B: {c: [190]}}, c: [190]}, 0x35: {l: {0x3B: {c: [8535]}}}, 0x38: {l: {0x3B: {c: [8540]}}}}}, 0x34: {l: {0x35: {l: {0x3B: {c: [8536]}}}}}, 0x35: {l: {0x36: {l: {0x3B: {c: [8538]}}}, 0x38: {l: {0x3B: {c: [8541]}}}}}, 0x37: {l: {0x38: {l: {0x3B: {c: [8542]}}}}}}}, 0x73: {l: {0x6C: {l: {0x3B: {c: [8260]}}}}}}}, 0x6F: {l: {0x77: {l: {0x6E: {l: {0x3B: {c: [8994]}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119995]}}}}}}}}},
    0x46: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1060]}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120073]}}}}}, 0x69: {l: {0x6C: {l: {0x6C: {l: {0x65: {l: {0x64: {l: {0x53: {l: {0x6D: {l: {0x61: {l: {0x6C: {l: {0x6C: {l: {0x53: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x72: {l: {0x65: {l: {0x3B: {c: [9724]}}}}}}}}}}}}}}}}}}}}}}}, 0x56: {l: {0x65: {l: {0x72: {l: {0x79: {l: {0x53: {l: {0x6D: {l: {0x61: {l: {0x6C: {l: {0x6C: {l: {0x53: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x72: {l: {0x65: {l: {0x3B: {c: [9642]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120125]}}}}}, 0x72: {l: {0x41: {l: {0x6C: {l: {0x6C: {l: {0x3B: {c: [8704]}}}}}}}}}, 0x75: {l: {0x72: {l: {0x69: {l: {0x65: {l: {0x72: {l: {0x74: {l: {0x72: {l: {0x66: {l: {0x3B: {c: [8497]}}}}}}}}}}}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [8497]}}}}}}}}},
    0x67: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [501]}}}}}}}}}, 0x6D: {l: {0x6D: {l: {0x61: {l: {0x3B: {c: [947]}, 0x64: {l: {0x3B: {c: [989]}}}}}}}}}, 0x70: {l: {0x3B: {c: [10886]}}}}}, 0x62: {l: {0x72: {l: {0x65: {l: {0x76: {l: {0x65: {l: {0x3B: {c: [287]}}}}}}}}}}}, 0x63: {l: {0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [285]}}}}}}}, 0x79: {l: {0x3B: {c: [1075]}}}}}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [289]}}}}}}}, 0x65: {l: {0x3B: {c: [8805]}, 0x6C: {l: {0x3B: {c: [8923]}}}, 0x71: {l: {0x3B: {c: [8805]}, 0x71: {l: {0x3B: {c: [8807]}}}, 0x73: {l: {0x6C: {l: {0x61: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [10878]}}}}}}}}}}}}}, 0x73: {l: {0x63: {l: {0x63: {l: {0x3B: {c: [10921]}}}}}, 0x3B: {c: [10878]}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [10880]}, 0x6F: {l: {0x3B: {c: [10882]}, 0x6C: {l: {0x3B: {c: [10884]}}}}}}}}}}}, 0x6C: {l: {0x3B: {c: [8923, 65024]}, 0x65: {l: {0x73: {l: {0x3B: {c: [10900]}}}}}}}}}}}, 0x45: {l: {0x3B: {c: [8807]}, 0x6C: {l: {0x3B: {c: [10892]}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120100]}}}}}, 0x67: {l: {0x3B: {c: [8811]}, 0x67: {l: {0x3B: {c: [8921]}}}}}, 0x69: {l: {0x6D: {l: {0x65: {l: {0x6C: {l: {0x3B: {c: [8503]}}}}}}}}}, 0x6A: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1107]}}}}}}}, 0x6C: {l: {0x61: {l: {0x3B: {c: [10917]}}}, 0x3B: {c: [8823]}, 0x45: {l: {0x3B: {c: [10898]}}}, 0x6A: {l: {0x3B: {c: [10916]}}}}}, 0x6E: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [10890]}, 0x70: {l: {0x72: {l: {0x6F: {l: {0x78: {l: {0x3B: {c: [10890]}}}}}}}}}}}}}, 0x65: {l: {0x3B: {c: [10888]}, 0x71: {l: {0x3B: {c: [10888]}, 0x71: {l: {0x3B: {c: [8809]}}}}}}}, 0x45: {l: {0x3B: {c: [8809]}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [8935]}}}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120152]}}}}}}}, 0x72: {l: {0x61: {l: {0x76: {l: {0x65: {l: {0x3B: {c: [96]}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [8458]}}}}}, 0x69: {l: {0x6D: {l: {0x3B: {c: [8819]}, 0x65: {l: {0x3B: {c: [10894]}}}, 0x6C: {l: {0x3B: {c: [10896]}}}}}}}}}, 0x74: {l: {0x63: {l: {0x63: {l: {0x3B: {c: [10919]}}}, 0x69: {l: {0x72: {l: {0x3B: {c: [10874]}}}}}}}, 0x3B: {c: [62]}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [8919]}}}}}}}, 0x6C: {l: {0x50: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10645]}}}}}}}}}, 0x71: {l: {0x75: {l: {0x65: {l: {0x73: {l: {0x74: {l: {0x3B: {c: [10876]}}}}}}}}}}}, 0x72: {l: {0x61: {l: {0x70: {l: {0x70: {l: {0x72: {l: {0x6F: {l: {0x78: {l: {0x3B: {c: [10886]}}}}}}}}}}}, 0x72: {l: {0x72: {l: {0x3B: {c: [10616]}}}}}}}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [8919]}}}}}}}, 0x65: {l: {0x71: {l: {0x6C: {l: {0x65: {l: {0x73: {l: {0x73: {l: {0x3B: {c: [8923]}}}}}}}}}, 0x71: {l: {0x6C: {l: {0x65: {l: {0x73: {l: {0x73: {l: {0x3B: {c: [10892]}}}}}}}}}}}}}}}, 0x6C: {l: {0x65: {l: {0x73: {l: {0x73: {l: {0x3B: {c: [8823]}}}}}}}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [8819]}}}}}}}}}}, c: [62]}, 0x76: {l: {0x65: {l: {0x72: {l: {0x74: {l: {0x6E: {l: {0x65: {l: {0x71: {l: {0x71: {l: {0x3B: {c: [8809, 65024]}}}}}}}}}}}}}}}, 0x6E: {l: {0x45: {l: {0x3B: {c: [8809, 65024]}}}}}}}}},
    0x47: {l: {0x61: {l: {0x6D: {l: {0x6D: {l: {0x61: {l: {0x3B: {c: [915]}, 0x64: {l: {0x3B: {c: [988]}}}}}}}}}}}, 0x62: {l: {0x72: {l: {0x65: {l: {0x76: {l: {0x65: {l: {0x3B: {c: [286]}}}}}}}}}}}, 0x63: {l: {0x65: {l: {0x64: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [290]}}}}}}}}}, 0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [284]}}}}}}}, 0x79: {l: {0x3B: {c: [1043]}}}}}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [288]}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120074]}}}}}, 0x67: {l: {0x3B: {c: [8921]}}}, 0x4A: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1027]}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120126]}}}}}}}, 0x72: {l: {0x65: {l: {0x61: {l: {0x74: {l: {0x65: {l: {0x72: {l: {0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8805]}, 0x4C: {l: {0x65: {l: {0x73: {l: {0x73: {l: {0x3B: {c: [8923]}}}}}}}}}}}}}}}}}}}, 0x46: {l: {0x75: {l: {0x6C: {l: {0x6C: {l: {0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8807]}}}}}}}}}}}}}}}}}}}, 0x47: {l: {0x72: {l: {0x65: {l: {0x61: {l: {0x74: {l: {0x65: {l: {0x72: {l: {0x3B: {c: [10914]}}}}}}}}}}}}}}}, 0x4C: {l: {0x65: {l: {0x73: {l: {0x73: {l: {0x3B: {c: [8823]}}}}}}}}}, 0x53: {l: {0x6C: {l: {0x61: {l: {0x6E: {l: {0x74: {l: {0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [10878]}}}}}}}}}}}}}}}}}}}}}, 0x54: {l: {0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [8819]}}}}}}}}}}}}}}}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119970]}}}}}}}, 0x54: {l: {0x3B: {c: [62]}}, c: [62]}, 0x74: {l: {0x3B: {c: [8811]}}}}},
    0x48: {l: {0x61: {l: {0x63: {l: {0x65: {l: {0x6B: {l: {0x3B: {c: [711]}}}}}}}, 0x74: {l: {0x3B: {c: [94]}}}}}, 0x41: {l: {0x52: {l: {0x44: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1066]}}}}}}}}}}}, 0x63: {l: {0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [292]}}}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [8460]}}}}}, 0x69: {l: {0x6C: {l: {0x62: {l: {0x65: {l: {0x72: {l: {0x74: {l: {0x53: {l: {0x70: {l: {0x61: {l: {0x63: {l: {0x65: {l: {0x3B: {c: [8459]}}}}}}}}}}}}}}}}}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [8461]}}}}}, 0x72: {l: {0x69: {l: {0x7A: {l: {0x6F: {l: {0x6E: {l: {0x74: {l: {0x61: {l: {0x6C: {l: {0x4C: {l: {0x69: {l: {0x6E: {l: {0x65: {l: {0x3B: {c: [9472]}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [8459]}}}}}, 0x74: {l: {0x72: {l: {0x6F: {l: {0x6B: {l: {0x3B: {c: [294]}}}}}}}}}}}, 0x75: {l: {0x6D: {l: {0x70: {l: {0x44: {l: {0x6F: {l: {0x77: {l: {0x6E: {l: {0x48: {l: {0x75: {l: {0x6D: {l: {0x70: {l: {0x3B: {c: [8782]}}}}}}}}}}}}}}}}}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8783]}}}}}}}}}}}}}}}}}}},
    0x68: {l: {0x61: {l: {0x69: {l: {0x72: {l: {0x73: {l: {0x70: {l: {0x3B: {c: [8202]}}}}}}}}}, 0x6C: {l: {0x66: {l: {0x3B: {c: [189]}}}}}, 0x6D: {l: {0x69: {l: {0x6C: {l: {0x74: {l: {0x3B: {c: [8459]}}}}}}}}}, 0x72: {l: {0x64: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1098]}}}}}}}, 0x72: {l: {0x63: {l: {0x69: {l: {0x72: {l: {0x3B: {c: [10568]}}}}}}}, 0x3B: {c: [8596]}, 0x77: {l: {0x3B: {c: [8621]}}}}}}}}}, 0x41: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8660]}}}}}}}, 0x62: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [8463]}}}}}}}, 0x63: {l: {0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [293]}}}}}}}}}, 0x65: {l: {0x61: {l: {0x72: {l: {0x74: {l: {0x73: {l: {0x3B: {c: [9829]}, 0x75: {l: {0x69: {l: {0x74: {l: {0x3B: {c: [9829]}}}}}}}}}}}}}}}, 0x6C: {l: {0x6C: {l: {0x69: {l: {0x70: {l: {0x3B: {c: [8230]}}}}}}}}}, 0x72: {l: {0x63: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [8889]}}}}}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120101]}}}}}, 0x6B: {l: {0x73: {l: {0x65: {l: {0x61: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [10533]}}}}}}}}}}}, 0x77: {l: {0x61: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [10534]}}}}}}}}}}}}}}}, 0x6F: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8703]}}}}}}}, 0x6D: {l: {0x74: {l: {0x68: {l: {0x74: {l: {0x3B: {c: [8763]}}}}}}}}}, 0x6F: {l: {0x6B: {l: {0x6C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8617]}}}}}}}}}}}}}}}}}}}, 0x72: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8618]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x70: {l: {0x66: {l: {0x3B: {c: [120153]}}}}}, 0x72: {l: {0x62: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [8213]}}}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119997]}}}}}, 0x6C: {l: {0x61: {l: {0x73: {l: {0x68: {l: {0x3B: {c: [8463]}}}}}}}}}, 0x74: {l: {0x72: {l: {0x6F: {l: {0x6B: {l: {0x3B: {c: [295]}}}}}}}}}}}, 0x79: {l: {0x62: {l: {0x75: {l: {0x6C: {l: {0x6C: {l: {0x3B: {c: [8259]}}}}}}}}}, 0x70: {l: {0x68: {l: {0x65: {l: {0x6E: {l: {0x3B: {c: [8208]}}}}}}}}}}}}},
    0x49: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [205]}}, c: [205]}}}}}}}}}, 0x63: {l: {0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [206]}}, c: [206]}}}}}, 0x79: {l: {0x3B: {c: [1048]}}}}}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [304]}}}}}}}, 0x45: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1045]}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [8465]}}}}}, 0x67: {l: {0x72: {l: {0x61: {l: {0x76: {l: {0x65: {l: {0x3B: {c: [204]}}, c: [204]}}}}}}}}}, 0x4A: {l: {0x6C: {l: {0x69: {l: {0x67: {l: {0x3B: {c: [306]}}}}}}}}}, 0x6D: {l: {0x61: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [298]}}}}}, 0x67: {l: {0x69: {l: {0x6E: {l: {0x61: {l: {0x72: {l: {0x79: {l: {0x49: {l: {0x3B: {c: [8520]}}}}}}}}}}}}}}}}}, 0x3B: {c: [8465]}, 0x70: {l: {0x6C: {l: {0x69: {l: {0x65: {l: {0x73: {l: {0x3B: {c: [8658]}}}}}}}}}}}}}, 0x6E: {l: {0x74: {l: {0x3B: {c: [8748]}, 0x65: {l: {0x67: {l: {0x72: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8747]}}}}}}}}}, 0x72: {l: {0x73: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x69: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [8898]}}}}}}}}}}}}}}}}}}}}}, 0x76: {l: {0x69: {l: {0x73: {l: {0x69: {l: {0x62: {l: {0x6C: {l: {0x65: {l: {0x43: {l: {0x6F: {l: {0x6D: {l: {0x6D: {l: {0x61: {l: {0x3B: {c: [8291]}}}}}}}}}}}, 0x54: {l: {0x69: {l: {0x6D: {l: {0x65: {l: {0x73: {l: {0x3B: {c: [8290]}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x4F: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1025]}}}}}}}, 0x6F: {l: {0x67: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [302]}}}}}}}, 0x70: {l: {0x66: {l: {0x3B: {c: [120128]}}}}}, 0x74: {l: {0x61: {l: {0x3B: {c: [921]}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [8464]}}}}}}}, 0x74: {l: {0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [296]}}}}}}}}}}}, 0x75: {l: {0x6B: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1030]}}}}}}}, 0x6D: {l: {0x6C: {l: {0x3B: {c: [207]}}, c: [207]}}}}}}},
    0x69: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [237]}}, c: [237]}}}}}}}}}, 0x63: {l: {0x3B: {c: [8291]}, 0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [238]}}, c: [238]}}}}}, 0x79: {l: {0x3B: {c: [1080]}}}}}, 0x65: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1077]}}}}}, 0x78: {l: {0x63: {l: {0x6C: {l: {0x3B: {c: [161]}}, c: [161]}}}}}}}, 0x66: {l: {0x66: {l: {0x3B: {c: [8660]}}}, 0x72: {l: {0x3B: {c: [120102]}}}}}, 0x67: {l: {0x72: {l: {0x61: {l: {0x76: {l: {0x65: {l: {0x3B: {c: [236]}}, c: [236]}}}}}}}}}, 0x69: {l: {0x3B: {c: [8520]}, 0x69: {l: {0x69: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [10764]}}}}}}}, 0x6E: {l: {0x74: {l: {0x3B: {c: [8749]}}}}}}}, 0x6E: {l: {0x66: {l: {0x69: {l: {0x6E: {l: {0x3B: {c: [10716]}}}}}}}}}, 0x6F: {l: {0x74: {l: {0x61: {l: {0x3B: {c: [8489]}}}}}}}}}, 0x6A: {l: {0x6C: {l: {0x69: {l: {0x67: {l: {0x3B: {c: [307]}}}}}}}}}, 0x6D: {l: {0x61: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [299]}}}}}, 0x67: {l: {0x65: {l: {0x3B: {c: [8465]}}}, 0x6C: {l: {0x69: {l: {0x6E: {l: {0x65: {l: {0x3B: {c: [8464]}}}}}}}}}, 0x70: {l: {0x61: {l: {0x72: {l: {0x74: {l: {0x3B: {c: [8465]}}}}}}}}}}}, 0x74: {l: {0x68: {l: {0x3B: {c: [305]}}}}}}}, 0x6F: {l: {0x66: {l: {0x3B: {c: [8887]}}}}}, 0x70: {l: {0x65: {l: {0x64: {l: {0x3B: {c: [437]}}}}}}}}}, 0x6E: {l: {0x63: {l: {0x61: {l: {0x72: {l: {0x65: {l: {0x3B: {c: [8453]}}}}}}}}}, 0x3B: {c: [8712]}, 0x66: {l: {0x69: {l: {0x6E: {l: {0x3B: {c: [8734]}, 0x74: {l: {0x69: {l: {0x65: {l: {0x3B: {c: [10717]}}}}}}}}}}}}}, 0x6F: {l: {0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [305]}}}}}}}}}, 0x74: {l: {0x63: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8890]}}}}}}}, 0x3B: {c: [8747]}, 0x65: {l: {0x67: {l: {0x65: {l: {0x72: {l: {0x73: {l: {0x3B: {c: [8484]}}}}}}}}}, 0x72: {l: {0x63: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8890]}}}}}}}}}}}, 0x6C: {l: {0x61: {l: {0x72: {l: {0x68: {l: {0x6B: {l: {0x3B: {c: [10775]}}}}}}}}}}}, 0x70: {l: {0x72: {l: {0x6F: {l: {0x64: {l: {0x3B: {c: [10812]}}}}}}}}}}}}}, 0x6F: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1105]}}}}}, 0x67: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [303]}}}}}}}, 0x70: {l: {0x66: {l: {0x3B: {c: [120154]}}}}}, 0x74: {l: {0x61: {l: {0x3B: {c: [953]}}}}}}}, 0x70: {l: {0x72: {l: {0x6F: {l: {0x64: {l: {0x3B: {c: [10812]}}}}}}}}}, 0x71: {l: {0x75: {l: {0x65: {l: {0x73: {l: {0x74: {l: {0x3B: {c: [191]}}, c: [191]}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119998]}}}}}, 0x69: {l: {0x6E: {l: {0x3B: {c: [8712]}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [8949]}}}}}}}, 0x45: {l: {0x3B: {c: [8953]}}}, 0x73: {l: {0x3B: {c: [8948]}, 0x76: {l: {0x3B: {c: [8947]}}}}}, 0x76: {l: {0x3B: {c: [8712]}}}}}}}}}, 0x74: {l: {0x3B: {c: [8290]}, 0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [297]}}}}}}}}}}}, 0x75: {l: {0x6B: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1110]}}}}}}}, 0x6D: {l: {0x6C: {l: {0x3B: {c: [239]}}, c: [239]}}}}}}},
    0x4A: {l: {0x63: {l: {0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [308]}}}}}}}, 0x79: {l: {0x3B: {c: [1049]}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120077]}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120129]}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119973]}}}}}, 0x65: {l: {0x72: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1032]}}}}}}}}}}}, 0x75: {l: {0x6B: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1028]}}}}}}}}}}},
    0x6A: {l: {0x63: {l: {0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [309]}}}}}}}, 0x79: {l: {0x3B: {c: [1081]}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120103]}}}}}, 0x6D: {l: {0x61: {l: {0x74: {l: {0x68: {l: {0x3B: {c: [567]}}}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120155]}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119999]}}}}}, 0x65: {l: {0x72: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1112]}}}}}}}}}}}, 0x75: {l: {0x6B: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1108]}}}}}}}}}}},
    0x4B: {l: {0x61: {l: {0x70: {l: {0x70: {l: {0x61: {l: {0x3B: {c: [922]}}}}}}}}}, 0x63: {l: {0x65: {l: {0x64: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [310]}}}}}}}}}, 0x79: {l: {0x3B: {c: [1050]}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120078]}}}}}, 0x48: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1061]}}}}}}}, 0x4A: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1036]}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120130]}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119974]}}}}}}}}},
    0x6B: {l: {0x61: {l: {0x70: {l: {0x70: {l: {0x61: {l: {0x3B: {c: [954]}, 0x76: {l: {0x3B: {c: [1008]}}}}}}}}}}}, 0x63: {l: {0x65: {l: {0x64: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [311]}}}}}}}}}, 0x79: {l: {0x3B: {c: [1082]}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120104]}}}}}, 0x67: {l: {0x72: {l: {0x65: {l: {0x65: {l: {0x6E: {l: {0x3B: {c: [312]}}}}}}}}}}}, 0x68: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1093]}}}}}}}, 0x6A: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1116]}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120156]}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [120000]}}}}}}}}},
    0x6C: {l: {0x41: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8666]}}}}}}}, 0x72: {l: {0x72: {l: {0x3B: {c: [8656]}}}}}, 0x74: {l: {0x61: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [10523]}}}}}}}}}}}, 0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [314]}}}}}}}}}, 0x65: {l: {0x6D: {l: {0x70: {l: {0x74: {l: {0x79: {l: {0x76: {l: {0x3B: {c: [10676]}}}}}}}}}}}}}, 0x67: {l: {0x72: {l: {0x61: {l: {0x6E: {l: {0x3B: {c: [8466]}}}}}}}}}, 0x6D: {l: {0x62: {l: {0x64: {l: {0x61: {l: {0x3B: {c: [955]}}}}}}}}}, 0x6E: {l: {0x67: {l: {0x3B: {c: [10216]}, 0x64: {l: {0x3B: {c: [10641]}}}, 0x6C: {l: {0x65: {l: {0x3B: {c: [10216]}}}}}}}}}, 0x70: {l: {0x3B: {c: [10885]}}}, 0x71: {l: {0x75: {l: {0x6F: {l: {0x3B: {c: [171]}}, c: [171]}}}}}, 0x72: {l: {0x72: {l: {0x62: {l: {0x3B: {c: [8676]}, 0x66: {l: {0x73: {l: {0x3B: {c: [10527]}}}}}}}, 0x3B: {c: [8592]}, 0x66: {l: {0x73: {l: {0x3B: {c: [10525]}}}}}, 0x68: {l: {0x6B: {l: {0x3B: {c: [8617]}}}}}, 0x6C: {l: {0x70: {l: {0x3B: {c: [8619]}}}}}, 0x70: {l: {0x6C: {l: {0x3B: {c: [10553]}}}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [10611]}}}}}}}, 0x74: {l: {0x6C: {l: {0x3B: {c: [8610]}}}}}}}}}, 0x74: {l: {0x61: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [10521]}}}}}}}, 0x3B: {c: [10923]}, 0x65: {l: {0x3B: {c: [10925]}, 0x73: {l: {0x3B: {c: [10925, 65024]}}}}}}}}}, 0x62: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [10508]}}}}}}}, 0x62: {l: {0x72: {l: {0x6B: {l: {0x3B: {c: [10098]}}}}}}}, 0x72: {l: {0x61: {l: {0x63: {l: {0x65: {l: {0x3B: {c: [123]}}}, 0x6B: {l: {0x3B: {c: [91]}}}}}}}, 0x6B: {l: {0x65: {l: {0x3B: {c: [10635]}}}, 0x73: {l: {0x6C: {l: {0x64: {l: {0x3B: {c: [10639]}}}, 0x75: {l: {0x3B: {c: [10637]}}}}}}}}}}}}}, 0x42: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [10510]}}}}}}}}}, 0x63: {l: {0x61: {l: {0x72: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [318]}}}}}}}}}, 0x65: {l: {0x64: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [316]}}}}}}}, 0x69: {l: {0x6C: {l: {0x3B: {c: [8968]}}}}}}}, 0x75: {l: {0x62: {l: {0x3B: {c: [123]}}}}}, 0x79: {l: {0x3B: {c: [1083]}}}}}, 0x64: {l: {0x63: {l: {0x61: {l: {0x3B: {c: [10550]}}}}}, 0x71: {l: {0x75: {l: {0x6F: {l: {0x3B: {c: [8220]}, 0x72: {l: {0x3B: {c: [8222]}}}}}}}}}, 0x72: {l: {0x64: {l: {0x68: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10599]}}}}}}}}}, 0x75: {l: {0x73: {l: {0x68: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10571]}}}}}}}}}}}}}, 0x73: {l: {0x68: {l: {0x3B: {c: [8626]}}}}}}}, 0x65: {l: {0x3B: {c: [8804]}, 0x66: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8592]}, 0x74: {l: {0x61: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [8610]}}}}}}}}}}}}}}}}}}}, 0x68: {l: {0x61: {l: {0x72: {l: {0x70: {l: {0x6F: {l: {0x6F: {l: {0x6E: {l: {0x64: {l: {0x6F: {l: {0x77: {l: {0x6E: {l: {0x3B: {c: [8637]}}}}}}}}}, 0x75: {l: {0x70: {l: {0x3B: {c: [8636]}}}}}}}}}}}}}}}}}}}, 0x6C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x73: {l: {0x3B: {c: [8647]}}}}}}}}}}}}}}}}}}}}}, 0x72: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8596]}, 0x73: {l: {0x3B: {c: [8646]}}}}}}}}}}}}}, 0x68: {l: {0x61: {l: {0x72: {l: {0x70: {l: {0x6F: {l: {0x6F: {l: {0x6E: {l: {0x73: {l: {0x3B: {c: [8651]}}}}}}}}}}}}}}}}}, 0x73: {l: {0x71: {l: {0x75: {l: {0x69: {l: {0x67: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8621]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x74: {l: {0x68: {l: {0x72: {l: {0x65: {l: {0x65: {l: {0x74: {l: {0x69: {l: {0x6D: {l: {0x65: {l: {0x73: {l: {0x3B: {c: [8907]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x67: {l: {0x3B: {c: [8922]}}}, 0x71: {l: {0x3B: {c: [8804]}, 0x71: {l: {0x3B: {c: [8806]}}}, 0x73: {l: {0x6C: {l: {0x61: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [10877]}}}}}}}}}}}}}, 0x73: {l: {0x63: {l: {0x63: {l: {0x3B: {c: [10920]}}}}}, 0x3B: {c: [10877]}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [10879]}, 0x6F: {l: {0x3B: {c: [10881]}, 0x72: {l: {0x3B: {c: [10883]}}}}}}}}}}}, 0x67: {l: {0x3B: {c: [8922, 65024]}, 0x65: {l: {0x73: {l: {0x3B: {c: [10899]}}}}}}}, 0x73: {l: {0x61: {l: {0x70: {l: {0x70: {l: {0x72: {l: {0x6F: {l: {0x78: {l: {0x3B: {c: [10885]}}}}}}}}}}}}}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [8918]}}}}}}}, 0x65: {l: {0x71: {l: {0x67: {l: {0x74: {l: {0x72: {l: {0x3B: {c: [8922]}}}}}}}, 0x71: {l: {0x67: {l: {0x74: {l: {0x72: {l: {0x3B: {c: [10891]}}}}}}}}}}}}}, 0x67: {l: {0x74: {l: {0x72: {l: {0x3B: {c: [8822]}}}}}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [8818]}}}}}}}}}}}}}, 0x45: {l: {0x3B: {c: [8806]}, 0x67: {l: {0x3B: {c: [10891]}}}}}, 0x66: {l: {0x69: {l: {0x73: {l: {0x68: {l: {0x74: {l: {0x3B: {c: [10620]}}}}}}}}}, 0x6C: {l: {0x6F: {l: {0x6F: {l: {0x72: {l: {0x3B: {c: [8970]}}}}}}}}}, 0x72: {l: {0x3B: {c: [120105]}}}}}, 0x67: {l: {0x3B: {c: [8822]}, 0x45: {l: {0x3B: {c: [10897]}}}}}, 0x48: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10594]}}}}}}}, 0x68: {l: {0x61: {l: {0x72: {l: {0x64: {l: {0x3B: {c: [8637]}}}, 0x75: {l: {0x3B: {c: [8636]}, 0x6C: {l: {0x3B: {c: [10602]}}}}}}}}}, 0x62: {l: {0x6C: {l: {0x6B: {l: {0x3B: {c: [9604]}}}}}}}}}, 0x6A: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1113]}}}}}}}, 0x6C: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8647]}}}}}}}, 0x3B: {c: [8810]}, 0x63: {l: {0x6F: {l: {0x72: {l: {0x6E: {l: {0x65: {l: {0x72: {l: {0x3B: {c: [8990]}}}}}}}}}}}}}, 0x68: {l: {0x61: {l: {0x72: {l: {0x64: {l: {0x3B: {c: [10603]}}}}}}}}}, 0x74: {l: {0x72: {l: {0x69: {l: {0x3B: {c: [9722]}}}}}}}}}, 0x6D: {l: {0x69: {l: {0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [320]}}}}}}}}}, 0x6F: {l: {0x75: {l: {0x73: {l: {0x74: {l: {0x61: {l: {0x63: {l: {0x68: {l: {0x65: {l: {0x3B: {c: [9136]}}}}}}}}}, 0x3B: {c: [9136]}}}}}}}}}}}, 0x6E: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [10889]}, 0x70: {l: {0x72: {l: {0x6F: {l: {0x78: {l: {0x3B: {c: [10889]}}}}}}}}}}}}}, 0x65: {l: {0x3B: {c: [10887]}, 0x71: {l: {0x3B: {c: [10887]}, 0x71: {l: {0x3B: {c: [8808]}}}}}}}, 0x45: {l: {0x3B: {c: [8808]}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [8934]}}}}}}}}}, 0x6F: {l: {0x61: {l: {0x6E: {l: {0x67: {l: {0x3B: {c: [10220]}}}}}, 0x72: {l: {0x72: {l: {0x3B: {c: [8701]}}}}}}}, 0x62: {l: {0x72: {l: {0x6B: {l: {0x3B: {c: [10214]}}}}}}}, 0x6E: {l: {0x67: {l: {0x6C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [10229]}}}}}}}}}}}, 0x72: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [10231]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x6D: {l: {0x61: {l: {0x70: {l: {0x73: {l: {0x74: {l: {0x6F: {l: {0x3B: {c: [10236]}}}}}}}}}}}}}, 0x72: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [10230]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x6F: {l: {0x70: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x6C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x3B: {c: [8619]}}}}}}}}}, 0x72: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x3B: {c: [8620]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x70: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10629]}}}}}, 0x66: {l: {0x3B: {c: [120157]}}}, 0x6C: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [10797]}}}}}}}}}, 0x74: {l: {0x69: {l: {0x6D: {l: {0x65: {l: {0x73: {l: {0x3B: {c: [10804]}}}}}}}}}}}, 0x77: {l: {0x61: {l: {0x73: {l: {0x74: {l: {0x3B: {c: [8727]}}}}}}}, 0x62: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [95]}}}}}}}}}, 0x7A: {l: {0x3B: {c: [9674]}, 0x65: {l: {0x6E: {l: {0x67: {l: {0x65: {l: {0x3B: {c: [9674]}}}}}}}}}, 0x66: {l: {0x3B: {c: [10731]}}}}}}}, 0x70: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [40]}, 0x6C: {l: {0x74: {l: {0x3B: {c: [10643]}}}}}}}}}}}, 0x72: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8646]}}}}}}}, 0x63: {l: {0x6F: {l: {0x72: {l: {0x6E: {l: {0x65: {l: {0x72: {l: {0x3B: {c: [8991]}}}}}}}}}}}}}, 0x68: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [8651]}, 0x64: {l: {0x3B: {c: [10605]}}}}}}}}}, 0x6D: {l: {0x3B: {c: [8206]}}}, 0x74: {l: {0x72: {l: {0x69: {l: {0x3B: {c: [8895]}}}}}}}}}, 0x73: {l: {0x61: {l: {0x71: {l: {0x75: {l: {0x6F: {l: {0x3B: {c: [8249]}}}}}}}}}, 0x63: {l: {0x72: {l: {0x3B: {c: [120001]}}}}}, 0x68: {l: {0x3B: {c: [8624]}}}, 0x69: {l: {0x6D: {l: {0x3B: {c: [8818]}, 0x65: {l: {0x3B: {c: [10893]}}}, 0x67: {l: {0x3B: {c: [10895]}}}}}}}, 0x71: {l: {0x62: {l: {0x3B: {c: [91]}}}, 0x75: {l: {0x6F: {l: {0x3B: {c: [8216]}, 0x72: {l: {0x3B: {c: [8218]}}}}}}}}}, 0x74: {l: {0x72: {l: {0x6F: {l: {0x6B: {l: {0x3B: {c: [322]}}}}}}}}}}}, 0x74: {l: {0x63: {l: {0x63: {l: {0x3B: {c: [10918]}}}, 0x69: {l: {0x72: {l: {0x3B: {c: [10873]}}}}}}}, 0x3B: {c: [60]}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [8918]}}}}}}}, 0x68: {l: {0x72: {l: {0x65: {l: {0x65: {l: {0x3B: {c: [8907]}}}}}}}}}, 0x69: {l: {0x6D: {l: {0x65: {l: {0x73: {l: {0x3B: {c: [8905]}}}}}}}}}, 0x6C: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [10614]}}}}}}}}}, 0x71: {l: {0x75: {l: {0x65: {l: {0x73: {l: {0x74: {l: {0x3B: {c: [10875]}}}}}}}}}}}, 0x72: {l: {0x69: {l: {0x3B: {c: [9667]}, 0x65: {l: {0x3B: {c: [8884]}}}, 0x66: {l: {0x3B: {c: [9666]}}}}}, 0x50: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10646]}}}}}}}}}}, c: [60]}, 0x75: {l: {0x72: {l: {0x64: {l: {0x73: {l: {0x68: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10570]}}}}}}}}}}}, 0x75: {l: {0x68: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10598]}}}}}}}}}}}}}, 0x76: {l: {0x65: {l: {0x72: {l: {0x74: {l: {0x6E: {l: {0x65: {l: {0x71: {l: {0x71: {l: {0x3B: {c: [8808, 65024]}}}}}}}}}}}}}}}, 0x6E: {l: {0x45: {l: {0x3B: {c: [8808, 65024]}}}}}}}}},
    0x4C: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [313]}}}}}}}}}, 0x6D: {l: {0x62: {l: {0x64: {l: {0x61: {l: {0x3B: {c: [923]}}}}}}}}}, 0x6E: {l: {0x67: {l: {0x3B: {c: [10218]}}}}}, 0x70: {l: {0x6C: {l: {0x61: {l: {0x63: {l: {0x65: {l: {0x74: {l: {0x72: {l: {0x66: {l: {0x3B: {c: [8466]}}}}}}}}}}}}}}}}}, 0x72: {l: {0x72: {l: {0x3B: {c: [8606]}}}}}}}, 0x63: {l: {0x61: {l: {0x72: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [317]}}}}}}}}}, 0x65: {l: {0x64: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [315]}}}}}}}}}, 0x79: {l: {0x3B: {c: [1051]}}}}}, 0x65: {l: {0x66: {l: {0x74: {l: {0x41: {l: {0x6E: {l: {0x67: {l: {0x6C: {l: {0x65: {l: {0x42: {l: {0x72: {l: {0x61: {l: {0x63: {l: {0x6B: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [10216]}}}}}}}}}}}}}}}}}}}}}}}, 0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [8676]}}}}}}}, 0x3B: {c: [8592]}, 0x52: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8646]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8656]}}}}}}}}}}}, 0x43: {l: {0x65: {l: {0x69: {l: {0x6C: {l: {0x69: {l: {0x6E: {l: {0x67: {l: {0x3B: {c: [8968]}}}}}}}}}}}}}}}, 0x44: {l: {0x6F: {l: {0x75: {l: {0x62: {l: {0x6C: {l: {0x65: {l: {0x42: {l: {0x72: {l: {0x61: {l: {0x63: {l: {0x6B: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [10214]}}}}}}}}}}}}}}}}}}}}}}}, 0x77: {l: {0x6E: {l: {0x54: {l: {0x65: {l: {0x65: {l: {0x56: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x6F: {l: {0x72: {l: {0x3B: {c: [10593]}}}}}}}}}}}}}}}}}}}, 0x56: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x6F: {l: {0x72: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10585]}}}}}}}, 0x3B: {c: [8643]}}}}}}}}}}}}}}}}}}}}}, 0x46: {l: {0x6C: {l: {0x6F: {l: {0x6F: {l: {0x72: {l: {0x3B: {c: [8970]}}}}}}}}}}}, 0x52: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8596]}}}}}}}}}}}, 0x56: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x6F: {l: {0x72: {l: {0x3B: {c: [10574]}}}}}}}}}}}}}}}}}}}}}}}, 0x72: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8660]}}}}}}}}}}}}}}}}}}}}}, 0x54: {l: {0x65: {l: {0x65: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8612]}}}}}}}}}}}, 0x3B: {c: [8867]}, 0x56: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x6F: {l: {0x72: {l: {0x3B: {c: [10586]}}}}}}}}}}}}}}}}}, 0x72: {l: {0x69: {l: {0x61: {l: {0x6E: {l: {0x67: {l: {0x6C: {l: {0x65: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10703]}}}}}}}, 0x3B: {c: [8882]}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8884]}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x55: {l: {0x70: {l: {0x44: {l: {0x6F: {l: {0x77: {l: {0x6E: {l: {0x56: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x6F: {l: {0x72: {l: {0x3B: {c: [10577]}}}}}}}}}}}}}}}}}}}}}, 0x54: {l: {0x65: {l: {0x65: {l: {0x56: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x6F: {l: {0x72: {l: {0x3B: {c: [10592]}}}}}}}}}}}}}}}}}}}, 0x56: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x6F: {l: {0x72: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10584]}}}}}}}, 0x3B: {c: [8639]}}}}}}}}}}}}}}}}}, 0x56: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x6F: {l: {0x72: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10578]}}}}}}}, 0x3B: {c: [8636]}}}}}}}}}}}}}}}}}, 0x73: {l: {0x73: {l: {0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x47: {l: {0x72: {l: {0x65: {l: {0x61: {l: {0x74: {l: {0x65: {l: {0x72: {l: {0x3B: {c: [8922]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x46: {l: {0x75: {l: {0x6C: {l: {0x6C: {l: {0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8806]}}}}}}}}}}}}}}}}}}}, 0x47: {l: {0x72: {l: {0x65: {l: {0x61: {l: {0x74: {l: {0x65: {l: {0x72: {l: {0x3B: {c: [8822]}}}}}}}}}}}}}}}, 0x4C: {l: {0x65: {l: {0x73: {l: {0x73: {l: {0x3B: {c: [10913]}}}}}}}}}, 0x53: {l: {0x6C: {l: {0x61: {l: {0x6E: {l: {0x74: {l: {0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [10877]}}}}}}}}}}}}}}}}}}}}}, 0x54: {l: {0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [8818]}}}}}}}}}}}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120079]}}}}}, 0x4A: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1033]}}}}}}}, 0x6C: {l: {0x3B: {c: [8920]}, 0x65: {l: {0x66: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8666]}}}}}}}}}}}}}}}}}}}, 0x6D: {l: {0x69: {l: {0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [319]}}}}}}}}}}}, 0x6F: {l: {0x6E: {l: {0x67: {l: {0x4C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [10229]}}}}}}}}}}}, 0x52: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [10231]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x6C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [10232]}}}}}}}}}}}, 0x72: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [10234]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x52: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [10230]}}}}}}}}}}}}}}}}}}}}}, 0x72: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [10233]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x70: {l: {0x66: {l: {0x3B: {c: [120131]}}}}}, 0x77: {l: {0x65: {l: {0x72: {l: {0x4C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8601]}}}}}}}}}}}}}}}}}}}, 0x52: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8600]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [8466]}}}}}, 0x68: {l: {0x3B: {c: [8624]}}}, 0x74: {l: {0x72: {l: {0x6F: {l: {0x6B: {l: {0x3B: {c: [321]}}}}}}}}}}}, 0x54: {l: {0x3B: {c: [60]}}, c: [60]}, 0x74: {l: {0x3B: {c: [8810]}}}}},
    0x6D: {l: {0x61: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [175]}}, c: [175]}}}, 0x6C: {l: {0x65: {l: {0x3B: {c: [9794]}}}, 0x74: {l: {0x3B: {c: [10016]}, 0x65: {l: {0x73: {l: {0x65: {l: {0x3B: {c: [10016]}}}}}}}}}}}, 0x70: {l: {0x3B: {c: [8614]}, 0x73: {l: {0x74: {l: {0x6F: {l: {0x3B: {c: [8614]}, 0x64: {l: {0x6F: {l: {0x77: {l: {0x6E: {l: {0x3B: {c: [8615]}}}}}}}}}, 0x6C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x3B: {c: [8612]}}}}}}}}}, 0x75: {l: {0x70: {l: {0x3B: {c: [8613]}}}}}}}}}}}}}, 0x72: {l: {0x6B: {l: {0x65: {l: {0x72: {l: {0x3B: {c: [9646]}}}}}}}}}}}, 0x63: {l: {0x6F: {l: {0x6D: {l: {0x6D: {l: {0x61: {l: {0x3B: {c: [10793]}}}}}}}}}, 0x79: {l: {0x3B: {c: [1084]}}}}}, 0x64: {l: {0x61: {l: {0x73: {l: {0x68: {l: {0x3B: {c: [8212]}}}}}}}}}, 0x44: {l: {0x44: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [8762]}}}}}}}}}, 0x65: {l: {0x61: {l: {0x73: {l: {0x75: {l: {0x72: {l: {0x65: {l: {0x64: {l: {0x61: {l: {0x6E: {l: {0x67: {l: {0x6C: {l: {0x65: {l: {0x3B: {c: [8737]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120106]}}}}}, 0x68: {l: {0x6F: {l: {0x3B: {c: [8487]}}}}}, 0x69: {l: {0x63: {l: {0x72: {l: {0x6F: {l: {0x3B: {c: [181]}}, c: [181]}}}}}, 0x64: {l: {0x61: {l: {0x73: {l: {0x74: {l: {0x3B: {c: [42]}}}}}}}, 0x63: {l: {0x69: {l: {0x72: {l: {0x3B: {c: [10992]}}}}}}}, 0x3B: {c: [8739]}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [183]}}, c: [183]}}}}}}}, 0x6E: {l: {0x75: {l: {0x73: {l: {0x62: {l: {0x3B: {c: [8863]}}}, 0x3B: {c: [8722]}, 0x64: {l: {0x3B: {c: [8760]}, 0x75: {l: {0x3B: {c: [10794]}}}}}}}}}}}}}, 0x6C: {l: {0x63: {l: {0x70: {l: {0x3B: {c: [10971]}}}}}, 0x64: {l: {0x72: {l: {0x3B: {c: [8230]}}}}}}}, 0x6E: {l: {0x70: {l: {0x6C: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [8723]}}}}}}}}}}}, 0x6F: {l: {0x64: {l: {0x65: {l: {0x6C: {l: {0x73: {l: {0x3B: {c: [8871]}}}}}}}}}, 0x70: {l: {0x66: {l: {0x3B: {c: [120158]}}}}}}}, 0x70: {l: {0x3B: {c: [8723]}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [120002]}}}}}, 0x74: {l: {0x70: {l: {0x6F: {l: {0x73: {l: {0x3B: {c: [8766]}}}}}}}}}}}, 0x75: {l: {0x3B: {c: [956]}, 0x6C: {l: {0x74: {l: {0x69: {l: {0x6D: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [8888]}}}}}}}}}}}}}, 0x6D: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [8888]}}}}}}}}}}},
    0x4D: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [10501]}}}}}, 0x63: {l: {0x79: {l: {0x3B: {c: [1052]}}}}}, 0x65: {l: {0x64: {l: {0x69: {l: {0x75: {l: {0x6D: {l: {0x53: {l: {0x70: {l: {0x61: {l: {0x63: {l: {0x65: {l: {0x3B: {c: [8287]}}}}}}}}}}}}}}}}}}}, 0x6C: {l: {0x6C: {l: {0x69: {l: {0x6E: {l: {0x74: {l: {0x72: {l: {0x66: {l: {0x3B: {c: [8499]}}}}}}}}}}}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120080]}}}}}, 0x69: {l: {0x6E: {l: {0x75: {l: {0x73: {l: {0x50: {l: {0x6C: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [8723]}}}}}}}}}}}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120132]}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [8499]}}}}}}}, 0x75: {l: {0x3B: {c: [924]}}}}},
    0x6E: {l: {0x61: {l: {0x62: {l: {0x6C: {l: {0x61: {l: {0x3B: {c: [8711]}}}}}}}, 0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [324]}}}}}}}}}, 0x6E: {l: {0x67: {l: {0x3B: {c: [8736, 8402]}}}}}, 0x70: {l: {0x3B: {c: [8777]}, 0x45: {l: {0x3B: {c: [10864, 824]}}}, 0x69: {l: {0x64: {l: {0x3B: {c: [8779, 824]}}}}}, 0x6F: {l: {0x73: {l: {0x3B: {c: [329]}}}}}, 0x70: {l: {0x72: {l: {0x6F: {l: {0x78: {l: {0x3B: {c: [8777]}}}}}}}}}}}, 0x74: {l: {0x75: {l: {0x72: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [9838]}, 0x73: {l: {0x3B: {c: [8469]}}}}}}}, 0x3B: {c: [9838]}}}}}}}}}, 0x62: {l: {0x73: {l: {0x70: {l: {0x3B: {c: [160]}}, c: [160]}}}, 0x75: {l: {0x6D: {l: {0x70: {l: {0x3B: {c: [8782, 824]}, 0x65: {l: {0x3B: {c: [8783, 824]}}}}}}}}}}}, 0x63: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [10819]}}}, 0x72: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [328]}}}}}}}}}, 0x65: {l: {0x64: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [326]}}}}}}}}}, 0x6F: {l: {0x6E: {l: {0x67: {l: {0x3B: {c: [8775]}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [10861, 824]}}}}}}}}}}}}}, 0x75: {l: {0x70: {l: {0x3B: {c: [10818]}}}}}, 0x79: {l: {0x3B: {c: [1085]}}}}}, 0x64: {l: {0x61: {l: {0x73: {l: {0x68: {l: {0x3B: {c: [8211]}}}}}}}}}, 0x65: {l: {0x61: {l: {0x72: {l: {0x68: {l: {0x6B: {l: {0x3B: {c: [10532]}}}}}, 0x72: {l: {0x3B: {c: [8599]}, 0x6F: {l: {0x77: {l: {0x3B: {c: [8599]}}}}}}}}}}}, 0x41: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8663]}}}}}}}, 0x3B: {c: [8800]}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [8784, 824]}}}}}}}, 0x71: {l: {0x75: {l: {0x69: {l: {0x76: {l: {0x3B: {c: [8802]}}}}}}}}}, 0x73: {l: {0x65: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10536]}}}}}}}, 0x69: {l: {0x6D: {l: {0x3B: {c: [8770, 824]}}}}}}}, 0x78: {l: {0x69: {l: {0x73: {l: {0x74: {l: {0x3B: {c: [8708]}, 0x73: {l: {0x3B: {c: [8708]}}}}}}}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120107]}}}}}, 0x67: {l: {0x45: {l: {0x3B: {c: [8807, 824]}}}, 0x65: {l: {0x3B: {c: [8817]}, 0x71: {l: {0x3B: {c: [8817]}, 0x71: {l: {0x3B: {c: [8807, 824]}}}, 0x73: {l: {0x6C: {l: {0x61: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [10878, 824]}}}}}}}}}}}}}, 0x73: {l: {0x3B: {c: [10878, 824]}}}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [8821]}}}}}}}, 0x74: {l: {0x3B: {c: [8815]}, 0x72: {l: {0x3B: {c: [8815]}}}}}}}, 0x47: {l: {0x67: {l: {0x3B: {c: [8921, 824]}}}, 0x74: {l: {0x3B: {c: [8811, 8402]}, 0x76: {l: {0x3B: {c: [8811, 824]}}}}}}}, 0x68: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8622]}}}}}}}, 0x41: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8654]}}}}}}}, 0x70: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10994]}}}}}}}}}, 0x69: {l: {0x3B: {c: [8715]}, 0x73: {l: {0x3B: {c: [8956]}, 0x64: {l: {0x3B: {c: [8954]}}}}}, 0x76: {l: {0x3B: {c: [8715]}}}}}, 0x6A: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1114]}}}}}}}, 0x6C: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8602]}}}}}}}, 0x41: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8653]}}}}}}}, 0x64: {l: {0x72: {l: {0x3B: {c: [8229]}}}}}, 0x45: {l: {0x3B: {c: [8806, 824]}}}, 0x65: {l: {0x3B: {c: [8816]}, 0x66: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8602]}}}}}}}}}}}, 0x72: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8622]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x71: {l: {0x3B: {c: [8816]}, 0x71: {l: {0x3B: {c: [8806, 824]}}}, 0x73: {l: {0x6C: {l: {0x61: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [10877, 824]}}}}}}}}}}}}}, 0x73: {l: {0x3B: {c: [10877, 824]}, 0x73: {l: {0x3B: {c: [8814]}}}}}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [8820]}}}}}}}, 0x74: {l: {0x3B: {c: [8814]}, 0x72: {l: {0x69: {l: {0x3B: {c: [8938]}, 0x65: {l: {0x3B: {c: [8940]}}}}}}}}}}}, 0x4C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8653]}}}}}}}}}}}, 0x72: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8654]}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x6C: {l: {0x3B: {c: [8920, 824]}}}, 0x74: {l: {0x3B: {c: [8810, 8402]}, 0x76: {l: {0x3B: {c: [8810, 824]}}}}}}}, 0x6D: {l: {0x69: {l: {0x64: {l: {0x3B: {c: [8740]}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120159]}}}}}, 0x74: {l: {0x3B: {c: [172]}, 0x69: {l: {0x6E: {l: {0x3B: {c: [8713]}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [8949, 824]}}}}}}}, 0x45: {l: {0x3B: {c: [8953, 824]}}}, 0x76: {l: {0x61: {l: {0x3B: {c: [8713]}}}, 0x62: {l: {0x3B: {c: [8951]}}}, 0x63: {l: {0x3B: {c: [8950]}}}}}}}}}, 0x6E: {l: {0x69: {l: {0x3B: {c: [8716]}, 0x76: {l: {0x61: {l: {0x3B: {c: [8716]}}}, 0x62: {l: {0x3B: {c: [8958]}}}, 0x63: {l: {0x3B: {c: [8957]}}}}}}}}}}, c: [172]}}}, 0x70: {l: {0x61: {l: {0x72: {l: {0x61: {l: {0x6C: {l: {0x6C: {l: {0x65: {l: {0x6C: {l: {0x3B: {c: [8742]}}}}}}}}}}}, 0x3B: {c: [8742]}, 0x73: {l: {0x6C: {l: {0x3B: {c: [11005, 8421]}}}}}, 0x74: {l: {0x3B: {c: [8706, 824]}}}}}}}, 0x6F: {l: {0x6C: {l: {0x69: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [10772]}}}}}}}}}}}, 0x72: {l: {0x3B: {c: [8832]}, 0x63: {l: {0x75: {l: {0x65: {l: {0x3B: {c: [8928]}}}}}}}, 0x65: {l: {0x63: {l: {0x3B: {c: [8832]}, 0x65: {l: {0x71: {l: {0x3B: {c: [10927, 824]}}}}}}}, 0x3B: {c: [10927, 824]}}}}}}}, 0x72: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [10547, 824]}}}, 0x3B: {c: [8603]}, 0x77: {l: {0x3B: {c: [8605, 824]}}}}}}}}}, 0x41: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8655]}}}}}}}, 0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8603]}}}}}}}}}}}}}}}}}}}, 0x74: {l: {0x72: {l: {0x69: {l: {0x3B: {c: [8939]}, 0x65: {l: {0x3B: {c: [8941]}}}}}}}}}}}, 0x52: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8655]}}}}}}}}}}}}}}}}}}}}}, 0x73: {l: {0x63: {l: {0x3B: {c: [8833]}, 0x63: {l: {0x75: {l: {0x65: {l: {0x3B: {c: [8929]}}}}}}}, 0x65: {l: {0x3B: {c: [10928, 824]}}}, 0x72: {l: {0x3B: {c: [120003]}}}}}, 0x68: {l: {0x6F: {l: {0x72: {l: {0x74: {l: {0x6D: {l: {0x69: {l: {0x64: {l: {0x3B: {c: [8740]}}}}}}}, 0x70: {l: {0x61: {l: {0x72: {l: {0x61: {l: {0x6C: {l: {0x6C: {l: {0x65: {l: {0x6C: {l: {0x3B: {c: [8742]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x69: {l: {0x6D: {l: {0x3B: {c: [8769]}, 0x65: {l: {0x3B: {c: [8772]}, 0x71: {l: {0x3B: {c: [8772]}}}}}}}}}, 0x6D: {l: {0x69: {l: {0x64: {l: {0x3B: {c: [8740]}}}}}}}, 0x70: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [8742]}}}}}}}, 0x71: {l: {0x73: {l: {0x75: {l: {0x62: {l: {0x65: {l: {0x3B: {c: [8930]}}}}}, 0x70: {l: {0x65: {l: {0x3B: {c: [8931]}}}}}}}}}}}, 0x75: {l: {0x62: {l: {0x3B: {c: [8836]}, 0x45: {l: {0x3B: {c: [10949, 824]}}}, 0x65: {l: {0x3B: {c: [8840]}}}, 0x73: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [8834, 8402]}, 0x65: {l: {0x71: {l: {0x3B: {c: [8840]}, 0x71: {l: {0x3B: {c: [10949, 824]}}}}}}}}}}}}}}}, 0x63: {l: {0x63: {l: {0x3B: {c: [8833]}, 0x65: {l: {0x71: {l: {0x3B: {c: [10928, 824]}}}}}}}}}, 0x70: {l: {0x3B: {c: [8837]}, 0x45: {l: {0x3B: {c: [10950, 824]}}}, 0x65: {l: {0x3B: {c: [8841]}}}, 0x73: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [8835, 8402]}, 0x65: {l: {0x71: {l: {0x3B: {c: [8841]}, 0x71: {l: {0x3B: {c: [10950, 824]}}}}}}}}}}}}}}}}}}}, 0x74: {l: {0x67: {l: {0x6C: {l: {0x3B: {c: [8825]}}}}}, 0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [241]}}, c: [241]}}}}}}}, 0x6C: {l: {0x67: {l: {0x3B: {c: [8824]}}}}}, 0x72: {l: {0x69: {l: {0x61: {l: {0x6E: {l: {0x67: {l: {0x6C: {l: {0x65: {l: {0x6C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x3B: {c: [8938]}, 0x65: {l: {0x71: {l: {0x3B: {c: [8940]}}}}}}}}}}}}}, 0x72: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x3B: {c: [8939]}, 0x65: {l: {0x71: {l: {0x3B: {c: [8941]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x75: {l: {0x3B: {c: [957]}, 0x6D: {l: {0x3B: {c: [35]}, 0x65: {l: {0x72: {l: {0x6F: {l: {0x3B: {c: [8470]}}}}}}}, 0x73: {l: {0x70: {l: {0x3B: {c: [8199]}}}}}}}}}, 0x76: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [8781, 8402]}}}}}, 0x64: {l: {0x61: {l: {0x73: {l: {0x68: {l: {0x3B: {c: [8876]}}}}}}}}}, 0x44: {l: {0x61: {l: {0x73: {l: {0x68: {l: {0x3B: {c: [8877]}}}}}}}}}, 0x67: {l: {0x65: {l: {0x3B: {c: [8805, 8402]}}}, 0x74: {l: {0x3B: {c: [62, 8402]}}}}}, 0x48: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [10500]}}}}}}}}}, 0x69: {l: {0x6E: {l: {0x66: {l: {0x69: {l: {0x6E: {l: {0x3B: {c: [10718]}}}}}}}}}}}, 0x6C: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [10498]}}}}}}}, 0x65: {l: {0x3B: {c: [8804, 8402]}}}, 0x74: {l: {0x3B: {c: [60, 8402]}, 0x72: {l: {0x69: {l: {0x65: {l: {0x3B: {c: [8884, 8402]}}}}}}}}}}}, 0x72: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [10499]}}}}}}}, 0x74: {l: {0x72: {l: {0x69: {l: {0x65: {l: {0x3B: {c: [8885, 8402]}}}}}}}}}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [8764, 8402]}}}}}}}}}, 0x56: {l: {0x64: {l: {0x61: {l: {0x73: {l: {0x68: {l: {0x3B: {c: [8878]}}}}}}}}}, 0x44: {l: {0x61: {l: {0x73: {l: {0x68: {l: {0x3B: {c: [8879]}}}}}}}}}}}, 0x77: {l: {0x61: {l: {0x72: {l: {0x68: {l: {0x6B: {l: {0x3B: {c: [10531]}}}}}, 0x72: {l: {0x3B: {c: [8598]}, 0x6F: {l: {0x77: {l: {0x3B: {c: [8598]}}}}}}}}}}}, 0x41: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8662]}}}}}}}, 0x6E: {l: {0x65: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10535]}}}}}}}}}}}}},
    0x4E: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [323]}}}}}}}}}}}, 0x63: {l: {0x61: {l: {0x72: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [327]}}}}}}}}}, 0x65: {l: {0x64: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [325]}}}}}}}}}, 0x79: {l: {0x3B: {c: [1053]}}}}}, 0x65: {l: {0x67: {l: {0x61: {l: {0x74: {l: {0x69: {l: {0x76: {l: {0x65: {l: {0x4D: {l: {0x65: {l: {0x64: {l: {0x69: {l: {0x75: {l: {0x6D: {l: {0x53: {l: {0x70: {l: {0x61: {l: {0x63: {l: {0x65: {l: {0x3B: {c: [8203]}}}}}}}}}}}}}}}}}}}}}}}, 0x54: {l: {0x68: {l: {0x69: {l: {0x63: {l: {0x6B: {l: {0x53: {l: {0x70: {l: {0x61: {l: {0x63: {l: {0x65: {l: {0x3B: {c: [8203]}}}}}}}}}}}}}}}, 0x6E: {l: {0x53: {l: {0x70: {l: {0x61: {l: {0x63: {l: {0x65: {l: {0x3B: {c: [8203]}}}}}}}}}}}}}}}}}}}, 0x56: {l: {0x65: {l: {0x72: {l: {0x79: {l: {0x54: {l: {0x68: {l: {0x69: {l: {0x6E: {l: {0x53: {l: {0x70: {l: {0x61: {l: {0x63: {l: {0x65: {l: {0x3B: {c: [8203]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x73: {l: {0x74: {l: {0x65: {l: {0x64: {l: {0x47: {l: {0x72: {l: {0x65: {l: {0x61: {l: {0x74: {l: {0x65: {l: {0x72: {l: {0x47: {l: {0x72: {l: {0x65: {l: {0x61: {l: {0x74: {l: {0x65: {l: {0x72: {l: {0x3B: {c: [8811]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x4C: {l: {0x65: {l: {0x73: {l: {0x73: {l: {0x4C: {l: {0x65: {l: {0x73: {l: {0x73: {l: {0x3B: {c: [8810]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x77: {l: {0x4C: {l: {0x69: {l: {0x6E: {l: {0x65: {l: {0x3B: {c: [10]}}}}}}}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120081]}}}}}, 0x4A: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1034]}}}}}}}, 0x6F: {l: {0x42: {l: {0x72: {l: {0x65: {l: {0x61: {l: {0x6B: {l: {0x3B: {c: [8288]}}}}}}}}}}}, 0x6E: {l: {0x42: {l: {0x72: {l: {0x65: {l: {0x61: {l: {0x6B: {l: {0x69: {l: {0x6E: {l: {0x67: {l: {0x53: {l: {0x70: {l: {0x61: {l: {0x63: {l: {0x65: {l: {0x3B: {c: [160]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x70: {l: {0x66: {l: {0x3B: {c: [8469]}}}}}, 0x74: {l: {0x3B: {c: [10988]}, 0x43: {l: {0x6F: {l: {0x6E: {l: {0x67: {l: {0x72: {l: {0x75: {l: {0x65: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [8802]}}}}}}}}}}}}}}}}}, 0x75: {l: {0x70: {l: {0x43: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [8813]}}}}}}}}}}}}}, 0x44: {l: {0x6F: {l: {0x75: {l: {0x62: {l: {0x6C: {l: {0x65: {l: {0x56: {l: {0x65: {l: {0x72: {l: {0x74: {l: {0x69: {l: {0x63: {l: {0x61: {l: {0x6C: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [8742]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x45: {l: {0x6C: {l: {0x65: {l: {0x6D: {l: {0x65: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [8713]}}}}}}}}}}}}}, 0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8800]}, 0x54: {l: {0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [8770, 824]}}}}}}}}}}}}}}}}}}}, 0x78: {l: {0x69: {l: {0x73: {l: {0x74: {l: {0x73: {l: {0x3B: {c: [8708]}}}}}}}}}}}}}, 0x47: {l: {0x72: {l: {0x65: {l: {0x61: {l: {0x74: {l: {0x65: {l: {0x72: {l: {0x3B: {c: [8815]}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8817]}}}}}}}}}}}, 0x46: {l: {0x75: {l: {0x6C: {l: {0x6C: {l: {0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8807, 824]}}}}}}}}}}}}}}}}}}}, 0x47: {l: {0x72: {l: {0x65: {l: {0x61: {l: {0x74: {l: {0x65: {l: {0x72: {l: {0x3B: {c: [8811, 824]}}}}}}}}}}}}}}}, 0x4C: {l: {0x65: {l: {0x73: {l: {0x73: {l: {0x3B: {c: [8825]}}}}}}}}}, 0x53: {l: {0x6C: {l: {0x61: {l: {0x6E: {l: {0x74: {l: {0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [10878, 824]}}}}}}}}}}}}}}}}}}}}}, 0x54: {l: {0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [8821]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x48: {l: {0x75: {l: {0x6D: {l: {0x70: {l: {0x44: {l: {0x6F: {l: {0x77: {l: {0x6E: {l: {0x48: {l: {0x75: {l: {0x6D: {l: {0x70: {l: {0x3B: {c: [8782, 824]}}}}}}}}}}}}}}}}}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8783, 824]}}}}}}}}}}}}}}}}}}}, 0x4C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x54: {l: {0x72: {l: {0x69: {l: {0x61: {l: {0x6E: {l: {0x67: {l: {0x6C: {l: {0x65: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10703, 824]}}}}}}}, 0x3B: {c: [8938]}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8940]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x73: {l: {0x73: {l: {0x3B: {c: [8814]}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8816]}}}}}}}}}}}, 0x47: {l: {0x72: {l: {0x65: {l: {0x61: {l: {0x74: {l: {0x65: {l: {0x72: {l: {0x3B: {c: [8824]}}}}}}}}}}}}}}}, 0x4C: {l: {0x65: {l: {0x73: {l: {0x73: {l: {0x3B: {c: [8810, 824]}}}}}}}}}, 0x53: {l: {0x6C: {l: {0x61: {l: {0x6E: {l: {0x74: {l: {0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [10877, 824]}}}}}}}}}}}}}}}}}}}}}, 0x54: {l: {0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [8820]}}}}}}}}}}}}}}}}}}}, 0x4E: {l: {0x65: {l: {0x73: {l: {0x74: {l: {0x65: {l: {0x64: {l: {0x47: {l: {0x72: {l: {0x65: {l: {0x61: {l: {0x74: {l: {0x65: {l: {0x72: {l: {0x47: {l: {0x72: {l: {0x65: {l: {0x61: {l: {0x74: {l: {0x65: {l: {0x72: {l: {0x3B: {c: [10914, 824]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x4C: {l: {0x65: {l: {0x73: {l: {0x73: {l: {0x4C: {l: {0x65: {l: {0x73: {l: {0x73: {l: {0x3B: {c: [10913, 824]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x50: {l: {0x72: {l: {0x65: {l: {0x63: {l: {0x65: {l: {0x64: {l: {0x65: {l: {0x73: {l: {0x3B: {c: [8832]}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [10927, 824]}}}}}}}}}}}, 0x53: {l: {0x6C: {l: {0x61: {l: {0x6E: {l: {0x74: {l: {0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8928]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x52: {l: {0x65: {l: {0x76: {l: {0x65: {l: {0x72: {l: {0x73: {l: {0x65: {l: {0x45: {l: {0x6C: {l: {0x65: {l: {0x6D: {l: {0x65: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [8716]}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x54: {l: {0x72: {l: {0x69: {l: {0x61: {l: {0x6E: {l: {0x67: {l: {0x6C: {l: {0x65: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10704, 824]}}}}}}}, 0x3B: {c: [8939]}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8941]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x53: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x72: {l: {0x65: {l: {0x53: {l: {0x75: {l: {0x62: {l: {0x73: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [8847, 824]}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8930]}}}}}}}}}}}}}}}}}}}, 0x70: {l: {0x65: {l: {0x72: {l: {0x73: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [8848, 824]}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8931]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x75: {l: {0x62: {l: {0x73: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [8834, 8402]}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8840]}}}}}}}}}}}}}}}}}}}, 0x63: {l: {0x63: {l: {0x65: {l: {0x65: {l: {0x64: {l: {0x73: {l: {0x3B: {c: [8833]}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [10928, 824]}}}}}}}}}}}, 0x53: {l: {0x6C: {l: {0x61: {l: {0x6E: {l: {0x74: {l: {0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8929]}}}}}}}}}}}}}}}}}}}}}, 0x54: {l: {0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [8831, 824]}}}}}}}}}}}}}}}}}}}}}}}, 0x70: {l: {0x65: {l: {0x72: {l: {0x73: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [8835, 8402]}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8841]}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x54: {l: {0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [8769]}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8772]}}}}}}}}}}}, 0x46: {l: {0x75: {l: {0x6C: {l: {0x6C: {l: {0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8775]}}}}}}}}}}}}}}}}}}}, 0x54: {l: {0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [8777]}}}}}}}}}}}}}}}}}}}}}, 0x56: {l: {0x65: {l: {0x72: {l: {0x74: {l: {0x69: {l: {0x63: {l: {0x61: {l: {0x6C: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [8740]}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119977]}}}}}}}, 0x74: {l: {0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [209]}}, c: [209]}}}}}}}}}, 0x75: {l: {0x3B: {c: [925]}}}}},
    0x4F: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [211]}}, c: [211]}}}}}}}}}, 0x63: {l: {0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [212]}}, c: [212]}}}}}, 0x79: {l: {0x3B: {c: [1054]}}}}}, 0x64: {l: {0x62: {l: {0x6C: {l: {0x61: {l: {0x63: {l: {0x3B: {c: [336]}}}}}}}}}}}, 0x45: {l: {0x6C: {l: {0x69: {l: {0x67: {l: {0x3B: {c: [338]}}}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120082]}}}}}, 0x67: {l: {0x72: {l: {0x61: {l: {0x76: {l: {0x65: {l: {0x3B: {c: [210]}}, c: [210]}}}}}}}}}, 0x6D: {l: {0x61: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [332]}}}}}}}, 0x65: {l: {0x67: {l: {0x61: {l: {0x3B: {c: [937]}}}}}}}, 0x69: {l: {0x63: {l: {0x72: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [927]}}}}}}}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120134]}}}}}}}, 0x70: {l: {0x65: {l: {0x6E: {l: {0x43: {l: {0x75: {l: {0x72: {l: {0x6C: {l: {0x79: {l: {0x44: {l: {0x6F: {l: {0x75: {l: {0x62: {l: {0x6C: {l: {0x65: {l: {0x51: {l: {0x75: {l: {0x6F: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [8220]}}}}}}}}}}}}}}}}}}}}}}}, 0x51: {l: {0x75: {l: {0x6F: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [8216]}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x72: {l: {0x3B: {c: [10836]}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119978]}}}}}, 0x6C: {l: {0x61: {l: {0x73: {l: {0x68: {l: {0x3B: {c: [216]}}, c: [216]}}}}}}}}}, 0x74: {l: {0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [213]}}, c: [213]}}}}}, 0x6D: {l: {0x65: {l: {0x73: {l: {0x3B: {c: [10807]}}}}}}}}}}}, 0x75: {l: {0x6D: {l: {0x6C: {l: {0x3B: {c: [214]}}, c: [214]}}}}}, 0x76: {l: {0x65: {l: {0x72: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [8254]}}}}}, 0x72: {l: {0x61: {l: {0x63: {l: {0x65: {l: {0x3B: {c: [9182]}}}, 0x6B: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [9140]}}}}}}}}}}}}}}}, 0x50: {l: {0x61: {l: {0x72: {l: {0x65: {l: {0x6E: {l: {0x74: {l: {0x68: {l: {0x65: {l: {0x73: {l: {0x69: {l: {0x73: {l: {0x3B: {c: [9180]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
    0x6F: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [243]}}, c: [243]}}}}}}}, 0x73: {l: {0x74: {l: {0x3B: {c: [8859]}}}}}}}, 0x63: {l: {0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [244]}}, c: [244]}, 0x3B: {c: [8858]}}}}}, 0x79: {l: {0x3B: {c: [1086]}}}}}, 0x64: {l: {0x61: {l: {0x73: {l: {0x68: {l: {0x3B: {c: [8861]}}}}}}}, 0x62: {l: {0x6C: {l: {0x61: {l: {0x63: {l: {0x3B: {c: [337]}}}}}}}}}, 0x69: {l: {0x76: {l: {0x3B: {c: [10808]}}}}}, 0x6F: {l: {0x74: {l: {0x3B: {c: [8857]}}}}}, 0x73: {l: {0x6F: {l: {0x6C: {l: {0x64: {l: {0x3B: {c: [10684]}}}}}}}}}}}, 0x65: {l: {0x6C: {l: {0x69: {l: {0x67: {l: {0x3B: {c: [339]}}}}}}}}}, 0x66: {l: {0x63: {l: {0x69: {l: {0x72: {l: {0x3B: {c: [10687]}}}}}}}, 0x72: {l: {0x3B: {c: [120108]}}}}}, 0x67: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [731]}}}}}, 0x72: {l: {0x61: {l: {0x76: {l: {0x65: {l: {0x3B: {c: [242]}}, c: [242]}}}}}}}, 0x74: {l: {0x3B: {c: [10689]}}}}}, 0x68: {l: {0x62: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10677]}}}}}}}, 0x6D: {l: {0x3B: {c: [937]}}}}}, 0x69: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [8750]}}}}}}}, 0x6C: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8634]}}}}}}}, 0x63: {l: {0x69: {l: {0x72: {l: {0x3B: {c: [10686]}}}}}, 0x72: {l: {0x6F: {l: {0x73: {l: {0x73: {l: {0x3B: {c: [10683]}}}}}}}}}}}, 0x69: {l: {0x6E: {l: {0x65: {l: {0x3B: {c: [8254]}}}}}}}, 0x74: {l: {0x3B: {c: [10688]}}}}}, 0x6D: {l: {0x61: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [333]}}}}}}}, 0x65: {l: {0x67: {l: {0x61: {l: {0x3B: {c: [969]}}}}}}}, 0x69: {l: {0x63: {l: {0x72: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [959]}}}}}}}}}, 0x64: {l: {0x3B: {c: [10678]}}}, 0x6E: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [8854]}}}}}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120160]}}}}}}}, 0x70: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10679]}}}}}, 0x65: {l: {0x72: {l: {0x70: {l: {0x3B: {c: [10681]}}}}}}}, 0x6C: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [8853]}}}}}}}}}, 0x72: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8635]}}}}}}}, 0x3B: {c: [8744]}, 0x64: {l: {0x3B: {c: [10845]}, 0x65: {l: {0x72: {l: {0x3B: {c: [8500]}, 0x6F: {l: {0x66: {l: {0x3B: {c: [8500]}}}}}}}}}, 0x66: {l: {0x3B: {c: [170]}}, c: [170]}, 0x6D: {l: {0x3B: {c: [186]}}, c: [186]}}}, 0x69: {l: {0x67: {l: {0x6F: {l: {0x66: {l: {0x3B: {c: [8886]}}}}}}}}}, 0x6F: {l: {0x72: {l: {0x3B: {c: [10838]}}}}}, 0x73: {l: {0x6C: {l: {0x6F: {l: {0x70: {l: {0x65: {l: {0x3B: {c: [10839]}}}}}}}}}}}, 0x76: {l: {0x3B: {c: [10843]}}}}}, 0x53: {l: {0x3B: {c: [9416]}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [8500]}}}}}, 0x6C: {l: {0x61: {l: {0x73: {l: {0x68: {l: {0x3B: {c: [248]}}, c: [248]}}}}}}}, 0x6F: {l: {0x6C: {l: {0x3B: {c: [8856]}}}}}}}, 0x74: {l: {0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [245]}}, c: [245]}}}}}, 0x6D: {l: {0x65: {l: {0x73: {l: {0x61: {l: {0x73: {l: {0x3B: {c: [10806]}}}}}, 0x3B: {c: [8855]}}}}}}}}}}}, 0x75: {l: {0x6D: {l: {0x6C: {l: {0x3B: {c: [246]}}, c: [246]}}}}}, 0x76: {l: {0x62: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [9021]}}}}}}}}}}},
    0x70: {l: {0x61: {l: {0x72: {l: {0x61: {l: {0x3B: {c: [182]}, 0x6C: {l: {0x6C: {l: {0x65: {l: {0x6C: {l: {0x3B: {c: [8741]}}}}}}}}}}, c: [182]}, 0x3B: {c: [8741]}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [10995]}}}}}, 0x6C: {l: {0x3B: {c: [11005]}}}}}, 0x74: {l: {0x3B: {c: [8706]}}}}}}}, 0x63: {l: {0x79: {l: {0x3B: {c: [1087]}}}}}, 0x65: {l: {0x72: {l: {0x63: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [37]}}}}}}}, 0x69: {l: {0x6F: {l: {0x64: {l: {0x3B: {c: [46]}}}}}}}, 0x6D: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [8240]}}}}}}}, 0x70: {l: {0x3B: {c: [8869]}}}, 0x74: {l: {0x65: {l: {0x6E: {l: {0x6B: {l: {0x3B: {c: [8241]}}}}}}}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120109]}}}}}, 0x68: {l: {0x69: {l: {0x3B: {c: [966]}, 0x76: {l: {0x3B: {c: [981]}}}}}, 0x6D: {l: {0x6D: {l: {0x61: {l: {0x74: {l: {0x3B: {c: [8499]}}}}}}}}}, 0x6F: {l: {0x6E: {l: {0x65: {l: {0x3B: {c: [9742]}}}}}}}}}, 0x69: {l: {0x3B: {c: [960]}, 0x74: {l: {0x63: {l: {0x68: {l: {0x66: {l: {0x6F: {l: {0x72: {l: {0x6B: {l: {0x3B: {c: [8916]}}}}}}}}}}}}}}}, 0x76: {l: {0x3B: {c: [982]}}}}}, 0x6C: {l: {0x61: {l: {0x6E: {l: {0x63: {l: {0x6B: {l: {0x3B: {c: [8463]}, 0x68: {l: {0x3B: {c: [8462]}}}}}}}, 0x6B: {l: {0x76: {l: {0x3B: {c: [8463]}}}}}}}}}, 0x75: {l: {0x73: {l: {0x61: {l: {0x63: {l: {0x69: {l: {0x72: {l: {0x3B: {c: [10787]}}}}}}}}}, 0x62: {l: {0x3B: {c: [8862]}}}, 0x63: {l: {0x69: {l: {0x72: {l: {0x3B: {c: [10786]}}}}}}}, 0x3B: {c: [43]}, 0x64: {l: {0x6F: {l: {0x3B: {c: [8724]}}}, 0x75: {l: {0x3B: {c: [10789]}}}}}, 0x65: {l: {0x3B: {c: [10866]}}}, 0x6D: {l: {0x6E: {l: {0x3B: {c: [177]}}, c: [177]}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [10790]}}}}}}}, 0x74: {l: {0x77: {l: {0x6F: {l: {0x3B: {c: [10791]}}}}}}}}}}}}}, 0x6D: {l: {0x3B: {c: [177]}}}, 0x6F: {l: {0x69: {l: {0x6E: {l: {0x74: {l: {0x69: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [10773]}}}}}}}}}}}}}, 0x70: {l: {0x66: {l: {0x3B: {c: [120161]}}}}}, 0x75: {l: {0x6E: {l: {0x64: {l: {0x3B: {c: [163]}}, c: [163]}}}}}}}, 0x72: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [10935]}}}}}, 0x3B: {c: [8826]}, 0x63: {l: {0x75: {l: {0x65: {l: {0x3B: {c: [8828]}}}}}}}, 0x65: {l: {0x63: {l: {0x61: {l: {0x70: {l: {0x70: {l: {0x72: {l: {0x6F: {l: {0x78: {l: {0x3B: {c: [10935]}}}}}}}}}}}}}, 0x3B: {c: [8826]}, 0x63: {l: {0x75: {l: {0x72: {l: {0x6C: {l: {0x79: {l: {0x65: {l: {0x71: {l: {0x3B: {c: [8828]}}}}}}}}}}}}}}}, 0x65: {l: {0x71: {l: {0x3B: {c: [10927]}}}}}, 0x6E: {l: {0x61: {l: {0x70: {l: {0x70: {l: {0x72: {l: {0x6F: {l: {0x78: {l: {0x3B: {c: [10937]}}}}}}}}}}}}}, 0x65: {l: {0x71: {l: {0x71: {l: {0x3B: {c: [10933]}}}}}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [8936]}}}}}}}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [8830]}}}}}}}}}, 0x3B: {c: [10927]}}}, 0x45: {l: {0x3B: {c: [10931]}}}, 0x69: {l: {0x6D: {l: {0x65: {l: {0x3B: {c: [8242]}, 0x73: {l: {0x3B: {c: [8473]}}}}}}}}}, 0x6E: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [10937]}}}}}, 0x45: {l: {0x3B: {c: [10933]}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [8936]}}}}}}}}}, 0x6F: {l: {0x64: {l: {0x3B: {c: [8719]}}}, 0x66: {l: {0x61: {l: {0x6C: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [9006]}}}}}}}}}, 0x6C: {l: {0x69: {l: {0x6E: {l: {0x65: {l: {0x3B: {c: [8978]}}}}}}}}}, 0x73: {l: {0x75: {l: {0x72: {l: {0x66: {l: {0x3B: {c: [8979]}}}}}}}}}}}, 0x70: {l: {0x3B: {c: [8733]}, 0x74: {l: {0x6F: {l: {0x3B: {c: [8733]}}}}}}}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [8830]}}}}}}}, 0x75: {l: {0x72: {l: {0x65: {l: {0x6C: {l: {0x3B: {c: [8880]}}}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [120005]}}}}}, 0x69: {l: {0x3B: {c: [968]}}}}}, 0x75: {l: {0x6E: {l: {0x63: {l: {0x73: {l: {0x70: {l: {0x3B: {c: [8200]}}}}}}}}}}}}},
    0x50: {l: {0x61: {l: {0x72: {l: {0x74: {l: {0x69: {l: {0x61: {l: {0x6C: {l: {0x44: {l: {0x3B: {c: [8706]}}}}}}}}}}}}}}}, 0x63: {l: {0x79: {l: {0x3B: {c: [1055]}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120083]}}}}}, 0x68: {l: {0x69: {l: {0x3B: {c: [934]}}}}}, 0x69: {l: {0x3B: {c: [928]}}}, 0x6C: {l: {0x75: {l: {0x73: {l: {0x4D: {l: {0x69: {l: {0x6E: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [177]}}}}}}}}}}}}}}}}}, 0x6F: {l: {0x69: {l: {0x6E: {l: {0x63: {l: {0x61: {l: {0x72: {l: {0x65: {l: {0x70: {l: {0x6C: {l: {0x61: {l: {0x6E: {l: {0x65: {l: {0x3B: {c: [8460]}}}}}}}}}}}}}}}}}}}}}}}, 0x70: {l: {0x66: {l: {0x3B: {c: [8473]}}}}}}}, 0x72: {l: {0x3B: {c: [10939]}, 0x65: {l: {0x63: {l: {0x65: {l: {0x64: {l: {0x65: {l: {0x73: {l: {0x3B: {c: [8826]}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [10927]}}}}}}}}}}}, 0x53: {l: {0x6C: {l: {0x61: {l: {0x6E: {l: {0x74: {l: {0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8828]}}}}}}}}}}}}}}}}}}}}}, 0x54: {l: {0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [8830]}}}}}}}}}}}}}}}}}}}}}}}, 0x69: {l: {0x6D: {l: {0x65: {l: {0x3B: {c: [8243]}}}}}}}, 0x6F: {l: {0x64: {l: {0x75: {l: {0x63: {l: {0x74: {l: {0x3B: {c: [8719]}}}}}}}}}, 0x70: {l: {0x6F: {l: {0x72: {l: {0x74: {l: {0x69: {l: {0x6F: {l: {0x6E: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8733]}}}}}, 0x3B: {c: [8759]}}}}}}}}}}}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119979]}}}}}, 0x69: {l: {0x3B: {c: [936]}}}}}}},
    0x51: {l: {0x66: {l: {0x72: {l: {0x3B: {c: [120084]}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [8474]}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119980]}}}}}}}, 0x55: {l: {0x4F: {l: {0x54: {l: {0x3B: {c: [34]}}, c: [34]}}}}}}},
    0x71: {l: {0x66: {l: {0x72: {l: {0x3B: {c: [120110]}}}}}, 0x69: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [10764]}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120162]}}}}}}}, 0x70: {l: {0x72: {l: {0x69: {l: {0x6D: {l: {0x65: {l: {0x3B: {c: [8279]}}}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [120006]}}}}}}}, 0x75: {l: {0x61: {l: {0x74: {l: {0x65: {l: {0x72: {l: {0x6E: {l: {0x69: {l: {0x6F: {l: {0x6E: {l: {0x73: {l: {0x3B: {c: [8461]}}}}}}}}}}}}}}}, 0x69: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [10774]}}}}}}}}}}}, 0x65: {l: {0x73: {l: {0x74: {l: {0x3B: {c: [63]}, 0x65: {l: {0x71: {l: {0x3B: {c: [8799]}}}}}}}}}}}, 0x6F: {l: {0x74: {l: {0x3B: {c: [34]}}, c: [34]}}}}}}},
    0x72: {l: {0x41: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8667]}}}}}}}, 0x72: {l: {0x72: {l: {0x3B: {c: [8658]}}}}}, 0x74: {l: {0x61: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [10524]}}}}}}}}}}}, 0x61: {l: {0x63: {l: {0x65: {l: {0x3B: {c: [8765, 817]}}}, 0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [341]}}}}}}}}}, 0x64: {l: {0x69: {l: {0x63: {l: {0x3B: {c: [8730]}}}}}}}, 0x65: {l: {0x6D: {l: {0x70: {l: {0x74: {l: {0x79: {l: {0x76: {l: {0x3B: {c: [10675]}}}}}}}}}}}}}, 0x6E: {l: {0x67: {l: {0x3B: {c: [10217]}, 0x64: {l: {0x3B: {c: [10642]}}}, 0x65: {l: {0x3B: {c: [10661]}}}, 0x6C: {l: {0x65: {l: {0x3B: {c: [10217]}}}}}}}}}, 0x71: {l: {0x75: {l: {0x6F: {l: {0x3B: {c: [187]}}, c: [187]}}}}}, 0x72: {l: {0x72: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [10613]}}}}}, 0x62: {l: {0x3B: {c: [8677]}, 0x66: {l: {0x73: {l: {0x3B: {c: [10528]}}}}}}}, 0x63: {l: {0x3B: {c: [10547]}}}, 0x3B: {c: [8594]}, 0x66: {l: {0x73: {l: {0x3B: {c: [10526]}}}}}, 0x68: {l: {0x6B: {l: {0x3B: {c: [8618]}}}}}, 0x6C: {l: {0x70: {l: {0x3B: {c: [8620]}}}}}, 0x70: {l: {0x6C: {l: {0x3B: {c: [10565]}}}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [10612]}}}}}}}, 0x74: {l: {0x6C: {l: {0x3B: {c: [8611]}}}}}, 0x77: {l: {0x3B: {c: [8605]}}}}}}}, 0x74: {l: {0x61: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [10522]}}}}}}}, 0x69: {l: {0x6F: {l: {0x3B: {c: [8758]}, 0x6E: {l: {0x61: {l: {0x6C: {l: {0x73: {l: {0x3B: {c: [8474]}}}}}}}}}}}}}}}}}, 0x62: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [10509]}}}}}}}, 0x62: {l: {0x72: {l: {0x6B: {l: {0x3B: {c: [10099]}}}}}}}, 0x72: {l: {0x61: {l: {0x63: {l: {0x65: {l: {0x3B: {c: [125]}}}, 0x6B: {l: {0x3B: {c: [93]}}}}}}}, 0x6B: {l: {0x65: {l: {0x3B: {c: [10636]}}}, 0x73: {l: {0x6C: {l: {0x64: {l: {0x3B: {c: [10638]}}}, 0x75: {l: {0x3B: {c: [10640]}}}}}}}}}}}}}, 0x42: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [10511]}}}}}}}}}, 0x63: {l: {0x61: {l: {0x72: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [345]}}}}}}}}}, 0x65: {l: {0x64: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [343]}}}}}}}, 0x69: {l: {0x6C: {l: {0x3B: {c: [8969]}}}}}}}, 0x75: {l: {0x62: {l: {0x3B: {c: [125]}}}}}, 0x79: {l: {0x3B: {c: [1088]}}}}}, 0x64: {l: {0x63: {l: {0x61: {l: {0x3B: {c: [10551]}}}}}, 0x6C: {l: {0x64: {l: {0x68: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10601]}}}}}}}}}}}, 0x71: {l: {0x75: {l: {0x6F: {l: {0x3B: {c: [8221]}, 0x72: {l: {0x3B: {c: [8221]}}}}}}}}}, 0x73: {l: {0x68: {l: {0x3B: {c: [8627]}}}}}}}, 0x65: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8476]}, 0x69: {l: {0x6E: {l: {0x65: {l: {0x3B: {c: [8475]}}}}}}}, 0x70: {l: {0x61: {l: {0x72: {l: {0x74: {l: {0x3B: {c: [8476]}}}}}}}}}, 0x73: {l: {0x3B: {c: [8477]}}}}}}}, 0x63: {l: {0x74: {l: {0x3B: {c: [9645]}}}}}, 0x67: {l: {0x3B: {c: [174]}}, c: [174]}}}, 0x66: {l: {0x69: {l: {0x73: {l: {0x68: {l: {0x74: {l: {0x3B: {c: [10621]}}}}}}}}}, 0x6C: {l: {0x6F: {l: {0x6F: {l: {0x72: {l: {0x3B: {c: [8971]}}}}}}}}}, 0x72: {l: {0x3B: {c: [120111]}}}}}, 0x48: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10596]}}}}}}}, 0x68: {l: {0x61: {l: {0x72: {l: {0x64: {l: {0x3B: {c: [8641]}}}, 0x75: {l: {0x3B: {c: [8640]}, 0x6C: {l: {0x3B: {c: [10604]}}}}}}}}}, 0x6F: {l: {0x3B: {c: [961]}, 0x76: {l: {0x3B: {c: [1009]}}}}}}}, 0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8594]}, 0x74: {l: {0x61: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [8611]}}}}}}}}}}}}}}}}}}}, 0x68: {l: {0x61: {l: {0x72: {l: {0x70: {l: {0x6F: {l: {0x6F: {l: {0x6E: {l: {0x64: {l: {0x6F: {l: {0x77: {l: {0x6E: {l: {0x3B: {c: [8641]}}}}}}}}}, 0x75: {l: {0x70: {l: {0x3B: {c: [8640]}}}}}}}}}}}}}}}}}}}, 0x6C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x73: {l: {0x3B: {c: [8644]}}}}}}}}}}}}}, 0x68: {l: {0x61: {l: {0x72: {l: {0x70: {l: {0x6F: {l: {0x6F: {l: {0x6E: {l: {0x73: {l: {0x3B: {c: [8652]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x72: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x73: {l: {0x3B: {c: [8649]}}}}}}}}}}}}}}}}}}}}}}}, 0x73: {l: {0x71: {l: {0x75: {l: {0x69: {l: {0x67: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8605]}}}}}}}}}}}}}}}}}}}}}, 0x74: {l: {0x68: {l: {0x72: {l: {0x65: {l: {0x65: {l: {0x74: {l: {0x69: {l: {0x6D: {l: {0x65: {l: {0x73: {l: {0x3B: {c: [8908]}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x6E: {l: {0x67: {l: {0x3B: {c: [730]}}}}}, 0x73: {l: {0x69: {l: {0x6E: {l: {0x67: {l: {0x64: {l: {0x6F: {l: {0x74: {l: {0x73: {l: {0x65: {l: {0x71: {l: {0x3B: {c: [8787]}}}}}}}}}}}}}}}}}}}}}}}, 0x6C: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8644]}}}}}}}, 0x68: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [8652]}}}}}}}, 0x6D: {l: {0x3B: {c: [8207]}}}}}, 0x6D: {l: {0x6F: {l: {0x75: {l: {0x73: {l: {0x74: {l: {0x61: {l: {0x63: {l: {0x68: {l: {0x65: {l: {0x3B: {c: [9137]}}}}}}}}}, 0x3B: {c: [9137]}}}}}}}}}}}, 0x6E: {l: {0x6D: {l: {0x69: {l: {0x64: {l: {0x3B: {c: [10990]}}}}}}}}}, 0x6F: {l: {0x61: {l: {0x6E: {l: {0x67: {l: {0x3B: {c: [10221]}}}}}, 0x72: {l: {0x72: {l: {0x3B: {c: [8702]}}}}}}}, 0x62: {l: {0x72: {l: {0x6B: {l: {0x3B: {c: [10215]}}}}}}}, 0x70: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10630]}}}}}, 0x66: {l: {0x3B: {c: [120163]}}}, 0x6C: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [10798]}}}}}}}}}, 0x74: {l: {0x69: {l: {0x6D: {l: {0x65: {l: {0x73: {l: {0x3B: {c: [10805]}}}}}}}}}}}}}, 0x70: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [41]}, 0x67: {l: {0x74: {l: {0x3B: {c: [10644]}}}}}}}}}, 0x70: {l: {0x6F: {l: {0x6C: {l: {0x69: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [10770]}}}}}}}}}}}}}}}, 0x72: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8649]}}}}}}}}}, 0x73: {l: {0x61: {l: {0x71: {l: {0x75: {l: {0x6F: {l: {0x3B: {c: [8250]}}}}}}}}}, 0x63: {l: {0x72: {l: {0x3B: {c: [120007]}}}}}, 0x68: {l: {0x3B: {c: [8625]}}}, 0x71: {l: {0x62: {l: {0x3B: {c: [93]}}}, 0x75: {l: {0x6F: {l: {0x3B: {c: [8217]}, 0x72: {l: {0x3B: {c: [8217]}}}}}}}}}}}, 0x74: {l: {0x68: {l: {0x72: {l: {0x65: {l: {0x65: {l: {0x3B: {c: [8908]}}}}}}}}}, 0x69: {l: {0x6D: {l: {0x65: {l: {0x73: {l: {0x3B: {c: [8906]}}}}}}}}}, 0x72: {l: {0x69: {l: {0x3B: {c: [9657]}, 0x65: {l: {0x3B: {c: [8885]}}}, 0x66: {l: {0x3B: {c: [9656]}}}, 0x6C: {l: {0x74: {l: {0x72: {l: {0x69: {l: {0x3B: {c: [10702]}}}}}}}}}}}}}}}, 0x75: {l: {0x6C: {l: {0x75: {l: {0x68: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10600]}}}}}}}}}}}}}, 0x78: {l: {0x3B: {c: [8478]}}}}},
    0x52: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [340]}}}}}}}}}, 0x6E: {l: {0x67: {l: {0x3B: {c: [10219]}}}}}, 0x72: {l: {0x72: {l: {0x3B: {c: [8608]}, 0x74: {l: {0x6C: {l: {0x3B: {c: [10518]}}}}}}}}}}}, 0x42: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [10512]}}}}}}}}}, 0x63: {l: {0x61: {l: {0x72: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [344]}}}}}}}}}, 0x65: {l: {0x64: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [342]}}}}}}}}}, 0x79: {l: {0x3B: {c: [1056]}}}}}, 0x65: {l: {0x3B: {c: [8476]}, 0x76: {l: {0x65: {l: {0x72: {l: {0x73: {l: {0x65: {l: {0x45: {l: {0x6C: {l: {0x65: {l: {0x6D: {l: {0x65: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [8715]}}}}}}}}}}}}}, 0x71: {l: {0x75: {l: {0x69: {l: {0x6C: {l: {0x69: {l: {0x62: {l: {0x72: {l: {0x69: {l: {0x75: {l: {0x6D: {l: {0x3B: {c: [8651]}}}}}}}}}}}}}}}}}}}}}}}, 0x55: {l: {0x70: {l: {0x45: {l: {0x71: {l: {0x75: {l: {0x69: {l: {0x6C: {l: {0x69: {l: {0x62: {l: {0x72: {l: {0x69: {l: {0x75: {l: {0x6D: {l: {0x3B: {c: [10607]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x45: {l: {0x47: {l: {0x3B: {c: [174]}}, c: [174]}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [8476]}}}}}, 0x68: {l: {0x6F: {l: {0x3B: {c: [929]}}}}}, 0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x41: {l: {0x6E: {l: {0x67: {l: {0x6C: {l: {0x65: {l: {0x42: {l: {0x72: {l: {0x61: {l: {0x63: {l: {0x6B: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [10217]}}}}}}}}}}}}}}}}}}}}}}}, 0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [8677]}}}}}}}, 0x3B: {c: [8594]}, 0x4C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8644]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8658]}}}}}}}}}}}, 0x43: {l: {0x65: {l: {0x69: {l: {0x6C: {l: {0x69: {l: {0x6E: {l: {0x67: {l: {0x3B: {c: [8969]}}}}}}}}}}}}}}}, 0x44: {l: {0x6F: {l: {0x75: {l: {0x62: {l: {0x6C: {l: {0x65: {l: {0x42: {l: {0x72: {l: {0x61: {l: {0x63: {l: {0x6B: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [10215]}}}}}}}}}}}}}}}}}}}}}}}, 0x77: {l: {0x6E: {l: {0x54: {l: {0x65: {l: {0x65: {l: {0x56: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x6F: {l: {0x72: {l: {0x3B: {c: [10589]}}}}}}}}}}}}}}}}}}}, 0x56: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x6F: {l: {0x72: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10581]}}}}}}}, 0x3B: {c: [8642]}}}}}}}}}}}}}}}}}}}}}, 0x46: {l: {0x6C: {l: {0x6F: {l: {0x6F: {l: {0x72: {l: {0x3B: {c: [8971]}}}}}}}}}}}, 0x54: {l: {0x65: {l: {0x65: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8614]}}}}}}}}}}}, 0x3B: {c: [8866]}, 0x56: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x6F: {l: {0x72: {l: {0x3B: {c: [10587]}}}}}}}}}}}}}}}}}, 0x72: {l: {0x69: {l: {0x61: {l: {0x6E: {l: {0x67: {l: {0x6C: {l: {0x65: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10704]}}}}}}}, 0x3B: {c: [8883]}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8885]}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x55: {l: {0x70: {l: {0x44: {l: {0x6F: {l: {0x77: {l: {0x6E: {l: {0x56: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x6F: {l: {0x72: {l: {0x3B: {c: [10575]}}}}}}}}}}}}}}}}}}}}}, 0x54: {l: {0x65: {l: {0x65: {l: {0x56: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x6F: {l: {0x72: {l: {0x3B: {c: [10588]}}}}}}}}}}}}}}}}}}}, 0x56: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x6F: {l: {0x72: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10580]}}}}}}}, 0x3B: {c: [8638]}}}}}}}}}}}}}}}}}, 0x56: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x6F: {l: {0x72: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10579]}}}}}}}, 0x3B: {c: [8640]}}}}}}}}}}}}}}}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [8477]}}}}}, 0x75: {l: {0x6E: {l: {0x64: {l: {0x49: {l: {0x6D: {l: {0x70: {l: {0x6C: {l: {0x69: {l: {0x65: {l: {0x73: {l: {0x3B: {c: [10608]}}}}}}}}}}}}}}}}}}}}}}}, 0x72: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8667]}}}}}}}}}}}}}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [8475]}}}}}, 0x68: {l: {0x3B: {c: [8625]}}}}}, 0x75: {l: {0x6C: {l: {0x65: {l: {0x44: {l: {0x65: {l: {0x6C: {l: {0x61: {l: {0x79: {l: {0x65: {l: {0x64: {l: {0x3B: {c: [10740]}}}}}}}}}}}}}}}}}}}}}}},
    0x53: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [346]}}}}}}}}}}}, 0x63: {l: {0x61: {l: {0x72: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [352]}}}}}}}}}, 0x3B: {c: [10940]}, 0x65: {l: {0x64: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [350]}}}}}}}}}, 0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [348]}}}}}}}, 0x79: {l: {0x3B: {c: [1057]}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120086]}}}}}, 0x48: {l: {0x43: {l: {0x48: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1065]}}}}}}}}}, 0x63: {l: {0x79: {l: {0x3B: {c: [1064]}}}}}}}, 0x68: {l: {0x6F: {l: {0x72: {l: {0x74: {l: {0x44: {l: {0x6F: {l: {0x77: {l: {0x6E: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8595]}}}}}}}}}}}}}}}}}}}, 0x4C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8592]}}}}}}}}}}}}}}}}}}}, 0x52: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8594]}}}}}}}}}}}}}}}}}}}}}, 0x55: {l: {0x70: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8593]}}}}}}}}}}}}}}}}}}}}}}}, 0x69: {l: {0x67: {l: {0x6D: {l: {0x61: {l: {0x3B: {c: [931]}}}}}}}}}, 0x6D: {l: {0x61: {l: {0x6C: {l: {0x6C: {l: {0x43: {l: {0x69: {l: {0x72: {l: {0x63: {l: {0x6C: {l: {0x65: {l: {0x3B: {c: [8728]}}}}}}}}}}}}}}}}}}}}}, 0x4F: {l: {0x46: {l: {0x54: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1068]}}}}}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120138]}}}}}}}, 0x71: {l: {0x72: {l: {0x74: {l: {0x3B: {c: [8730]}}}}}, 0x75: {l: {0x61: {l: {0x72: {l: {0x65: {l: {0x3B: {c: [9633]}, 0x49: {l: {0x6E: {l: {0x74: {l: {0x65: {l: {0x72: {l: {0x73: {l: {0x65: {l: {0x63: {l: {0x74: {l: {0x69: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [8851]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x53: {l: {0x75: {l: {0x62: {l: {0x73: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [8847]}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8849]}}}}}}}}}}}}}}}}}}}, 0x70: {l: {0x65: {l: {0x72: {l: {0x73: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [8848]}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8850]}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x55: {l: {0x6E: {l: {0x69: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [8852]}}}}}}}}}}}}}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119982]}}}}}}}, 0x74: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [8902]}}}}}}}, 0x75: {l: {0x62: {l: {0x3B: {c: [8912]}, 0x73: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [8912]}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8838]}}}}}}}}}}}}}}}}}}}, 0x63: {l: {0x63: {l: {0x65: {l: {0x65: {l: {0x64: {l: {0x73: {l: {0x3B: {c: [8827]}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [10928]}}}}}}}}}}}, 0x53: {l: {0x6C: {l: {0x61: {l: {0x6E: {l: {0x74: {l: {0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8829]}}}}}}}}}}}}}}}}}}}}}, 0x54: {l: {0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [8831]}}}}}}}}}}}}}}}}}}}}}, 0x68: {l: {0x54: {l: {0x68: {l: {0x61: {l: {0x74: {l: {0x3B: {c: [8715]}}}}}}}}}}}}}, 0x6D: {l: {0x3B: {c: [8721]}}}, 0x70: {l: {0x3B: {c: [8913]}, 0x65: {l: {0x72: {l: {0x73: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [8835]}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8839]}}}}}}}}}}}}}}}}}}}}}, 0x73: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [8913]}}}}}}}}}}}}},
    0x73: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [347]}}}}}}}}}}}, 0x62: {l: {0x71: {l: {0x75: {l: {0x6F: {l: {0x3B: {c: [8218]}}}}}}}}}, 0x63: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [10936]}}}, 0x72: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [353]}}}}}}}}}, 0x3B: {c: [8827]}, 0x63: {l: {0x75: {l: {0x65: {l: {0x3B: {c: [8829]}}}}}}}, 0x65: {l: {0x3B: {c: [10928]}, 0x64: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [351]}}}}}}}}}, 0x45: {l: {0x3B: {c: [10932]}}}, 0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [349]}}}}}}}, 0x6E: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [10938]}}}}}, 0x45: {l: {0x3B: {c: [10934]}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [8937]}}}}}}}}}, 0x70: {l: {0x6F: {l: {0x6C: {l: {0x69: {l: {0x6E: {l: {0x74: {l: {0x3B: {c: [10771]}}}}}}}}}}}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [8831]}}}}}}}, 0x79: {l: {0x3B: {c: [1089]}}}}}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x62: {l: {0x3B: {c: [8865]}}}, 0x3B: {c: [8901]}, 0x65: {l: {0x3B: {c: [10854]}}}}}}}}}, 0x65: {l: {0x61: {l: {0x72: {l: {0x68: {l: {0x6B: {l: {0x3B: {c: [10533]}}}}}, 0x72: {l: {0x3B: {c: [8600]}, 0x6F: {l: {0x77: {l: {0x3B: {c: [8600]}}}}}}}}}}}, 0x41: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8664]}}}}}}}, 0x63: {l: {0x74: {l: {0x3B: {c: [167]}}, c: [167]}}}, 0x6D: {l: {0x69: {l: {0x3B: {c: [59]}}}}}, 0x73: {l: {0x77: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10537]}}}}}}}}}, 0x74: {l: {0x6D: {l: {0x69: {l: {0x6E: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [8726]}}}}}}}}}, 0x6E: {l: {0x3B: {c: [8726]}}}}}}}, 0x78: {l: {0x74: {l: {0x3B: {c: [10038]}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120112]}, 0x6F: {l: {0x77: {l: {0x6E: {l: {0x3B: {c: [8994]}}}}}}}}}}}, 0x68: {l: {0x61: {l: {0x72: {l: {0x70: {l: {0x3B: {c: [9839]}}}}}}}, 0x63: {l: {0x68: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1097]}}}}}}}, 0x79: {l: {0x3B: {c: [1096]}}}}}, 0x6F: {l: {0x72: {l: {0x74: {l: {0x6D: {l: {0x69: {l: {0x64: {l: {0x3B: {c: [8739]}}}}}}}, 0x70: {l: {0x61: {l: {0x72: {l: {0x61: {l: {0x6C: {l: {0x6C: {l: {0x65: {l: {0x6C: {l: {0x3B: {c: [8741]}}}}}}}}}}}}}}}}}}}}}}}, 0x79: {l: {0x3B: {c: [173]}}, c: [173]}}}, 0x69: {l: {0x67: {l: {0x6D: {l: {0x61: {l: {0x3B: {c: [963]}, 0x66: {l: {0x3B: {c: [962]}}}, 0x76: {l: {0x3B: {c: [962]}}}}}}}}}, 0x6D: {l: {0x3B: {c: [8764]}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [10858]}}}}}}}, 0x65: {l: {0x3B: {c: [8771]}, 0x71: {l: {0x3B: {c: [8771]}}}}}, 0x67: {l: {0x3B: {c: [10910]}, 0x45: {l: {0x3B: {c: [10912]}}}}}, 0x6C: {l: {0x3B: {c: [10909]}, 0x45: {l: {0x3B: {c: [10911]}}}}}, 0x6E: {l: {0x65: {l: {0x3B: {c: [8774]}}}}}, 0x70: {l: {0x6C: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [10788]}}}}}}}}}, 0x72: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [10610]}}}}}}}}}}}}}, 0x6C: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8592]}}}}}}}}}, 0x6D: {l: {0x61: {l: {0x6C: {l: {0x6C: {l: {0x73: {l: {0x65: {l: {0x74: {l: {0x6D: {l: {0x69: {l: {0x6E: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [8726]}}}}}}}}}}}}}}}}}}}}}, 0x73: {l: {0x68: {l: {0x70: {l: {0x3B: {c: [10803]}}}}}}}}}, 0x65: {l: {0x70: {l: {0x61: {l: {0x72: {l: {0x73: {l: {0x6C: {l: {0x3B: {c: [10724]}}}}}}}}}}}}}, 0x69: {l: {0x64: {l: {0x3B: {c: [8739]}}}, 0x6C: {l: {0x65: {l: {0x3B: {c: [8995]}}}}}}}, 0x74: {l: {0x3B: {c: [10922]}, 0x65: {l: {0x3B: {c: [10924]}, 0x73: {l: {0x3B: {c: [10924, 65024]}}}}}}}}}, 0x6F: {l: {0x66: {l: {0x74: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1100]}}}}}}}}}, 0x6C: {l: {0x62: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [9023]}}}}}, 0x3B: {c: [10692]}}}, 0x3B: {c: [47]}}}, 0x70: {l: {0x66: {l: {0x3B: {c: [120164]}}}}}}}, 0x70: {l: {0x61: {l: {0x64: {l: {0x65: {l: {0x73: {l: {0x3B: {c: [9824]}, 0x75: {l: {0x69: {l: {0x74: {l: {0x3B: {c: [9824]}}}}}}}}}}}}}, 0x72: {l: {0x3B: {c: [8741]}}}}}}}, 0x71: {l: {0x63: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [8851]}, 0x73: {l: {0x3B: {c: [8851, 65024]}}}}}}}, 0x75: {l: {0x70: {l: {0x3B: {c: [8852]}, 0x73: {l: {0x3B: {c: [8852, 65024]}}}}}}}}}, 0x73: {l: {0x75: {l: {0x62: {l: {0x3B: {c: [8847]}, 0x65: {l: {0x3B: {c: [8849]}}}, 0x73: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [8847]}, 0x65: {l: {0x71: {l: {0x3B: {c: [8849]}}}}}}}}}}}}}, 0x70: {l: {0x3B: {c: [8848]}, 0x65: {l: {0x3B: {c: [8850]}}}, 0x73: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [8848]}, 0x65: {l: {0x71: {l: {0x3B: {c: [8850]}}}}}}}}}}}}}}}}}, 0x75: {l: {0x61: {l: {0x72: {l: {0x65: {l: {0x3B: {c: [9633]}}}, 0x66: {l: {0x3B: {c: [9642]}}}}}}}, 0x3B: {c: [9633]}, 0x66: {l: {0x3B: {c: [9642]}}}}}}}, 0x72: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8594]}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [120008]}}}}}, 0x65: {l: {0x74: {l: {0x6D: {l: {0x6E: {l: {0x3B: {c: [8726]}}}}}}}}}, 0x6D: {l: {0x69: {l: {0x6C: {l: {0x65: {l: {0x3B: {c: [8995]}}}}}}}}}, 0x74: {l: {0x61: {l: {0x72: {l: {0x66: {l: {0x3B: {c: [8902]}}}}}}}}}}}, 0x74: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [9734]}, 0x66: {l: {0x3B: {c: [9733]}}}}}}}, 0x72: {l: {0x61: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x65: {l: {0x70: {l: {0x73: {l: {0x69: {l: {0x6C: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [1013]}}}}}}}}}}}}}}}, 0x70: {l: {0x68: {l: {0x69: {l: {0x3B: {c: [981]}}}}}}}}}}}}}}}}}, 0x6E: {l: {0x73: {l: {0x3B: {c: [175]}}}}}}}}}, 0x75: {l: {0x62: {l: {0x3B: {c: [8834]}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [10941]}}}}}}}, 0x45: {l: {0x3B: {c: [10949]}}}, 0x65: {l: {0x3B: {c: [8838]}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [10947]}}}}}}}}}, 0x6D: {l: {0x75: {l: {0x6C: {l: {0x74: {l: {0x3B: {c: [10945]}}}}}}}}}, 0x6E: {l: {0x45: {l: {0x3B: {c: [10955]}}}, 0x65: {l: {0x3B: {c: [8842]}}}}}, 0x70: {l: {0x6C: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [10943]}}}}}}}}}, 0x72: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [10617]}}}}}}}}}, 0x73: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [8834]}, 0x65: {l: {0x71: {l: {0x3B: {c: [8838]}, 0x71: {l: {0x3B: {c: [10949]}}}}}}}, 0x6E: {l: {0x65: {l: {0x71: {l: {0x3B: {c: [8842]}, 0x71: {l: {0x3B: {c: [10955]}}}}}}}}}}}}}, 0x69: {l: {0x6D: {l: {0x3B: {c: [10951]}}}}}, 0x75: {l: {0x62: {l: {0x3B: {c: [10965]}}}, 0x70: {l: {0x3B: {c: [10963]}}}}}}}}}, 0x63: {l: {0x63: {l: {0x61: {l: {0x70: {l: {0x70: {l: {0x72: {l: {0x6F: {l: {0x78: {l: {0x3B: {c: [10936]}}}}}}}}}}}}}, 0x3B: {c: [8827]}, 0x63: {l: {0x75: {l: {0x72: {l: {0x6C: {l: {0x79: {l: {0x65: {l: {0x71: {l: {0x3B: {c: [8829]}}}}}}}}}}}}}}}, 0x65: {l: {0x71: {l: {0x3B: {c: [10928]}}}}}, 0x6E: {l: {0x61: {l: {0x70: {l: {0x70: {l: {0x72: {l: {0x6F: {l: {0x78: {l: {0x3B: {c: [10938]}}}}}}}}}}}}}, 0x65: {l: {0x71: {l: {0x71: {l: {0x3B: {c: [10934]}}}}}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [8937]}}}}}}}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [8831]}}}}}}}}}}}, 0x6D: {l: {0x3B: {c: [8721]}}}, 0x6E: {l: {0x67: {l: {0x3B: {c: [9834]}}}}}, 0x70: {l: {0x31: {l: {0x3B: {c: [185]}}, c: [185]}, 0x32: {l: {0x3B: {c: [178]}}, c: [178]}, 0x33: {l: {0x3B: {c: [179]}}, c: [179]}, 0x3B: {c: [8835]}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [10942]}}}}}, 0x73: {l: {0x75: {l: {0x62: {l: {0x3B: {c: [10968]}}}}}}}}}, 0x45: {l: {0x3B: {c: [10950]}}}, 0x65: {l: {0x3B: {c: [8839]}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [10948]}}}}}}}}}, 0x68: {l: {0x73: {l: {0x6F: {l: {0x6C: {l: {0x3B: {c: [10185]}}}}}, 0x75: {l: {0x62: {l: {0x3B: {c: [10967]}}}}}}}}}, 0x6C: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [10619]}}}}}}}}}, 0x6D: {l: {0x75: {l: {0x6C: {l: {0x74: {l: {0x3B: {c: [10946]}}}}}}}}}, 0x6E: {l: {0x45: {l: {0x3B: {c: [10956]}}}, 0x65: {l: {0x3B: {c: [8843]}}}}}, 0x70: {l: {0x6C: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [10944]}}}}}}}}}, 0x73: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [8835]}, 0x65: {l: {0x71: {l: {0x3B: {c: [8839]}, 0x71: {l: {0x3B: {c: [10950]}}}}}}}, 0x6E: {l: {0x65: {l: {0x71: {l: {0x3B: {c: [8843]}, 0x71: {l: {0x3B: {c: [10956]}}}}}}}}}}}}}, 0x69: {l: {0x6D: {l: {0x3B: {c: [10952]}}}}}, 0x75: {l: {0x62: {l: {0x3B: {c: [10964]}}}, 0x70: {l: {0x3B: {c: [10966]}}}}}}}}}}}, 0x77: {l: {0x61: {l: {0x72: {l: {0x68: {l: {0x6B: {l: {0x3B: {c: [10534]}}}}}, 0x72: {l: {0x3B: {c: [8601]}, 0x6F: {l: {0x77: {l: {0x3B: {c: [8601]}}}}}}}}}}}, 0x41: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8665]}}}}}}}, 0x6E: {l: {0x77: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10538]}}}}}}}}}}}, 0x7A: {l: {0x6C: {l: {0x69: {l: {0x67: {l: {0x3B: {c: [223]}}, c: [223]}}}}}}}}},
    0x54: {l: {0x61: {l: {0x62: {l: {0x3B: {c: [9]}}}, 0x75: {l: {0x3B: {c: [932]}}}}}, 0x63: {l: {0x61: {l: {0x72: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [356]}}}}}}}}}, 0x65: {l: {0x64: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [354]}}}}}}}}}, 0x79: {l: {0x3B: {c: [1058]}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120087]}}}}}, 0x68: {l: {0x65: {l: {0x72: {l: {0x65: {l: {0x66: {l: {0x6F: {l: {0x72: {l: {0x65: {l: {0x3B: {c: [8756]}}}}}}}}}}}}}, 0x74: {l: {0x61: {l: {0x3B: {c: [920]}}}}}}}, 0x69: {l: {0x63: {l: {0x6B: {l: {0x53: {l: {0x70: {l: {0x61: {l: {0x63: {l: {0x65: {l: {0x3B: {c: [8287, 8202]}}}}}}}}}}}}}}}, 0x6E: {l: {0x53: {l: {0x70: {l: {0x61: {l: {0x63: {l: {0x65: {l: {0x3B: {c: [8201]}}}}}}}}}}}}}}}}}, 0x48: {l: {0x4F: {l: {0x52: {l: {0x4E: {l: {0x3B: {c: [222]}}, c: [222]}}}}}}}, 0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [8764]}, 0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8771]}}}}}}}}}}}, 0x46: {l: {0x75: {l: {0x6C: {l: {0x6C: {l: {0x45: {l: {0x71: {l: {0x75: {l: {0x61: {l: {0x6C: {l: {0x3B: {c: [8773]}}}}}}}}}}}}}}}}}}}, 0x54: {l: {0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [8776]}}}}}}}}}}}}}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120139]}}}}}}}, 0x52: {l: {0x41: {l: {0x44: {l: {0x45: {l: {0x3B: {c: [8482]}}}}}}}}}, 0x72: {l: {0x69: {l: {0x70: {l: {0x6C: {l: {0x65: {l: {0x44: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [8411]}}}}}}}}}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119983]}}}}}, 0x74: {l: {0x72: {l: {0x6F: {l: {0x6B: {l: {0x3B: {c: [358]}}}}}}}}}}}, 0x53: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1062]}}}}}, 0x48: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1035]}}}}}}}}}}},
    0x74: {l: {0x61: {l: {0x72: {l: {0x67: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [8982]}}}}}}}}}, 0x75: {l: {0x3B: {c: [964]}}}}}, 0x62: {l: {0x72: {l: {0x6B: {l: {0x3B: {c: [9140]}}}}}}}, 0x63: {l: {0x61: {l: {0x72: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [357]}}}}}}}}}, 0x65: {l: {0x64: {l: {0x69: {l: {0x6C: {l: {0x3B: {c: [355]}}}}}}}}}, 0x79: {l: {0x3B: {c: [1090]}}}}}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [8411]}}}}}}}, 0x65: {l: {0x6C: {l: {0x72: {l: {0x65: {l: {0x63: {l: {0x3B: {c: [8981]}}}}}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120113]}}}}}, 0x68: {l: {0x65: {l: {0x72: {l: {0x65: {l: {0x34: {l: {0x3B: {c: [8756]}}}, 0x66: {l: {0x6F: {l: {0x72: {l: {0x65: {l: {0x3B: {c: [8756]}}}}}}}}}}}}}, 0x74: {l: {0x61: {l: {0x3B: {c: [952]}, 0x73: {l: {0x79: {l: {0x6D: {l: {0x3B: {c: [977]}}}}}}}, 0x76: {l: {0x3B: {c: [977]}}}}}}}}}, 0x69: {l: {0x63: {l: {0x6B: {l: {0x61: {l: {0x70: {l: {0x70: {l: {0x72: {l: {0x6F: {l: {0x78: {l: {0x3B: {c: [8776]}}}}}}}}}}}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [8764]}}}}}}}}}}}, 0x6E: {l: {0x73: {l: {0x70: {l: {0x3B: {c: [8201]}}}}}}}}}, 0x6B: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [8776]}}}}}, 0x73: {l: {0x69: {l: {0x6D: {l: {0x3B: {c: [8764]}}}}}}}}}, 0x6F: {l: {0x72: {l: {0x6E: {l: {0x3B: {c: [254]}}, c: [254]}}}}}}}, 0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [732]}}}}}}}, 0x6D: {l: {0x65: {l: {0x73: {l: {0x62: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10801]}}}}}, 0x3B: {c: [8864]}}}, 0x3B: {c: [215]}, 0x64: {l: {0x3B: {c: [10800]}}}}, c: [215]}}}}}, 0x6E: {l: {0x74: {l: {0x3B: {c: [8749]}}}}}}}, 0x6F: {l: {0x65: {l: {0x61: {l: {0x3B: {c: [10536]}}}}}, 0x70: {l: {0x62: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [9014]}}}}}}}, 0x63: {l: {0x69: {l: {0x72: {l: {0x3B: {c: [10993]}}}}}}}, 0x3B: {c: [8868]}, 0x66: {l: {0x3B: {c: [120165]}, 0x6F: {l: {0x72: {l: {0x6B: {l: {0x3B: {c: [10970]}}}}}}}}}}}, 0x73: {l: {0x61: {l: {0x3B: {c: [10537]}}}}}}}, 0x70: {l: {0x72: {l: {0x69: {l: {0x6D: {l: {0x65: {l: {0x3B: {c: [8244]}}}}}}}}}}}, 0x72: {l: {0x61: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [8482]}}}}}}}, 0x69: {l: {0x61: {l: {0x6E: {l: {0x67: {l: {0x6C: {l: {0x65: {l: {0x3B: {c: [9653]}, 0x64: {l: {0x6F: {l: {0x77: {l: {0x6E: {l: {0x3B: {c: [9663]}}}}}}}}}, 0x6C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x3B: {c: [9667]}, 0x65: {l: {0x71: {l: {0x3B: {c: [8884]}}}}}}}}}}}}}, 0x71: {l: {0x3B: {c: [8796]}}}, 0x72: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x3B: {c: [9657]}, 0x65: {l: {0x71: {l: {0x3B: {c: [8885]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [9708]}}}}}}}, 0x65: {l: {0x3B: {c: [8796]}}}, 0x6D: {l: {0x69: {l: {0x6E: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [10810]}}}}}}}}}}}, 0x70: {l: {0x6C: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [10809]}}}}}}}}}, 0x73: {l: {0x62: {l: {0x3B: {c: [10701]}}}}}, 0x74: {l: {0x69: {l: {0x6D: {l: {0x65: {l: {0x3B: {c: [10811]}}}}}}}}}}}, 0x70: {l: {0x65: {l: {0x7A: {l: {0x69: {l: {0x75: {l: {0x6D: {l: {0x3B: {c: [9186]}}}}}}}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [120009]}}}, 0x79: {l: {0x3B: {c: [1094]}}}}}, 0x68: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1115]}}}}}}}, 0x74: {l: {0x72: {l: {0x6F: {l: {0x6B: {l: {0x3B: {c: [359]}}}}}}}}}}}, 0x77: {l: {0x69: {l: {0x78: {l: {0x74: {l: {0x3B: {c: [8812]}}}}}}}, 0x6F: {l: {0x68: {l: {0x65: {l: {0x61: {l: {0x64: {l: {0x6C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8606]}}}}}}}}}}}}}}}}}}}, 0x72: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8608]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
    0x55: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [218]}}, c: [218]}}}}}}}, 0x72: {l: {0x72: {l: {0x3B: {c: [8607]}, 0x6F: {l: {0x63: {l: {0x69: {l: {0x72: {l: {0x3B: {c: [10569]}}}}}}}}}}}}}}}, 0x62: {l: {0x72: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1038]}}}}}, 0x65: {l: {0x76: {l: {0x65: {l: {0x3B: {c: [364]}}}}}}}}}}}, 0x63: {l: {0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [219]}}, c: [219]}}}}}, 0x79: {l: {0x3B: {c: [1059]}}}}}, 0x64: {l: {0x62: {l: {0x6C: {l: {0x61: {l: {0x63: {l: {0x3B: {c: [368]}}}}}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120088]}}}}}, 0x67: {l: {0x72: {l: {0x61: {l: {0x76: {l: {0x65: {l: {0x3B: {c: [217]}}, c: [217]}}}}}}}}}, 0x6D: {l: {0x61: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [362]}}}}}}}}}, 0x6E: {l: {0x64: {l: {0x65: {l: {0x72: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [95]}}}}}, 0x72: {l: {0x61: {l: {0x63: {l: {0x65: {l: {0x3B: {c: [9183]}}}, 0x6B: {l: {0x65: {l: {0x74: {l: {0x3B: {c: [9141]}}}}}}}}}}}}}}}, 0x50: {l: {0x61: {l: {0x72: {l: {0x65: {l: {0x6E: {l: {0x74: {l: {0x68: {l: {0x65: {l: {0x73: {l: {0x69: {l: {0x73: {l: {0x3B: {c: [9181]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x69: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [8899]}, 0x50: {l: {0x6C: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [8846]}}}}}}}}}}}}}}}}}, 0x6F: {l: {0x67: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [370]}}}}}}}, 0x70: {l: {0x66: {l: {0x3B: {c: [120140]}}}}}}}, 0x70: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10514]}}}}}}}, 0x3B: {c: [8593]}, 0x44: {l: {0x6F: {l: {0x77: {l: {0x6E: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8645]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8657]}}}}}}}}}}}, 0x44: {l: {0x6F: {l: {0x77: {l: {0x6E: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8597]}}}}}}}}}}}}}}}}}}}, 0x64: {l: {0x6F: {l: {0x77: {l: {0x6E: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8661]}}}}}}}}}}}}}}}}}}}, 0x45: {l: {0x71: {l: {0x75: {l: {0x69: {l: {0x6C: {l: {0x69: {l: {0x62: {l: {0x72: {l: {0x69: {l: {0x75: {l: {0x6D: {l: {0x3B: {c: [10606]}}}}}}}}}}}}}}}}}}}}}}}, 0x70: {l: {0x65: {l: {0x72: {l: {0x4C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8598]}}}}}}}}}}}}}}}}}}}, 0x52: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8599]}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x73: {l: {0x69: {l: {0x3B: {c: [978]}, 0x6C: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [933]}}}}}}}}}}}, 0x54: {l: {0x65: {l: {0x65: {l: {0x41: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8613]}}}}}}}}}}}, 0x3B: {c: [8869]}}}}}}}}}, 0x72: {l: {0x69: {l: {0x6E: {l: {0x67: {l: {0x3B: {c: [366]}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119984]}}}}}}}, 0x74: {l: {0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [360]}}}}}}}}}}}, 0x75: {l: {0x6D: {l: {0x6C: {l: {0x3B: {c: [220]}}, c: [220]}}}}}}},
    0x75: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [250]}}, c: [250]}}}}}}}, 0x72: {l: {0x72: {l: {0x3B: {c: [8593]}}}}}}}, 0x41: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8657]}}}}}}}, 0x62: {l: {0x72: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1118]}}}}}, 0x65: {l: {0x76: {l: {0x65: {l: {0x3B: {c: [365]}}}}}}}}}}}, 0x63: {l: {0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [251]}}, c: [251]}}}}}, 0x79: {l: {0x3B: {c: [1091]}}}}}, 0x64: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8645]}}}}}}}, 0x62: {l: {0x6C: {l: {0x61: {l: {0x63: {l: {0x3B: {c: [369]}}}}}}}}}, 0x68: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10606]}}}}}}}}}, 0x66: {l: {0x69: {l: {0x73: {l: {0x68: {l: {0x74: {l: {0x3B: {c: [10622]}}}}}}}}}, 0x72: {l: {0x3B: {c: [120114]}}}}}, 0x67: {l: {0x72: {l: {0x61: {l: {0x76: {l: {0x65: {l: {0x3B: {c: [249]}}, c: [249]}}}}}}}}}, 0x48: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10595]}}}}}}}, 0x68: {l: {0x61: {l: {0x72: {l: {0x6C: {l: {0x3B: {c: [8639]}}}, 0x72: {l: {0x3B: {c: [8638]}}}}}}}, 0x62: {l: {0x6C: {l: {0x6B: {l: {0x3B: {c: [9600]}}}}}}}}}, 0x6C: {l: {0x63: {l: {0x6F: {l: {0x72: {l: {0x6E: {l: {0x3B: {c: [8988]}, 0x65: {l: {0x72: {l: {0x3B: {c: [8988]}}}}}}}}}}}, 0x72: {l: {0x6F: {l: {0x70: {l: {0x3B: {c: [8975]}}}}}}}}}, 0x74: {l: {0x72: {l: {0x69: {l: {0x3B: {c: [9720]}}}}}}}}}, 0x6D: {l: {0x61: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [363]}}}}}}}, 0x6C: {l: {0x3B: {c: [168]}}, c: [168]}}}, 0x6F: {l: {0x67: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [371]}}}}}}}, 0x70: {l: {0x66: {l: {0x3B: {c: [120166]}}}}}}}, 0x70: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8593]}}}}}}}}}}}, 0x64: {l: {0x6F: {l: {0x77: {l: {0x6E: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x3B: {c: [8597]}}}}}}}}}}}}}}}}}}}, 0x68: {l: {0x61: {l: {0x72: {l: {0x70: {l: {0x6F: {l: {0x6F: {l: {0x6E: {l: {0x6C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x3B: {c: [8639]}}}}}}}}}, 0x72: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x3B: {c: [8638]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x6C: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [8846]}}}}}}}, 0x73: {l: {0x69: {l: {0x3B: {c: [965]}, 0x68: {l: {0x3B: {c: [978]}}}, 0x6C: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [965]}}}}}}}}}}}, 0x75: {l: {0x70: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x6F: {l: {0x77: {l: {0x73: {l: {0x3B: {c: [8648]}}}}}}}}}}}}}}}}}}}, 0x72: {l: {0x63: {l: {0x6F: {l: {0x72: {l: {0x6E: {l: {0x3B: {c: [8989]}, 0x65: {l: {0x72: {l: {0x3B: {c: [8989]}}}}}}}}}}}, 0x72: {l: {0x6F: {l: {0x70: {l: {0x3B: {c: [8974]}}}}}}}}}, 0x69: {l: {0x6E: {l: {0x67: {l: {0x3B: {c: [367]}}}}}}}, 0x74: {l: {0x72: {l: {0x69: {l: {0x3B: {c: [9721]}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [120010]}}}}}}}, 0x74: {l: {0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [8944]}}}}}}}, 0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [361]}}}}}}}}}, 0x72: {l: {0x69: {l: {0x3B: {c: [9653]}, 0x66: {l: {0x3B: {c: [9652]}}}}}}}}}, 0x75: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8648]}}}}}}}, 0x6D: {l: {0x6C: {l: {0x3B: {c: [252]}}, c: [252]}}}}}, 0x77: {l: {0x61: {l: {0x6E: {l: {0x67: {l: {0x6C: {l: {0x65: {l: {0x3B: {c: [10663]}}}}}}}}}}}}}}},
    0x76: {l: {0x61: {l: {0x6E: {l: {0x67: {l: {0x72: {l: {0x74: {l: {0x3B: {c: [10652]}}}}}}}}}, 0x72: {l: {0x65: {l: {0x70: {l: {0x73: {l: {0x69: {l: {0x6C: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [1013]}}}}}}}}}}}}}}}, 0x6B: {l: {0x61: {l: {0x70: {l: {0x70: {l: {0x61: {l: {0x3B: {c: [1008]}}}}}}}}}}}, 0x6E: {l: {0x6F: {l: {0x74: {l: {0x68: {l: {0x69: {l: {0x6E: {l: {0x67: {l: {0x3B: {c: [8709]}}}}}}}}}}}}}}}, 0x70: {l: {0x68: {l: {0x69: {l: {0x3B: {c: [981]}}}}}, 0x69: {l: {0x3B: {c: [982]}}}, 0x72: {l: {0x6F: {l: {0x70: {l: {0x74: {l: {0x6F: {l: {0x3B: {c: [8733]}}}}}}}}}}}}}, 0x72: {l: {0x3B: {c: [8597]}, 0x68: {l: {0x6F: {l: {0x3B: {c: [1009]}}}}}}}, 0x73: {l: {0x69: {l: {0x67: {l: {0x6D: {l: {0x61: {l: {0x3B: {c: [962]}}}}}}}}}, 0x75: {l: {0x62: {l: {0x73: {l: {0x65: {l: {0x74: {l: {0x6E: {l: {0x65: {l: {0x71: {l: {0x3B: {c: [8842, 65024]}, 0x71: {l: {0x3B: {c: [10955, 65024]}}}}}}}}}}}}}}}}}, 0x70: {l: {0x73: {l: {0x65: {l: {0x74: {l: {0x6E: {l: {0x65: {l: {0x71: {l: {0x3B: {c: [8843, 65024]}, 0x71: {l: {0x3B: {c: [10956, 65024]}}}}}}}}}}}}}}}}}}}}}, 0x74: {l: {0x68: {l: {0x65: {l: {0x74: {l: {0x61: {l: {0x3B: {c: [977]}}}}}}}}}, 0x72: {l: {0x69: {l: {0x61: {l: {0x6E: {l: {0x67: {l: {0x6C: {l: {0x65: {l: {0x6C: {l: {0x65: {l: {0x66: {l: {0x74: {l: {0x3B: {c: [8882]}}}}}}}}}, 0x72: {l: {0x69: {l: {0x67: {l: {0x68: {l: {0x74: {l: {0x3B: {c: [8883]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, 0x41: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8661]}}}}}}}, 0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10984]}, 0x76: {l: {0x3B: {c: [10985]}}}}}}}}}, 0x63: {l: {0x79: {l: {0x3B: {c: [1074]}}}}}, 0x64: {l: {0x61: {l: {0x73: {l: {0x68: {l: {0x3B: {c: [8866]}}}}}}}}}, 0x44: {l: {0x61: {l: {0x73: {l: {0x68: {l: {0x3B: {c: [8872]}}}}}}}}}, 0x65: {l: {0x65: {l: {0x62: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [8891]}}}}}}}, 0x3B: {c: [8744]}, 0x65: {l: {0x71: {l: {0x3B: {c: [8794]}}}}}}}, 0x6C: {l: {0x6C: {l: {0x69: {l: {0x70: {l: {0x3B: {c: [8942]}}}}}}}}}, 0x72: {l: {0x62: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [124]}}}}}}}, 0x74: {l: {0x3B: {c: [124]}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120115]}}}}}, 0x6C: {l: {0x74: {l: {0x72: {l: {0x69: {l: {0x3B: {c: [8882]}}}}}}}}}, 0x6E: {l: {0x73: {l: {0x75: {l: {0x62: {l: {0x3B: {c: [8834, 8402]}}}, 0x70: {l: {0x3B: {c: [8835, 8402]}}}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120167]}}}}}}}, 0x70: {l: {0x72: {l: {0x6F: {l: {0x70: {l: {0x3B: {c: [8733]}}}}}}}}}, 0x72: {l: {0x74: {l: {0x72: {l: {0x69: {l: {0x3B: {c: [8883]}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [120011]}}}}}, 0x75: {l: {0x62: {l: {0x6E: {l: {0x45: {l: {0x3B: {c: [10955, 65024]}}}, 0x65: {l: {0x3B: {c: [8842, 65024]}}}}}}}, 0x70: {l: {0x6E: {l: {0x45: {l: {0x3B: {c: [10956, 65024]}}}, 0x65: {l: {0x3B: {c: [8843, 65024]}}}}}}}}}}}, 0x7A: {l: {0x69: {l: {0x67: {l: {0x7A: {l: {0x61: {l: {0x67: {l: {0x3B: {c: [10650]}}}}}}}}}}}}}}},
    0x56: {l: {0x62: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10987]}}}}}}}, 0x63: {l: {0x79: {l: {0x3B: {c: [1042]}}}}}, 0x64: {l: {0x61: {l: {0x73: {l: {0x68: {l: {0x3B: {c: [8873]}, 0x6C: {l: {0x3B: {c: [10982]}}}}}}}}}}}, 0x44: {l: {0x61: {l: {0x73: {l: {0x68: {l: {0x3B: {c: [8875]}}}}}}}}}, 0x65: {l: {0x65: {l: {0x3B: {c: [8897]}}}, 0x72: {l: {0x62: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [8214]}}}}}}}, 0x74: {l: {0x3B: {c: [8214]}, 0x69: {l: {0x63: {l: {0x61: {l: {0x6C: {l: {0x42: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [8739]}}}}}}}, 0x4C: {l: {0x69: {l: {0x6E: {l: {0x65: {l: {0x3B: {c: [124]}}}}}}}}}, 0x53: {l: {0x65: {l: {0x70: {l: {0x61: {l: {0x72: {l: {0x61: {l: {0x74: {l: {0x6F: {l: {0x72: {l: {0x3B: {c: [10072]}}}}}}}}}}}}}}}}}}}, 0x54: {l: {0x69: {l: {0x6C: {l: {0x64: {l: {0x65: {l: {0x3B: {c: [8768]}}}}}}}}}}}}}}}}}}}}}, 0x79: {l: {0x54: {l: {0x68: {l: {0x69: {l: {0x6E: {l: {0x53: {l: {0x70: {l: {0x61: {l: {0x63: {l: {0x65: {l: {0x3B: {c: [8202]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120089]}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120141]}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119985]}}}}}}}, 0x76: {l: {0x64: {l: {0x61: {l: {0x73: {l: {0x68: {l: {0x3B: {c: [8874]}}}}}}}}}}}}},
    0x57: {l: {0x63: {l: {0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [372]}}}}}}}}}, 0x65: {l: {0x64: {l: {0x67: {l: {0x65: {l: {0x3B: {c: [8896]}}}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120090]}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120142]}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119986]}}}}}}}}},
    0x77: {l: {0x63: {l: {0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [373]}}}}}}}}}, 0x65: {l: {0x64: {l: {0x62: {l: {0x61: {l: {0x72: {l: {0x3B: {c: [10847]}}}}}}}, 0x67: {l: {0x65: {l: {0x3B: {c: [8743]}, 0x71: {l: {0x3B: {c: [8793]}}}}}}}}}, 0x69: {l: {0x65: {l: {0x72: {l: {0x70: {l: {0x3B: {c: [8472]}}}}}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120116]}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120168]}}}}}}}, 0x70: {l: {0x3B: {c: [8472]}}}, 0x72: {l: {0x3B: {c: [8768]}, 0x65: {l: {0x61: {l: {0x74: {l: {0x68: {l: {0x3B: {c: [8768]}}}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [120012]}}}}}}}}},
    0x78: {l: {0x63: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [8898]}}}}}, 0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [9711]}}}}}}}, 0x75: {l: {0x70: {l: {0x3B: {c: [8899]}}}}}}}, 0x64: {l: {0x74: {l: {0x72: {l: {0x69: {l: {0x3B: {c: [9661]}}}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120117]}}}}}, 0x68: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [10231]}}}}}}}, 0x41: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [10234]}}}}}}}}}, 0x69: {l: {0x3B: {c: [958]}}}, 0x6C: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [10229]}}}}}}}, 0x41: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [10232]}}}}}}}}}, 0x6D: {l: {0x61: {l: {0x70: {l: {0x3B: {c: [10236]}}}}}}}, 0x6E: {l: {0x69: {l: {0x73: {l: {0x3B: {c: [8955]}}}}}}}, 0x6F: {l: {0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [10752]}}}}}}}, 0x70: {l: {0x66: {l: {0x3B: {c: [120169]}}}, 0x6C: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [10753]}}}}}}}}}, 0x74: {l: {0x69: {l: {0x6D: {l: {0x65: {l: {0x3B: {c: [10754]}}}}}}}}}}}, 0x72: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [10230]}}}}}}}, 0x41: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [10233]}}}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [120013]}}}}}, 0x71: {l: {0x63: {l: {0x75: {l: {0x70: {l: {0x3B: {c: [10758]}}}}}}}}}}}, 0x75: {l: {0x70: {l: {0x6C: {l: {0x75: {l: {0x73: {l: {0x3B: {c: [10756]}}}}}}}}}, 0x74: {l: {0x72: {l: {0x69: {l: {0x3B: {c: [9651]}}}}}}}}}, 0x76: {l: {0x65: {l: {0x65: {l: {0x3B: {c: [8897]}}}}}}}, 0x77: {l: {0x65: {l: {0x64: {l: {0x67: {l: {0x65: {l: {0x3B: {c: [8896]}}}}}}}}}}}}},
    0x58: {l: {0x66: {l: {0x72: {l: {0x3B: {c: [120091]}}}}}, 0x69: {l: {0x3B: {c: [926]}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120143]}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119987]}}}}}}}}},
    0x59: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [221]}}, c: [221]}}}}}}}}}, 0x41: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1071]}}}}}}}, 0x63: {l: {0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [374]}}}}}}}, 0x79: {l: {0x3B: {c: [1067]}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120092]}}}}}, 0x49: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1031]}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120144]}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119988]}}}}}}}, 0x55: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1070]}}}}}}}, 0x75: {l: {0x6D: {l: {0x6C: {l: {0x3B: {c: [376]}}}}}}}}},
    0x79: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [253]}}, c: [253]}}}}}, 0x79: {l: {0x3B: {c: [1103]}}}}}}}, 0x63: {l: {0x69: {l: {0x72: {l: {0x63: {l: {0x3B: {c: [375]}}}}}}}, 0x79: {l: {0x3B: {c: [1099]}}}}}, 0x65: {l: {0x6E: {l: {0x3B: {c: [165]}}, c: [165]}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120118]}}}}}, 0x69: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1111]}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120170]}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [120014]}}}}}}}, 0x75: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1102]}}}}}, 0x6D: {l: {0x6C: {l: {0x3B: {c: [255]}}, c: [255]}}}}}}},
    0x5A: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [377]}}}}}}}}}}}, 0x63: {l: {0x61: {l: {0x72: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [381]}}}}}}}}}, 0x79: {l: {0x3B: {c: [1047]}}}}}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [379]}}}}}}}, 0x65: {l: {0x72: {l: {0x6F: {l: {0x57: {l: {0x69: {l: {0x64: {l: {0x74: {l: {0x68: {l: {0x53: {l: {0x70: {l: {0x61: {l: {0x63: {l: {0x65: {l: {0x3B: {c: [8203]}}}}}}}}}}}}}}}}}}}}}}}}}, 0x74: {l: {0x61: {l: {0x3B: {c: [918]}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [8488]}}}}}, 0x48: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1046]}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [8484]}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [119989]}}}}}}}}},
    0x7A: {l: {0x61: {l: {0x63: {l: {0x75: {l: {0x74: {l: {0x65: {l: {0x3B: {c: [378]}}}}}}}}}}}, 0x63: {l: {0x61: {l: {0x72: {l: {0x6F: {l: {0x6E: {l: {0x3B: {c: [382]}}}}}}}}}, 0x79: {l: {0x3B: {c: [1079]}}}}}, 0x64: {l: {0x6F: {l: {0x74: {l: {0x3B: {c: [380]}}}}}}}, 0x65: {l: {0x65: {l: {0x74: {l: {0x72: {l: {0x66: {l: {0x3B: {c: [8488]}}}}}}}}}, 0x74: {l: {0x61: {l: {0x3B: {c: [950]}}}}}}}, 0x66: {l: {0x72: {l: {0x3B: {c: [120119]}}}}}, 0x68: {l: {0x63: {l: {0x79: {l: {0x3B: {c: [1078]}}}}}}}, 0x69: {l: {0x67: {l: {0x72: {l: {0x61: {l: {0x72: {l: {0x72: {l: {0x3B: {c: [8669]}}}}}}}}}}}}}, 0x6F: {l: {0x70: {l: {0x66: {l: {0x3B: {c: [120171]}}}}}}}, 0x73: {l: {0x63: {l: {0x72: {l: {0x3B: {c: [120015]}}}}}}}, 0x77: {l: {0x6A: {l: {0x3B: {c: [8205]}}}, 0x6E: {l: {0x6A: {l: {0x3B: {c: [8204]}}}}}}}}}
};
},{}],13:[function(require,module,exports){
'use strict';

var UNICODE = require('../common/unicode');

//Aliases
var $ = UNICODE.CODE_POINTS;

//Utils

//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline
//this functions if they will be situated in another module due to context switch.
//Always perform inlining check before modifying this functions ('node --trace-inlining').
function isReservedCodePoint(cp) {
    return cp >= 0xD800 && cp <= 0xDFFF || cp > 0x10FFFF;
}

function isSurrogatePair(cp1, cp2) {
    return cp1 >= 0xD800 && cp1 <= 0xDBFF && cp2 >= 0xDC00 && cp2 <= 0xDFFF;
}

function getSurrogatePairCodePoint(cp1, cp2) {
    return (cp1 - 0xD800) * 0x400 + 0x2400 + cp2;
}

//Preprocessor
//NOTE: HTML input preprocessing
//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)
var Preprocessor = module.exports = function (html) {
    this.write(html);

    //NOTE: one leading U+FEFF BYTE ORDER MARK character must be ignored if any are present in the input stream.
    this.pos = this.html.charCodeAt(0) === $.BOM ? 0 : -1;

    this.gapStack = [];
    this.lastGapPos = -1;
    this.skipNextNewLine = false;
};

Preprocessor.prototype.write = function (html) {
    if (this.html) {
        this.html = this.html.substring(0, this.pos + 1) +
                    html +
                    this.html.substring(this.pos + 1, this.html.length);

    }
    else
        this.html = html;


    this.lastCharPos = this.html.length - 1;
};

Preprocessor.prototype.advanceAndPeekCodePoint = function () {
    this.pos++;

    if (this.pos > this.lastCharPos)
        return $.EOF;

    var cp = this.html.charCodeAt(this.pos);

    //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character
    //must be ignored.
    if (this.skipNextNewLine && cp === $.LINE_FEED) {
        this.skipNextNewLine = false;
        this._addGap();
        return this.advanceAndPeekCodePoint();
    }

    //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters
    if (cp === $.CARRIAGE_RETURN) {
        this.skipNextNewLine = true;
        return $.LINE_FEED;
    }

    this.skipNextNewLine = false;

    //OPTIMIZATION: first perform check if the code point in the allowed range that covers most common
    //HTML input (e.g. ASCII codes) to avoid performance-cost operations for high-range code points.
    return cp >= 0xD800 ? this._processHighRangeCodePoint(cp) : cp;
};

Preprocessor.prototype._processHighRangeCodePoint = function (cp) {
    //NOTE: try to peek a surrogate pair
    if (this.pos !== this.lastCharPos) {
        var nextCp = this.html.charCodeAt(this.pos + 1);

        if (isSurrogatePair(cp, nextCp)) {
            //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.
            this.pos++;
            cp = getSurrogatePairCodePoint(cp, nextCp);

            //NOTE: add gap that should be avoided during retreat
            this._addGap();
        }
    }

    if (isReservedCodePoint(cp))
        cp = $.REPLACEMENT_CHARACTER;

    return cp;
};

Preprocessor.prototype._addGap = function () {
    this.gapStack.push(this.lastGapPos);
    this.lastGapPos = this.pos;
};

Preprocessor.prototype.retreat = function () {
    if (this.pos === this.lastGapPos) {
        this.lastGapPos = this.gapStack.pop();
        this.pos--;
    }

    this.pos--;
};

},{"../common/unicode":5}],14:[function(require,module,exports){
'use strict';

var Preprocessor = require('./preprocessor'),
    UNICODE = require('../common/unicode'),
    NAMED_ENTITY_TRIE = require('./named_entity_trie');

//Aliases
var $ = UNICODE.CODE_POINTS,
    $$ = UNICODE.CODE_POINT_SEQUENCES;

//Replacement code points for numeric entities
var NUMERIC_ENTITY_REPLACEMENTS = {
    0x00: 0xFFFD, 0x0D: 0x000D, 0x80: 0x20AC, 0x81: 0x0081, 0x82: 0x201A, 0x83: 0x0192, 0x84: 0x201E,
    0x85: 0x2026, 0x86: 0x2020, 0x87: 0x2021, 0x88: 0x02C6, 0x89: 0x2030, 0x8A: 0x0160, 0x8B: 0x2039,
    0x8C: 0x0152, 0x8D: 0x008D, 0x8E: 0x017D, 0x8F: 0x008F, 0x90: 0x0090, 0x91: 0x2018, 0x92: 0x2019,
    0x93: 0x201C, 0x94: 0x201D, 0x95: 0x2022, 0x96: 0x2013, 0x97: 0x2014, 0x98: 0x02DC, 0x99: 0x2122,
    0x9A: 0x0161, 0x9B: 0x203A, 0x9C: 0x0153, 0x9D: 0x009D, 0x9E: 0x017E, 0x9F: 0x0178
};

//States
var DATA_STATE = 'DATA_STATE',
    CHARACTER_REFERENCE_IN_DATA_STATE = 'CHARACTER_REFERENCE_IN_DATA_STATE',
    RCDATA_STATE = 'RCDATA_STATE',
    CHARACTER_REFERENCE_IN_RCDATA_STATE = 'CHARACTER_REFERENCE_IN_RCDATA_STATE',
    RAWTEXT_STATE = 'RAWTEXT_STATE',
    SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE',
    PLAINTEXT_STATE = 'PLAINTEXT_STATE',
    TAG_OPEN_STATE = 'TAG_OPEN_STATE',
    END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE',
    TAG_NAME_STATE = 'TAG_NAME_STATE',
    RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE',
    RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE',
    RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE',
    RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE',
    RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE',
    RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE',
    SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE',
    SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE',
    SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE',
    SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE',
    SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE',
    SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE',
    SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE',
    SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE',
    SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE',
    SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE',
    SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE',
    SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE',
    SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE',
    SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE',
    SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE',
    SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE',
    SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE',
    BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE',
    ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE',
    AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE',
    BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE',
    ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE',
    ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE',
    ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE',
    CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE = 'CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE',
    AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE',
    SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE',
    BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE',
    MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE',
    COMMENT_START_STATE = 'COMMENT_START_STATE',
    COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE',
    COMMENT_STATE = 'COMMENT_STATE',
    COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE',
    COMMENT_END_STATE = 'COMMENT_END_STATE',
    COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE',
    DOCTYPE_STATE = 'DOCTYPE_STATE',
    BEFORE_DOCTYPE_NAME_STATE = 'BEFORE_DOCTYPE_NAME_STATE',
    DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE',
    AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE',
    AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = 'AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE',
    BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE',
    DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE',
    DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE',
    AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE',
    BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE',
    AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = 'AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE',
    BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE',
    DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE',
    DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE',
    AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE',
    BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE',
    CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';

//Utils

//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline
//this functions if they will be situated in another module due to context switch.
//Always perform inlining check before modifying this functions ('node --trace-inlining').
function isWhitespace(cp) {
    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;
}

function isAsciiDigit(cp) {
    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;
}

function isAsciiUpper(cp) {
    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;
}

function isAsciiLower(cp) {
    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;
}

function isAsciiAlphaNumeric(cp) {
    return isAsciiDigit(cp) || isAsciiUpper(cp) || isAsciiLower(cp);
}

function isDigit(cp, isHex) {
    return isAsciiDigit(cp) || (isHex && ((cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F) ||
                                          (cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F)));
}

function isReservedCodePoint(cp) {
    return cp >= 0xD800 && cp <= 0xDFFF || cp > 0x10FFFF;
}

function toAsciiLowerCodePoint(cp) {
    return cp + 0x0020;
}

//NOTE: String.fromCharCode() function can handle only characters from BMP subset.
//So, we need to workaround this manually.
//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)
function toChar(cp) {
    if (cp <= 0xFFFF)
        return String.fromCharCode(cp);

    cp -= 0x10000;
    return String.fromCharCode(cp >>> 10 & 0x3FF | 0xD800) + String.fromCharCode(0xDC00 | cp & 0x3FF);
}

function toAsciiLowerChar(cp) {
    return String.fromCharCode(toAsciiLowerCodePoint(cp));
}

//Tokenizer
var Tokenizer = module.exports = function (html) {
    this.preprocessor = new Preprocessor(html);

    this.tokenQueue = [];

    this.allowCDATA = false;

    this.state = DATA_STATE;
    this.returnState = '';

    this.consumptionPos = 0;

    this.tempBuff = [];
    this.additionalAllowedCp = void 0;
    this.lastStartTagName = '';

    this.currentCharacterToken = null;
    this.currentToken = null;
    this.currentAttr = null;
};

//Token types
Tokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';
Tokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';
Tokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';
Tokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';
Tokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';
Tokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';
Tokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';
Tokenizer.EOF_TOKEN = 'EOF_TOKEN';

//States export
Tokenizer.DATA_STATE = DATA_STATE;
Tokenizer.RCDATA_STATE = RCDATA_STATE;
Tokenizer.RAWTEXT_STATE = RAWTEXT_STATE;
Tokenizer.SCRIPT_DATA_STATE = SCRIPT_DATA_STATE;
Tokenizer.PLAINTEXT_STATE = PLAINTEXT_STATE;

//Static
Tokenizer.getTokenAttr = function (token, attrName) {
    for (var i = token.attrs.length - 1; i >= 0; i--) {
        if (token.attrs[i].name === attrName)
            return token.attrs[i].value;
    }

    return null;
};

//Get token
Tokenizer.prototype.getNextToken = function () {
    while (!this.tokenQueue.length)
        this[this.state](this._consume());

    return this.tokenQueue.shift();
};

//Consumption
Tokenizer.prototype._consume = function () {
    this.consumptionPos++;
    return this.preprocessor.advanceAndPeekCodePoint();
};

Tokenizer.prototype._unconsume = function () {
    this.consumptionPos--;
    this.preprocessor.retreat();
};

Tokenizer.prototype._unconsumeSeveral = function (count) {
    while (count--)
        this._unconsume();
};

Tokenizer.prototype._reconsumeInState = function (state) {
    this.state = state;
    this._unconsume();
};

Tokenizer.prototype._consumeSubsequentIfMatch = function (pattern, startCp, caseSensitive) {
    var rollbackPos = this.consumptionPos,
        isMatch = true,
        patternLength = pattern.length,
        patternPos = 0,
        cp = startCp,
        patternCp = void 0;

    for (; patternPos < patternLength; patternPos++) {
        if (patternPos > 0)
            cp = this._consume();

        if (cp === $.EOF) {
            isMatch = false;
            break;
        }

        patternCp = pattern[patternPos];

        if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {
            isMatch = false;
            break;
        }
    }

    if (!isMatch)
        this._unconsumeSeveral(this.consumptionPos - rollbackPos);

    return isMatch;
};

//Lookahead
Tokenizer.prototype._lookahead = function () {
    var cp = this.preprocessor.advanceAndPeekCodePoint();
    this.preprocessor.retreat();

    return cp;
};

//Temp buffer
Tokenizer.prototype.isTempBufferEqualToScriptString = function () {
    if (this.tempBuff.length !== $$.SCRIPT_STRING.length)
        return false;

    for (var i = 0; i < this.tempBuff.length; i++) {
        if (this.tempBuff[i] !== $$.SCRIPT_STRING[i])
            return false;
    }

    return true;
};

//Token creation
Tokenizer.prototype.buildStartTagToken = function (tagName) {
    return {
        type: Tokenizer.START_TAG_TOKEN,
        tagName: tagName,
        selfClosing: false,
        attrs: []
    };
};

Tokenizer.prototype.buildEndTagToken = function (tagName) {
    return {
        type: Tokenizer.END_TAG_TOKEN,
        tagName: tagName,
        ignored: false,
        attrs: []
    };
};

Tokenizer.prototype._createStartTagToken = function (tagNameFirstCh) {
    this.currentToken = this.buildStartTagToken(tagNameFirstCh);
};

Tokenizer.prototype._createEndTagToken = function (tagNameFirstCh) {
    this.currentToken = this.buildEndTagToken(tagNameFirstCh);
};

Tokenizer.prototype._createCommentToken = function () {
    this.currentToken = {
        type: Tokenizer.COMMENT_TOKEN,
        data: ''
    };
};

Tokenizer.prototype._createDoctypeToken = function (doctypeNameFirstCh) {
    this.currentToken = {
        type: Tokenizer.DOCTYPE_TOKEN,
        name: doctypeNameFirstCh || '',
        forceQuirks: false,
        publicId: null,
        systemId: null
    };
};

//Tag attributes
Tokenizer.prototype._createAttr = function (attrNameFirstCh) {
    this.currentAttr = {
        name: attrNameFirstCh,
        value: ''
    };
};

Tokenizer.prototype._isDuplicateAttr = function () {
    return Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) !== null;
};

Tokenizer.prototype._leaveAttrName = function (toState) {
    this.state = toState;

    if (!this._isDuplicateAttr())
        this.currentToken.attrs.push(this.currentAttr);
};

//Appropriate end tag token
//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#appropriate-end-tag-token)
Tokenizer.prototype._isAppropriateEndTagToken = function () {
    return this.lastStartTagName === this.currentToken.tagName;
};

//Token emission
Tokenizer.prototype._emitCurrentToken = function () {
    this._emitCurrentCharacterToken();

    //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.
    if (this.currentToken.type === Tokenizer.START_TAG_TOKEN)
        this.lastStartTagName = this.currentToken.tagName;

    this.tokenQueue.push(this.currentToken);
    this.currentToken = null;
};

Tokenizer.prototype._emitCurrentCharacterToken = function () {
    if (this.currentCharacterToken) {
        this.tokenQueue.push(this.currentCharacterToken);
        this.currentCharacterToken = null;
    }
};

Tokenizer.prototype._emitEOFToken = function () {
    this._emitCurrentCharacterToken();
    this.tokenQueue.push({type: Tokenizer.EOF_TOKEN});
};

//Characters emission

//OPTIMIZATION: specification uses only one type of character tokens (one token per character).
//This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.
//If we have a sequence of characters that belong to the same group, parser can process it
//as a single solid character token.
//So, there are 3 types of character tokens in parse5:
//1)NULL_CHARACTER_TOKEN - \u0000-character sequences (e.g. '\u0000\u0000\u0000')
//2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\n  \r\t   \f')
//3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')
Tokenizer.prototype._appendCharToCurrentCharacterToken = function (type, ch) {
    if (this.currentCharacterToken && this.currentCharacterToken.type !== type)
        this._emitCurrentCharacterToken();

    if (this.currentCharacterToken)
        this.currentCharacterToken.chars += ch;

    else {
        this.currentCharacterToken = {
            type: type,
            chars: ch
        };
    }
};

Tokenizer.prototype._emitCodePoint = function (cp) {
    var type = Tokenizer.CHARACTER_TOKEN;

    if (isWhitespace(cp))
        type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;

    else if (cp === $.NULL)
        type = Tokenizer.NULL_CHARACTER_TOKEN;

    this._appendCharToCurrentCharacterToken(type, toChar(cp));
};

Tokenizer.prototype._emitSeveralCodePoints = function (codePoints) {
    for (var i = 0; i < codePoints.length; i++)
        this._emitCodePoint(codePoints[i]);
};

//NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.
//So we can avoid additional checks here.
Tokenizer.prototype._emitChar = function (ch) {
    this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);
};

//Character reference tokenization
Tokenizer.prototype._consumeNumericEntity = function (isHex) {
    var digits = '',
        nextCp = void 0;

    do {
        digits += toChar(this._consume());
        nextCp = this._lookahead();
    } while (nextCp !== $.EOF && isDigit(nextCp, isHex));

    if (this._lookahead() === $.SEMICOLON)
        this._consume();

    var referencedCp = parseInt(digits, isHex ? 16 : 10),
        replacement = NUMERIC_ENTITY_REPLACEMENTS[referencedCp];

    if (replacement)
        return replacement;

    if (isReservedCodePoint(referencedCp))
        return $.REPLACEMENT_CHARACTER;

    return referencedCp;
};

Tokenizer.prototype._consumeNamedEntity = function (startCp, inAttr) {
    var referencedCodePoints = null,
        entityCodePointsCount = 0,
        cp = startCp,
        leaf = NAMED_ENTITY_TRIE[cp],
        consumedCount = 1,
        semicolonTerminated = false;

    for (; leaf && cp !== $.EOF; cp = this._consume(), consumedCount++, leaf = leaf.l && leaf.l[cp]) {
        if (leaf.c) {
            //NOTE: we have at least one named reference match. But we don't stop lookup at this point,
            //because longer matches still can be found (e.g. '&not' and '&notin;') except the case
            //then found match is terminated by semicolon.
            referencedCodePoints = leaf.c;
            entityCodePointsCount = consumedCount;

            if (cp === $.SEMICOLON) {
                semicolonTerminated = true;
                break;
            }
        }
    }

    if (referencedCodePoints) {
        if (!semicolonTerminated) {
            //NOTE: unconsume excess (e.g. 'it' in '&notit')
            this._unconsumeSeveral(consumedCount - entityCodePointsCount);

            //NOTE: If the character reference is being consumed as part of an attribute and the next character
            //is either a U+003D EQUALS SIGN character (=) or an alphanumeric ASCII character, then, for historical
            //reasons, all the characters that were matched after the U+0026 AMPERSAND character (&) must be
            //unconsumed, and nothing is returned.
            //However, if this next character is in fact a U+003D EQUALS SIGN character (=), then this is a
            //parse error, because some legacy user agents will misinterpret the markup in those cases.
            //(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#tokenizing-character-references)
            if (inAttr) {
                var nextCp = this._lookahead();

                if (nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp)) {
                    this._unconsumeSeveral(entityCodePointsCount);
                    return null;
                }
            }
        }

        return referencedCodePoints;
    }

    this._unconsumeSeveral(consumedCount);

    return null;
};

Tokenizer.prototype._consumeCharacterReference = function (startCp, inAttr) {
    if (isWhitespace(startCp) || startCp === $.GREATER_THAN_SIGN || startCp === $.AMPERSAND ||
        startCp === this.additionalAllowedCp || startCp === $.EOF) {
        //NOTE: not a character reference. No characters are consumed, and nothing is returned.
        this._unconsume();
        return null;
    }

    else if (startCp === $.NUMBER_SIGN) {
        //NOTE: we have a numeric entity candidate, now we should determine if it's hex or decimal
        var isHex = false,
            nextCp = this._lookahead();

        if (nextCp === $.LATIN_SMALL_X || nextCp === $.LATIN_CAPITAL_X) {
            this._consume();
            isHex = true;
        }

        nextCp = this._lookahead();

        //NOTE: if we have at least one digit this is a numeric entity for sure, so we consume it
        if (nextCp !== $.EOF && isDigit(nextCp, isHex))
            return [this._consumeNumericEntity(isHex)];

        else {
            //NOTE: otherwise this is a bogus number entity and a parse error. Unconsume the number sign
            //and the 'x'-character if appropriate.
            this._unconsumeSeveral(isHex ? 2 : 1);
            return null;
        }
    }

    else
        return this._consumeNamedEntity(startCp, inAttr);
};

//State machine
var _ = Tokenizer.prototype;

//12.2.4.1 Data state
//------------------------------------------------------------------
_[DATA_STATE] = function dataState(cp) {
    if (cp === $.AMPERSAND)
        this.state = CHARACTER_REFERENCE_IN_DATA_STATE;

    else if (cp === $.LESS_THAN_SIGN)
        this.state = TAG_OPEN_STATE;

    else if (cp === $.NULL)
        this._emitCodePoint(cp);

    else if (cp === $.EOF)
        this._emitEOFToken();

    else
        this._emitCodePoint(cp);
};


//12.2.4.2 Character reference in data state
//------------------------------------------------------------------
_[CHARACTER_REFERENCE_IN_DATA_STATE] = function characterReferenceInDataState(cp) {
    this.state = DATA_STATE;
    this.additionalAllowedCp = void 0;

    var referencedCodePoints = this._consumeCharacterReference(cp, false);

    if (referencedCodePoints)
        this._emitSeveralCodePoints(referencedCodePoints);
    else
        this._emitChar('&');
};


//12.2.4.3 RCDATA state
//------------------------------------------------------------------
_[RCDATA_STATE] = function rcdataState(cp) {
    if (cp === $.AMPERSAND)
        this.state = CHARACTER_REFERENCE_IN_RCDATA_STATE;

    else if (cp === $.LESS_THAN_SIGN)
        this.state = RCDATA_LESS_THAN_SIGN_STATE;

    else if (cp === $.NULL)
        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);

    else if (cp === $.EOF)
        this._emitEOFToken();

    else
        this._emitCodePoint(cp);
};


//12.2.4.4 Character reference in RCDATA state
//------------------------------------------------------------------
_[CHARACTER_REFERENCE_IN_RCDATA_STATE] = function characterReferenceInRcdataState(cp) {
    this.state = RCDATA_STATE;
    this.additionalAllowedCp = void 0;

    var referencedCodePoints = this._consumeCharacterReference(cp, false);

    if (referencedCodePoints)
        this._emitSeveralCodePoints(referencedCodePoints);
    else
        this._emitChar('&');
};


//12.2.4.5 RAWTEXT state
//------------------------------------------------------------------
_[RAWTEXT_STATE] = function rawtextState(cp) {
    if (cp === $.LESS_THAN_SIGN)
        this.state = RAWTEXT_LESS_THAN_SIGN_STATE;

    else if (cp === $.NULL)
        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);

    else if (cp === $.EOF)
        this._emitEOFToken();

    else
        this._emitCodePoint(cp);
};


//12.2.4.6 Script data state
//------------------------------------------------------------------
_[SCRIPT_DATA_STATE] = function scriptDataState(cp) {
    if (cp === $.LESS_THAN_SIGN)
        this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;

    else if (cp === $.NULL)
        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);

    else if (cp === $.EOF)
        this._emitEOFToken();

    else
        this._emitCodePoint(cp);
};


//12.2.4.7 PLAINTEXT state
//------------------------------------------------------------------
_[PLAINTEXT_STATE] = function plaintextState(cp) {
    if (cp === $.NULL)
        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);

    else if (cp === $.EOF)
        this._emitEOFToken();

    else
        this._emitCodePoint(cp);
};


//12.2.4.8 Tag open state
//------------------------------------------------------------------
_[TAG_OPEN_STATE] = function tagOpenState(cp) {
    if (cp === $.EXCLAMATION_MARK)
        this.state = MARKUP_DECLARATION_OPEN_STATE;

    else if (cp === $.SOLIDUS)
        this.state = END_TAG_OPEN_STATE;

    else if (isAsciiUpper(cp)) {
        this._createStartTagToken(toAsciiLowerChar(cp));
        this.state = TAG_NAME_STATE;
    }

    else if (isAsciiLower(cp)) {
        this._createStartTagToken(toChar(cp));
        this.state = TAG_NAME_STATE;
    }

    else if (cp === $.QUESTION_MARK) {
        //NOTE: call bogus comment state directly with current consumed character to avoid unnecessary reconsumption.
        this[BOGUS_COMMENT_STATE](cp);
    }

    else {
        this._emitChar('<');
        this._reconsumeInState(DATA_STATE);
    }
};


//12.2.4.9 End tag open state
//------------------------------------------------------------------
_[END_TAG_OPEN_STATE] = function endTagOpenState(cp) {
    if (isAsciiUpper(cp)) {
        this._createEndTagToken(toAsciiLowerChar(cp));
        this.state = TAG_NAME_STATE;
    }

    else if (isAsciiLower(cp)) {
        this._createEndTagToken(toChar(cp));
        this.state = TAG_NAME_STATE;
    }

    else if (cp === $.GREATER_THAN_SIGN)
        this.state = DATA_STATE;

    else if (cp === $.EOF) {
        this._reconsumeInState(DATA_STATE);
        this._emitChar('<');
        this._emitChar('/');
    }

    else {
        //NOTE: call bogus comment state directly with current consumed character to avoid unnecessary reconsumption.
        this[BOGUS_COMMENT_STATE](cp);
    }
};


//12.2.4.10 Tag name state
//------------------------------------------------------------------
_[TAG_NAME_STATE] = function tagNameState(cp) {
    if (isWhitespace(cp))
        this.state = BEFORE_ATTRIBUTE_NAME_STATE;

    else if (cp === $.SOLIDUS)
        this.state = SELF_CLOSING_START_TAG_STATE;

    else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;
        this._emitCurrentToken();
    }

    else if (isAsciiUpper(cp))
        this.currentToken.tagName += toAsciiLowerChar(cp);

    else if (cp === $.NULL)
        this.currentToken.tagName += UNICODE.REPLACEMENT_CHARACTER;

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else
        this.currentToken.tagName += toChar(cp);
};


//12.2.4.11 RCDATA less-than sign state
//------------------------------------------------------------------
_[RCDATA_LESS_THAN_SIGN_STATE] = function rcdataLessThanSignState(cp) {
    if (cp === $.SOLIDUS) {
        this.tempBuff = [];
        this.state = RCDATA_END_TAG_OPEN_STATE;
    }

    else {
        this._emitChar('<');
        this._reconsumeInState(RCDATA_STATE);
    }
};


//12.2.4.12 RCDATA end tag open state
//------------------------------------------------------------------
_[RCDATA_END_TAG_OPEN_STATE] = function rcdataEndTagOpenState(cp) {
    if (isAsciiUpper(cp)) {
        this._createEndTagToken(toAsciiLowerChar(cp));
        this.tempBuff.push(cp);
        this.state = RCDATA_END_TAG_NAME_STATE;
    }

    else if (isAsciiLower(cp)) {
        this._createEndTagToken(toChar(cp));
        this.tempBuff.push(cp);
        this.state = RCDATA_END_TAG_NAME_STATE;
    }

    else {
        this._emitChar('<');
        this._emitChar('/');
        this._reconsumeInState(RCDATA_STATE);
    }
};


//12.2.4.13 RCDATA end tag name state
//------------------------------------------------------------------
_[RCDATA_END_TAG_NAME_STATE] = function rcdataEndTagNameState(cp) {
    if (isAsciiUpper(cp)) {
        this.currentToken.tagName += toAsciiLowerChar(cp);
        this.tempBuff.push(cp);
    }

    else if (isAsciiLower(cp)) {
        this.currentToken.tagName += toChar(cp);
        this.tempBuff.push(cp);
    }

    else {
        if (this._isAppropriateEndTagToken()) {
            if (isWhitespace(cp)) {
                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                return;
            }

            if (cp === $.SOLIDUS) {
                this.state = SELF_CLOSING_START_TAG_STATE;
                return;
            }

            if (cp === $.GREATER_THAN_SIGN) {
                this.state = DATA_STATE;
                this._emitCurrentToken();
                return;
            }
        }

        this._emitChar('<');
        this._emitChar('/');
        this._emitSeveralCodePoints(this.tempBuff);
        this._reconsumeInState(RCDATA_STATE);
    }
};


//12.2.4.14 RAWTEXT less-than sign state
//------------------------------------------------------------------
_[RAWTEXT_LESS_THAN_SIGN_STATE] = function rawtextLessThanSignState(cp) {
    if (cp === $.SOLIDUS) {
        this.tempBuff = [];
        this.state = RAWTEXT_END_TAG_OPEN_STATE;
    }

    else {
        this._emitChar('<');
        this._reconsumeInState(RAWTEXT_STATE);
    }
};


//12.2.4.15 RAWTEXT end tag open state
//------------------------------------------------------------------
_[RAWTEXT_END_TAG_OPEN_STATE] = function rawtextEndTagOpenState(cp) {
    if (isAsciiUpper(cp)) {
        this._createEndTagToken(toAsciiLowerChar(cp));
        this.tempBuff.push(cp);
        this.state = RAWTEXT_END_TAG_NAME_STATE;
    }

    else if (isAsciiLower(cp)) {
        this._createEndTagToken(toChar(cp));
        this.tempBuff.push(cp);
        this.state = RAWTEXT_END_TAG_NAME_STATE;
    }

    else {
        this._emitChar('<');
        this._emitChar('/');
        this._reconsumeInState(RAWTEXT_STATE);
    }
};


//12.2.4.16 RAWTEXT end tag name state
//------------------------------------------------------------------
_[RAWTEXT_END_TAG_NAME_STATE] = function rawtextEndTagNameState(cp) {
    if (isAsciiUpper(cp)) {
        this.currentToken.tagName += toAsciiLowerChar(cp);
        this.tempBuff.push(cp);
    }

    else if (isAsciiLower(cp)) {
        this.currentToken.tagName += toChar(cp);
        this.tempBuff.push(cp);
    }

    else {
        if (this._isAppropriateEndTagToken()) {
            if (isWhitespace(cp)) {
                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                return;
            }

            if (cp === $.SOLIDUS) {
                this.state = SELF_CLOSING_START_TAG_STATE;
                return;
            }

            if (cp === $.GREATER_THAN_SIGN) {
                this._emitCurrentToken();
                this.state = DATA_STATE;
                return;
            }
        }

        this._emitChar('<');
        this._emitChar('/');
        this._emitSeveralCodePoints(this.tempBuff);
        this._reconsumeInState(RAWTEXT_STATE);
    }
};


//12.2.4.17 Script data less-than sign state
//------------------------------------------------------------------
_[SCRIPT_DATA_LESS_THAN_SIGN_STATE] = function scriptDataLessThanSignState(cp) {
    if (cp === $.SOLIDUS) {
        this.tempBuff = [];
        this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;
    }

    else if (cp === $.EXCLAMATION_MARK) {
        this.state = SCRIPT_DATA_ESCAPE_START_STATE;
        this._emitChar('<');
        this._emitChar('!');
    }

    else {
        this._emitChar('<');
        this._reconsumeInState(SCRIPT_DATA_STATE);
    }
};


//12.2.4.18 Script data end tag open state
//------------------------------------------------------------------
_[SCRIPT_DATA_END_TAG_OPEN_STATE] = function scriptDataEndTagOpenState(cp) {
    if (isAsciiUpper(cp)) {
        this._createEndTagToken(toAsciiLowerChar(cp));
        this.tempBuff.push(cp);
        this.state = SCRIPT_DATA_END_TAG_NAME_STATE;
    }

    else if (isAsciiLower(cp)) {
        this._createEndTagToken(toChar(cp));
        this.tempBuff.push(cp);
        this.state = SCRIPT_DATA_END_TAG_NAME_STATE;
    }

    else {
        this._emitChar('<');
        this._emitChar('/');
        this._reconsumeInState(SCRIPT_DATA_STATE);
    }
};


//12.2.4.19 Script data end tag name state
//------------------------------------------------------------------
_[SCRIPT_DATA_END_TAG_NAME_STATE] = function scriptDataEndTagNameState(cp) {
    if (isAsciiUpper(cp)) {
        this.currentToken.tagName += toAsciiLowerChar(cp);
        this.tempBuff.push(cp);
    }

    else if (isAsciiLower(cp)) {
        this.currentToken.tagName += toChar(cp);
        this.tempBuff.push(cp);
    }

    else {
        if (this._isAppropriateEndTagToken()) {
            if (isWhitespace(cp)) {
                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                return;
            }

            else if (cp === $.SOLIDUS) {
                this.state = SELF_CLOSING_START_TAG_STATE;
                return;
            }

            else if (cp === $.GREATER_THAN_SIGN) {
                this._emitCurrentToken();
                this.state = DATA_STATE;
                return;
            }
        }

        this._emitChar('<');
        this._emitChar('/');
        this._emitSeveralCodePoints(this.tempBuff);
        this._reconsumeInState(SCRIPT_DATA_STATE);
    }
};


//12.2.4.20 Script data escape start state
//------------------------------------------------------------------
_[SCRIPT_DATA_ESCAPE_START_STATE] = function scriptDataEscapeStartState(cp) {
    if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;
        this._emitChar('-');
    }

    else
        this._reconsumeInState(SCRIPT_DATA_STATE);
};


//12.2.4.21 Script data escape start dash state
//------------------------------------------------------------------
_[SCRIPT_DATA_ESCAPE_START_DASH_STATE] = function scriptDataEscapeStartDashState(cp) {
    if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
        this._emitChar('-');
    }

    else
        this._reconsumeInState(SCRIPT_DATA_STATE);
};


//12.2.4.22 Script data escaped state
//------------------------------------------------------------------
_[SCRIPT_DATA_ESCAPED_STATE] = function scriptDataEscapedState(cp) {
    if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;
        this._emitChar('-');
    }

    else if (cp === $.LESS_THAN_SIGN)
        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;

    else if (cp === $.NULL)
        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else
        this._emitCodePoint(cp);
};


//12.2.4.23 Script data escaped dash state
//------------------------------------------------------------------
_[SCRIPT_DATA_ESCAPED_DASH_STATE] = function scriptDataEscapedDashState(cp) {
    if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
        this._emitChar('-');
    }

    else if (cp === $.LESS_THAN_SIGN)
        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;

    else if (cp === $.NULL) {
        this.state = SCRIPT_DATA_ESCAPED_STATE;
        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
    }

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else {
        this.state = SCRIPT_DATA_ESCAPED_STATE;
        this._emitCodePoint(cp);
    }
};


//12.2.4.24 Script data escaped dash dash state
//------------------------------------------------------------------
_[SCRIPT_DATA_ESCAPED_DASH_DASH_STATE] = function scriptDataEscapedDashDashState(cp) {
    if (cp === $.HYPHEN_MINUS)
        this._emitChar('-');

    else if (cp === $.LESS_THAN_SIGN)
        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;

    else if (cp === $.GREATER_THAN_SIGN) {
        this.state = SCRIPT_DATA_STATE;
        this._emitChar('>');
    }

    else if (cp === $.NULL) {
        this.state = SCRIPT_DATA_ESCAPED_STATE;
        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
    }

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else {
        this.state = SCRIPT_DATA_ESCAPED_STATE;
        this._emitCodePoint(cp);
    }
};


//12.2.4.25 Script data escaped less-than sign state
//------------------------------------------------------------------
_[SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE] = function scriptDataEscapedLessThanSignState(cp) {
    if (cp === $.SOLIDUS) {
        this.tempBuff = [];
        this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;
    }

    else if (isAsciiUpper(cp)) {
        this.tempBuff = [];
        this.tempBuff.push(toAsciiLowerCodePoint(cp));
        this.state = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;
        this._emitChar('<');
        this._emitCodePoint(cp);
    }

    else if (isAsciiLower(cp)) {
        this.tempBuff = [];
        this.tempBuff.push(cp);
        this.state = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;
        this._emitChar('<');
        this._emitCodePoint(cp);
    }

    else {
        this._emitChar('<');
        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
    }
};


//12.2.4.26 Script data escaped end tag open state
//------------------------------------------------------------------
_[SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE] = function scriptDataEscapedEndTagOpenState(cp) {
    if (isAsciiUpper(cp)) {
        this._createEndTagToken(toAsciiLowerChar(cp));
        this.tempBuff.push(cp);
        this.state = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;
    }

    else if (isAsciiLower(cp)) {
        this._createEndTagToken(toChar(cp));
        this.tempBuff.push(cp);
        this.state = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;
    }

    else {
        this._emitChar('<');
        this._emitChar('/');
        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
    }
};


//12.2.4.27 Script data escaped end tag name state
//------------------------------------------------------------------
_[SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE] = function scriptDataEscapedEndTagNameState(cp) {
    if (isAsciiUpper(cp)) {
        this.currentToken.tagName += toAsciiLowerChar(cp);
        this.tempBuff.push(cp);
    }

    else if (isAsciiLower(cp)) {
        this.currentToken.tagName += toChar(cp);
        this.tempBuff.push(cp);
    }

    else {
        if (this._isAppropriateEndTagToken()) {
            if (isWhitespace(cp)) {
                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                return;
            }

            if (cp === $.SOLIDUS) {
                this.state = SELF_CLOSING_START_TAG_STATE;
                return;
            }

            if (cp === $.GREATER_THAN_SIGN) {
                this._emitCurrentToken();
                this.state = DATA_STATE;
                return;
            }
        }

        this._emitChar('<');
        this._emitChar('/');
        this._emitSeveralCodePoints(this.tempBuff);
        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
    }
};


//12.2.4.28 Script data double escape start state
//------------------------------------------------------------------
_[SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE] = function scriptDataDoubleEscapeStartState(cp) {
    if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
        this.state = this.isTempBufferEqualToScriptString() ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE : SCRIPT_DATA_ESCAPED_STATE;
        this._emitCodePoint(cp);
    }

    else if (isAsciiUpper(cp)) {
        this.tempBuff.push(toAsciiLowerCodePoint(cp));
        this._emitCodePoint(cp);
    }

    else if (isAsciiLower(cp)) {
        this.tempBuff.push(cp);
        this._emitCodePoint(cp);
    }

    else
        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
};


//12.2.4.29 Script data double escaped state
//------------------------------------------------------------------
_[SCRIPT_DATA_DOUBLE_ESCAPED_STATE] = function scriptDataDoubleEscapedState(cp) {
    if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;
        this._emitChar('-');
    }

    else if (cp === $.LESS_THAN_SIGN) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
        this._emitChar('<');
    }

    else if (cp === $.NULL)
        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else
        this._emitCodePoint(cp);
};


//12.2.4.30 Script data double escaped dash state
//------------------------------------------------------------------
_[SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE] = function scriptDataDoubleEscapedDashState(cp) {
    if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;
        this._emitChar('-');
    }

    else if (cp === $.LESS_THAN_SIGN) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
        this._emitChar('<');
    }

    else if (cp === $.NULL) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
    }

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
        this._emitCodePoint(cp);
    }
};


//12.2.4.31 Script data double escaped dash dash state
//------------------------------------------------------------------
_[SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE] = function scriptDataDoubleEscapedDashDashState(cp) {
    if (cp === $.HYPHEN_MINUS)
        this._emitChar('-');

    else if (cp === $.LESS_THAN_SIGN) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
        this._emitChar('<');
    }

    else if (cp === $.GREATER_THAN_SIGN) {
        this.state = SCRIPT_DATA_STATE;
        this._emitChar('>');
    }

    else if (cp === $.NULL) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
    }

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
        this._emitCodePoint(cp);
    }
};


//12.2.4.32 Script data double escaped less-than sign state
//------------------------------------------------------------------
_[SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE] = function scriptDataDoubleEscapedLessThanSignState(cp) {
    if (cp === $.SOLIDUS) {
        this.tempBuff = [];
        this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;
        this._emitChar('/');
    }

    else
        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
};


//12.2.4.33 Script data double escape end state
//------------------------------------------------------------------
_[SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE] = function scriptDataDoubleEscapeEndState(cp) {
    if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
        this.state = this.isTempBufferEqualToScriptString() ? SCRIPT_DATA_ESCAPED_STATE : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;

        this._emitCodePoint(cp);
    }

    else if (isAsciiUpper(cp)) {
        this.tempBuff.push(toAsciiLowerCodePoint(cp));
        this._emitCodePoint(cp);
    }

    else if (isAsciiLower(cp)) {
        this.tempBuff.push(cp);
        this._emitCodePoint(cp);
    }

    else
        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
};


//12.2.4.34 Before attribute name state
//------------------------------------------------------------------
_[BEFORE_ATTRIBUTE_NAME_STATE] = function beforeAttributeNameState(cp) {
    if (isWhitespace(cp))
        return;

    if (cp === $.SOLIDUS)
        this.state = SELF_CLOSING_START_TAG_STATE;

    else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;
        this._emitCurrentToken();
    }

    else if (isAsciiUpper(cp)) {
        this._createAttr(toAsciiLowerChar(cp));
        this.state = ATTRIBUTE_NAME_STATE;
    }

    else if (cp === $.NULL) {
        this._createAttr(UNICODE.REPLACEMENT_CHARACTER);
        this.state = ATTRIBUTE_NAME_STATE;
    }

    else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN) {
        this._createAttr(toChar(cp));
        this.state = ATTRIBUTE_NAME_STATE;
    }

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else {
        this._createAttr(toChar(cp));
        this.state = ATTRIBUTE_NAME_STATE;
    }
};


//12.2.4.35 Attribute name state
//------------------------------------------------------------------
_[ATTRIBUTE_NAME_STATE] = function attributeNameState(cp) {
    if (isWhitespace(cp))
        this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);

    else if (cp === $.SOLIDUS)
        this._leaveAttrName(SELF_CLOSING_START_TAG_STATE);

    else if (cp === $.EQUALS_SIGN)
        this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);

    else if (cp === $.GREATER_THAN_SIGN) {
        this._leaveAttrName(DATA_STATE);
        this._emitCurrentToken();
    }

    else if (isAsciiUpper(cp))
        this.currentAttr.name += toAsciiLowerChar(cp);

    else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN)
        this.currentAttr.name += toChar(cp);

    else if (cp === $.NULL)
        this.currentAttr.name += UNICODE.REPLACEMENT_CHARACTER;

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else
        this.currentAttr.name += toChar(cp);
};


//12.2.4.36 After attribute name state
//------------------------------------------------------------------
_[AFTER_ATTRIBUTE_NAME_STATE] = function afterAttributeNameState(cp) {
    if (isWhitespace(cp))
        return;

    if (cp === $.SOLIDUS)
        this.state = SELF_CLOSING_START_TAG_STATE;

    else if (cp === $.EQUALS_SIGN)
        this.state = BEFORE_ATTRIBUTE_VALUE_STATE;

    else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;
        this._emitCurrentToken();
    }

    else if (isAsciiUpper(cp)) {
        this._createAttr(toAsciiLowerChar(cp));
        this.state = ATTRIBUTE_NAME_STATE;
    }

    else if (cp === $.NULL) {
        this._createAttr(UNICODE.REPLACEMENT_CHARACTER);
        this.state = ATTRIBUTE_NAME_STATE;
    }

    else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {
        this._createAttr(toChar(cp));
        this.state = ATTRIBUTE_NAME_STATE;
    }

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else {
        this._createAttr(toChar(cp));
        this.state = ATTRIBUTE_NAME_STATE;
    }
};


//12.2.4.37 Before attribute value state
//------------------------------------------------------------------
_[BEFORE_ATTRIBUTE_VALUE_STATE] = function beforeAttributeValueState(cp) {
    if (isWhitespace(cp))
        return;

    if (cp === $.QUOTATION_MARK)
        this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;

    else if (cp === $.AMPERSAND)
        this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);

    else if (cp === $.APOSTROPHE)
        this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;

    else if (cp === $.NULL) {
        this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER;
        this.state = ATTRIBUTE_VALUE_UNQUOTED_STATE;
    }

    else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;
        this._emitCurrentToken();
    }

    else if (cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) {
        this.currentAttr.value += toChar(cp);
        this.state = ATTRIBUTE_VALUE_UNQUOTED_STATE;
    }

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else {
        this.currentAttr.value += toChar(cp);
        this.state = ATTRIBUTE_VALUE_UNQUOTED_STATE;
    }
};


//12.2.4.38 Attribute value (double-quoted) state
//------------------------------------------------------------------
_[ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE] = function attributeValueDoubleQuotedState(cp) {
    if (cp === $.QUOTATION_MARK)
        this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;

    else if (cp === $.AMPERSAND) {
        this.additionalAllowedCp = $.QUOTATION_MARK;
        this.returnState = this.state;
        this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
    }

    else if (cp === $.NULL)
        this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER;

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else
        this.currentAttr.value += toChar(cp);
};


//12.2.4.39 Attribute value (single-quoted) state
//------------------------------------------------------------------
_[ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE] = function attributeValueSingleQuotedState(cp) {
    if (cp === $.APOSTROPHE)
        this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;

    else if (cp === $.AMPERSAND) {
        this.additionalAllowedCp = $.APOSTROPHE;
        this.returnState = this.state;
        this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
    }

    else if (cp === $.NULL)
        this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER;

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else
        this.currentAttr.value += toChar(cp);
};


//12.2.4.40 Attribute value (unquoted) state
//------------------------------------------------------------------
_[ATTRIBUTE_VALUE_UNQUOTED_STATE] = function attributeValueUnquotedState(cp) {
    if (isWhitespace(cp))
        this.state = BEFORE_ATTRIBUTE_NAME_STATE;

    else if (cp === $.AMPERSAND) {
        this.additionalAllowedCp = $.GREATER_THAN_SIGN;
        this.returnState = this.state;
        this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
    }

    else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;
        this._emitCurrentToken();
    }

    else if (cp === $.NULL)
        this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER;

    else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN ||
             cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) {
        this.currentAttr.value += toChar(cp);
    }

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else
        this.currentAttr.value += toChar(cp);
};


//12.2.4.41 Character reference in attribute value state
//------------------------------------------------------------------
_[CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE] = function characterReferenceInAttributeValueState(cp) {
    var referencedCodePoints = this._consumeCharacterReference(cp, true);

    if (referencedCodePoints) {
        for (var i = 0; i < referencedCodePoints.length; i++)
            this.currentAttr.value += toChar(referencedCodePoints[i]);
    } else
        this.currentAttr.value += '&';

    this.state = this.returnState;
};


//12.2.4.42 After attribute value (quoted) state
//------------------------------------------------------------------
_[AFTER_ATTRIBUTE_VALUE_QUOTED_STATE] = function afterAttributeValueQuotedState(cp) {
    if (isWhitespace(cp))
        this.state = BEFORE_ATTRIBUTE_NAME_STATE;

    else if (cp === $.SOLIDUS)
        this.state = SELF_CLOSING_START_TAG_STATE;

    else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;
        this._emitCurrentToken();
    }

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else
        this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
};


//12.2.4.43 Self-closing start tag state
//------------------------------------------------------------------
_[SELF_CLOSING_START_TAG_STATE] = function selfClosingStartTagState(cp) {
    if (cp === $.GREATER_THAN_SIGN) {
        this.currentToken.selfClosing = true;
        this.state = DATA_STATE;
        this._emitCurrentToken();
    }

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else
        this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
};


//12.2.4.44 Bogus comment state
//------------------------------------------------------------------
_[BOGUS_COMMENT_STATE] = function bogusCommentState(cp) {
    this._createCommentToken();

    while (true) {
        if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            break;
        }

        else if (cp === $.EOF) {
            this._reconsumeInState(DATA_STATE);
            break;
        }

        else {
            this.currentToken.data += cp === $.NULL ? UNICODE.REPLACEMENT_CHARACTER : toChar(cp);
            cp = this._consume();
        }
    }

    this._emitCurrentToken();
};


//12.2.4.45 Markup declaration open state
//------------------------------------------------------------------
_[MARKUP_DECLARATION_OPEN_STATE] = function markupDeclarationOpenState(cp) {
    if (this._consumeSubsequentIfMatch($$.DASH_DASH_STRING, cp, true)) {
        this._createCommentToken();
        this.state = COMMENT_START_STATE;
    }

    else if (this._consumeSubsequentIfMatch($$.DOCTYPE_STRING, cp, false))
        this.state = DOCTYPE_STATE;

    else if (this.allowCDATA && this._consumeSubsequentIfMatch($$.CDATA_START_STRING, cp, true))
        this.state = CDATA_SECTION_STATE;

    else {
        //NOTE: call bogus comment state directly with current consumed character to avoid unnecessary reconsumption.
        this[BOGUS_COMMENT_STATE](cp);
    }
};


//12.2.4.46 Comment start state
//------------------------------------------------------------------
_[COMMENT_START_STATE] = function commentStartState(cp) {
    if (cp === $.HYPHEN_MINUS)
        this.state = COMMENT_START_DASH_STATE;

    else if (cp === $.NULL) {
        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
        this.state = COMMENT_STATE;
    }

    else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;
        this._emitCurrentToken();
    }

    else if (cp === $.EOF) {
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else {
        this.currentToken.data += toChar(cp);
        this.state = COMMENT_STATE;
    }
};


//12.2.4.47 Comment start dash state
//------------------------------------------------------------------
_[COMMENT_START_DASH_STATE] = function commentStartDashState(cp) {
    if (cp === $.HYPHEN_MINUS)
        this.state = COMMENT_END_STATE;

    else if (cp === $.NULL) {
        this.currentToken.data += '-';
        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
        this.state = COMMENT_STATE;
    }

    else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;
        this._emitCurrentToken();
    }

    else if (cp === $.EOF) {
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else {
        this.currentToken.data += '-';
        this.currentToken.data += toChar(cp);
        this.state = COMMENT_STATE;
    }
};


//12.2.4.48 Comment state
//------------------------------------------------------------------
_[COMMENT_STATE] = function commentState(cp) {
    if (cp === $.HYPHEN_MINUS)
        this.state = COMMENT_END_DASH_STATE;

    else if (cp === $.NULL)
        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;

    else if (cp === $.EOF) {
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else
        this.currentToken.data += toChar(cp);
};


//12.2.4.49 Comment end dash state
//------------------------------------------------------------------
_[COMMENT_END_DASH_STATE] = function commentEndDashState(cp) {
    if (cp === $.HYPHEN_MINUS)
        this.state = COMMENT_END_STATE;

    else if (cp === $.NULL) {
        this.currentToken.data += '-';
        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
        this.state = COMMENT_STATE;
    }

    else if (cp === $.EOF) {
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else {
        this.currentToken.data += '-';
        this.currentToken.data += toChar(cp);
        this.state = COMMENT_STATE;
    }
};


//12.2.4.50 Comment end state
//------------------------------------------------------------------
_[COMMENT_END_STATE] = function commentEndState(cp) {
    if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;
        this._emitCurrentToken();
    }

    else if (cp === $.EXCLAMATION_MARK)
        this.state = COMMENT_END_BANG_STATE;

    else if (cp === $.HYPHEN_MINUS)
        this.currentToken.data += '-';

    else if (cp === $.NULL) {
        this.currentToken.data += '--';
        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
        this.state = COMMENT_STATE;
    }

    else if (cp === $.EOF) {
        this._reconsumeInState(DATA_STATE);
        this._emitCurrentToken();
    }

    else {
        this.currentToken.data += '--';
        this.currentToken.data += toChar(cp);
        this.state = COMMENT_STATE;
    }
};


//12.2.4.51 Comment end bang state
//------------------------------------------------------------------
_[COMMENT_END_BANG_STATE] = function commentEndBangState(cp) {
    if (cp === $.HYPHEN_MINUS) {
        this.currentToken.data += '--!';
        this.state = COMMENT_END_DASH_STATE;
    }

    else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;
        this._emitCurrentToken();
    }

    else if (cp === $.NULL) {
        this.currentToken.data += '--!';
        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
        this.state = COMMENT_STATE;
    }

    else if (cp === $.EOF) {
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else {
        this.currentToken.data += '--!';
        this.currentToken.data += toChar(cp);
        this.state = COMMENT_STATE;
    }
};


//12.2.4.52 DOCTYPE state
//------------------------------------------------------------------
_[DOCTYPE_STATE] = function doctypeState(cp) {
    if (isWhitespace(cp))
        this.state = BEFORE_DOCTYPE_NAME_STATE;

    else if (cp === $.EOF) {
        this._createDoctypeToken();
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else
        this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
};


//12.2.4.53 Before DOCTYPE name state
//------------------------------------------------------------------
_[BEFORE_DOCTYPE_NAME_STATE] = function beforeDoctypeNameState(cp) {
    if (isWhitespace(cp))
        return;

    if (isAsciiUpper(cp)) {
        this._createDoctypeToken(toAsciiLowerChar(cp));
        this.state = DOCTYPE_NAME_STATE;
    }

    else if (cp === $.GREATER_THAN_SIGN) {
        this._createDoctypeToken();
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (cp === $.EOF) {
        this._createDoctypeToken();
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else if (cp === $.NULL) {
        this._createDoctypeToken(UNICODE.REPLACEMENT_CHARACTER);
        this.state = DOCTYPE_NAME_STATE;
    }

    else {
        this._createDoctypeToken(toChar(cp));
        this.state = DOCTYPE_NAME_STATE;
    }
};


//12.2.4.54 DOCTYPE name state
//------------------------------------------------------------------
_[DOCTYPE_NAME_STATE] = function doctypeNameState(cp) {
    if (isWhitespace(cp))
        this.state = AFTER_DOCTYPE_NAME_STATE;

    else if (cp === $.GREATER_THAN_SIGN) {
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (isAsciiUpper(cp))
        this.currentToken.name += toAsciiLowerChar(cp);

    else if (cp === $.NULL)
        this.currentToken.name += UNICODE.REPLACEMENT_CHARACTER;

    else if (cp === $.EOF) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else
        this.currentToken.name += toChar(cp);
};


//12.2.4.55 After DOCTYPE name state
//------------------------------------------------------------------
_[AFTER_DOCTYPE_NAME_STATE] = function afterDoctypeNameState(cp) {
    if (isWhitespace(cp))
        return;

    if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;
        this._emitCurrentToken();
    }

    else if (cp === $.EOF) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else if (this._consumeSubsequentIfMatch($$.PUBLIC_STRING, cp, false))
        this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;

    else if (this._consumeSubsequentIfMatch($$.SYSTEM_STRING, cp, false))
        this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;

    else {
        this.currentToken.forceQuirks = true;
        this.state = BOGUS_DOCTYPE_STATE;
    }
};


//12.2.4.56 After DOCTYPE public keyword state
//------------------------------------------------------------------
_[AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE] = function afterDoctypePublicKeywordState(cp) {
    if (isWhitespace(cp))
        this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;

    else if (cp === $.QUOTATION_MARK) {
        this.currentToken.publicId = '';
        this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
    }

    else if (cp === $.APOSTROPHE) {
        this.currentToken.publicId = '';
        this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
    }

    else if (cp === $.GREATER_THAN_SIGN) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (cp === $.EOF) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else {
        this.currentToken.forceQuirks = true;
        this.state = BOGUS_DOCTYPE_STATE;
    }
};


//12.2.4.57 Before DOCTYPE public identifier state
//------------------------------------------------------------------
_[BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE] = function beforeDoctypePublicIdentifierState(cp) {
    if (isWhitespace(cp))
        return;

    if (cp === $.QUOTATION_MARK) {
        this.currentToken.publicId = '';
        this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
    }

    else if (cp === $.APOSTROPHE) {
        this.currentToken.publicId = '';
        this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
    }

    else if (cp === $.GREATER_THAN_SIGN) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (cp === $.EOF) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else {
        this.currentToken.forceQuirks = true;
        this.state = BOGUS_DOCTYPE_STATE;
    }
};


//12.2.4.58 DOCTYPE public identifier (double-quoted) state
//------------------------------------------------------------------
_[DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE] = function doctypePublicIdentifierDoubleQuotedState(cp) {
    if (cp === $.QUOTATION_MARK)
        this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;

    else if (cp === $.NULL)
        this.currentToken.publicId += UNICODE.REPLACEMENT_CHARACTER;

    else if (cp === $.GREATER_THAN_SIGN) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (cp === $.EOF) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else
        this.currentToken.publicId += toChar(cp);
};


//12.2.4.59 DOCTYPE public identifier (single-quoted) state
//------------------------------------------------------------------
_[DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE] = function doctypePublicIdentifierSingleQuotedState(cp) {
    if (cp === $.APOSTROPHE)
        this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;

    else if (cp === $.NULL)
        this.currentToken.publicId += UNICODE.REPLACEMENT_CHARACTER;

    else if (cp === $.GREATER_THAN_SIGN) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (cp === $.EOF) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else
        this.currentToken.publicId += toChar(cp);
};


//12.2.4.60 After DOCTYPE public identifier state
//------------------------------------------------------------------
_[AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE] = function afterDoctypePublicIdentifierState(cp) {
    if (isWhitespace(cp))
        this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;

    else if (cp === $.GREATER_THAN_SIGN) {
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (cp === $.QUOTATION_MARK) {
        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
    }

    else if (cp === $.APOSTROPHE) {
        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
    }

    else if (cp === $.EOF) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else {
        this.currentToken.forceQuirks = true;
        this.state = BOGUS_DOCTYPE_STATE;
    }
};


//12.2.4.61 Between DOCTYPE public and system identifiers state
//------------------------------------------------------------------
_[BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE] = function betweenDoctypePublicAndSystemIdentifiersState(cp) {
    if (isWhitespace(cp))
        return;

    if (cp === $.GREATER_THAN_SIGN) {
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (cp === $.QUOTATION_MARK) {
        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
    }


    else if (cp === $.APOSTROPHE) {
        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
    }

    else if (cp === $.EOF) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else {
        this.currentToken.forceQuirks = true;
        this.state = BOGUS_DOCTYPE_STATE;
    }
};


//12.2.4.62 After DOCTYPE system keyword state
//------------------------------------------------------------------
_[AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE] = function afterDoctypeSystemKeywordState(cp) {
    if (isWhitespace(cp))
        this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;

    else if (cp === $.QUOTATION_MARK) {
        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
    }

    else if (cp === $.APOSTROPHE) {
        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
    }

    else if (cp === $.GREATER_THAN_SIGN) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (cp === $.EOF) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else {
        this.currentToken.forceQuirks = true;
        this.state = BOGUS_DOCTYPE_STATE;
    }
};


//12.2.4.63 Before DOCTYPE system identifier state
//------------------------------------------------------------------
_[BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE] = function beforeDoctypeSystemIdentifierState(cp) {
    if (isWhitespace(cp))
        return;

    if (cp === $.QUOTATION_MARK) {
        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
    }

    else if (cp === $.APOSTROPHE) {
        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
    }

    else if (cp === $.GREATER_THAN_SIGN) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (cp === $.EOF) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else {
        this.currentToken.forceQuirks = true;
        this.state = BOGUS_DOCTYPE_STATE;
    }
};


//12.2.4.64 DOCTYPE system identifier (double-quoted) state
//------------------------------------------------------------------
_[DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE] = function doctypeSystemIdentifierDoubleQuotedState(cp) {
    if (cp === $.QUOTATION_MARK)
        this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;

    else if (cp === $.GREATER_THAN_SIGN) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (cp === $.NULL)
        this.currentToken.systemId += UNICODE.REPLACEMENT_CHARACTER;

    else if (cp === $.EOF) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else
        this.currentToken.systemId += toChar(cp);
};


//12.2.4.65 DOCTYPE system identifier (single-quoted) state
//------------------------------------------------------------------
_[DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE] = function doctypeSystemIdentifierSingleQuotedState(cp) {
    if (cp === $.APOSTROPHE)
        this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;

    else if (cp === $.GREATER_THAN_SIGN) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (cp === $.NULL)
        this.currentToken.systemId += UNICODE.REPLACEMENT_CHARACTER;

    else if (cp === $.EOF) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else
        this.currentToken.systemId += toChar(cp);
};


//12.2.4.66 After DOCTYPE system identifier state
//------------------------------------------------------------------
_[AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE] = function afterDoctypeSystemIdentifierState(cp) {
    if (isWhitespace(cp))
        return;

    if (cp === $.GREATER_THAN_SIGN) {
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (cp === $.EOF) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else
        this.state = BOGUS_DOCTYPE_STATE;
};


//12.2.4.67 Bogus DOCTYPE state
//------------------------------------------------------------------
_[BOGUS_DOCTYPE_STATE] = function bogusDoctypeState(cp) {
    if (cp === $.GREATER_THAN_SIGN) {
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (cp === $.EOF) {
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }
};


//12.2.4.68 CDATA section state
//------------------------------------------------------------------
_[CDATA_SECTION_STATE] = function cdataSectionState(cp) {
    while (true) {
        if (cp === $.EOF) {
            this._reconsumeInState(DATA_STATE);
            break;
        }

        else if (this._consumeSubsequentIfMatch($$.CDATA_END_STRING, cp, true)) {
            this.state = DATA_STATE;
            break;
        }

        else {
            this._emitCodePoint(cp);
            cp = this._consume();
        }
    }
};

},{"../common/unicode":5,"./named_entity_trie":12,"./preprocessor":13}],15:[function(require,module,exports){
'use strict';

//Node construction
exports.createDocument = function () {
    return {
        nodeName: '#document',
        quirksMode: false,
        childNodes: []
    };
};

exports.createDocumentFragment = function () {
    return {
        nodeName: '#document-fragment',
        quirksMode: false,
        childNodes: []
    };
};

exports.createElement = function (tagName, namespaceURI, attrs) {
    return {
        nodeName: tagName,
        tagName: tagName,
        attrs: attrs,
        namespaceURI: namespaceURI,
        childNodes: [],
        parentNode: null
    };
};

exports.createCommentNode = function (data) {
    return {
        nodeName: '#comment',
        data: data,
        parentNode: null
    };
};

var createTextNode = function (value) {
    return {
        nodeName: '#text',
        value: value,
        parentNode: null
    }
};


//Tree mutation
exports.setDocumentType = function (document, name, publicId, systemId) {
    var doctypeNode = null;

    for (var i = 0; i < document.childNodes.length; i++) {
        if (document.childNodes[i].nodeName === '#documentType') {
            doctypeNode = document.childNodes[i];
            break;
        }
    }

    if (doctypeNode) {
        doctypeNode.name = name;
        doctypeNode.publicId = publicId;
        doctypeNode.systemId = systemId;
    }

    else {
        appendChild(document, {
            nodeName: '#documentType',
            name: name,
            publicId: publicId,
            systemId: systemId
        });
    }
};

exports.setQuirksMode = function (document) {
    document.quirksMode = true;
};

exports.isQuirksMode = function (document) {
    return document.quirksMode;
};

var appendChild = exports.appendChild = function (parentNode, newNode) {
    parentNode.childNodes.push(newNode);
    newNode.parentNode = parentNode;
};

var insertBefore = exports.insertBefore = function (parentNode, newNode, referenceNode) {
    var insertionIdx = parentNode.childNodes.indexOf(referenceNode);

    parentNode.childNodes.splice(insertionIdx, 0, newNode);
    newNode.parentNode = parentNode;
};

exports.detachNode = function (node) {
    if (node.parentNode) {
        var idx = node.parentNode.childNodes.indexOf(node);

        node.parentNode.childNodes.splice(idx, 1);
        node.parentNode = null;
    }
};

exports.insertText = function (parentNode, text) {
    if (parentNode.childNodes.length) {
        var prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];

        if (prevNode.nodeName === '#text') {
            prevNode.value += text;
            return;
        }
    }

    appendChild(parentNode, createTextNode(text));
};

exports.insertTextBefore = function (parentNode, text, referenceNode) {
    var prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];

    if (prevNode && prevNode.nodeName === '#text')
        prevNode.value += text;
    else
        insertBefore(parentNode, createTextNode(text), referenceNode);
};

exports.adoptAttributes = function (recipientNode, attrs) {
    var recipientAttrsMap = [];

    for (var i = 0; i < recipientNode.attrs.length; i++)
        recipientAttrsMap.push(recipientNode.attrs[i].name);

    for (var j = 0; j < attrs.length; j++) {
        if (recipientAttrsMap.indexOf(attrs[j].name) === -1)
            recipientNode.attrs.push(attrs[j]);
    }
};


//Tree traversing
exports.getFirstChild = function (node) {
    return node.childNodes[0];
};

exports.getChildNodes = function (node) {
    return node.childNodes;
};

exports.getParentNode = function (node) {
    return node.parentNode;
};

exports.getAttrList = function (node) {
    return node.attrs;
};

//Node data
exports.getTagName = function (element) {
    return element.tagName;
};

exports.getNamespaceURI = function (element) {
    return element.namespaceURI;
};

exports.getTextNodeContent = function (textNode) {
    return textNode.value;
};

exports.getCommentNodeContent = function (commentNode) {
    return commentNode.data;
};

exports.getDocumentTypeNodeName = function (doctypeNode) {
    return doctypeNode.name;
};

exports.getDocumentTypeNodePublicId = function (doctypeNode) {
    return doctypeNode.publicId;
};

exports.getDocumentTypeNodeSystemId = function (doctypeNode) {
    return doctypeNode.systemId;
};

//Node types
exports.isTextNode = function (node) {
    return node.nodeName === '#text';
};

exports.isCommentNode = function (node) {
    return node.nodeName === '#comment';
};

exports.isDocumentTypeNode = function (node) {
    return node.nodeName === '#documentType';
};

exports.isElementNode = function (node) {
    return !!node.tagName;
};

},{}],16:[function(require,module,exports){
'use strict';

//Conversion tables for DOM Level1 structure emulation
var nodeTypes = {
    element: 1,
    text: 3,
    cdata: 4,
    comment: 8
};

var nodePropertyShorthands = {
    tagName: 'name',
    childNodes: 'children',
    parentNode: 'parent',
    previousSibling: 'prev',
    nextSibling: 'next',
    nodeValue: 'data'
};

//Node
var Node = function (props) {
    for (var key in props) {
        if (props.hasOwnProperty(key))
            this[key] = props[key];
    }
};

Node.prototype = {
    get firstChild() {
        var children = this.children;
        return children && children[0] || null;
    },

    get lastChild() {
        var children = this.children;
        return children && children[children.length - 1] || null;
    },

    get nodeType() {
        return nodeTypes[this.type] || nodeTypes.element;
    }
};

Object.keys(nodePropertyShorthands).forEach(function (key) {
    var shorthand = nodePropertyShorthands[key];

    Object.defineProperty(Node.prototype, key, {
        get: function () {
            return this[shorthand] || null;
        },
        set: function (val) {
            this[shorthand] = val;
            return val;
        }
    });
});


//Node construction
exports.createDocument =
exports.createDocumentFragment = function () {
    return new Node({
        type: 'root',
        name: 'root',
        parent: null,
        prev: null,
        next: null,
        children: []
    });
};

exports.createElement = function (tagName, namespaceURI, attrs) {
    var attribs = {},
        attribsNamespace = {},
        attribsPrefix = {};

    for (var i = 0; i < attrs.length; i++) {
        var attrName = attrs[i].name;

        attribs[attrName] = attrs[i].value;
        attribsNamespace[attrName] = attrs[i].namespace;
        attribsPrefix[attrName] = attrs[i].prefix;
    }

    return new Node({
        type: tagName === 'script' || tagName === 'style' ? tagName : 'tag',
        name: tagName,
        namespace: namespaceURI,
        attribs: attribs,
        'x-attribsNamespace': attribsNamespace,
        'x-attribsPrefix': attribsPrefix,
        children: [],
        parent: null,
        prev: null,
        next: null
    });
};

exports.createCommentNode = function (data) {
    return new Node({
        type: 'comment',
        data: data,
        parent: null,
        prev: null,
        next: null
    });
};

var createTextNode = function (value) {
    return new Node({
        type: 'text',
        data: value,
        parent: null,
        prev: null,
        next: null
    });
};


//Tree mutation
exports.setDocumentType = function (document, name, publicId, systemId) {
    var data = '!DOCTYPE';

    if (name)
        data += ' ' + name;

    if (publicId)
        data += ' PUBLIC "' + publicId + '"';

    if (systemId)
        data += ' "' + systemId + '"';

    var doctypeNode = null;

    for (var i = 0; i < document.children.length; i++) {
        if (document.children[i].type === 'directive' && document.children[i].name === '!doctype') {
            doctypeNode = document.children[i];
            break;
        }
    }

    if (doctypeNode) {
        doctypeNode.data = data;
        doctypeNode['x-name'] = name;
        doctypeNode['x-publicId'] = publicId;
        doctypeNode['x-systemId'] = systemId;
    }

    else {
        appendChild(document, new Node({
            type: 'directive',
            name: '!doctype',
            data: data,
            'x-name': name,
            'x-publicId': publicId,
            'x-systemId': systemId
        }));
    }

};

exports.setQuirksMode = function (document) {
    document.quirksMode = true;
};

exports.isQuirksMode = function (document) {
    return document.quirksMode;
};

var appendChild = exports.appendChild = function (parentNode, newNode) {
    var prev = parentNode.children[parentNode.children.length - 1];

    if (prev) {
        prev.next = newNode;
        newNode.prev = prev;
    }

    parentNode.children.push(newNode);
    newNode.parent = parentNode;
};

var insertBefore = exports.insertBefore = function (parentNode, newNode, referenceNode) {
    var insertionIdx = parentNode.children.indexOf(referenceNode),
        prev = referenceNode.prev;

    if (prev) {
        prev.next = newNode;
        newNode.prev = prev;
    }

    referenceNode.prev = newNode;
    newNode.next = referenceNode;

    parentNode.children.splice(insertionIdx, 0, newNode);
    newNode.parent = parentNode;
};

exports.detachNode = function (node) {
    if (node.parent) {
        var idx = node.parent.children.indexOf(node),
            prev = node.prev,
            next = node.next;

        node.prev = null;
        node.next = null;

        if (prev)
            prev.next = next;

        if (next)
            next.prev = prev;

        node.parent.children.splice(idx, 1);
        node.parent = null;
    }
};

exports.insertText = function (parentNode, text) {
    var lastChild = parentNode.children[parentNode.children.length - 1];

    if (lastChild && lastChild.type === 'text')
        lastChild.data += text;
    else
        appendChild(parentNode, createTextNode(text));
};

exports.insertTextBefore = function (parentNode, text, referenceNode) {
    var prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];

    if (prevNode && prevNode.type === 'text')
        prevNode.data += text;
    else
        insertBefore(parentNode, createTextNode(text), referenceNode);
};

exports.adoptAttributes = function (recipientNode, attrs) {
    for (var i = 0; i < attrs.length; i++) {
        var attrName = attrs[i].name;

        if (typeof recipientNode.attribs[attrName] === 'undefined') {
            recipientNode.attribs[attrName] = attrs[i].value;
            recipientNode['x-attribsNamespace'][attrName] = attrs[i].namespace;
            recipientNode['x-attribsPrefix'][attrName] = attrs[i].prefix;
        }
    }
};


//Tree traversing
exports.getFirstChild = function (node) {
    return node.children[0];
};

exports.getChildNodes = function (node) {
    return node.children;
};

exports.getParentNode = function (node) {
    return node.parent;
};

exports.getAttrList = function (node) {
    var attrList = [];

    for (var name in node.attribs) {
        if (node.attribs.hasOwnProperty(name)) {
            attrList.push({
                name: name,
                value: node.attribs[name],
                namespace: node['x-attribsNamespace'][name],
                prefix: node['x-attribsPrefix'][name]
            });
        }
    }

    return attrList;
};


//Node data
exports.getTagName = function (element) {
    return element.name;
};

exports.getNamespaceURI = function (element) {
    return element.namespace;
};

exports.getTextNodeContent = function (textNode) {
    return textNode.data;
};

exports.getCommentNodeContent = function (commentNode) {
    return commentNode.data;
};

exports.getDocumentTypeNodeName = function (doctypeNode) {
    return doctypeNode['x-name'];
};

exports.getDocumentTypeNodePublicId = function (doctypeNode) {
    return doctypeNode['x-publicId'];
};

exports.getDocumentTypeNodeSystemId = function (doctypeNode) {
    return doctypeNode['x-systemId'];
};


//Node types
exports.isTextNode = function (node) {
    return node.type === 'text';
};

exports.isCommentNode = function (node) {
    return node.type === 'comment';
};

exports.isDocumentTypeNode = function (node) {
    return node.type === 'directive' && node.name === '!doctype';
};

exports.isElementNode = function (node) {
    return !!node.attribs;
};

},{}],17:[function(require,module,exports){
'use strict';

//Const
var VALID_DOCTYPE_NAME = 'html',
    QUIRKS_MODE_SYSTEM_ID = 'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd',
    QUIRKS_MODE_PUBLIC_ID_PREFIXES = [
        "+//silmaril//dtd html pro v0r11 19970101//en",
        "-//advasoft ltd//dtd html 3.0 aswedit + extensions//en",
        "-//as//dtd html 3.0 aswedit + extensions//en",
        "-//ietf//dtd html 2.0 level 1//en",
        "-//ietf//dtd html 2.0 level 2//en",
        "-//ietf//dtd html 2.0 strict level 1//en",
        "-//ietf//dtd html 2.0 strict level 2//en",
        "-//ietf//dtd html 2.0 strict//en",
        "-//ietf//dtd html 2.0//en",
        "-//ietf//dtd html 2.1e//en",
        "-//ietf//dtd html 3.0//en",
        "-//ietf//dtd html 3.0//en//",
        "-//ietf//dtd html 3.2 final//en",
        "-//ietf//dtd html 3.2//en",
        "-//ietf//dtd html 3//en",
        "-//ietf//dtd html level 0//en",
        "-//ietf//dtd html level 0//en//2.0",
        "-//ietf//dtd html level 1//en",
        "-//ietf//dtd html level 1//en//2.0",
        "-//ietf//dtd html level 2//en",
        "-//ietf//dtd html level 2//en//2.0",
        "-//ietf//dtd html level 3//en",
        "-//ietf//dtd html level 3//en//3.0",
        "-//ietf//dtd html strict level 0//en",
        "-//ietf//dtd html strict level 0//en//2.0",
        "-//ietf//dtd html strict level 1//en",
        "-//ietf//dtd html strict level 1//en//2.0",
        "-//ietf//dtd html strict level 2//en",
        "-//ietf//dtd html strict level 2//en//2.0",
        "-//ietf//dtd html strict level 3//en",
        "-//ietf//dtd html strict level 3//en//3.0",
        "-//ietf//dtd html strict//en",
        "-//ietf//dtd html strict//en//2.0",
        "-//ietf//dtd html strict//en//3.0",
        "-//ietf//dtd html//en",
        "-//ietf//dtd html//en//2.0",
        "-//ietf//dtd html//en//3.0",
        "-//metrius//dtd metrius presentational//en",
        "-//microsoft//dtd internet explorer 2.0 html strict//en",
        "-//microsoft//dtd internet explorer 2.0 html//en",
        "-//microsoft//dtd internet explorer 2.0 tables//en",
        "-//microsoft//dtd internet explorer 3.0 html strict//en",
        "-//microsoft//dtd internet explorer 3.0 html//en",
        "-//microsoft//dtd internet explorer 3.0 tables//en",
        "-//netscape comm. corp.//dtd html//en",
        "-//netscape comm. corp.//dtd strict html//en",
        "-//o'reilly and associates//dtd html 2.0//en",
        "-//o'reilly and associates//dtd html extended 1.0//en",
        "-//spyglass//dtd html 2.0 extended//en",
        "-//sq//dtd html 2.0 hotmetal + extensions//en",
        "-//sun microsystems corp.//dtd hotjava html//en",
        "-//sun microsystems corp.//dtd hotjava strict html//en",
        "-//w3c//dtd html 3 1995-03-24//en",
        "-//w3c//dtd html 3.2 draft//en",
        "-//w3c//dtd html 3.2 final//en",
        "-//w3c//dtd html 3.2//en",
        "-//w3c//dtd html 3.2s draft//en",
        "-//w3c//dtd html 4.0 frameset//en",
        "-//w3c//dtd html 4.0 transitional//en",
        "-//w3c//dtd html experimental 19960712//en",
        "-//w3c//dtd html experimental 970421//en",
        "-//w3c//dtd w3 html//en",
        "-//w3o//dtd w3 html 3.0//en",
        "-//w3o//dtd w3 html 3.0//en//",
        "-//webtechs//dtd mozilla html 2.0//en",
        "-//webtechs//dtd mozilla html//en"
    ],
    QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = [
        '-//w3c//dtd html 4.01 frameset//',
        '-//w3c//dtd html 4.01 transitional//'
    ],
    QUIRKS_MODE_PUBLIC_IDS = [
        '-//w3o//dtd w3 html strict 3.0//en//',
        '-/w3c/dtd html 4.0 transitional/en',
        'html'
    ];

exports.isQuirks = function (name, publicId, systemId) {
    if (name !== VALID_DOCTYPE_NAME)
        return true;

    if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID)
        return true;

    if (publicId !== null) {
        publicId = publicId.toLowerCase();

        if (QUIRKS_MODE_PUBLIC_IDS.indexOf(publicId) > -1)
            return true;

        var prefixes = QUIRKS_MODE_PUBLIC_ID_PREFIXES;

        if (systemId === null)
            prefixes = prefixes.concat(QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES);

        for (var i = 0; i < prefixes.length; i++) {
            if (publicId.indexOf(prefixes[i]) === 0)
                return true;
        }
    }

    return false;
};

},{}],18:[function(require,module,exports){
'use strict';

//Const
var NOAH_ARK_CAPACITY = 3;

//List of formatting elements
var FormattingElementList = module.exports = function (treeAdapter) {
    this.length = 0;
    this.entries = [];
    this.treeAdapter = treeAdapter;
    this.bookmark = null;
};

//Entry types
FormattingElementList.MARKER_ENTRY = 'MARKER_ENTRY';
FormattingElementList.ELEMENT_ENTRY = 'ELEMENT_ENTRY';

//Noah Ark's condition
//OPTIMIZATION: at first we try to find possible candidates for exclusion using
//lightweight heuristics without thorough attributes check.
FormattingElementList.prototype._getNoahArkConditionCandidates = function (newElement) {
    var candidates = [];

    if (this.length >= NOAH_ARK_CAPACITY) {
        var neAttrsLength = this.treeAdapter.getAttrList(newElement).length,
            neTagName = this.treeAdapter.getTagName(newElement),
            neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);

        for (var i = this.length - 1; i >= 0; i--) {
            var entry = this.entries[i];

            if (entry.type === FormattingElementList.MARKER_ENTRY)
                break;

            var element = entry.element,
                elementAttrs = this.treeAdapter.getAttrList(element);

            if (this.treeAdapter.getTagName(element) === neTagName &&
                this.treeAdapter.getNamespaceURI(element) === neNamespaceURI &&
                elementAttrs.length === neAttrsLength) {
                candidates.push({idx: i, attrs: elementAttrs});
            }
        }
    }

    return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;
};

FormattingElementList.prototype._ensureNoahArkCondition = function (newElement) {
    var candidates = this._getNoahArkConditionCandidates(newElement),
        cLength = candidates.length;

    if (cLength) {
        var neAttrs = this.treeAdapter.getAttrList(newElement),
            neAttrsLength = neAttrs.length,
            neAttrsMap = {};

        //NOTE: build attrs map for the new element so we can perform fast lookups
        for (var i = 0; i < neAttrsLength; i++) {
            var neAttr = neAttrs[i];

            neAttrsMap[neAttr.name] = neAttr.value;
        }

        for (var i = 0; i < neAttrsLength; i++) {
            for (var j = 0; j < cLength; j++) {
                var cAttr = candidates[j].attrs[i];

                if (neAttrsMap[cAttr.name] !== cAttr.value) {
                    candidates.splice(j, 1);
                    cLength--;
                }

                if (candidates.length < NOAH_ARK_CAPACITY)
                    return;
            }
        }

        //NOTE: remove bottommost candidates until Noah's Ark condition will not be met
        for (var i = cLength - 1; i >= NOAH_ARK_CAPACITY - 1; i--) {
            this.entries.splice(candidates[i].idx, 1);
            this.length--;
        }
    }
};

//Mutations
FormattingElementList.prototype.insertMarker = function () {
    this.entries.push({type: FormattingElementList.MARKER_ENTRY});
    this.length++;
};

FormattingElementList.prototype.pushElement = function (element, token) {
    this._ensureNoahArkCondition(element);

    this.entries.push({
        type: FormattingElementList.ELEMENT_ENTRY,
        element: element,
        token: token
    });

    this.length++;
};

FormattingElementList.prototype.insertElementAfterBookmark = function (element, token) {
    var bookmarkIdx = this.length - 1;

    for (; bookmarkIdx >= 0; bookmarkIdx--) {
        if (this.entries[bookmarkIdx] === this.bookmark)
            break;
    }

    this.entries.splice(bookmarkIdx + 1, 0, {
        type: FormattingElementList.ELEMENT_ENTRY,
        element: element,
        token: token
    });

    this.length++;
};

FormattingElementList.prototype.removeEntry = function (entry) {
    for (var i = this.length - 1; i >= 0; i--) {
        if (this.entries[i] === entry) {
            this.entries.splice(i, 1);
            this.length--;
            break;
        }
    }
};

FormattingElementList.prototype.clearToLastMarker = function () {
    while (this.length) {
        var entry = this.entries.pop();

        this.length--;

        if (entry.type === FormattingElementList.MARKER_ENTRY)
            break;
    }
};

//Search
FormattingElementList.prototype.getElementEntryInScopeWithTagName = function (tagName) {
    for (var i = this.length - 1; i >= 0; i--) {
        var entry = this.entries[i];

        if (entry.type === FormattingElementList.MARKER_ENTRY)
            return null;

        if (this.treeAdapter.getTagName(entry.element) === tagName)
            return entry;
    }

    return null;
};

FormattingElementList.prototype.getElementEntry = function (element) {
    for (var i = this.length - 1; i >= 0; i--) {
        var entry = this.entries[i];

        if (entry.type === FormattingElementList.ELEMENT_ENTRY && entry.element == element)
            return entry;
    }

    return null;
};

},{}],19:[function(require,module,exports){
'use strict';

var HTML = require('../common/html');

//Aliases
var $ = HTML.TAG_NAMES,
    NS = HTML.NAMESPACES;

//Element utils

//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
//It's faster than using dictionary.
function isImpliedEndTagRequired(tn) {
    switch (tn.length) {
        case 1:
            return tn === $.P;

        case 2:
            return tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI;

        case 6:
            return tn === $.OPTION;

        case 8:
            return tn === $.OPTGROUP;
    }

    return false;
}

function isScopingElement(tn, ns) {
    switch (tn.length) {
        case 2:
            if (tn === $.TD || tn === $.TH)
                return ns === NS.HTML;

            else if (tn === $.MI || tn === $.MO || tn == $.MN || tn === $.MS)
                return ns === NS.MATHML;

            break;

        case 4:
            if (tn === $.HTML)
                return ns === NS.HTML;

            else if (tn === $.DESC)
                return ns === NS.SVG;

            break;

        case 5:
            if (tn === $.TABLE)
                return ns === NS.HTML;

            else if (tn === $.MTEXT)
                return ns === NS.MATHML;

            else if (tn === $.TITLE)
                return ns === NS.SVG;

            break;

        case 6:
            return (tn === $.APPLET || tn === $.OBJECT) && ns === NS.HTML;

        case 7:
            return (tn === $.CAPTION || tn === $.MARQUEE) && ns === NS.HTML;

        case 8:
            return tn === $.TEMPLATE && ns === NS.HTML;

        case 13:
            return tn === $.FOREIGN_OBJECT && ns === NS.SVG;

        case 14:
            return tn === $.ANNOTATION_XML && ns === NS.MATHML;
    }

    return false;
}

//Stack of open elements
var OpenElementStack = module.exports = function (document, treeAdapter) {
    this.stackTop = -1;
    this.items = [];
    this.current = document;
    this.currentTagName = null;
    this.currentTmplContent = null;
    this.tmplCount = 0;
    this.treeAdapter = treeAdapter;
};

//Index of element
OpenElementStack.prototype._indexOf = function (element) {
    var idx = -1;

    for (var i = this.stackTop; i >= 0; i--) {
        if (this.items[i] === element) {
            idx = i;
            break;
        }
    }
    return idx;
};

//Update current element
OpenElementStack.prototype._isInTemplate = function () {
    if (this.currentTagName !== $.TEMPLATE)
        return false;

    return this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
};

OpenElementStack.prototype._updateCurrentElement = function () {
    this.current = this.items[this.stackTop];
    this.currentTagName = this.current && this.treeAdapter.getTagName(this.current);

    this.currentTmplContent = this._isInTemplate() ? this.treeAdapter.getChildNodes(this.current)[0] : null;
};

//Mutations
OpenElementStack.prototype.push = function (element) {
    this.items[++this.stackTop] = element;
    this._updateCurrentElement();

    if (this._isInTemplate())
        this.tmplCount++;

};

OpenElementStack.prototype.pop = function () {
    this.stackTop--;

    if (this.tmplCount > 0 && this._isInTemplate())
        this.tmplCount--;

    this._updateCurrentElement();
};

OpenElementStack.prototype.replace = function (oldElement, newElement) {
    var idx = this._indexOf(oldElement);
    this.items[idx] = newElement;

    if (idx === this.stackTop)
        this._updateCurrentElement();
};

OpenElementStack.prototype.insertAfter = function (referenceElement, newElement) {
    var insertionIdx = this._indexOf(referenceElement) + 1;

    this.items.splice(insertionIdx, 0, newElement);

    if (insertionIdx == ++this.stackTop)
        this._updateCurrentElement();
};

OpenElementStack.prototype.popUntilTagNamePopped = function (tagName) {
    while (this.stackTop > -1) {
        var tn = this.currentTagName;

        this.pop();

        if (tn === tagName)
            break;
    }
};

OpenElementStack.prototype.popUntilTemplatePopped = function () {
    while (this.stackTop > -1) {
        var tn = this.currentTagName,
            ns = this.treeAdapter.getNamespaceURI(this.current);

        this.pop();

        if (tn === $.TEMPLATE && ns === NS.HTML)
            break;
    }
};

OpenElementStack.prototype.popUntilElementPopped = function (element) {
    while (this.stackTop > -1) {
        var poppedElement = this.current;

        this.pop();

        if (poppedElement === element)
            break;
    }
};

OpenElementStack.prototype.popUntilNumberedHeaderPopped = function () {
    while (this.stackTop > -1) {
        var tn = this.currentTagName;

        this.pop();

        if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6)
            break;
    }
};

OpenElementStack.prototype.popAllUpToHtmlElement = function () {
    //NOTE: here we assume that root <html> element is always first in the open element stack, so
    //we perform this fast stack clean up.
    this.stackTop = 0;
    this._updateCurrentElement();
};

OpenElementStack.prototype.clearBackToTableContext = function () {
    while (this.currentTagName !== $.TABLE && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML)
        this.pop();
};

OpenElementStack.prototype.clearBackToTableBodyContext = function () {
    while (this.currentTagName !== $.TBODY && this.currentTagName !== $.TFOOT &&
           this.currentTagName !== $.THEAD && this.currentTagName !== $.TEMPLATE &&
           this.currentTagName !== $.HTML) {
        this.pop();
    }
};

OpenElementStack.prototype.clearBackToTableRowContext = function () {
    while (this.currentTagName !== $.TR && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML)
        this.pop();
};

OpenElementStack.prototype.remove = function (element) {
    for (var i = this.stackTop; i >= 0; i--) {
        if (this.items[i] === element) {
            this.items.splice(i, 1);
            this.stackTop--;
            this._updateCurrentElement();
            break;
        }
    }
};

//Search
OpenElementStack.prototype.tryPeekProperlyNestedBodyElement = function () {
    //Properly nested <body> element (should be second element in stack).
    var element = this.items[1];
    return element && this.treeAdapter.getTagName(element) === $.BODY ? element : null;
};

OpenElementStack.prototype.contains = function (element) {
    return this._indexOf(element) > -1;
};

OpenElementStack.prototype.getCommonAncestor = function (element) {
    var elementIdx = this._indexOf(element);

    return --elementIdx >= 0 ? this.items[elementIdx] : null;
};

OpenElementStack.prototype.isRootHtmlElementCurrent = function () {
    return this.stackTop === 0 && this.currentTagName === $.HTML;
};

//Element in scope
OpenElementStack.prototype.hasInScope = function (tagName) {
    for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]);

        if (tn === tagName)
            return true;

        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if (isScopingElement(tn, ns))
            return false;
    }

    return true;
};

OpenElementStack.prototype.hasNumberedHeaderInScope = function () {
    for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]);

        if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6)
            return true;

        if (isScopingElement(tn, this.treeAdapter.getNamespaceURI(this.items[i])))
            return false;
    }

    return true;
};

OpenElementStack.prototype.hasInListItemScope = function (tagName) {
    for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]);

        if (tn === tagName)
            return true;

        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if (((tn === $.UL || tn === $.OL) && ns === NS.HTML) || isScopingElement(tn, ns))
            return false;
    }

    return true;
};

OpenElementStack.prototype.hasInButtonScope = function (tagName) {
    for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]);

        if (tn === tagName)
            return true;

        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if ((tn === $.BUTTON && ns === NS.HTML) || isScopingElement(tn, ns))
            return false;
    }

    return true;
};

OpenElementStack.prototype.hasInTableScope = function (tagName) {
    for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]);

        if (tn === tagName)
            return true;

        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if ((tn === $.TABLE || tn === $.TEMPLATE || tn === $.HTML) && ns === NS.HTML)
            return false;
    }

    return true;
};

OpenElementStack.prototype.hasTableBodyContextInTableScope = function () {
    for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]);

        if (tn === $.TBODY || tn === $.THEAD || tn === $.TFOOT)
            return true;

        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if ((tn === $.TABLE || tn === $.HTML) && ns === NS.HTML)
            return false;
    }

    return true;
};

OpenElementStack.prototype.hasInSelectScope = function (tagName) {
    for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]);

        if (tn === tagName)
            return true;

        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if (tn !== $.OPTION && tn !== $.OPTGROUP && ns === NS.HTML)
            return false;
    }

    return true;
};

//Implied end tags
OpenElementStack.prototype.generateImpliedEndTags = function () {
    while (isImpliedEndTagRequired(this.currentTagName))
        this.pop();
};

OpenElementStack.prototype.generateImpliedEndTagsWithExclusion = function (exclusionTagName) {
    while (isImpliedEndTagRequired(this.currentTagName) && this.currentTagName !== exclusionTagName)
        this.pop();
};

},{"../common/html":4}],20:[function(require,module,exports){
'use strict';

var Tokenizer = require('../tokenization/tokenizer'),
    OpenElementStack = require('./open_element_stack'),
    FormattingElementList = require('./formatting_element_list'),
    Doctype = require('./doctype'),
    DefaultTreeAdapter = require('../tree_adapters/default'),
    ForeignContent = require('../common/foreign_content'),
    UNICODE = require('../common/unicode'),
    HTML = require('../common/html');

//Aliases
var $ = HTML.TAG_NAMES,
    NS = HTML.NAMESPACES,
    ATTRS = HTML.ATTRS;

//Misc constants
var SEARCHABLE_INDEX_DEFAULT_PROMPT = 'This is a searchable index. Enter search keywords: ',
    SEARCHABLE_INDEX_INPUT_NAME = 'isindex',
    HIDDEN_INPUT_TYPE = 'hidden';

//Adoption agency loops iteration count
var AA_OUTER_LOOP_ITER = 8,
    AA_INNER_LOOP_ITER = 3;

//Insertion modes
var INITIAL_MODE = 'INITIAL_MODE',
    BEFORE_HTML_MODE = 'BEFORE_HTML_MODE',
    BEFORE_HEAD_MODE = 'BEFORE_HEAD_MODE',
    IN_HEAD_MODE = 'IN_HEAD_MODE',
    AFTER_HEAD_MODE = 'AFTER_HEAD_MODE',
    IN_BODY_MODE = 'IN_BODY_MODE',
    TEXT_MODE = 'TEXT_MODE',
    IN_TABLE_MODE = 'IN_TABLE_MODE',
    IN_TABLE_TEXT_MODE = 'IN_TABLE_TEXT_MODE',
    IN_CAPTION_MODE = 'IN_CAPTION_MODE',
    IN_COLUMN_GROUP_MODE = 'IN_COLUMN_GROUP_MODE',
    IN_TABLE_BODY_MODE = 'IN_TABLE_BODY_MODE',
    IN_ROW_MODE = 'IN_ROW_MODE',
    IN_CELL_MODE = 'IN_CELL_MODE',
    IN_SELECT_MODE = 'IN_SELECT_MODE',
    IN_SELECT_IN_TABLE_MODE = 'IN_SELECT_IN_TABLE_MODE',
    IN_TEMPLATE_MODE = 'IN_TEMPLATE_MODE',
    AFTER_BODY_MODE = 'AFTER_BODY_MODE',
    IN_FRAMESET_MODE = 'IN_FRAMESET_MODE',
    AFTER_FRAMESET_MODE = 'AFTER_FRAMESET_MODE',
    AFTER_AFTER_BODY_MODE = 'AFTER_AFTER_BODY_MODE',
    AFTER_AFTER_FRAMESET_MODE = 'AFTER_AFTER_FRAMESET_MODE';

//Insertion mode reset map
var INSERTION_MODE_RESET_MAP = {};

INSERTION_MODE_RESET_MAP[$.TR] = IN_ROW_MODE;
INSERTION_MODE_RESET_MAP[$.TBODY] =
INSERTION_MODE_RESET_MAP[$.THEAD] =
INSERTION_MODE_RESET_MAP[$.TFOOT] = IN_TABLE_BODY_MODE;
INSERTION_MODE_RESET_MAP[$.CAPTION] = IN_CAPTION_MODE;
INSERTION_MODE_RESET_MAP[$.COLGROUP] = IN_COLUMN_GROUP_MODE;
INSERTION_MODE_RESET_MAP[$.TABLE] = IN_TABLE_MODE;
INSERTION_MODE_RESET_MAP[$.BODY] = IN_BODY_MODE;
INSERTION_MODE_RESET_MAP[$.FRAMESET] = IN_FRAMESET_MODE;

//Template insertion mode switch map
var TEMPLATE_INSERTION_MODE_SWITCH_MAP = {};

TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.CAPTION] =
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.COLGROUP] =
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TBODY] =
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TFOOT] =
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.THEAD] = IN_TABLE_MODE;
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.COL] = IN_COLUMN_GROUP_MODE;
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TR] = IN_TABLE_BODY_MODE;
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TD] =
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TH] = IN_ROW_MODE;

//Token handlers map for insertion modes
var _ = {};

_[INITIAL_MODE] = {};
_[INITIAL_MODE][Tokenizer.CHARACTER_TOKEN] =
_[INITIAL_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInInitialMode;
_[INITIAL_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
_[INITIAL_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[INITIAL_MODE][Tokenizer.DOCTYPE_TOKEN] = doctypeInInitialMode;
_[INITIAL_MODE][Tokenizer.START_TAG_TOKEN] =
_[INITIAL_MODE][Tokenizer.END_TAG_TOKEN] =
_[INITIAL_MODE][Tokenizer.EOF_TOKEN] = tokenInInitialMode;

_[BEFORE_HTML_MODE] = {};
_[BEFORE_HTML_MODE][Tokenizer.CHARACTER_TOKEN] =
_[BEFORE_HTML_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenBeforeHtml;
_[BEFORE_HTML_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
_[BEFORE_HTML_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[BEFORE_HTML_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[BEFORE_HTML_MODE][Tokenizer.START_TAG_TOKEN] = startTagBeforeHtml;
_[BEFORE_HTML_MODE][Tokenizer.END_TAG_TOKEN] = endTagBeforeHtml;
_[BEFORE_HTML_MODE][Tokenizer.EOF_TOKEN] = tokenBeforeHtml;

_[BEFORE_HEAD_MODE] = {};
_[BEFORE_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] =
_[BEFORE_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenBeforeHead;
_[BEFORE_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
_[BEFORE_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[BEFORE_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[BEFORE_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagBeforeHead;
_[BEFORE_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagBeforeHead;
_[BEFORE_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenBeforeHead;

_[IN_HEAD_MODE] = {};
_[IN_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] =
_[IN_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInHead;
_[IN_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagInHead;
_[IN_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagInHead;
_[IN_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenInHead;

_[AFTER_HEAD_MODE] = {};
_[AFTER_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] =
_[AFTER_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterHead;
_[AFTER_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[AFTER_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[AFTER_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterHead;
_[AFTER_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterHead;
_[AFTER_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenAfterHead;

_[IN_BODY_MODE] = {};
_[IN_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagInBody;
_[IN_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagInBody;
_[IN_BODY_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

_[TEXT_MODE] = {};
_[TEXT_MODE][Tokenizer.CHARACTER_TOKEN] =
_[TEXT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] =
_[TEXT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[TEXT_MODE][Tokenizer.COMMENT_TOKEN] =
_[TEXT_MODE][Tokenizer.DOCTYPE_TOKEN] =
_[TEXT_MODE][Tokenizer.START_TAG_TOKEN] = ignoreToken;
_[TEXT_MODE][Tokenizer.END_TAG_TOKEN] = endTagInText;
_[TEXT_MODE][Tokenizer.EOF_TOKEN] = eofInText;

_[IN_TABLE_MODE] = {};
_[IN_TABLE_MODE][Tokenizer.CHARACTER_TOKEN] =
_[IN_TABLE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] =
_[IN_TABLE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
_[IN_TABLE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_TABLE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_TABLE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTable;
_[IN_TABLE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTable;
_[IN_TABLE_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

_[IN_TABLE_TEXT_MODE] = {};
_[IN_TABLE_TEXT_MODE][Tokenizer.CHARACTER_TOKEN] = characterInTableText;
_[IN_TABLE_TEXT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_TABLE_TEXT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInTableText;
_[IN_TABLE_TEXT_MODE][Tokenizer.COMMENT_TOKEN] =
_[IN_TABLE_TEXT_MODE][Tokenizer.DOCTYPE_TOKEN] =
_[IN_TABLE_TEXT_MODE][Tokenizer.START_TAG_TOKEN] =
_[IN_TABLE_TEXT_MODE][Tokenizer.END_TAG_TOKEN] =
_[IN_TABLE_TEXT_MODE][Tokenizer.EOF_TOKEN] = tokenInTableText;

_[IN_CAPTION_MODE] = {};
_[IN_CAPTION_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_CAPTION_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_CAPTION_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_CAPTION_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_CAPTION_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_CAPTION_MODE][Tokenizer.START_TAG_TOKEN] = startTagInCaption;
_[IN_CAPTION_MODE][Tokenizer.END_TAG_TOKEN] = endTagInCaption;
_[IN_CAPTION_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

_[IN_COLUMN_GROUP_MODE] = {};
_[IN_COLUMN_GROUP_MODE][Tokenizer.CHARACTER_TOKEN] =
_[IN_COLUMN_GROUP_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInColumnGroup;
_[IN_COLUMN_GROUP_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_COLUMN_GROUP_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_COLUMN_GROUP_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_COLUMN_GROUP_MODE][Tokenizer.START_TAG_TOKEN] = startTagInColumnGroup;
_[IN_COLUMN_GROUP_MODE][Tokenizer.END_TAG_TOKEN] = endTagInColumnGroup;
_[IN_COLUMN_GROUP_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

_[IN_TABLE_BODY_MODE] = {};
_[IN_TABLE_BODY_MODE][Tokenizer.CHARACTER_TOKEN] =
_[IN_TABLE_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] =
_[IN_TABLE_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
_[IN_TABLE_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_TABLE_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_TABLE_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTableBody;
_[IN_TABLE_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTableBody;
_[IN_TABLE_BODY_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

_[IN_ROW_MODE] = {};
_[IN_ROW_MODE][Tokenizer.CHARACTER_TOKEN] =
_[IN_ROW_MODE][Tokenizer.NULL_CHARACTER_TOKEN] =
_[IN_ROW_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
_[IN_ROW_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_ROW_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_ROW_MODE][Tokenizer.START_TAG_TOKEN] = startTagInRow;
_[IN_ROW_MODE][Tokenizer.END_TAG_TOKEN] = endTagInRow;
_[IN_ROW_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

_[IN_CELL_MODE] = {};
_[IN_CELL_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_CELL_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_CELL_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_CELL_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_CELL_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_CELL_MODE][Tokenizer.START_TAG_TOKEN] = startTagInCell;
_[IN_CELL_MODE][Tokenizer.END_TAG_TOKEN] = endTagInCell;
_[IN_CELL_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

_[IN_SELECT_MODE] = {};
_[IN_SELECT_MODE][Tokenizer.CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_SELECT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_SELECT_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_SELECT_MODE][Tokenizer.START_TAG_TOKEN] = startTagInSelect;
_[IN_SELECT_MODE][Tokenizer.END_TAG_TOKEN] = endTagInSelect;
_[IN_SELECT_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

_[IN_SELECT_IN_TABLE_MODE] = {};
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInSelectInTable;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInSelectInTable;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

_[IN_TEMPLATE_MODE] = {};
_[IN_TEMPLATE_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_TEMPLATE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_TEMPLATE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_TEMPLATE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_TEMPLATE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_TEMPLATE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTemplate;
_[IN_TEMPLATE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTemplate;
_[IN_TEMPLATE_MODE][Tokenizer.EOF_TOKEN] = eofInTemplate;

_[AFTER_BODY_MODE] = {};
_[AFTER_BODY_MODE][Tokenizer.CHARACTER_TOKEN] =
_[AFTER_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterBody;
_[AFTER_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[AFTER_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToRootHtmlElement;
_[AFTER_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterBody;
_[AFTER_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterBody;
_[AFTER_BODY_MODE][Tokenizer.EOF_TOKEN] = stopParsing;

_[IN_FRAMESET_MODE] = {};
_[IN_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] =
_[IN_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagInFrameset;
_[IN_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = endTagInFrameset;
_[IN_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;

_[AFTER_FRAMESET_MODE] = {};
_[AFTER_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] =
_[AFTER_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[AFTER_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[AFTER_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[AFTER_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterFrameset;
_[AFTER_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterFrameset;
_[AFTER_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;

_[AFTER_AFTER_BODY_MODE] = {};
_[AFTER_AFTER_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = tokenAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToDocument;
_[AFTER_AFTER_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_AFTER_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.END_TAG_TOKEN] = tokenAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.EOF_TOKEN] = stopParsing;

_[AFTER_AFTER_FRAMESET_MODE] = {};
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] =
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToDocument;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterAfterFrameset;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = ignoreToken;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;

//Searchable index building utils (<isindex> tag)
function getSearchableIndexFormAttrs(isindexStartTagToken) {
    var indexAction = Tokenizer.getTokenAttr(isindexStartTagToken, ATTRS.ACTION),
        attrs = [];

    if (indexAction !== null) {
        attrs.push({
            name: ATTRS.ACTION,
            value: indexAction
        });
    }

    return attrs;
}

function getSearchableIndexLabelText(isindexStartTagToken) {
    var indexPrompt = Tokenizer.getTokenAttr(isindexStartTagToken, ATTRS.PROMPT);

    return indexPrompt === null ? SEARCHABLE_INDEX_DEFAULT_PROMPT : indexPrompt;
}

function getSearchableIndexInputAttrs(isindexStartTagToken) {
    var isindexAttrs = isindexStartTagToken.attrs,
        inputAttrs = [];

    for (var i = 0; i < isindexAttrs.length; i++) {
        var name = isindexAttrs[i].name;

        if (name !== ATTRS.NAME && name !== ATTRS.ACTION && name !== ATTRS.PROMPT)
            inputAttrs.push(isindexAttrs[i]);
    }

    inputAttrs.push({
        name: ATTRS.NAME,
        value: SEARCHABLE_INDEX_INPUT_NAME
    });

    return inputAttrs;
}

//Parser
var Parser = module.exports = function (treeAdapter) {
    this.treeAdapter = treeAdapter || DefaultTreeAdapter;
    this.scriptHandler = null;
};

//API
Parser.prototype.parse = function (html) {
    var document = this.treeAdapter.createDocument();

    this._reset(html, document, null);
    this._runParsingLoop();

    return document;
};

Parser.prototype.parseFragment = function (html, fragmentContext) {
    //NOTE: use <template> element as a fragment context if context element was not provided,
    //so we will parse in "forgiving" manner
    if (!fragmentContext)
        fragmentContext = this.treeAdapter.createElement($.TEMPLATE, NS.HTML, []);

    //NOTE: create fake element which will be used as 'document' for fragment parsing.
    //This is important for jsdom there 'document' can't be recreated, therefore
    //fragment parsing causes messing of the main `document`.
    var documentMock = this.treeAdapter.createElement('documentmock', NS.HTML, []);

    this._reset(html, documentMock, fragmentContext);

    if (this.treeAdapter.getTagName(fragmentContext) === $.TEMPLATE)
        this._pushTmplInsertionMode(IN_TEMPLATE_MODE);

    this._initTokenizerForFragmentParsing();
    this._insertFakeRootElement();
    this._resetInsertionMode();
    this._findFormInFragmentContext();
    this._runParsingLoop();

    var rootElement = this.treeAdapter.getFirstChild(documentMock),
        fragment = this.treeAdapter.createDocumentFragment();

    this._adoptNodes(rootElement, fragment);

    return fragment;
};

//Reset state
Parser.prototype._reset = function (html, document, fragmentContext) {
    this.tokenizer = new Tokenizer(html);

    this.stopped = false;

    this.insertionMode = INITIAL_MODE;
    this.originalInsertionMode = '';

    this.document = document;
    this.fragmentContext = fragmentContext;

    this.headElement = null;
    this.formElement = null;

    this.openElements = new OpenElementStack(this.document, this.treeAdapter);
    this.activeFormattingElements = new FormattingElementList(this.treeAdapter);

    this.tmplInsertionModeStack = [];
    this.tmplInsertionModeStackTop = -1;
    this.currentTmplInsertionMode = null;

    this.pendingCharacterTokens = [];
    this.hasNonWhitespacePendingCharacterToken = false;

    this.framesetOk = true;
    this.skipNextNewLine = false;
    this.fosterParentingEnabled = false;
};

//Parsing loop
Parser.prototype._iterateParsingLoop = function () {
    this._setupTokenizerCDATAMode();

    var token = this.tokenizer.getNextToken();

    if (this.skipNextNewLine) {
        this.skipNextNewLine = false;

        if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === '\n') {
            if (token.chars.length === 1)
                return;

            token.chars = token.chars.substr(1);
        }
    }

    if (this._shouldProcessTokenInForeignContent(token))
        this._processTokenInForeignContent(token);

    else
        this._processToken(token);
};

Parser.prototype._runParsingLoop = function () {
    while (!this.stopped)
        this._iterateParsingLoop();
};

//Text parsing
Parser.prototype._setupTokenizerCDATAMode = function () {
    var current = this._getAdjustedCurrentElement();

    this.tokenizer.allowCDATA = current && current !== this.document &&
                                this.treeAdapter.getNamespaceURI(current) !== NS.HTML &&
                                (!this._isHtmlIntegrationPoint(current)) &&
                                (!this._isMathMLTextIntegrationPoint(current));
};

Parser.prototype._switchToTextParsing = function (currentToken, nextTokenizerState) {
    this._insertElement(currentToken, NS.HTML);
    this.tokenizer.state = nextTokenizerState;
    this.originalInsertionMode = this.insertionMode;
    this.insertionMode = TEXT_MODE;
};

//Fragment parsing
Parser.prototype._getAdjustedCurrentElement = function () {
    return this.openElements.stackTop === 0 && this.fragmentContext ?
           this.fragmentContext :
           this.openElements.current;
};

Parser.prototype._findFormInFragmentContext = function () {
    var node = this.fragmentContext;

    do {
        if (this.treeAdapter.getTagName(node) === $.FORM) {
            this.formElement = node;
            break;
        }

        node = this.treeAdapter.getParentNode(node);
    } while (node);
};

Parser.prototype._initTokenizerForFragmentParsing = function () {
    var tn = this.treeAdapter.getTagName(this.fragmentContext);

    if (tn === $.TITLE || tn === $.TEXTAREA)
        this.tokenizer.state = Tokenizer.RCDATA_STATE;

    else if (tn === $.STYLE || tn === $.XMP || tn === $.IFRAME ||
             tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT) {
        this.tokenizer.state = Tokenizer.RAWTEXT_STATE;
    }

    else if (tn === $.SCRIPT)
        this.tokenizer.state = Tokenizer.SCRIPT_DATA_STATE;

    else if (tn === $.PLAINTEXT)
        this.tokenizer.state = Tokenizer.PLAINTEXT_STATE;
};

//Tree mutation
Parser.prototype._setDocumentType = function (token) {
    this.treeAdapter.setDocumentType(this.document, token.name, token.publicId, token.systemId);
};

Parser.prototype._attachElementToTree = function (element) {
    if (this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current))
        this._fosterParentElement(element);

    else {
        var parent = this.openElements.currentTmplContent || this.openElements.current;

        this.treeAdapter.appendChild(parent, element);
    }
};

Parser.prototype._appendElement = function (token, namespaceURI) {
    var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);

    this._attachElementToTree(element);
};

Parser.prototype._insertElement = function (token, namespaceURI) {
    var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);

    this._attachElementToTree(element);
    this.openElements.push(element);
};

Parser.prototype._insertTemplate = function (token) {
    var tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs),
        content = this.treeAdapter.createDocumentFragment();

    this.treeAdapter.appendChild(tmpl, content);
    this._attachElementToTree(tmpl);
    this.openElements.push(tmpl);
};

Parser.prototype._insertFakeRootElement = function () {
    var element = this.treeAdapter.createElement($.HTML, NS.HTML, []);

    this.treeAdapter.appendChild(this.openElements.current, element);
    this.openElements.push(element);
};

Parser.prototype._appendCommentNode = function (token, parent) {
    var commentNode = this.treeAdapter.createCommentNode(token.data);

    this.treeAdapter.appendChild(parent, commentNode);
};

Parser.prototype._insertCharacters = function (token) {
    if (this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current))
        this._fosterParentText(token.chars);

    else {
        var parent = this.openElements.currentTmplContent || this.openElements.current;

        this.treeAdapter.insertText(parent, token.chars);
    }
};

Parser.prototype._adoptNodes = function (donor, recipient) {
    while (true) {
        var child = this.treeAdapter.getFirstChild(donor);

        if (!child)
            break;

        this.treeAdapter.detachNode(child);
        this.treeAdapter.appendChild(recipient, child);
    }
};

//Token processing
Parser.prototype._shouldProcessTokenInForeignContent = function (token) {
    var current = this._getAdjustedCurrentElement();

    if (!current || current === this.document)
        return false;

    var ns = this.treeAdapter.getNamespaceURI(current);

    if (ns === NS.HTML)
        return false;

    if (this.treeAdapter.getTagName(current) === $.ANNOTATION_XML && ns === NS.MATHML &&
        token.type === Tokenizer.START_TAG_TOKEN && token.tagName === $.SVG) {
        return false;
    }

    var isCharacterToken = token.type === Tokenizer.CHARACTER_TOKEN ||
                           token.type === Tokenizer.NULL_CHARACTER_TOKEN ||
                           token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN,
        isMathMLTextStartTag = token.type === Tokenizer.START_TAG_TOKEN &&
                               token.tagName !== $.MGLYPH &&
                               token.tagName !== $.MALIGNMARK;

    if ((isMathMLTextStartTag || isCharacterToken) && this._isMathMLTextIntegrationPoint(current))
        return false;

    if ((token.type === Tokenizer.START_TAG_TOKEN || isCharacterToken) && this._isHtmlIntegrationPoint(current))
        return false;

    return token.type !== Tokenizer.EOF_TOKEN;
};

Parser.prototype._processToken = function (token) {
    _[this.insertionMode][token.type](this, token);
};

Parser.prototype._processTokenInBodyMode = function (token) {
    _[IN_BODY_MODE][token.type](this, token);
};

Parser.prototype._processTokenInForeignContent = function (token) {
    if (token.type === Tokenizer.CHARACTER_TOKEN)
        characterInForeignContent(this, token);

    else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN)
        nullCharacterInForeignContent(this, token);

    else if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN)
        insertCharacters(this, token);

    else if (token.type === Tokenizer.COMMENT_TOKEN)
        appendComment(this, token);

    else if (token.type === Tokenizer.START_TAG_TOKEN)
        startTagInForeignContent(this, token);

    else if (token.type === Tokenizer.END_TAG_TOKEN)
        endTagInForeignContent(this, token);
};

Parser.prototype._processFakeStartTagWithAttrs = function (tagName, attrs) {
    var fakeToken = this.tokenizer.buildStartTagToken(tagName);

    fakeToken.attrs = attrs;
    this._processToken(fakeToken);
};

Parser.prototype._processFakeStartTag = function (tagName) {
    var fakeToken = this.tokenizer.buildStartTagToken(tagName);

    this._processToken(fakeToken);
    return fakeToken;
};

Parser.prototype._processFakeEndTag = function (tagName) {
    var fakeToken = this.tokenizer.buildEndTagToken(tagName);

    this._processToken(fakeToken);
    return fakeToken;
};

//Integration points
Parser.prototype._isMathMLTextIntegrationPoint = function (element) {
    var tn = this.treeAdapter.getTagName(element),
        ns = this.treeAdapter.getNamespaceURI(element);

    return ForeignContent.isMathMLTextIntegrationPoint(tn, ns);
};

Parser.prototype._isHtmlIntegrationPoint = function (element) {
    var tn = this.treeAdapter.getTagName(element),
        ns = this.treeAdapter.getNamespaceURI(element),
        attrs = this.treeAdapter.getAttrList(element);

    return ForeignContent.isHtmlIntegrationPoint(tn, ns, attrs);
};

//Active formatting elements reconstruction
Parser.prototype._reconstructActiveFormattingElements = function () {
    var listLength = this.activeFormattingElements.length;

    if (listLength) {
        var unopenIdx = listLength,
            entry = null;

        do {
            unopenIdx--;
            entry = this.activeFormattingElements.entries[unopenIdx];

            if (entry.type === FormattingElementList.MARKER_ENTRY || this.openElements.contains(entry.element)) {
                unopenIdx++;
                break;
            }
        } while (unopenIdx > 0);

        for (var i = unopenIdx; i < listLength; i++) {
            entry = this.activeFormattingElements.entries[i];
            this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
            entry.element = this.openElements.current;
        }
    }
};

//Close elements
Parser.prototype._closeTableCell = function () {
    if (this.openElements.hasInTableScope($.TD))
        this._processFakeEndTag($.TD);

    else
        this._processFakeEndTag($.TH);
};

Parser.prototype._closePElement = function () {
    this.openElements.generateImpliedEndTagsWithExclusion($.P);
    this.openElements.popUntilTagNamePopped($.P);
};

//Insertion modes
Parser.prototype._resetInsertionMode = function () {
    for (var i = this.openElements.stackTop, last = false; i >= 0; i--) {
        var element = this.openElements.items[i];

        if (i === 0) {
            last = true;

            if (this.fragmentContext)
                element = this.fragmentContext;
        }

        var tn = this.treeAdapter.getTagName(element),
            newInsertionMode = INSERTION_MODE_RESET_MAP[tn];

        if (newInsertionMode) {
            this.insertionMode = newInsertionMode;
            break;
        }

        else if (!last && (tn === $.TD || tn === $.TH)) {
            this.insertionMode = IN_CELL_MODE;
            break;
        }

        else if (!last && tn === $.HEAD) {
            this.insertionMode = IN_HEAD_MODE;
            break;
        }

        else if (tn === $.SELECT) {
            this._resetInsertionModeForSelect(i);
            break;
        }

        else if (tn === $.TEMPLATE) {
            this.insertionMode = this.currentTmplInsertionMode;
            break;
        }

        else if (tn === $.HTML) {
            this.insertionMode = this.headElement ? AFTER_HEAD_MODE : BEFORE_HEAD_MODE;
            break;
        }

        else if (last) {
            this.insertionMode = IN_BODY_MODE;
            break;
        }
    }
};

Parser.prototype._resetInsertionModeForSelect = function (selectIdx) {
    if (selectIdx > 0) {
        for (var i = selectIdx - 1; i > 0; i--) {
            var ancestor = this.openElements.items[i],
                tn = this.treeAdapter.getTagName(ancestor);

            if (tn === $.TEMPLATE)
                break;

            else if (tn === $.TABLE) {
                this.insertionMode = IN_SELECT_IN_TABLE_MODE;
                return;
            }
        }
    }

    this.insertionMode = IN_SELECT_MODE;
};

Parser.prototype._pushTmplInsertionMode = function (mode) {
    this.tmplInsertionModeStack.push(mode);
    this.tmplInsertionModeStackTop++;
    this.currentTmplInsertionMode = mode;
};

Parser.prototype._popTmplInsertionMode = function () {
    this.tmplInsertionModeStack.pop();
    this.tmplInsertionModeStackTop--;
    this.currentTmplInsertionMode = this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];
};

//Foster parenting
Parser.prototype._isElementCausesFosterParenting = function (element) {
    var tn = this.treeAdapter.getTagName(element);

    return tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn == $.THEAD || tn === $.TR;
};

Parser.prototype._findFosterParentingLocation = function () {
    var location = {
        parent: null,
        beforeElement: null
    };

    for (var i = this.openElements.stackTop; i >= 0; i--) {
        var openElement = this.openElements.items[i],
            tn = this.treeAdapter.getTagName(openElement),
            ns = this.treeAdapter.getNamespaceURI(openElement);

        if (tn === $.TEMPLATE && ns === NS.HTML) {
            location.parent = this.treeAdapter.getChildNodes(openElement)[0];
            break;
        }

        else if (tn === $.TABLE) {
            location.parent = this.treeAdapter.getParentNode(openElement);

            if (location.parent)
                location.beforeElement = openElement;
            else
                location.parent = this.openElements.items[i - 1];

            break;
        }
    }

    if (!location.parent)
        location.parent = this.openElements.items[0];

    return location;
};

Parser.prototype._fosterParentElement = function (element) {
    var location = this._findFosterParentingLocation();

    if (location.beforeElement)
        this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);
    else
        this.treeAdapter.appendChild(location.parent, element);
};

Parser.prototype._fosterParentText = function (chars) {
    var location = this._findFosterParentingLocation();

    if (location.beforeElement)
        this.treeAdapter.insertTextBefore(location.parent, chars, location.beforeElement);
    else
        this.treeAdapter.insertText(location.parent, chars);
};

//Special elements
Parser.prototype._isSpecialElement = function (element) {
    var tn = this.treeAdapter.getTagName(element),
        ns = this.treeAdapter.getNamespaceURI(element);

    return HTML.SPECIAL_ELEMENTS[ns][tn];
};

//Adoption agency algorithm
//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)
//------------------------------------------------------------------

//Steps 5-8 of the algorithm
function aaObtainFormattingElementEntry(p, token) {
    var formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);

    if (formattingElementEntry) {
        if (!p.openElements.contains(formattingElementEntry.element)) {
            p.activeFormattingElements.removeEntry(formattingElementEntry);
            formattingElementEntry = null;
        }

        else if (!p.openElements.hasInScope(token.tagName))
            formattingElementEntry = null;
    }

    else
        genericEndTagInBody(p, token);

    return formattingElementEntry;
}

//Steps 9 and 10 of the algorithm
function aaObtainFurthestBlock(p, formattingElementEntry) {
    var furthestBlock = null;

    for (var i = p.openElements.stackTop; i >= 0; i--) {
        var element = p.openElements.items[i];

        if (element === formattingElementEntry.element)
            break;

        if (p._isSpecialElement(element))
            furthestBlock = element;
    }

    if (!furthestBlock) {
        p.openElements.popUntilElementPopped(formattingElementEntry.element);
        p.activeFormattingElements.removeEntry(formattingElementEntry);
    }

    return furthestBlock;
}

//Step 13 of the algorithm
function aaInnerLoop(p, furthestBlock, formattingElement) {
    var element = null,
        lastElement = furthestBlock,
        nextElement = p.openElements.getCommonAncestor(furthestBlock);

    for (var i = 0; i < AA_INNER_LOOP_ITER; i++) {
        element = nextElement;

        //NOTE: store next element for the next loop iteration (it may be deleted from the stack by step 9.5)
        nextElement = p.openElements.getCommonAncestor(element);

        var elementEntry = p.activeFormattingElements.getElementEntry(element);

        if (!elementEntry) {
            p.openElements.remove(element);
            continue;
        }

        if (element === formattingElement)
            break;

        element = aaRecreateElementFromEntry(p, elementEntry);

        if (lastElement === furthestBlock)
            p.activeFormattingElements.bookmark = elementEntry;

        p.treeAdapter.detachNode(lastElement);
        p.treeAdapter.appendChild(element, lastElement);
        lastElement = element;
    }

    return lastElement;
}

//Step 13.7 of the algorithm
function aaRecreateElementFromEntry(p, elementEntry) {
    var ns = p.treeAdapter.getNamespaceURI(elementEntry.element),
        newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);

    p.openElements.replace(elementEntry.element, newElement);
    elementEntry.element = newElement;

    return newElement;
}

//Step 14 of the algorithm
function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
    if (p._isElementCausesFosterParenting(commonAncestor))
        p._fosterParentElement(lastElement);

    else {
        var tn = p.treeAdapter.getTagName(commonAncestor),
            ns = p.treeAdapter.getNamespaceURI(commonAncestor);

        if (tn === $.TEMPLATE && ns === NS.HTML)
            commonAncestor = p.treeAdapter.getChildNodes(commonAncestor)[0];

        p.treeAdapter.appendChild(commonAncestor, lastElement);
    }
}

//Steps 15-19 of the algorithm
function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
    var ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element),
        token = formattingElementEntry.token,
        newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);

    p._adoptNodes(furthestBlock, newElement);
    p.treeAdapter.appendChild(furthestBlock, newElement);

    p.activeFormattingElements.insertElementAfterBookmark(newElement, formattingElementEntry.token);
    p.activeFormattingElements.removeEntry(formattingElementEntry);

    p.openElements.remove(formattingElementEntry.element);
    p.openElements.insertAfter(furthestBlock, newElement);
}

//Algorithm entry point
function callAdoptionAgency(p, token) {
    for (var i = 0; i < AA_OUTER_LOOP_ITER; i++) {
        var formattingElementEntry = aaObtainFormattingElementEntry(p, token, formattingElementEntry);

        if (!formattingElementEntry)
            break;

        var furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);

        if (!furthestBlock)
            break;

        p.activeFormattingElements.bookmark = formattingElementEntry;

        var lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element),
            commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);

        p.treeAdapter.detachNode(lastElement);
        aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
        aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
    }
}


//Generic token handlers
//------------------------------------------------------------------
function ignoreToken(p, token) {
    //NOTE: do nothing =)
}

function appendComment(p, token) {
    p._appendCommentNode(token, p.openElements.currentTmplContent || p.openElements.current)
}

function appendCommentToRootHtmlElement(p, token) {
    p._appendCommentNode(token, p.openElements.items[0]);
}

function appendCommentToDocument(p, token) {
    p._appendCommentNode(token, p.document);
}

function insertCharacters(p, token) {
    p._insertCharacters(token);
}

function stopParsing(p, token) {
    p.stopped = true;
}

//12.2.5.4.1 The "initial" insertion mode
//------------------------------------------------------------------
function doctypeInInitialMode(p, token) {
    p._setDocumentType(token);

    if (token.forceQuirks || Doctype.isQuirks(token.name, token.publicId, token.systemId))
        p.treeAdapter.setQuirksMode(p.document);

    p.insertionMode = BEFORE_HTML_MODE;
}

function tokenInInitialMode(p, token) {
    p.treeAdapter.setQuirksMode(p.document);
    p.insertionMode = BEFORE_HTML_MODE;
    p._processToken(token);
}


//12.2.5.4.2 The "before html" insertion mode
//------------------------------------------------------------------
function startTagBeforeHtml(p, token) {
    if (token.tagName === $.HTML) {
        p._insertElement(token, NS.HTML);
        p.insertionMode = BEFORE_HEAD_MODE;
    }

    else
        tokenBeforeHtml(p, token);
}

function endTagBeforeHtml(p, token) {
    var tn = token.tagName;

    if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR)
        tokenBeforeHtml(p, token);
}

function tokenBeforeHtml(p, token) {
    p._insertFakeRootElement();
    p.insertionMode = BEFORE_HEAD_MODE;
    p._processToken(token);
}


//12.2.5.4.3 The "before head" insertion mode
//------------------------------------------------------------------
function startTagBeforeHead(p, token) {
    var tn = token.tagName;

    if (tn === $.HTML)
        startTagInBody(p, token);

    else if (tn === $.HEAD) {
        p._insertElement(token, NS.HTML);
        p.headElement = p.openElements.current;
        p.insertionMode = IN_HEAD_MODE;
    }

    else
        tokenBeforeHead(p, token);
}

function endTagBeforeHead(p, token) {
    var tn = token.tagName;

    if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR)
        tokenBeforeHead(p, token);
}

function tokenBeforeHead(p, token) {
    p._processFakeStartTag($.HEAD);
    p._processToken(token);
}


//12.2.5.4.4 The "in head" insertion mode
//------------------------------------------------------------------
function startTagInHead(p, token) {
    var tn = token.tagName;

    if (tn === $.HTML)
        startTagInBody(p, token);

    else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND ||
             tn === $.COMMAND || tn === $.LINK || tn === $.META) {
        p._appendElement(token, NS.HTML);
    }

    else if (tn === $.TITLE)
        p._switchToTextParsing(token, Tokenizer.RCDATA_STATE);

    //NOTE: here we assume that we always act as an interactive user agent with enabled scripting, so we parse
    //<noscript> as a rawtext.
    else if (tn === $.NOSCRIPT || tn === $.NOFRAMES || tn === $.STYLE)
        p._switchToTextParsing(token, Tokenizer.RAWTEXT_STATE);

    else if (tn === $.SCRIPT) {
        p._insertElement(token, NS.HTML);
        p.tokenizer.state = Tokenizer.SCRIPT_DATA_STATE;
        p.originalInsertionMode = p.insertionMode;
        p.insertionMode = TEXT_MODE;
    }

    else if (tn === $.TEMPLATE) {
        p._insertTemplate(token, NS.HTML);
        p.activeFormattingElements.insertMarker();
        p.framesetOk = false;
        p.insertionMode = IN_TEMPLATE_MODE;
        p._pushTmplInsertionMode(IN_TEMPLATE_MODE);
    }

    else if (tn !== $.HEAD)
        tokenInHead(p, token);
}

function endTagInHead(p, token) {
    var tn = token.tagName;

    if (tn === $.HEAD) {
        p.openElements.pop();
        p.insertionMode = AFTER_HEAD_MODE;
    }

    else if (tn === $.BODY || tn === $.BR || tn === $.HTML)
        tokenInHead(p, token);

    else if (tn === $.TEMPLATE && p.openElements.tmplCount > 0) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilTemplatePopped();
        p.activeFormattingElements.clearToLastMarker();
        p._popTmplInsertionMode();
        p._resetInsertionMode();
    }
}

function tokenInHead(p, token) {
    p._processFakeEndTag($.HEAD);
    p._processToken(token);
}


//12.2.5.4.6 The "after head" insertion mode
//------------------------------------------------------------------
function startTagAfterHead(p, token) {
    var tn = token.tagName;

    if (tn === $.HTML)
        startTagInBody(p, token);

    else if (tn === $.BODY) {
        p._insertElement(token, NS.HTML);
        p.framesetOk = false;
        p.insertionMode = IN_BODY_MODE;
    }

    else if (tn === $.FRAMESET) {
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_FRAMESET_MODE;
    }

    else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META ||
             tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
        p.openElements.push(p.headElement);
        startTagInHead(p, token);
        p.openElements.remove(p.headElement);
    }

    else if (tn !== $.HEAD)
        tokenAfterHead(p, token);
}

function endTagAfterHead(p, token) {
    var tn = token.tagName;

    if (tn === $.BODY || tn === $.HTML || tn === $.BR)
        tokenAfterHead(p, token);

    else if (tn === $.TEMPLATE)
        endTagInHead(p, token);
}

function tokenAfterHead(p, token) {
    p._processFakeStartTag($.BODY);
    p.framesetOk = true;
    p._processToken(token);
}


//12.2.5.4.7 The "in body" insertion mode
//------------------------------------------------------------------
function whitespaceCharacterInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertCharacters(token);
}

function characterInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertCharacters(token);
    p.framesetOk = false;
}

function htmlStartTagInBody(p, token) {
    if (p.openElements.tmplCount === 0)
        p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
}

function bodyStartTagInBody(p, token) {
    var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();

    if (bodyElement && p.openElements.tmplCount === 0) {
        p.framesetOk = false;
        p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
    }
}

function framesetStartTagInBody(p, token) {
    var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();

    if (p.framesetOk && bodyElement) {
        p.treeAdapter.detachNode(bodyElement);
        p.openElements.popAllUpToHtmlElement();
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_FRAMESET_MODE;
    }
}

function addressStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope($.P))
        p._closePElement();

    p._insertElement(token, NS.HTML);
}

function numberedHeaderStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope($.P))
        p._closePElement();

    var tn = p.openElements.currentTagName;

    if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6)
        p.openElements.pop();

    p._insertElement(token, NS.HTML);
}

function preStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope($.P))
        p._closePElement();

    p._insertElement(token, NS.HTML);
    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
    //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)
    p.skipNextNewLine = true;
    p.framesetOk = false;
}

function formStartTagInBody(p, token) {
    var inTemplate = p.openElements.tmplCount > 0;

    if (!p.formElement || inTemplate) {
        if (p.openElements.hasInButtonScope($.P))
            p._closePElement();

        p._insertElement(token, NS.HTML);

        if (!inTemplate)
            p.formElement = p.openElements.current;
    }
}

function listItemStartTagInBody(p, token) {
    p.framesetOk = false;

    for (var i = p.openElements.stackTop; i >= 0; i--) {
        var element = p.openElements.items[i],
            tn = p.treeAdapter.getTagName(element);

        if ((token.tagName === $.LI && tn === $.LI) ||
            ((token.tagName === $.DD || token.tagName === $.DT) && (tn === $.DD || tn == $.DT))) {
            p._processFakeEndTag(tn);
            break;
        }

        if (tn !== $.ADDRESS && tn !== $.DIV && tn !== $.P && p._isSpecialElement(element))
            break;
    }

    if (p.openElements.hasInButtonScope($.P))
        p._closePElement();

    p._insertElement(token, NS.HTML);
}

function plaintextStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope($.P))
        p._closePElement();

    p._insertElement(token, NS.HTML);
    p.tokenizer.state = Tokenizer.PLAINTEXT_STATE;
}

function buttonStartTagInBody(p, token) {
    if (p.openElements.hasInScope($.BUTTON)) {
        p._processFakeEndTag($.BUTTON);
        buttonStartTagInBody(p, token);
    }

    else {
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
        p.framesetOk = false;
    }
}

function aStartTagInBody(p, token) {
    var activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName($.A);

    if (activeElementEntry) {
        p._processFakeEndTag($.A);
        p.openElements.remove(activeElementEntry.element);
        p.activeFormattingElements.removeEntry(activeElementEntry);
    }

    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.activeFormattingElements.pushElement(p.openElements.current, token);
}

function bStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.activeFormattingElements.pushElement(p.openElements.current, token);
}

function nobrStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();

    if (p.openElements.hasInScope($.NOBR)) {
        p._processFakeEndTag($.NOBR);
        p._reconstructActiveFormattingElements();
    }

    p._insertElement(token, NS.HTML);
    p.activeFormattingElements.pushElement(p.openElements.current, token);
}

function appletStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.activeFormattingElements.insertMarker();
    p.framesetOk = false;
}

function tableStartTagInBody(p, token) {
    if (!p.treeAdapter.isQuirksMode(p.document) && p.openElements.hasInButtonScope($.P))
        p._closePElement();

    p._insertElement(token, NS.HTML);
    p.framesetOk = false;
    p.insertionMode = IN_TABLE_MODE;
}

function areaStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._appendElement(token, NS.HTML);
    p.framesetOk = false;
}

function inputStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._appendElement(token, NS.HTML);

    var inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);

    if (!inputType || inputType.toLowerCase() !== HIDDEN_INPUT_TYPE)
        p.framesetOk = false;

}

function paramStartTagInBody(p, token) {
    p._appendElement(token, NS.HTML);
}

function hrStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope($.P))
        p._closePElement();

    p._appendElement(token, NS.HTML);
    p.framesetOk = false;
}

function imageStartTagInBody(p, token) {
    token.tagName = $.IMG;
    areaStartTagInBody(p, token);
}

function isindexStartTagInBody(p, token) {
    if (!p.formElement || p.openElements.tmplCount > 0) {
        p._processFakeStartTagWithAttrs($.FORM, getSearchableIndexFormAttrs(token));
        p._processFakeStartTag($.HR);
        p._processFakeStartTag($.LABEL);
        p.treeAdapter.insertText(p.openElements.current, getSearchableIndexLabelText(token));
        p._processFakeStartTagWithAttrs($.INPUT, getSearchableIndexInputAttrs(token));
        p._processFakeEndTag($.LABEL);
        p._processFakeStartTag($.HR);
        p._processFakeEndTag($.FORM);
    }
}

function textareaStartTagInBody(p, token) {
    p._insertElement(token, NS.HTML);
    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
    //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)
    p.skipNextNewLine = true;
    p.tokenizer.state = Tokenizer.RCDATA_STATE;
    p.originalInsertionMode = p.insertionMode;
    p.framesetOk = false;
    p.insertionMode = TEXT_MODE;
}

function xmpStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope($.P))
        p._closePElement();

    p._reconstructActiveFormattingElements();
    p.framesetOk = false;
    p._switchToTextParsing(token, Tokenizer.RAWTEXT_STATE);
}

function iframeStartTagInBody(p, token) {
    p.framesetOk = false;
    p._switchToTextParsing(token, Tokenizer.RAWTEXT_STATE);
}

//NOTE: here we assume that we always act as an user agent with enabled plugins, so we parse
//<noembed> as a rawtext.
function noembedStartTagInBody(p, token) {
    p._switchToTextParsing(token, Tokenizer.RAWTEXT_STATE);
}

function selectStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.framesetOk = false;

    if (p.insertionMode === IN_TABLE_MODE || p.insertionMode === IN_CAPTION_MODE ||
        p.insertionMode === IN_TABLE_BODY_MODE || p.insertionMode === IN_ROW_MODE ||
        p.insertionMode === IN_CELL_MODE) {
        p.insertionMode = IN_SELECT_IN_TABLE_MODE;
    }

    else
        p.insertionMode = IN_SELECT_MODE;
}

function optgroupStartTagInBody(p, token) {
    if (p.openElements.currentTagName === $.OPTION)
        p._processFakeEndTag($.OPTION);

    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
}

function rpStartTagInBody(p, token) {
    if (p.openElements.hasInScope($.RUBY))
        p.openElements.generateImpliedEndTags();

    p._insertElement(token, NS.HTML);
}

function menuitemStartTagInBody(p, token) {
    p._appendElement(token, NS.HTML);
}

function mathStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();

    ForeignContent.adjustTokenMathMLAttrs(token);
    ForeignContent.adjustTokenXMLAttrs(token);

    if (token.selfClosing)
        p._appendElement(token, NS.MATHML);
    else
        p._insertElement(token, NS.MATHML);
}

function svgStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();

    ForeignContent.adjustTokenSVGAttrs(token);
    ForeignContent.adjustTokenXMLAttrs(token);

    if (token.selfClosing)
        p._appendElement(token, NS.SVG);
    else
        p._insertElement(token, NS.SVG);
}

function genericStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
}

//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
//It's faster than using dictionary.
function startTagInBody(p, token) {
    var tn = token.tagName;

    switch (tn.length) {
        case 1:
            if (tn === $.I || tn === $.S || tn === $.B || tn === $.U)
                bStartTagInBody(p, token);

            else if (tn === $.P)
                addressStartTagInBody(p, token);

            else if (tn === $.A)
                aStartTagInBody(p, token);

            else
                genericStartTagInBody(p, token);

            break;

        case 2:
            if (tn === $.DL || tn === $.OL || tn === $.UL)
                addressStartTagInBody(p, token);

            else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6)
                numberedHeaderStartTagInBody(p, token);

            else if (tn === $.LI || tn === $.DD || tn === $.DT)
                listItemStartTagInBody(p, token);

            else if (tn === $.EM || tn === $.TT)
                bStartTagInBody(p, token);

            else if (tn === $.BR)
                areaStartTagInBody(p, token);

            else if (tn === $.HR)
                hrStartTagInBody(p, token);

            else if (tn === $.RP || tn === $.RT)
                rpStartTagInBody(p, token);

            else if (tn !== $.TH && tn !== $.TD && tn !== $.TR)
                genericStartTagInBody(p, token);

            break;

        case 3:
            if (tn === $.DIV || tn === $.DIR || tn === $.NAV)
                addressStartTagInBody(p, token);

            else if (tn === $.PRE)
                preStartTagInBody(p, token);

            else if (tn === $.BIG)
                bStartTagInBody(p, token);

            else if (tn === $.IMG || tn === $.WBR)
                areaStartTagInBody(p, token);

            else if (tn === $.XMP)
                xmpStartTagInBody(p, token);

            else if (tn === $.SVG)
                svgStartTagInBody(p, token);

            else if (tn !== $.COL)
                genericStartTagInBody(p, token);

            break;

        case 4:
            if (tn === $.HTML)
                htmlStartTagInBody(p, token);

            else if (tn === $.BASE || tn === $.LINK || tn === $.META)
                startTagInHead(p, token);

            else if (tn === $.BODY)
                bodyStartTagInBody(p, token);

            else if (tn === $.MAIN || tn === $.MENU)
                addressStartTagInBody(p, token);

            else if (tn === $.FORM)
                formStartTagInBody(p, token);

            else if (tn === $.CODE || tn === $.FONT)
                bStartTagInBody(p, token);

            else if (tn === $.NOBR)
                nobrStartTagInBody(p, token);

            else if (tn === $.AREA)
                areaStartTagInBody(p, token);

            else if (tn === $.MATH)
                mathStartTagInBody(p, token);

            else if (tn !== $.HEAD)
                genericStartTagInBody(p, token);

            break;

        case 5:
            if (tn === $.STYLE || tn === $.TITLE)
                startTagInHead(p, token);

            else if (tn === $.ASIDE)
                addressStartTagInBody(p, token);

            else if (tn === $.SMALL)
                bStartTagInBody(p, token);

            else if (tn === $.TABLE)
                tableStartTagInBody(p, token);

            else if (tn === $.EMBED)
                areaStartTagInBody(p, token);

            else if (tn === $.INPUT)
                inputStartTagInBody(p, token);

            else if (tn === $.PARAM || tn === $.TRACK)
                paramStartTagInBody(p, token);

            else if (tn === $.IMAGE)
                imageStartTagInBody(p, token);

            else if (tn !== $.FRAME && tn !== $.TBODY && tn !== $.TFOOT && tn !== $.THEAD)
                genericStartTagInBody(p, token);

            break;

        case 6:
            if (tn === $.SCRIPT)
                startTagInHead(p, token);

            else if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP)
                addressStartTagInBody(p, token);

            else if (tn === $.BUTTON)
                buttonStartTagInBody(p, token);

            else if (tn === $.STRIKE || tn === $.STRONG)
                bStartTagInBody(p, token);

            else if (tn === $.APPLET || tn === $.OBJECT)
                appletStartTagInBody(p, token);

            else if (tn === $.KEYGEN)
                areaStartTagInBody(p, token);

            else if (tn === $.SOURCE)
                paramStartTagInBody(p, token);

            else if (tn === $.IFRAME)
                iframeStartTagInBody(p, token);

            else if (tn === $.SELECT)
                selectStartTagInBody(p, token);

            else if (tn === $.OPTION)
                optgroupStartTagInBody(p, token);

            else
                genericStartTagInBody(p, token);

            break;

        case 7:
            if (tn === $.BGSOUND || tn === $.COMMAND)
                startTagInHead(p, token);

            else if (tn === $.DETAILS || tn === $.ADDRESS || tn === $.ARTICLE || tn === $.SECTION || tn === $.SUMMARY)
                addressStartTagInBody(p, token);

            else if (tn === $.LISTING)
                preStartTagInBody(p, token);

            else if (tn === $.MARQUEE)
                appletStartTagInBody(p, token);

            else if (tn === $.ISINDEX)
                isindexStartTagInBody(p, token);

            else if (tn === $.NOEMBED)
                noembedStartTagInBody(p, token);

            else if (tn !== $.CAPTION)
                genericStartTagInBody(p, token);

            break;

        case 8:
            if (tn === $.BASEFONT || tn === $.MENUITEM)
                menuitemStartTagInBody(p, token);

            else if (tn === $.FRAMESET)
                framesetStartTagInBody(p, token);

            else if (tn === $.FIELDSET)
                addressStartTagInBody(p, token);

            else if (tn === $.TEXTAREA)
                textareaStartTagInBody(p, token);

            else if (tn === $.TEMPLATE)
                startTagInHead(p, token);

            else if (tn === $.NOSCRIPT)
                noembedStartTagInBody(p, token);

            else if (tn === $.OPTGROUP)
                optgroupStartTagInBody(p, token);

            else if (tn !== $.COLGROUP)
                genericStartTagInBody(p, token);

            break;

        case 9:
            if (tn === $.PLAINTEXT)
                plaintextStartTagInBody(p, token);

            else
                genericStartTagInBody(p, token);

            break;

        case 10:
            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION)
                addressStartTagInBody(p, token);

            else
                genericStartTagInBody(p, token);

            break;

        default:
            genericStartTagInBody(p, token);
    }
}

function bodyEndTagInBody(p, token) {
    if (p.openElements.hasInScope($.BODY))
        p.insertionMode = AFTER_BODY_MODE;

    else
        token.ignored = true;
}

function htmlEndTagInBody(p, token) {
    var fakeToken = p._processFakeEndTag($.BODY);

    if (!fakeToken.ignored)
        p._processToken(token);
}

function addressEndTagInBody(p, token) {
    var tn = token.tagName;

    if (p.openElements.hasInScope(tn)) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilTagNamePopped(tn);
    }
}

function formEndTagInBody(p, token) {
    var inTemplate = p.openElements.tmplCount > 0,
        formElement = p.formElement;

    if (!inTemplate)
        p.formElement = null;

    if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {
        p.openElements.generateImpliedEndTags();
        p.openElements.remove(formElement);
    }
}

function pEndTagInBody(p, token) {
    if (p.openElements.hasInButtonScope($.P)) {
        p.openElements.generateImpliedEndTagsWithExclusion($.P);
        p.openElements.popUntilTagNamePopped($.P);
    }

    else {
        p._processFakeStartTag($.P);
        p._processToken(token);
    }
}

function liEndTagInBody(p, token) {
    if (p.openElements.hasInListItemScope($.LI)) {
        p.openElements.generateImpliedEndTagsWithExclusion($.LI);
        p.openElements.popUntilTagNamePopped($.LI);
    }
}

function ddEndTagInBody(p, token) {
    var tn = token.tagName;

    if (p.openElements.hasInScope(tn)) {
        p.openElements.generateImpliedEndTagsWithExclusion(tn);
        p.openElements.popUntilTagNamePopped(tn);
    }
}

function numberedHeaderEndTagInBody(p, token) {
    if (p.openElements.hasNumberedHeaderInScope()) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilNumberedHeaderPopped();
    }
}

function appletEndTagInBody(p, token) {
    var tn = token.tagName;

    if (p.openElements.hasInScope(tn)) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilTagNamePopped(tn);
        p.activeFormattingElements.clearToLastMarker();
    }
}

function brEndTagInBody(p, token) {
    p._processFakeStartTag($.BR);
}

function genericEndTagInBody(p, token) {
    var tn = token.tagName;

    for (var i = p.openElements.stackTop; i > 0; i--) {
        var element = p.openElements.items[i];

        if (p.treeAdapter.getTagName(element) === tn) {
            p.openElements.generateImpliedEndTagsWithExclusion(tn);
            p.openElements.popUntilElementPopped(element);
            break;
        }

        if (p._isSpecialElement(element))
            break;
    }
}

//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
//It's faster than using dictionary.
function endTagInBody(p, token) {
    var tn = token.tagName;

    switch (tn.length) {
        case 1:
            if (tn === $.A || tn === $.B || tn === $.I || tn === $.S || tn == $.U)
                callAdoptionAgency(p, token);

            else if (tn === $.P)
                pEndTagInBody(p, token);

            else
                genericEndTagInBody(p, token);

            break;

        case 2:
            if (tn == $.DL || tn === $.UL || tn === $.OL)
                addressEndTagInBody(p, token);

            else if (tn === $.LI)
                liEndTagInBody(p, token);

            else if (tn === $.DD || tn === $.DT)
                ddEndTagInBody(p, token);

            else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6)
                numberedHeaderEndTagInBody(p, token);

            else if (tn === $.BR)
                brEndTagInBody(p, token);

            else if (tn === $.EM || tn === $.TT)
                callAdoptionAgency(p, token);

            else
                genericEndTagInBody(p, token);

            break;

        case 3:
            if (tn === $.BIG)
                callAdoptionAgency(p, token);

            else if (tn === $.DIR || tn === $.DIV || tn === $.NAV)
                addressEndTagInBody(p, token);

            else
                genericEndTagInBody(p, token);

            break;

        case 4:
            if (tn === $.BODY)
                bodyEndTagInBody(p, token);

            else if (tn === $.HTML)
                htmlEndTagInBody(p, token);

            else if (tn === $.FORM)
                formEndTagInBody(p, token);

            else if (tn === $.CODE || tn === $.FONT || tn === $.NOBR)
                callAdoptionAgency(p, token);

            else if (tn === $.MAIN || tn === $.MENU)
                addressEndTagInBody(p, token);

            else
                genericEndTagInBody(p, token);

            break;

        case 5:
            if (tn === $.ASIDE)
                addressEndTagInBody(p, token);

            else if (tn === $.SMALL)
                callAdoptionAgency(p, token);

            else
                genericEndTagInBody(p, token);

            break;

        case 6:
            if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP)
                addressEndTagInBody(p, token);

            else if (tn === $.APPLET || tn === $.OBJECT)
                appletEndTagInBody(p, token);

            else if (tn == $.STRIKE || tn === $.STRONG)
                callAdoptionAgency(p, token);

            else
                genericEndTagInBody(p, token);

            break;

        case 7:
            if (tn === $.ADDRESS || tn === $.ARTICLE || tn === $.DETAILS || tn === $.SECTION || tn === $.SUMMARY)
                addressEndTagInBody(p, token);

            else if (tn === $.MARQUEE)
                appletEndTagInBody(p, token);

            else
                genericEndTagInBody(p, token);

            break;

        case 8:
            if (tn === $.FIELDSET)
                addressEndTagInBody(p, token);

            else if (tn === $.TEMPLATE)
                endTagInHead(p, token);

            else
                genericEndTagInBody(p, token);

            break;

        case 10:
            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION)
                addressEndTagInBody(p, token);

            else
                genericEndTagInBody(p, token);

            break;

        default :
            genericEndTagInBody(p, token);
    }
}

function eofInBody(p, token) {
    if (p.tmplInsertionModeStackTop > -1)
        eofInTemplate(p, token);

    else
        p.stopped = true;
}

//12.2.5.4.8 The "text" insertion mode
//------------------------------------------------------------------
function endTagInText(p, token) {
    if (!p.fragmentContext && p.scriptHandler && token.tagName === $.SCRIPT)
        p.scriptHandler(p.document, p.openElements.current);

    p.openElements.pop();
    p.insertionMode = p.originalInsertionMode;
}


function eofInText(p, token) {
    p.openElements.pop();
    p.insertionMode = p.originalInsertionMode;
    p._processToken(token);
}


//12.2.5.4.9 The "in table" insertion mode
//------------------------------------------------------------------
function characterInTable(p, token) {
    var curTn = p.openElements.currentTagName;

    if (curTn === $.TABLE || curTn === $.TBODY || curTn === $.TFOOT || curTn === $.THEAD || curTn === $.TR) {
        p.pendingCharacterTokens = [];
        p.hasNonWhitespacePendingCharacterToken = false;
        p.originalInsertionMode = p.insertionMode;
        p.insertionMode = IN_TABLE_TEXT_MODE;
        p._processToken(token);
    }

    else
        tokenInTable(p, token);
}

function captionStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p.activeFormattingElements.insertMarker();
    p._insertElement(token, NS.HTML);
    p.insertionMode = IN_CAPTION_MODE;
}

function colgroupStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p._insertElement(token, NS.HTML);
    p.insertionMode = IN_COLUMN_GROUP_MODE;
}

function colStartTagInTable(p, token) {
    p._processFakeStartTag($.COLGROUP);
    p._processToken(token);
}

function tbodyStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p._insertElement(token, NS.HTML);
    p.insertionMode = IN_TABLE_BODY_MODE;
}

function tdStartTagInTable(p, token) {
    p._processFakeStartTag($.TBODY);
    p._processToken(token);
}

function tableStartTagInTable(p, token) {
    var fakeToken = p._processFakeEndTag($.TABLE);

    //NOTE: The fake end tag token here can only be ignored in the fragment case.
    if (!fakeToken.ignored)
        p._processToken(token);
}

function inputStartTagInTable(p, token) {
    var inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);

    if (inputType && inputType.toLowerCase() === HIDDEN_INPUT_TYPE)
        p._appendElement(token, NS.HTML);

    else
        tokenInTable(p, token);
}

function formStartTagInTable(p, token) {
    if (!p.formElement && p.openElements.tmplCount === 0) {
        p._insertElement(token, NS.HTML);
        p.formElement = p.openElements.current;
        p.openElements.pop();
    }
}

function startTagInTable(p, token) {
    var tn = token.tagName;

    switch (tn.length) {
        case 2:
            if (tn === $.TD || tn === $.TH || tn === $.TR)
                tdStartTagInTable(p, token);

            else
                tokenInTable(p, token);

            break;

        case 3:
            if (tn === $.COL)
                colStartTagInTable(p, token);

            else
                tokenInTable(p, token);

            break;

        case 4:
            if (tn === $.FORM)
                formStartTagInTable(p, token);

            else
                tokenInTable(p, token);

            break;

        case 5:
            if (tn === $.TABLE)
                tableStartTagInTable(p, token);

            else if (tn === $.STYLE)
                startTagInHead(p, token);

            else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD)
                tbodyStartTagInTable(p, token);

            else if (tn === $.INPUT)
                inputStartTagInTable(p, token);

            else
                tokenInTable(p, token);

            break;

        case 6:
            if (tn === $.SCRIPT)
                startTagInHead(p, token);

            else
                tokenInTable(p, token);

            break;

        case 7:
            if (tn === $.CAPTION)
                captionStartTagInTable(p, token);

            else
                tokenInTable(p, token);

            break;

        case 8:
            if (tn === $.COLGROUP)
                colgroupStartTagInTable(p, token);

            else if (tn === $.TEMPLATE)
                startTagInHead(p, token);

            else
                tokenInTable(p, token);

            break;

        default:
            tokenInTable(p, token);
    }

}

function endTagInTable(p, token) {
    var tn = token.tagName;

    if (tn === $.TABLE) {
        if (p.openElements.hasInTableScope($.TABLE)) {
            p.openElements.popUntilTagNamePopped($.TABLE);
            p._resetInsertionMode();
        }

        else
            token.ignored = true;
    }

    else if (tn === $.TEMPLATE)
        endTagInHead(p, token);

    else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML &&
             tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) {
        tokenInTable(p, token);
    }
}

function tokenInTable(p, token) {
    var savedFosterParentingState = p.fosterParentingEnabled;

    p.fosterParentingEnabled = true;
    p._processTokenInBodyMode(token);
    p.fosterParentingEnabled = savedFosterParentingState;
}


//12.2.5.4.10 The "in table text" insertion mode
//------------------------------------------------------------------
function whitespaceCharacterInTableText(p, token) {
    p.pendingCharacterTokens.push(token);
}

function characterInTableText(p, token) {
    p.pendingCharacterTokens.push(token);
    p.hasNonWhitespacePendingCharacterToken = true;
}

function tokenInTableText(p, token) {
    if (p.hasNonWhitespacePendingCharacterToken) {
        for (var i = 0; i < p.pendingCharacterTokens.length; i++)
            tokenInTable(p, p.pendingCharacterTokens[i]);
    }

    else {
        for (var i = 0; i < p.pendingCharacterTokens.length; i++)
            p._insertCharacters(p.pendingCharacterTokens[i]);
    }

    p.insertionMode = p.originalInsertionMode;
    p._processToken(token);
}


//12.2.5.4.11 The "in caption" insertion mode
//------------------------------------------------------------------
function startTagInCaption(p, token) {
    var tn = token.tagName;

    if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY ||
        tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
        var fakeToken = p._processFakeEndTag($.CAPTION);

        //NOTE: The fake end tag token here can only be ignored in the fragment case.
        if (!fakeToken.ignored)
            p._processToken(token);
    }

    else
        startTagInBody(p, token);
}

function endTagInCaption(p, token) {
    var tn = token.tagName;

    if (tn === $.CAPTION) {
        if (p.openElements.hasInTableScope($.CAPTION)) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped($.CAPTION);
            p.activeFormattingElements.clearToLastMarker();
            p.insertionMode = IN_TABLE_MODE;
        }

        else
            token.ignored = true;
    }

    else if (tn === $.TABLE) {
        var fakeToken = p._processFakeEndTag($.CAPTION);

        //NOTE: The fake end tag token here can only be ignored in the fragment case.
        if (!fakeToken.ignored)
            p._processToken(token);
    }

    else if (tn !== $.BODY && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY &&
             tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) {
        endTagInBody(p, token);
    }
}


//12.2.5.4.12 The "in column group" insertion mode
//------------------------------------------------------------------
function startTagInColumnGroup(p, token) {
    var tn = token.tagName;

    if (tn === $.HTML)
        startTagInBody(p, token);

    else if (tn === $.COL)
        p._appendElement(token, NS.HTML);

    else if (tn === $.TEMPLATE)
        startTagInHead(p, token);

    else
        tokenInColumnGroup(p, token);
}

function endTagInColumnGroup(p, token) {
    var tn = token.tagName;

    if (tn === $.COLGROUP) {
        if (p.openElements.currentTagName !== $.COLGROUP)
            token.ignored = true;

        else {
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
        }
    }

    else if (tn === $.TEMPLATE)
        endTagInHead(p, token);

    else if (tn !== $.COL)
        tokenInColumnGroup(p, token);
}

function tokenInColumnGroup(p, token) {
    var fakeToken = p._processFakeEndTag($.COLGROUP);

    //NOTE: The fake end tag token here can only be ignored in the fragment case.
    if (!fakeToken.ignored)
        p._processToken(token);
}

//12.2.5.4.13 The "in table body" insertion mode
//------------------------------------------------------------------
function startTagInTableBody(p, token) {
    var tn = token.tagName;

    if (tn === $.TR) {
        p.openElements.clearBackToTableBodyContext();
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_ROW_MODE;
    }

    else if (tn === $.TH || tn === $.TD) {
        p._processFakeStartTag($.TR);
        p._processToken(token);
    }

    else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP ||
             tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {

        if (p.openElements.hasTableBodyContextInTableScope()) {
            p.openElements.clearBackToTableBodyContext();
            p._processFakeEndTag(p.openElements.currentTagName);
            p._processToken(token);
        }
    }

    else
        startTagInTable(p, token);
}

function endTagInTableBody(p, token) {
    var tn = token.tagName;

    if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
        if (p.openElements.hasInTableScope(tn)) {
            p.openElements.clearBackToTableBodyContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
        }
    }

    else if (tn === $.TABLE) {
        if (p.openElements.hasTableBodyContextInTableScope()) {
            p.openElements.clearBackToTableBodyContext();
            p._processFakeEndTag(p.openElements.currentTagName);
            p._processToken(token);
        }
    }

    else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP ||
             tn !== $.HTML && tn !== $.TD && tn !== $.TH && tn !== $.TR) {
        endTagInTable(p, token);
    }
}

//12.2.5.4.14 The "in row" insertion mode
//------------------------------------------------------------------
function startTagInRow(p, token) {
    var tn = token.tagName;

    if (tn === $.TH || tn === $.TD) {
        p.openElements.clearBackToTableRowContext();
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_CELL_MODE;
        p.activeFormattingElements.insertMarker();
    }

    else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY ||
             tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
        var fakeToken = p._processFakeEndTag($.TR);

        //NOTE: The fake end tag token here can only be ignored in the fragment case.
        if (!fakeToken.ignored)
            p._processToken(token);
    }

    else
        startTagInTable(p, token);
}

function endTagInRow(p, token) {
    var tn = token.tagName;

    if (tn === $.TR) {
        if (p.openElements.hasInTableScope($.TR)) {
            p.openElements.clearBackToTableRowContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_BODY_MODE;
        }

        else
            token.ignored = true;
    }

    else if (tn === $.TABLE) {
        var fakeToken = p._processFakeEndTag($.TR);

        //NOTE: The fake end tag token here can only be ignored in the fragment case.
        if (!fakeToken.ignored)
            p._processToken(token);
    }

    else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
        if (p.openElements.hasInTableScope(tn)) {
            p._processFakeEndTag($.TR);
            p._processToken(token);
        }
    }

    else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP ||
             tn !== $.HTML && tn !== $.TD && tn !== $.TH) {
        endTagInTable(p, token);
    }
}


//12.2.5.4.15 The "in cell" insertion mode
//------------------------------------------------------------------
function startTagInCell(p, token) {
    var tn = token.tagName;

    if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY ||
        tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {

        if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {
            p._closeTableCell();
            p._processToken(token);
        }
    }

    else
        startTagInBody(p, token);
}

function endTagInCell(p, token) {
    var tn = token.tagName;

    if (tn === $.TD || tn === $.TH) {
        if (p.openElements.hasInTableScope(tn)) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped(tn);
            p.activeFormattingElements.clearToLastMarker();
            p.insertionMode = IN_ROW_MODE;
        }
    }

    else if (tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
        if (p.openElements.hasInTableScope(tn)) {
            p._closeTableCell();
            p._processToken(token);
        }
    }

    else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML)
        endTagInBody(p, token);
}

//12.2.5.4.16 The "in select" insertion mode
//------------------------------------------------------------------
function startTagInSelect(p, token) {
    var tn = token.tagName;

    if (tn === $.HTML)
        startTagInBody(p, token);

    else if (tn === $.OPTION) {
        if (p.openElements.currentTagName === $.OPTION)
            p._processFakeEndTag($.OPTION);

        p._insertElement(token, NS.HTML);
    }

    else if (tn === $.OPTGROUP) {
        if (p.openElements.currentTagName === $.OPTION)
            p._processFakeEndTag($.OPTION);

        if (p.openElements.currentTagName === $.OPTGROUP)
            p._processFakeEndTag($.OPTGROUP);

        p._insertElement(token, NS.HTML);
    }

    else if (tn === $.SELECT)
        p._processFakeEndTag($.SELECT);

    else if (tn === $.INPUT || tn === $.KEYGEN || tn === $.TEXTAREA) {
        if (p.openElements.hasInSelectScope($.SELECT)) {
            p._processFakeEndTag($.SELECT);
            p._processToken(token);
        }
    }

    else if (tn === $.SCRIPT || tn === $.TEMPLATE)
        startTagInHead(p, token);
}

function endTagInSelect(p, token) {
    var tn = token.tagName;

    if (tn === $.OPTGROUP) {
        var prevOpenElement = p.openElements.items[p.openElements.stackTop - 1],
            prevOpenElementTn = prevOpenElement && p.treeAdapter.getTagName(prevOpenElement);

        if (p.openElements.currentTagName === $.OPTION && prevOpenElementTn === $.OPTGROUP)
            p._processFakeEndTag($.OPTION);

        if (p.openElements.currentTagName === $.OPTGROUP)
            p.openElements.pop();
    }

    else if (tn === $.OPTION) {
        if (p.openElements.currentTagName === $.OPTION)
            p.openElements.pop();
    }

    else if (tn === $.SELECT && p.openElements.hasInSelectScope($.SELECT)) {
        p.openElements.popUntilTagNamePopped($.SELECT);
        p._resetInsertionMode();
    }

    else if (tn === $.TEMPLATE)
        endTagInHead(p, token);
}

//12.2.5.4.17 The "in select in table" insertion mode
//------------------------------------------------------------------
function startTagInSelectInTable(p, token) {
    var tn = token.tagName;

    if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT ||
        tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
        p._processFakeEndTag($.SELECT);
        p._processToken(token);
    }

    else
        startTagInSelect(p, token);
}

function endTagInSelectInTable(p, token) {
    var tn = token.tagName;

    if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT ||
        tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
        if (p.openElements.hasInTableScope(tn)) {
            p._processFakeEndTag($.SELECT);
            p._processToken(token);
        }
    }

    else
        endTagInSelect(p, token);
}

//12.2.5.4.18 The "in template" insertion mode
//------------------------------------------------------------------
function startTagInTemplate(p, token) {
    var tn = token.tagName;

    if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META ||
        tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
        startTagInHead(p, token);
    }

    else {
        var newInsertionMode = TEMPLATE_INSERTION_MODE_SWITCH_MAP[tn] || IN_BODY_MODE;

        p._popTmplInsertionMode();
        p._pushTmplInsertionMode(newInsertionMode);
        p.insertionMode = newInsertionMode;
        p._processToken(token);
    }
}

function endTagInTemplate(p, token) {
    if (token.tagName === $.TEMPLATE)
        endTagInHead(p, token);
}

function eofInTemplate(p, token) {
    if (p.openElements.tmplCount > 0) {
        p.openElements.popUntilTemplatePopped();
        p.activeFormattingElements.clearToLastMarker();
        p._popTmplInsertionMode();
        p._resetInsertionMode();
        p._processToken(token);
    }

    else
        p.stopped = true;
}


//12.2.5.4.19 The "after body" insertion mode
//------------------------------------------------------------------
function startTagAfterBody(p, token) {
    if (token.tagName === $.HTML)
        startTagInBody(p, token);

    else
        tokenAfterBody(p, token);
}

function endTagAfterBody(p, token) {
    if (token.tagName === $.HTML) {
        if (!p.fragmentContext)
            p.insertionMode = AFTER_AFTER_BODY_MODE;
    }

    else
        tokenAfterBody(p, token);
}

function tokenAfterBody(p, token) {
    p.insertionMode = IN_BODY_MODE;
    p._processToken(token);
}

//12.2.5.4.20 The "in frameset" insertion mode
//------------------------------------------------------------------
function startTagInFrameset(p, token) {
    var tn = token.tagName;

    if (tn === $.HTML)
        startTagInBody(p, token);

    else if (tn === $.FRAMESET)
        p._insertElement(token, NS.HTML);

    else if (tn === $.FRAME)
        p._appendElement(token, NS.HTML);

    else if (tn === $.NOFRAMES)
        startTagInHead(p, token);
}

function endTagInFrameset(p, token) {
    if (token.tagName === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
        p.openElements.pop();

        if (!p.fragmentContext && p.openElements.currentTagName !== $.FRAMESET)
            p.insertionMode = AFTER_FRAMESET_MODE;
    }
}

//12.2.5.4.21 The "after frameset" insertion mode
//------------------------------------------------------------------
function startTagAfterFrameset(p, token) {
    var tn = token.tagName;

    if (tn === $.HTML)
        startTagInBody(p, token);

    else if (tn === $.NOFRAMES)
        startTagInHead(p, token);
}

function endTagAfterFrameset(p, token) {
    if (token.tagName === $.HTML)
        p.insertionMode = AFTER_AFTER_FRAMESET_MODE;
}

//12.2.5.4.22 The "after after body" insertion mode
//------------------------------------------------------------------
function startTagAfterAfterBody(p, token) {
    if (token.tagName === $.HTML)
        startTagInBody(p, token);

    else
        tokenAfterAfterBody(p, token);
}

function tokenAfterAfterBody(p, token) {
    p.insertionMode = IN_BODY_MODE;
    p._processToken(token);
}

//12.2.5.4.23 The "after after frameset" insertion mode
//------------------------------------------------------------------
function startTagAfterAfterFrameset(p, token) {
    var tn = token.tagName;

    if (tn === $.HTML)
        startTagInBody(p, token);

    else if (tn === $.NOFRAMES)
        startTagInHead(p, token);
}


//12.2.5.5 The rules for parsing tokens in foreign content
//------------------------------------------------------------------
function nullCharacterInForeignContent(p, token) {
    token.chars = UNICODE.REPLACEMENT_CHARACTER;
    p._insertCharacters(token);
}

function characterInForeignContent(p, token) {
    p._insertCharacters(token);
    p.framesetOk = false;
}

function startTagInForeignContent(p, token) {
    if (ForeignContent.causesExit(token) && !p.fragmentContext) {
        while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML &&
               (!p._isMathMLTextIntegrationPoint(p.openElements.current)) &&
               (!p._isHtmlIntegrationPoint(p.openElements.current))) {
            p.openElements.pop();
        }

        p._processToken(token);
    }

    else {
        var current = p._getAdjustedCurrentElement(),
            currentNs = p.treeAdapter.getNamespaceURI(current);

        if (currentNs === NS.MATHML)
            ForeignContent.adjustTokenMathMLAttrs(token);

        else if (currentNs === NS.SVG) {
            ForeignContent.adjustTokenSVGTagName(token);
            ForeignContent.adjustTokenSVGAttrs(token);
        }

        ForeignContent.adjustTokenXMLAttrs(token);

        if (token.selfClosing)
            p._appendElement(token, currentNs);
        else
            p._insertElement(token, currentNs);
    }
}

function endTagInForeignContent(p, token) {
    for (var i = p.openElements.stackTop; i > 0; i--) {
        var element = p.openElements.items[i];

        if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {
            p._processToken(token);
            break;
        }

        if (p.treeAdapter.getTagName(element).toLowerCase() === token.tagName) {
            p.openElements.popUntilElementPopped(element);
            break;
        }
    }
}

},{"../common/foreign_content":3,"../common/html":4,"../common/unicode":5,"../tokenization/tokenizer":14,"../tree_adapters/default":15,"./doctype":17,"./formatting_element_list":18,"./open_element_stack":19}],21:[function(require,module,exports){
Retool.IDE.HTMLParser.parse5 = require('./index');

},{"./index":2}]},{},[21]);
